<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线程池</title>
      <link href="posts/de7c53fe.html"/>
      <url>posts/de7c53fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="线程池理解"><a href="#线程池理解" class="headerlink" title="线程池理解"></a>线程池理解</h1><h2 id="Thread缺点"><a href="#Thread缺点" class="headerlink" title="Thread缺点"></a>Thread缺点</h2><ul><li>线程生命周期的开销非常高，如果为每一个请求创建一个新线程将消耗大量的计算资源</li><li>资源消耗：活跃的线程活消耗系统资源，尤其是内存、如果可运行的线程数量多于可用处理器的数量，有些线程会闲置、大量线程在竞争CPU资源时还将产生其他的性能开销</li><li>稳定性：在可创建线程的数量上存在一个限制</li></ul><h2 id="问题和解决"><a href="#问题和解决" class="headerlink" title="问题和解决"></a>问题和解决</h2><p>反复创建线程开销大——&gt;让这部分线程都保持工作，且可以反复执行任务，避免生命周期的损耗</p><p>过多的线程会占用太多内存——&gt;用少量的线程避免内存占用过多</p><h2 id="使用线程池好处"><a href="#使用线程池好处" class="headerlink" title="使用线程池好处"></a>使用线程池好处</h2><ul><li>重用现有的线程，可以在处理多个请求时分摊在线程创建和销毁过程中产生的巨大开销</li><li>当请求到达时，工作线程已经存在，不会由于等待创建线程而延迟任务的执行</li><li>通过适当调整线程池的大小，可以创建足够多的线程使处理器保存忙碌状态，又可以防止过多线程相互竞争资源使得应用程序耗尽内存</li></ul><h2 id="适用场合"><a href="#适用场合" class="headerlink" title="适用场合"></a>适用场合</h2><ul><li>服务器接受大量请求时，使用线程池技术可以大大减少线程的创建和销毁次数，提高服务器的工作效率</li><li>实际开发中，如果需要创建5个以上的线程，就可以利用线程池来管理</li></ul><h1 id="线程池继承关系"><a href="#线程池继承关系" class="headerlink" title="线程池继承关系"></a>线程池继承关系</h1><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/image-20201202211516638.png" alt="image-20201202211516638"></p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><ul><li>任务执行的主要抽象是Executor，并用Runnable表示任务</li><li>基于生产者-消费者模式，提交任务相当于生产者，执行任务的线程相当于消费者</li><li>只有当任务都是同类型而且相互独立时，线程池的性能才能达到最佳</li><li>JVM只有在所有非守护线程全部终止才会退出，如果无法正确关闭Executor，JVM就无法结束</li></ul><h2 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h2><h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><p>通过他的构造函数来实例化一个对象，并根据自己需求定制</p><p>允许提供一个BlockingQueue来保存等待执行的任务</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//固定数量的线程</span>        ExecutorService threadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        ExecutorService threadPool = Executors.newSingleThreadExecutor();</span><span class="token comment" spellcheck="true">//        ExecutorService threadPool2 = Executors.newCachedThreadPool();</span>        <span class="token comment" spellcheck="true">//ScheduledExecutorService executorService = Executors.newScheduledThreadPool(10);</span>        <span class="token comment" spellcheck="true">//executorService.schedule(()->{System.out.println(Thread.currentThread().getName());}， 5， TimeUnit.SECONDS);</span>        <span class="token comment" spellcheck="true">//模拟十个用户办理业务</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 办理业务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="底层是ThreadPoolExecutor"><a href="#底层是ThreadPoolExecutor" class="headerlink" title="底层是ThreadPoolExecutor"></a>底层是ThreadPoolExecutor</h1><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210203091924755.png" alt="image-20210203091924755"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//适用于长期执行的任务，性能好很多 阻塞队列可能很大，会OOM</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads， nThreads，                                      0L， TimeUnit<span class="token punctuation">.</span>MILLISECONDS，                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//适用于一个任务一个任务执行的场景 阻塞队列可能很大，会OOM</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span>， <span class="token number">1</span>，                                0L， TimeUnit<span class="token punctuation">.</span>MILLISECONDS，                                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//适用执行很多短期异步的小程序或负载较轻的服务器</span><span class="token comment" spellcheck="true">//任务数量特别多时，就会创建很多的线程，会OOM</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span>， Integer<span class="token punctuation">.</span>MAX_VALUE，                                  60L， TimeUnit<span class="token punctuation">.</span>SECONDS，                                  <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//ScheduledExecutorService executorService = Executors.newScheduledThreadPool(10);</span>        <span class="token comment" spellcheck="true">//executorService.schedule(()->{System.out.println(Thread.currentThread().getName());}， 5， TimeUnit.SECONDS);</span><span class="token keyword">public</span> <span class="token function">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>corePoolSize， Integer<span class="token punctuation">.</span>MAX_VALUE， <span class="token number">0</span>， NANOSECONDS，              <span class="token keyword">new</span> <span class="token class-name">DelayedWorkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="关闭线程池"><a href="#关闭线程池" class="headerlink" title="关闭线程池"></a>关闭线程池</h1><h2 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h2><p>将执行平缓的关闭过程，不再接受新的任务，同时等待已提交任务执行完成，包括那些还未开始执行的任务</p><h2 id="isShutdown"><a href="#isShutdown" class="headerlink" title="isShutdown"></a>isShutdown</h2><p>检验上面那个</p><h2 id="isTerminated"><a href="#isTerminated" class="headerlink" title="isTerminated"></a>isTerminated</h2><p>检验是否完全停止了</p><h2 id="shutdownNow"><a href="#shutdownNow" class="headerlink" title="shutdownNow"></a>shutdownNow</h2><p>执行粗暴给关闭过程，立刻关闭！</p><p>对正在执行的线程执行中断interrupt</p><p>不再启动队列中尚未开始的任务，返回在等待中的队列列表</p><h1 id="线程池七大参数"><a href="#线程池七大参数" class="headerlink" title="线程池七大参数"></a>线程池七大参数</h1><p>传入的是5参数，但是调用的是<code>this</code>的7大参数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize，                          <span class="token keyword">int</span> maximumPoolSize，                          <span class="token keyword">long</span> keepAliveTime，                          TimeUnit unit，                          BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize， maximumPoolSize， keepAliveTime， unit， workQueue，         Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>， defaultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*int corePoolSize，  线程池中的常驻核心线程数，当线程池数量到达corePoolSize后，就会把到达的任务放到缓存队列当中int maximumPoolSize， 线程池能够容纳同时执行的最大线程数，必须大于等于1(当corePoolSize满了，workQueue也满了，则会扩容)long keepAliveTime，多余的空闲线程的存活时间，当前线程池数量超过corePoolSize时，当空闲时间到达keepAliveTime值时，会将线程销毁到corePoolSize数量TimeUnit unit，设置时间单位BlockingQueue&lt;Runnable> workQueue，阻塞队列ThreadFactory threadFactory，表示生成线程池中工作线程的线程工厂 一般默认即可RejectedExecutionHandler handler 拒绝策略，当maximumPoolSize已经满了，则拒绝                             */</span><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize，                            <span class="token keyword">int</span> maximumPoolSize，                          <span class="token keyword">long</span> keepAliveTime，                          TimeUnit unit，                          BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue，                          ThreadFactory threadFactory，                          RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/image-20201203085215679.png" alt="image-20201203085215679"></p><ul><li>创建了线程池中，等待提交过来的任务请求</li><li>当调用execute()方法添加一个请求任务时，线程池会做如下判断<ol><li>如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务</li><li>如果正在运行的线程数量大于等于corePoolSize，接着进来的任务到blockQueue去阻塞</li><li>当阻塞队列满了而正在运行的线程数量小于maximumPoolSize，则创建非核心线程立刻执行该任务</li><li>当大于maximumPoolSize，就开启拒绝策略</li></ol></li><li>当一个线程完成任务，它会从队列中取一个任务来执行</li><li>当一个线程无事可做，而且超过keepAliveTime，而且当前运行线程数大于corePoolSize则该线程停止。所以线程池的所有任务完成后，它最终会收缩到corePoolSize的大小</li></ul><h1 id="四种拒绝策略"><a href="#四种拒绝策略" class="headerlink" title="四种拒绝策略"></a>四种拒绝策略</h1><h2 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h2><ul><li>设置<ul><li>初始化时</li><li>executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());</li></ul></li><li>触发时机<ul><li>如果线程池被关闭则拒绝</li><li>当Executor对最大线程和工作队列容量使用有限边界并且已经饱和时</li></ul></li></ul><h2 id="AbortPolicy（终止）"><a href="#AbortPolicy（终止）" class="headerlink" title="AbortPolicy（终止）"></a>AbortPolicy（终止）</h2><ul><li>默认的拒绝策略</li><li>抛出未检查的RejectExecution-Exception</li><li>调用者可以捕获这个异常，然后根据需求编写自己的处理代码</li></ul><h2 id="DiscardPolicy（抛弃）"><a href="#DiscardPolicy（抛弃）" class="headerlink" title="DiscardPolicy（抛弃）"></a>DiscardPolicy（抛弃）</h2><p>抛弃新提交的任务</p><h2 id="DiscardOldestPolicy（抛弃最旧）"><a href="#DiscardOldestPolicy（抛弃最旧）" class="headerlink" title="DiscardOldestPolicy（抛弃最旧）"></a>DiscardOldestPolicy（抛弃最旧）</h2><p>抛弃下一个将被执行的任务，然后尝试重新提交新的任务</p><h2 id="CallerRunsPolicy"><a href="#CallerRunsPolicy" class="headerlink" title="CallerRunsPolicy"></a>CallerRunsPolicy</h2><p>既不会抛弃任务，也不会抛出异常，而是将任务回退给调用者，从而降低新任务的流量</p><h1 id="添加线程规则"><a href="#添加线程规则" class="headerlink" title="添加线程规则"></a>添加线程规则</h1><ul><li><p>如果线程数小于corePoolSize，即使其他工作线程处于空闲状态，也会创建一个新线程来运行新任务</p></li><li><p>如果线程数大于等于corePoolSize，但小于maximumPoolSize，则将任务放入阻塞队列</p></li><li><p>如果阻塞队列已满，并且线程数小于maxPoolSize，则会创建一个新线程来运行任务</p></li><li><p>如果队列已满，并且线程数大于等于maxPoolSize则拒绝该任务</p></li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1612312498_1.png" alt="img"></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1612312567_3.png" alt="img"></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1612312661_4.png" alt="img"></p><h1 id="线程池状态"><a href="#线程池状态" class="headerlink" title="线程池状态"></a>线程池状态</h1><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210203100616797.png" alt="image-20210203100616797"></p><h1 id="执行任务四个生命周期"><a href="#执行任务四个生命周期" class="headerlink" title="执行任务四个生命周期"></a>执行任务四个生命周期</h1><p>创建、提交、开始、完成</p><h1 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h1><p>不允许在应用中显示创建线程，都是得使用线程池</p><p>生产实践中不允许适用<code>Executors</code>去创建，因为他底层是<code>new LinkedBlockingQueue&lt;Runnable&gt;())</code>是无界队列，如果所有工作行程都处于忙碌状态，那么任务将在队列中等候，如果任务持续快速地到达，并且超过了线程池处理他们的速度，那么队列将无限制增加，可能会堆积大量请求，导致<code>OOM</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//因为任务数量超过了5+3，抛出异常java.util.concurrent.RejectedExecutionException</span><span class="token comment" spellcheck="true">//        ExecutorService executorService = new ThreadPoolExecutor(2，5，1L， TimeUnit.SECONDS</span><span class="token comment" spellcheck="true">//                ，new LinkedBlockingQueue&lt;>(3)， Executors.defaultThreadFactory()，new ThreadPoolExecutor.AbortPolicy());</span>        <span class="token comment" spellcheck="true">//main 办理业务  会将业务回退给调用者</span>        ExecutorService executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span>，<span class="token number">5</span>，1L， TimeUnit<span class="token punctuation">.</span>SECONDS                ，<span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>， Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，<span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 办理业务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="设置maximumPoolSize"><a href="#设置maximumPoolSize" class="headerlink" title="设置maximumPoolSize"></a>设置maximumPoolSize</h2><p>首先分析计算环境、资源预算，例如部署的系统有多少CPU：</p><pre><code>System.out.println(Runtime.getRuntime().availableProcessors());</code></pre><p>系统有多大的内存：计算每个任务对内存的需求量，用总内存/需求量，就得到线程池上限</p><p>是否需像JDBC连接等稀缺资源：如果每个任务都需要一个数据库连接，那么连接池大小限制了线程池的大小</p><h3 id="CPU密集型"><a href="#CPU密集型" class="headerlink" title="CPU密集型"></a>CPU密集型</h3><p>线程池大小应该为处理器个数+1，能实现最优的使用率</p><p>即使线程偶尔由于缺页故障等原因暂停时，额外的线程也能保证CPU的时钟周期不会被浪费</p><h3 id="IO密集型"><a href="#IO密集型" class="headerlink" title="IO密集型"></a>IO密集型</h3><p>并不是一直在执行任务，则应该配置尽可能多的线程，如CPU核数*2</p><p>线程不会一直执行，线程池规模应更大</p><p>必须估算任务的等待时间与计算时间的比值</p><p>线程池最优大小= CPU核数 * CPU利用率 * （1 + 任务等待时间/运行时间）</p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 线程池 </tag>
            
            <tag> Executor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类加载机制</title>
      <link href="posts/cd1d308.html"/>
      <url>posts/cd1d308.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>JVM把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这个过程就是类加载机制</li><li>在程序运行时完成的</li><li>动态扩展的语言特性就是依赖于运行期动态加载和动态连接，例如编写一个面向接口的程序，可以等到运行时再指定其实际的实现类</li></ul><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><ul><li>解析阶段某些情况可以再初始化阶段之后才开始（为了支持运行时绑定特性）</li><li>这些阶段通常相互交叉地混合进行，会在一个阶段执行的过程中调用、激活另一个阶段</li></ul><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><ul><li>通过一个类的全限定名获取定义此类的二进制字节流<ul><li>从ZIP压缩包中读取，JAR的基础</li><li>从网络中读取，Web Applet</li><li>运行时计算生成，动态代理技术</li><li>从加密文件中获取，防Class文件被反编译的保护措施</li></ul></li><li>将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构</li><li>在Java堆内存中实例化生成一个代表该类的Class对象，作为方法区这个类的各种数据的访问入口</li><li>数组加载<ul><li>数组类本身不通过类加载器创建，由JVM直接在内存中动态构造出来</li><li>如果数组的组件类型是引用类型，递归采用加载过程去加载该组件类型，数组将标识在加载该组件类型的类加载器的类名称空间上</li><li>如果数组的组件类型是基本类型，数组将标识为与引导类加载器关联</li></ul></li></ul><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ul><li>目的是确保Class文件的字节流中包含的信息符合全部约束要求，保证这些信息被当作代码运行后不会危害虚拟机自身的安全</li><li>文件格式验证<ul><li>验证字节流是否符合Class文件格式的规范，并能被当前版本的虚拟机处理</li><li>保证输入的字节流能正确地解析并存储于方法区之内，格式上符合描述一个Java类型信息的要求</li><li>基于二进制字节流进行的</li><li>后面的三个验证阶段全部基于方法区的存储结构了</li></ul></li><li>元数据验证<ul><li>对字节码描述的信息进行语义分析</li><li>是否有父类（除Object应都有父类）</li><li>是否继承了final类</li><li>是否实现了父类或接口要求实现的所有方法</li><li>类中字段、方法是否与父类产生矛盾</li></ul></li><li>字节码验证<ul><li>通过数据流分析和控制流分析，确定程序语义是合法的、符合逻辑的</li><li>对类的方法体（Class文件中的Code属性）进行校验分析</li><li>保证被校验类的方法在运行时不会做出危害虚拟机安全的行为</li><li>保证任何跳转指令都不会跳转到方法体之外的字节码指令</li><li>保证类型转换都是有效的</li></ul></li><li>符号引用验证<ul><li>发生在符号引用转化为直接引用的时候，即解析阶段</li><li>验证该类是否缺少或被禁止访问他依赖的某些外部类、方法、字段等</li><li>验证符合引用中通过字符串描述的全限定名称是否能找到对应的类</li><li>验证在指定类中是否存在符合方法的字段描述及简单名称所描述的方法和字段</li><li>符号引用中类、字段、方法的可访问性</li></ul></li></ul><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>正式为类中静态变量分配内存并设置初始值</li><li>概念上是放在方法区，但是方法区是逻辑上的概念</li><li>JDK8后，类变量随着Class对象一起存放在Java堆中</li><li>不包括实例变量，实例变量会在对象实例化时随对象一起分配在java堆中</li><li>如果字段属性表中存在ConstantValue属性，则直接被初始化为ConstantValue属性所指定的初始值，例如public static final int value = 123;</li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ul><li>将常量池内的符号引用转换为直接引用的过程</li><li>虚拟机可以对第一次解析的结果进行缓存，譬如在运行时直接引用常量池中的记录，并把常量标识为已解析状态，避免重复解析</li><li>符号引用<ul><li>以一组符合来描述所引用的目标，可以是任何形式的字面量</li><li>与JVM的内存布局无关</li><li>引用的目标不一定是已加载到虚拟机内存的内容</li></ul></li><li>直接引用<ul><li>可以直接指向目标的指针、相对偏移量或者句柄</li><li>和JVM实现的内存布局相关</li><li>引用的目标必定已经在虚拟机内存中</li></ul></li><li>类或接口的解析<ul><li>假设当前代码所处的类为D，要把从未解析过的符号引用N解析为一个类或接口C</li><li>如果C不是一个数组类型，虚拟机会把代表N的全限定名传递给D的类加载器去加载这个类C</li><li>如果C是一个数组类型，并且数组的元素类型为对象，会先按上面的方法加载数组元素类型，再由虚拟机生成一个代表该数组维度和元素的数组对象</li><li>在解析完成之前，要进行符号引用验证，确认D是否具备对C的访问权限</li></ul></li></ul><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul><li><p>ＪＶＭ真正执行类中编写的Java代码，将主导权移交给应用程序</p></li><li><p>初始化类变量和其他资源，即执行类构造器<clinit>的过程，是编译器自动生成的方法</p></li><li><p>由编译器自动收集类中的所有类变量的赋值动作和静态语句块中语句合并而成的。收集的顺序由在源文件出现的顺序决定</p></li><li><p>静态语句块只能访问到定义在静态语句块之前的变量，定义在之后的变量，只能赋值，不能访问</p><ul><li><pre class=" language-java"><code class="language-java">  <span class="token keyword">static</span> <span class="token punctuation">{</span>          i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//给变量赋值可以正常编译通过</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//提示非法前向引用</span>      <span class="token punctuation">}</span>      <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><ul><li><p><clinit>不需要显式调用父类构造器，虚拟机保证父类的已经执行完毕，因此ＪＶＭ第一个被执行的<clinit>方法肯定是Object</p></li><li><p>父类的<code>&lt;clinit&gt;()</code>先执行，所以父类中定义的静态语句块优先于之类的变量赋值操作</p></li><li><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>      <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">static</span><span class="token punctuation">{</span>              A <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> B <span class="token operator">=</span> A<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>SubClass<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//２</span></code></pre></li><li><p><clinit>()不是必须的，如果没有静态语句块和对变量的赋值操作，就不生成</p></li><li><p>虚拟机保证一个类的<clinit>()在多线程环境中被正确加锁同步，如果多个线程同时去初始化一个类，那么只有其中一个线程去执行这个类的<clinit>()方法，其他线程都需要阻塞等待</p></li></ul><h3 id="初始化触发情况"><a href="#初始化触发情况" class="headerlink" title="初始化触发情况"></a>初始化触发情况</h3><h4 id="立即初始化情况"><a href="#立即初始化情况" class="headerlink" title="立即初始化情况"></a>立即初始化情况</h4><ul><li>遇到new、getstatic、putstatic、invokestatic字节码指令时<ul><li>使用new实例化对象</li><li>读取一个类型的静态字段（已在编译期把结果放入常量池的静态字段除外）</li><li>调用一个类型的静态方法</li></ul></li><li>使用reflect包对类型进行反射调用</li><li>初始化类，发现父类还没有进行过初始化<ul><li>则先触发其父类的初始化</li><li>一个接口在初始化时，并不要求其父类全部已经初始化过，只有真正使用到父接口时（如引用接口中定义的常量）才会初始化</li></ul></li><li>JVM启动时，指定执行主类则JVM会先初始化这个主类</li><li>使用动态语言支持，使用MethodHandle</li><li>接口定义了默认方法（default方法)，该接口的实现类初始化，则该接口也要初始化</li></ul><h4 id="被动引用"><a href="#被动引用" class="headerlink" title="被动引用"></a>被动引用</h4><p>除上面主动引用的情况外，所有引用类型的方式都不会触发初始化</p><h5 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h5><ul><li><p>非主动使用类字段</p></li><li><p>对于静态字段，只有直接定义这个字段的类才会被初始化</p></li><li><p>因此通过其子类来引用父类中定义的静态字段，只会触发其父类的初始化而不会触发子类的初始化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SuperClass init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>SubClass<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*SuperClass init!        123*/</span></code></pre></li></ul><h5 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h5><ul><li>SuperClass[] superClasses = new SuperClass[10];</li><li>没有触发SuperClass的初始化</li><li>触发了[SuperClass的初始化<ul><li>由虚拟机自动生成的</li><li>直接继承Object的子类</li><li>由newarray字节码触发</li><li>代表了元素类型为SuperClass的一维数组</li><li>数组越界则抛出ArrayIndexOutOfBoundsException</li></ul></li></ul><h5 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstClass</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConstClass init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HELLO <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ConstClass<span class="token punctuation">.</span>HELLO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//hello world</span></code></pre><ul><li>常量在编译阶段会存入调用类的常量池中，本质没有引用到定义常量的类，因此不会触发定义常量的类的初始化</li><li>编译阶段的常量传播优化，将常量的值直接存储到Main类的常量池中，对他的引用全部转为对自身常量池的引用</li><li>Main的Class文件没有ConstClass的符号引用入口，这两个类在编译成Class文件后不存在任何关系了</li></ul><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>类加载器：通过一个类的全限定名来获取描述该类的二进制字节流</li><li>对于任意一个类，都必须由他的类加载器和这个类的本身一同确立他的唯一性</li><li>每一个类加载器，都拥有一个独立的类名称空间</li><li>比较两个类是否相等，只有他们在同一个类加载器下才有意义，否则就算他们来自同一个Class文件，被同一个虚拟机加载，只要他们类加载器不同，他们就不是同一个类</li><li>所指的相等，包括equals()方法，instanceof关键字的判断</li><li>保持着三层类加载器、双亲委派的类加载结构</li></ul><h2 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h2><ul><li>Bootstrap ClassLoader</li><li>使用C++语言实现</li><li>是虚拟机自身的一部分</li><li>负责加载<JAVA_HOME>\lib目录</li><li>启动类加载器无法被Java程序直接引用，如果需要把加载请求委派给启动类加载器处理，则用null代替</li></ul><h2 id="其他所有的类加载器"><a href="#其他所有的类加载器" class="headerlink" title="其他所有的类加载器"></a>其他所有的类加载器</h2><ul><li><p>由Java语言实现</p></li><li><p>独立在虚拟机外部</p></li><li><p>全部继承抽象类java.lang.ClassLoader</p></li><li><p>扩展类加载器(Extension ClassLoader)</p><ul><li>负责加载<JAVA_HOME>\lib\ext目录下类库</li><li>是一种Java系统类库的扩展机制</li><li>允许用户将具有通用性的类库放置在ext目录里以扩展Java SE的功能</li></ul></li><li><p>应用程序类加载器(Application ClassLoader)</p><ul><li>也称为系统类加载器。</li><li>负责加载用户类路径（ClassPath)上所有的类库。如果没有定义自己的类加载器，则它就是程序默认的类加载器</li></ul></li></ul><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><ul><li>除了顶层的启动类加载器，其余的类加载器都应有自己的父类加载器，通常使用组合关系来复用父加载器的代码</li><li>如果一个类加载器收到类加载的请求，他首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（他的搜索范围中没有找到所需的类），子加载器才会尝试自己去完成加载</li><li>类随着他的类加载器一起具备了一种带有优先级的层次关系</li><li>例如Object类，无论哪个类加载器去加载他，都会委派到启动类加载器进行执行，因此Object类在不同的类加载器环境下都能保证是同一个类</li><li>如果没有双亲委派模型，用户自定义java.lang.Object类，系统就会出现多个不同的Object类，代码将一片混乱</li><li>先检查请求加载的类型是否已经被加载过，若没有则调用父类加载器的loadClass()方法，若父类加载器为空则默认使用启动类加载器作为父类加载器，如果父类加载器加载失败，抛出异常了，才调用自己的findClass()方法尝试进行加载</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name， <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>        <span class="token keyword">throws</span> ClassNotFoundException    <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 首先，检查是否已经被类加载器加载过</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 存在父加载器，递归的交由父加载器</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name， <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 直到最上面的Bootstrap类加载器</span>                        c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 如果父类加载器抛出ClassNotFoundException</span>                    <span class="token comment" spellcheck="true">// f说明父类加载器无法完成加载请求</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 在父类加载器无法加载时</span>                    <span class="token comment" spellcheck="true">// 再调用自身的findClass方法来进行类加载</span>                    c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="打破双亲委派机制"><a href="#打破双亲委派机制" class="headerlink" title="打破双亲委派机制"></a>打破双亲委派机制</h2><ul><li>重写loadClass方法<ul><li>双亲委派模型在JDK2才引入，而ClassLoader在第一个版本已经存在</li><li>为了兼容已存在的用户自定义类加载器的代码，无法再以技术手段避免loadClass()被子类覆盖的可能，只能添加一个新的方法findClass()，</li><li>双亲委派机制就在loadClass方法中实现的，重写该方法就能自己定义用什么加载器了</li></ul></li><li>线程上下文类加载器：解决父类加载器去请求子类加载器完成类加载的行为</li><li>OSGi实现模块化热部署</li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 生命周期 </tag>
            
            <tag> 双亲委派模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能监控、故障处理工具</title>
      <link href="posts/9e3f4319.html"/>
      <url>posts/9e3f4319.html</url>
      
        <content type="html"><![CDATA[<h1 id="基础故障处理工具"><a href="#基础故障处理工具" class="headerlink" title="基础故障处理工具"></a>基础故障处理工具</h1><ul><li>这些命令行工具大多仅是一层薄包装，真正的功能代码是实现在JDK的工具类库里</li><li>借助这些工具类库，应用程序部署生产环境后，开发者可以选择直接在应用程序中提供功能强大的监控分析功能</li></ul><h2 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h2><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1608769939_1.png" alt="img"></p><ul><li>JVM Process Status</li><li>虚拟机进程状况工具</li><li>是使用频率最高的JDK命令行工具</li><li>列出正在运行的虚拟机进程</li><li>显示虚拟机执行主类名称（main()方法所在的类）、这些进程的本地虚拟机唯一ID（LVMID） Local Virtual Machine Identifier</li><li>其他JDK工具需要他查询到的LVMID来确定要监控的是哪一个虚拟机进程</li><li>对于本地虚拟机进程，LVMID与PID一致；ps指令也可以查询到虚拟机进程的LVMID，但如果同时启动多个虚拟机进程，则必须依赖jps命令显示主类的功能</li></ul><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>jps -l</p><p>输出主类的全名，如果进程执行的是JAR包，则输出JAR的路径</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1608770201_2.png" alt="img"></p><p>jps -v</p><p>输出虚拟机进程启动时的JVM参数</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1608770291_3.png" alt="img"></p><h2 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h2><ul><li>虚拟机统计信息监视工具</li><li>JVM Statistics Monitoring Tool</li><li>用于监视虚拟机各种运行状态信息的命令行工具</li><li>显示本地或远程虚拟机进程中的类加载，内存，垃圾回收，即时编译器等运行时数据</li><li>在只提供控制台环境的服务器，他是运行期定位虚拟机性能问题的常用工具</li></ul><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><ul><li><p>jstat [ option vmid [interval [s|ms] [count] ] ]</p></li><li><p>本地虚拟机进程，则VMID与LVMID一致</p></li><li><p>interval和count代表查询间隔和次数，忽略则只查询一次</p></li><li><p>例如 jstat -gc 4218 250 5</p><ul><li><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1608770710_4.png" alt="img"></li></ul></li><li><p>jstat -gcutil 4218</p><ul><li>输出已使用空间占总空间百分比</li><li>Eden使用了78.74%，S0为空，S1使用32.88%</li><li>老年代（O）使用了61.65%</li><li>元空间（M）使用了94.75</li><li>程序运行以来Minor GC（YGC）发生了603次，用了4.85s</li><li>发生Full GC(FGC)5次，用了1.611s</li><li>所有GC总耗时（GCT）为6.462s</li><li><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1608770952_6.png" alt="img"></li></ul></li></ul><h2 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h2><ul><li>Java内存映像工具</li><li>Memory Map for Java</li><li>jmap -dump:live,format=b,file=a.log 4218<ul><li>用于生成堆转储快照</li><li>再把生成的a.log进行分析</li></ul></li><li>jmap -heap 4218<ul><li>显示Java堆详细详细，如使用哪种回收器，参数配置，分代情况等</li><li><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1608772363_7.png" alt="img"></li></ul></li></ul><h2 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h2><ul><li>Java堆栈跟踪工具</li><li>Stack Trace for Java</li><li>用于生成虚拟机当前时刻的线程快照<ul><li>即当前虚拟机内每一条线程正在执行的方法堆栈的集合</li><li>目的是定位线程出现长时间停顿的原因</li><li>如线程间死锁、死循环、请求外部资源导致的长时间挂起等</li><li>线程出现停顿时，通过jstack来查看各个线程的调用堆栈，就可以获知没有响应的线程到底在后台做什么事情，或者等待什么资源</li></ul></li><li>jstack -l 4218 ：-l 除堆栈外，显示关于锁的附加信息<ul><li><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1608772914_8.png" alt="img"></li></ul></li></ul><h1 id="可视化故障处理工具"><a href="#可视化故障处理工具" class="headerlink" title="可视化故障处理工具"></a>可视化故障处理工具</h1><h2 id="JConsole"><a href="#JConsole" class="headerlink" title="JConsole"></a>JConsole</h2><ul><li>Java监视与管理控制台</li><li>通过JDK/bin命令下的jconsole.exe启动JConsole</li><li>他会自动搜索出本机运行的所有虚拟机进程，即完成jps的功能</li></ul><h3 id="内存监控"><a href="#内存监控" class="headerlink" title="内存监控"></a>内存监控</h3><ul><li>相当于可视化的jstat命令</li><li>用于监视被收集器管理的虚拟机内存</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//-Xms100m -Xmx100m -XX:+UseSerialGC</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//内存占位符对象,一个OOM大约64KB</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OOMObject</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> placeholder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">64</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fillHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>OOMObject<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//让监视曲线变化更加明显</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OOMObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token function">fillHeap</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Eden区的运行趋势呈折现状</li><li>整个堆曲线平滑向上增长</li><li>在System.GC后，Eden与Survivor区被清空，但是老年代的保持峰值，说明被填充进堆中的数据在System.gc（）后仍然存活</li><li>在System.gc();时，list对象仍然处于作用域之内，就不会回收，如果把System.gc();移动到方法外调用即可回收掉全部内存</li></ul><h3 id="线程监控"><a href="#线程监控" class="headerlink" title="线程监控"></a>线程监控</h3><ul><li>相当于jstack，遇到线程停顿的时候用</li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//线程死循环演示</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createBusyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//第12行</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"testBusyThread"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//线程锁等待演示</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createLockThread</span><span class="token punctuation">(</span><span class="token keyword">final</span> Object lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"testLockThread"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">createBusyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">createLockThread</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>首先在线程页签中选择main线程<ul><li>堆栈追踪显示BufferedReader的readBytes()方法正在等待System.in的键盘输入</li><li><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1608775371_11.png" alt="img"></li></ul></li><li>接着监控testBusyThread线程<ul><li>他一直在执行空循环</li><li>一直在第14行停留，即while(true)</li><li>线程为Runnable状态，而且没有归还线程执行令牌的动作，所以会在空循环耗尽操作系统分配给他的执行时间，直到线程切换为止</li><li><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1608775349_10.png" alt="img"></li></ul></li><li>testLockThread<ul><li>在等待lock对象的notify()或notifyAll()方法的出现</li><li>处于WAITING状态，在重新唤醒前不会被分配执行时间</li><li>处于正常的活锁等待，lock对象的notify()或notifyAll()方法被调用这个线程便能继续执行</li><li><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1608775531_12.png" alt="img"></li></ul></li></ul><h4 id="死锁案例"><a href="#死锁案例" class="headerlink" title="死锁案例"></a>死锁案例</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SynAddRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">SynAddRunnable</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SynAddRunnable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SynAddRunnable</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>根本原因是Integer.valueOf()会对[-128,127]对象进行缓存，如果valueOf()传入的参数在范围内，则直接返回缓存中的对象</p><p>假设线程A在两个synchronized块之间发生了一次线程切换，就会出现线程A等待线程B持有的Integer.valueOf(1),线程B又在等待被线程A持有的Integer.valueOf(2)</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1608776488_13.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> JVM学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> jps </tag>
            
            <tag> JConsole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>垃圾收集器与内存分配策略</title>
      <link href="posts/ddb92a08.html"/>
      <url>posts/ddb92a08.html</url>
      
        <content type="html"><![CDATA[<h1 id="判定对象消亡"><a href="#判定对象消亡" class="headerlink" title="判定对象消亡"></a>判定对象消亡</h1><h2 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h2><p>无法解决循环引用的问题，即实际上这两个对象已经不可能被访问了，但因为它们互相引用着对方，导致它们的引用计数都不为零，引用计数算法就无法回收它们</p><h2 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h2><ul><li>通过一系列称为GC Roots的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为引用链</li><li>如果从GC Roots到某个对象不可达，则将把他们判定为可回收对象</li></ul><h3 id="GC-Roots"><a href="#GC-Roots" class="headerlink" title="GC Roots"></a>GC Roots</h3><ul><li>在虚拟机栈(栈帧中的局部变量表)中引用的对象，例如各个线程被调用的方法堆栈中使用到的参数，局部变量，临时变量</li><li>在方法区中类静态属性引用的对象，Java类的引用类型静态变量</li><li>在方法区中常量引用的对象，例如字符串常量池(String Table)里的引用</li><li>在本地方法栈中JNI(即Native方法)引用的对象</li><li>虚拟机内部的引用，如基本数据对应的Class对象、常驻的异常对象如NullPointException、OutOfMemoryError、系统类加载器</li><li>被同步锁（synchronized）持有的对象</li><li>反映虚拟机内部情况的本地代码缓存等</li><li>分代收集和局部回收（Partial GC）。如果只针对Java堆中某块区域发起垃圾收集时（如只针对新生代的垃圾收集），这个区域里的对象有可能被位于堆中其他区域的对象所引用。需要将关联区域的对象也一并加入到GC Roots集合中</li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><ul><li>如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，那么该reference数据是代表某个对象的引用</li><li>类似Object object = new Object();</li><li>只要强引用关系还存在，垃圾回收器就永远不会回收掉被引用的对象</li></ul><h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><ul><li>只被软引用关联着的对象，在系统将要发生内存溢出异常之前，会将这些对象纳入回收范围进行二次回收</li><li>如果这次回收还没有足够的内存，才会抛出内存溢出异常</li><li>SoftReference</li><li>缓存功能，一类对象，当内存空间足够时，能保存在内存中，如果内存空间在进行垃圾收集时仍然非常紧张，则可以抛弃这些对象</li></ul><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><ul><li>强度被软引用更弱</li><li>只能生存到下一次垃圾收集发生为止</li><li>无论内存是否充足，都会回收掉只被弱引用关联的对象</li></ul><h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><ul><li>又称幽灵引用或幻影引用</li><li>是否有虚引用完全不会对其生命周期构成影响，也无法通过虚引用获取一个对象实例</li><li>唯一目的是为了能在这个对象被回收时收到一个系统通知</li></ul><h2 id="finalize"><a href="#finalize" class="headerlink" title="finalize()"></a>finalize()</h2><ul><li>在对对象进行可达性分析后发现没有与GC Roots关联的引用链，将会第一次标记</li><li>随后进行筛选，筛选条件是此对象是否有必要执行finalize()方法，如果没有覆盖finalize()方法，或者已经执行过了finalize()，则没有必要执行</li><li>如果有必要执行，则放入F-Queue队列中，随后由一个低调度优先级线程执行，且不保证一定等他执行结束</li><li>只要对象在finalize()中重新与引用链上任何一个对象建立关联（例如将this赋值给类变量），则在第二次标记时他会被移除即将回收的集合</li><li>finalize()只会被执行一次</li><li>忘掉finalize()，使用try-finally</li></ul><h2 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h2><ul><li>主要回收废弃的常量和不再使用的类型</li><li>回收常量池，例如已经没有任何字符串对象引用常量池中的“java”常量，且虚拟机中也没有其他地方引用这个字面量，如果此时进行内存回收，而且确实有必要，则该常量将被系统清理出常量池</li><li>回收类。在大量使用反射、动态代理、CGLib等字节码框架、动态生成JSP以及OSGi这类频繁自定义类加载器的场景，通常需要JVM具备类型卸载的能力<ul><li>该类的所有的实例都已经被回收，Java堆中不存在该类及其任何派生子类的实例</li><li>加载该类的类加载器已经被回收，除非是精心设计的可替换类加载器的场景，否则很难达成</li><li>该类对应的Class对象没有在任何地方被引用，无法在任何地方通过反射访问这个类的方法</li></ul></li></ul><h1 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h1><h2 id="分代收集理论"><a href="#分代收集理论" class="headerlink" title="分代收集理论"></a>分代收集理论</h2><h3 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h3><ul><li>弱分代假说：绝大多数对象都是朝生夕灭</li><li>强分代假说：熬过越多次垃圾收集过程的对象就越难消亡</li><li>跨代引用假说：跨代引用相对于同代引用来说仅占极少数</li></ul><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ul><li>将Java堆划分出不同的区域，根据回收对象年龄（即熬过垃圾收集的次数）分配到不同的区域中存储</li><li>划分不同区域后，垃圾收集器可以每次只回收其中一部分区域，根据不同区域安排与里面存储对象存亡特征相匹配的垃圾收集算法</li></ul><h3 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h3><ul><li>每次垃圾收集时都有大批对象死去，而每次回收后存活的少量对象，将会逐步晋身到老年代中存放</li><li>如果只进行Minor GC，但新生代对象可能被老年代引用，为了找出存活对象，不得不再固定GC Roots之外，再额外遍历整个老年代中所有对象来确保可达性分析结果的正确性</li><li>依据假说，不应为了少量的跨带引用去扫描整个老年代，只需要在新生代上建立一个全局的数据结构（记忆集），这个结构把老年代分成若干小块，标识出老年代哪一块内存会存在跨带引用</li><li>此后Minor GC，只有包含了跨带引用的小块内存里的对象才会被加入GC Roots中进行扫描</li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><ul><li>首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象</li><li>执行效率不稳定，标记和清除两个过程的执行效率都随对象数量增长而降低</li><li>会产生大量不连续的内存碎片，导致只会程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不触发另一次垃圾收集动作</li></ul><h3 id="标记-复制算法"><a href="#标记-复制算法" class="headerlink" title="标记-复制算法"></a>标记-复制算法</h3><ul><li>半区复制，将可用内存按容量划分成大小相等的两块，每次只使用其中一块，如果这一块内存用完了，就将存活的对象复制到另外一块上，再把已使用过的内存空间清理掉</li><li>对于多数对象是可回收的情况，算法需要复制的只是占少数的存活对象，无碎片空间问题</li><li>代价是可用内存缩小为原来一半</li><li>Appel式回收<ul><li>把新生代分为Eden，和Survivor0，Survivor1区，大小为8:1:1</li><li>每次分配内存只使用Eden和Survivor0区</li><li>将Eden和Survivor0中存活对象一次性复制到Survivor1区</li><li>当Survivor空间不足以容纳一次Minor GC之后存活的对象，就通过分配担保机制直接进入老年代</li></ul></li></ul><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><ul><li>先标记，然后让所有存活对象都向内存空间一端移动，然后直接清理掉边界以外的内存</li><li>移动存活对象并更新所有引用这些对象的地方必须暂停用户应用程序才能进行(Stop the World)</li><li>但如果不管空间碎片化问题，则直接影响应用程序的吞吐量</li><li>关注吞吐量的Parallel Scavenge基于标记-整理</li><li>关注延迟的CMS基于标记-清除：在空间碎片过多，影响到对象分配时，再采用标记整理算法收集一次</li></ul><h1 id="HotSpot算法细节"><a href="#HotSpot算法细节" class="headerlink" title="HotSpot算法细节"></a>HotSpot算法细节</h1><h2 id="根节点枚举"><a href="#根节点枚举" class="headerlink" title="根节点枚举"></a>根节点枚举</h2><ul><li>固定可作为GC Roots的节点主要是全局性的引用(例如常量或类静态属性)与执行上下文(例如堆栈中的本地变量表)</li><li>所有收集器在根节点枚举这一步骤都是必须暂停用户线程的</li><li>必须在一个能保障一致性的快照中才得以进行，整个枚举期间，执行子系统看起来就像是冻结在某个时间点上</li><li>用户线程停顿之后，不需要一个不漏地检查完所有执行上下文和全局的引用位置。可以使用一组称为OopMap的数据结构直接得到哪些地方存在着对象引用</li></ul><h2 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h2><ul><li>通过OopMap，HotSpot可以快速完成GC Roots的枚举，但不可能每条指令都生成OopMap，只是在特定的地方记录了这些位置，即安全点</li><li>用户程序执行时并非在代码指令流的任意位置都能停顿下来开始垃圾收集，而是强制要求必须执行到达安全点才能够暂停</li><li>安全点的选择一般是以能否让程序长时间执行的特征为标准选定的，一般是指令序列的复用，例如方法调用、循环跳转、异常跳转等才会产生安全点</li><li>还要考虑如何让垃圾收集发生时让所有线程都跑到最近的安全点，并停顿</li><li>抢先式中断<ul><li>在垃圾收集发生时，系统首先把所有线程中断，如果发现用户线程中断地方不再安全点上，就恢复线程继续执行，让它一会再中断，直到跑到安全点。</li><li>几乎没有虚拟机使用</li></ul></li><li>主动式中断<ul><li>设置一个标志位，各个线程执行过程中不停地主动轮询这个标志，一旦发现标志为真就自己在最近的安全点上主动中断挂起</li><li>使用内存保护陷阱的方式，把轮询操作精简到只有一条汇编指令</li><li>仅通过一条汇编指令就完成安全点轮询和触发线程中断</li></ul></li></ul><h2 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h2><ul><li>如果用户线程处于Sleep状态或Blocked状态，即没有分配处理器时间。此时线程无法响应虚拟机的中断请求，不能再走到安全的地方去中断挂起自己。</li><li>安全区域是指能够确保某一段程序代码中，引用关系不会发生改变，因此，在这个区域从任意地方开始垃圾收集都是安全的</li><li>当用户线程执行到安全区域里面的代码，首先标识自己已经进入了安全区域，这段时间如果发生垃圾收集JVM不会管这些已经声明在安全区域里面的代码。当要离开安全区域时，它要检查JVM是否完成了根节点枚举，如果完成则继续执行，如果没完成，则一直等待直到收到可以离开安全区域的信号为止</li></ul><h2 id="记忆集和卡表"><a href="#记忆集和卡表" class="headerlink" title="记忆集和卡表"></a>记忆集和卡表</h2><ul><li>为解决对象跨带引用的问题，使用记忆集来避免把整个老年代加入GC Roots的扫描范围</li><li>记忆集是一种用来记录从非收集区域指向收集区域的指针集合的数据结构，最简单是用非收集区域中所有含跨带引用的对象数组来实现，但是空间占用太高</li><li>收集者只需要通过记忆集判断出某一块非收集区域是否存在有指向收集区域的指针即可，可以选择更为粗犷的记录粒度来节省记忆集的存储和维护成本</li></ul><h3 id="卡表（card-table"><a href="#卡表（card-table" class="headerlink" title="卡表（card table)"></a>卡表（card table)</h3><ul><li>每个记录精确到一块内存区域，该区域内有对象含有跨带引用</li><li>卡表是记忆集的一种具体实现</li><li>使用字节数组，因为速度上现在计算机硬件是按字节编址</li><li>CARD_TABLE[this.address &gt;&gt; 9] = 0</li><li>每一个元素都对应着其标识的内存区域中一块特定大小的内存块</li><li>一个卡页（512字节）的内存中通常不止包含一个对象，只要里面有一个存在跨带指针，就置为1，元素变脏。</li><li>在垃圾收集时，只要筛选出变脏的元素，就能知道哪有跨带指针，就加入GC Roots</li></ul><h2 id="写屏障"><a href="#写屏障" class="headerlink" title="写屏障"></a>写屏障</h2><ul><li>变脏时间点应该发生在引用类型字段赋值的那一刻，如何在此时更新维护卡表</li><li>必须找到一个在机器码层面的手段，把维护卡表的动作放在每一个赋值操作之中</li><li>使用写屏障技术维护卡表状态，可以看作是虚拟机层面对“引用类型赋值”这个动作的AOP切面，在引用对象赋值时产生一个环绕通知，供程序执行额外的操作。应用了写后屏障</li><li>伪共享问题<ul><li>缓存系统以缓存行为单位存储，如果多个线程修改互相独立的变量，而这些变量恰好在共享同一个缓存行，就彼此影响</li><li>可以先检查卡表标记，只有当卡表元素没有被标记时才标记为变脏</li></ul></li></ul><h2 id="并发的可达性分析"><a href="#并发的可达性分析" class="headerlink" title="并发的可达性分析"></a>并发的可达性分析</h2><ul><li><p>从GC Roots再继续往下遍历对象图的时间与堆容量成正比</p></li><li><p>三色标记法，如果收集器再对象图上标记颜色，同时用户线程在修改引用关系（对象图的结构）</p></li><li><p>两种可能：</p><ul><li>把原本消亡的对象误标记为存活，可以接受。只是产生了逃过本次收集的浮动垃圾</li><li>把原本存活的对象误标记为消亡，非常致命</li></ul></li><li><p>对象消亡两个条件</p><ul><li>新增了黑色到白色对象的新引用。</li><li>删除了灰色到该白色对象的所有引用</li></ul></li><li><p>两种解决，破坏两个条件之一即可。都是通过写屏障实现</p><ul><li>增量更新。理解为当黑色对象一旦插入了指向白色对象的引用后，它就变回灰色对象。</li><li>原始快照。无论引用对象删除与否，都会按照刚刚开始扫描的那一刻的对象图快照来进行搜索。</li></ul></li></ul><h1 id="经典垃圾收集器"><a href="#经典垃圾收集器" class="headerlink" title="经典垃圾收集器"></a>经典垃圾收集器</h1><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/abcd.png" alt="img"></p><h2 id="Young-generation"><a href="#Young-generation" class="headerlink" title="Young generation"></a>Young generation</h2><h3 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h3><ul><li>单线程工作的收集器</li><li>在进行垃圾收集时，必须先暂停其他所有线程，直到它收集结束</li><li>客户端模式下默认的新生代收集器，简单而高效</li><li>对于内存资源受限的环境下，是所有收集器里额外内存消耗最小的</li><li>对于单核处理器或核心较少的环境收集效率最高</li></ul><h3 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h3><ul><li>是Serial收集器的多线程并发版本</li><li>除了Serial收集器，只有它能和CMS收集器配合</li><li>在单线程环境下不比Serial收集器好</li><li>也是需要STW，只是多线程一起并发收集罢了</li></ul><h3 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h3><ul><li>同样基于标记-复制算法，同样并行收集的多线程收集器</li><li>可以达到一个可控制的吞吐量，即处理器用于运行用户代码的时间/处理器总消耗时间</li><li>称作吞吐量优先收集器</li><li>垃圾收集的自适应调节策略：虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整参数以提供最合适的停顿时间或最大吞吐量</li></ul><h2 id="Tenured-generation"><a href="#Tenured-generation" class="headerlink" title="Tenured generation"></a>Tenured generation</h2><h3 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h3><ul><li>单线程收集器，使用标记-整理算法</li><li>供客户端模式使用</li><li>可作为CMS收集器发生失败时的后备预案</li><li>可以配合Parallel Scavenge收集器</li></ul><h3 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h3><ul><li>支持多线程并发收集</li><li>使用标记-整理算法</li><li>吞吐量优先收集器有了比较好的组合：Parallel Scavenge收集器+ Parallel Old收集器</li></ul><h3 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h3><ul><li>Concurrent Mark Sweep</li><li>以最短回收停顿时间为目标的收集器</li><li>互联网网站等Java项目通常较为关注服务的响应速度，希望系统停顿时间尽可能短，以给用户带来良好的交互体验</li><li>基于标记-清除算法</li><li>并发收集，低停顿</li></ul><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/Rc4defd801698e946aa0b9bc91d8fc4f6"></p><ul><li>初始标记：标记一下GC Roots能直接关联的对象，速度很快。需要STW</li><li>并发标记：从GC Roots的直接关联对象开始遍历整个对象图的过程，耗时较长，但不需要停顿用户线程</li><li>重新标记：需要STW，修改并发标记期间，因用户线程继续运作而导致标记产生变动的那一部分对象的标记记录，使用增量更新</li><li>并发清除：可以与用户线程同时并发的，清理删除掉标记阶段判断的已经死亡的对象，不需要移动存活对象</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>对处理器资源非常敏感：并发阶段，占用一部分线程导致应用程序变慢，降低总吞吐量</li><li>无法处理浮动垃圾<ul><li>由于垃圾收集阶段用户线程需要持续运行，程序运行自然还会伴随有新的垃圾对象产生，而且这些垃圾对象是出现在标记过程结束之后，CMS无法在当次收集中处理掉他们，只好留待下一次垃圾收集时再清理掉，即浮动垃圾。而且用户线程需要持续运行，所以需要预留足够的内存空间给用户线程使用(默认92%)</li><li>如果运行期间预留的内存无法满足程序分配新对象的需要，可能出现Concurrent Mode Failure(并发失败)</li><li>则不得不启动后背方案：冻结用户线程的执行，临时启用Serial Old收集器来进行老年代的垃圾收集</li></ul></li><li>产生大量的空间碎片：无法找到足够大的连续空间来分配给当前对象，不得不提前Full GC</li></ul><h2 id="Garbage-First收集器"><a href="#Garbage-First收集器" class="headerlink" title="Garbage First收集器"></a>Garbage First收集器</h2><ul><li>面向局部收集，基于Region的内存布局，全功能垃圾收集器</li><li>主要面向服务器应用，服务器模式下默认的垃圾收集器</li><li>建立停顿时间模型，支持指定一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间大概率不超过N毫秒</li><li>Mixed GC模式：面向堆的任何部分来组成回收集，衡量哪块内存中存放的垃圾数量最多，回收收益最大</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>把连续的Java堆划分为多个大小相等的独立区域</li><li>每个Region可以扮演新生代的Eden、Survivor或老年代空间</li><li>Humongous区域，专门存储大对象：大小超过Region容量一半的对象、超级大对象放在连续的Humongous区域、把Humongous区域看作老年代</li><li>将Region作为单位回收的最小单元，每次回收Region的整数倍</li><li>让G1去跟踪各个Region里面垃圾的价值大小（回收所获得的空间大小以及回收所需时间的经验值）</li><li>在后台维护一个优先级列表，优先处理回收价值收益最大的region</li></ul><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ul><li><p>跨Region引用对象</p><ul><li>每个Region都维护自己的记忆集</li><li>记录别的Region指向自己的指针，并标记这些指针分别在哪些卡页的范围之内</li><li>是一个哈希表，Key是别的Region起始地址，Value是卡表索引号集合</li><li>至少要耗费堆的10%-20%额外内存来维持收集器工作</li></ul></li><li><p>并发标记阶段</p><ul><li>对象引用关系改变，不打破原有对象图。使用原始快照（SATB）算法</li><li>新对象创建：设计两个指针，名为TAMS(Top at Mark Start)，把Region中一部分空间划分出来用于并发回收过程中的新对象分配，新分配对象必须在两个指针位置以上，默认这些对象是存活的，如果内存回收速度赶不上内存分配速度，也要STW的Full GC。</li></ul></li><li><p>建立可靠的停顿预测模型</p><ul><li><p>记录每个Region的回收耗时、记忆集中脏卡数量等成本，计算统计信息</p></li><li><p>比普通平均值更容易收到新数据的影响，衰减平均值更准确的代表最近的平均状态</p></li><li><p>Region的统计状态越新越能决定其回收价值</p></li><li><p>通过这些信息预测现在开始回收的话，由哪些Region组成回收集才可以在不超过期望停顿时间的约束下获得最高收益</p></li></ul></li></ul><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ul><li>初始标记<ul><li>标记GC Roots能直接关联到的对象</li><li>修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确的在可用Region上分配新对象</li><li>需要停顿线程，但耗时短，而且是借用Minor GC同步完成的，没有额外停顿</li></ul></li><li>并发标记<ul><li>堆中对象的可达性分析，递归扫描整个堆中对象图</li><li>耗时长，能与用户线程并发执行</li><li>处理在SATB记录下的在并发时有引用变动的对象</li></ul></li><li>最终标记<ul><li>对用户线程做另一个短暂暂停，处理并发阶段结束后遗留下来的最后那少量的SATB记录</li></ul></li><li>筛选回收<ul><li>更新Region的统计数据</li><li>对Region的回收价值和成本排序</li><li>根据用户所期望的停顿时间制定回收计划</li><li>把决定回收的Region的存活对象复制到空Region中，清理旧Region的全部空间</li><li>必须STW，由多条垃圾收集器线程并发完成</li></ul></li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>在延迟可控的情况下获得尽可能高的吞吐量</p></li><li><p>取得关注吞吐量和关注延迟之间的最佳平衡</p></li><li><p>如果停顿时间过短，会导致每次筛选出来的回收集只占堆内存很小一部分，最终占满堆引发Full GC降低性能，停顿时间设置在100-300ms之间比较合理</p></li><li><p>整体是基于标记-整理的</p></li><li><p>局部是基于标记-复制的</p></li><li><p>不会产生内存空间碎片，收集后能提供规整的可用内存</p></li><li><p>使用写后屏障进行卡表维护操作</p></li><li><p>使用写前屏障来跟踪并发时的指针变化，实现SATB算法</p></li><li><p>小内存上CMS大概率优于G1（6-8GB为平衡点）</p></li></ul><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><ul><li>实验环境：HotSpot、客户端模式、Serial+Serial Old</li><li>对象的内存分配：大部分堆上分配，极小部分经过即时编译后拆散为标量类型并间接栈上分配</li><li>新生对象通常分配新生代，少数情况（对象大小超过阈值）直接分配老年代</li></ul><h2 id="对象优先在Eden分配"><a href="#对象优先在Eden分配" class="headerlink" title="对象优先在Eden分配"></a>对象优先在Eden分配</h2><ul><li>大多数情况下，对象在Eden区分配，如果Eden区没有足够空间分配，将发起Minor GC</li><li>MinGC中，如果Survivor放不下Eden存活的，则通过对象担保机制，把存活的放入老年代</li><li>-Xms20M -Xmx20M：堆大小20M，不可扩展</li><li>-Xmn10M：10MB分配给新生代</li><li>-XX:SurvivorRatio=8：Eden：Survivor = 8：1，新生代总可用区间9216KB(Eden+一个Survivor)</li><li>-XX:+PrintGCDetails</li></ul><pre><code>VM参数:-verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+UseSerialGC -XX:SurvivorRatio=8 -XX:+PrintGCDetails</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation1， allocation2， allocation3， allocation4<span class="token punctuation">;</span>        allocation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//出现Minor GC</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token function">GC</span> <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span> <span class="token punctuation">[</span>DefNew<span class="token operator">:</span> 8159K<span class="token operator">-</span><span class="token operator">></span><span class="token function">626K</span><span class="token punctuation">(</span>9216K<span class="token punctuation">)</span>， <span class="token number">0.0041610</span> secs<span class="token punctuation">]</span> 8159K<span class="token operator">-</span><span class="token operator">></span><span class="token function">6770K</span><span class="token punctuation">(</span>19456K<span class="token punctuation">)</span>， <span class="token number">0.0042168</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span>， real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> Heap def <span class="token keyword">new</span> <span class="token class-name">generation</span>   total 9216K， used 4888K <span class="token punctuation">[</span><span class="token number">0x00000000fec00000</span>， <span class="token number">0x00000000ff600000</span>， <span class="token number">0x00000000ff600000</span><span class="token punctuation">)</span>  eden space 8192K，  <span class="token number">52</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000fec00000</span>， <span class="token number">0x00000000ff029840</span>， <span class="token number">0x00000000ff400000</span><span class="token punctuation">)</span>  from space 1024K，  <span class="token number">61</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000ff500000</span>， <span class="token number">0x00000000ff59c960</span>， <span class="token number">0x00000000ff600000</span><span class="token punctuation">)</span>  to   space 1024K，   <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000ff400000</span>， <span class="token number">0x00000000ff400000</span>， <span class="token number">0x00000000ff500000</span><span class="token punctuation">)</span> tenured generation   total 10240K， used 6144K <span class="token punctuation">[</span><span class="token number">0x00000000ff600000</span>， <span class="token number">0x0000000100000000</span>， <span class="token number">0x0000000100000000</span><span class="token punctuation">)</span>   the space 10240K，  <span class="token number">60</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000ff600000</span>， <span class="token number">0x00000000ffc00030</span>， <span class="token number">0x00000000ffc00200</span>， <span class="token number">0x0000000100000000</span><span class="token punctuation">)</span> Metaspace       used 3253K， capacity 4496K， committed 4864K， reserved 1056768K  <span class="token keyword">class</span> <span class="token class-name">space</span>    used 353K， capacity 388K， committed 512K， reserved 1048576KProcess finished with exit code <span class="token number">0</span></code></pre><h2 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h2><ul><li>大对象就是需要连续内存空间的Java对象</li><li>很长的字符串或者元素数量很庞大的数组</li><li>在程序中避免出现一群朝生夕灭的短命大对象</li><li>他容易导致内存明明还有不少空间就提前触发了垃圾收集，以获取足够的连续空间才能安置好他们</li><li>当复制对象时，大对象意味着高额的内存复制开销</li><li>-XX:PretenureSizeThreshold=3145728</li><li>可设置参数，指定大于设定值的对象直接在老年代分配，避免在Eden区以及两个Survivor区来回复制，产生大量的内存复制操作</li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>XX<span class="token operator">:</span>PretenureSizeThreshold<span class="token operator">=</span><span class="token number">3145728</span> <span class="token operator">-</span>verbose<span class="token operator">:</span>gc <span class="token operator">-</span>Xms20M <span class="token operator">-</span>Xmx20M <span class="token operator">-</span>Xmn10M <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseSerialGC <span class="token operator">-</span>XX<span class="token operator">:</span>SurvivorRatio<span class="token operator">=</span><span class="token number">8</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCDetails</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation1<span class="token punctuation">;</span>        allocation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接分配在老年代</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">Heap def <span class="token keyword">new</span> <span class="token class-name">generation</span>   total 9216K， used 2015K <span class="token punctuation">[</span><span class="token number">0x00000000fec00000</span>， <span class="token number">0x00000000ff600000</span>， <span class="token number">0x00000000ff600000</span><span class="token punctuation">)</span>  eden space 8192K，  <span class="token number">24</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000fec00000</span>， <span class="token number">0x00000000fedf7e90</span>， <span class="token number">0x00000000ff400000</span><span class="token punctuation">)</span>  from space 1024K，   <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000ff400000</span>， <span class="token number">0x00000000ff400000</span>， <span class="token number">0x00000000ff500000</span><span class="token punctuation">)</span>  to   space 1024K，   <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000ff500000</span>， <span class="token number">0x00000000ff500000</span>， <span class="token number">0x00000000ff600000</span><span class="token punctuation">)</span> tenured generation   total 10240K， used 4096K <span class="token punctuation">[</span><span class="token number">0x00000000ff600000</span>， <span class="token number">0x0000000100000000</span>， <span class="token number">0x0000000100000000</span><span class="token punctuation">)</span>   the space 10240K，  <span class="token number">40</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000ff600000</span>， <span class="token number">0x00000000ffa00010</span>， <span class="token number">0x00000000ffa00200</span>， <span class="token number">0x0000000100000000</span><span class="token punctuation">)</span> Metaspace       used 3210K， capacity 4496K， committed 4864K， reserved 1056768K  <span class="token keyword">class</span> <span class="token class-name">space</span>    used 352K， capacity 388K， committed 512K， reserved 1048576K</code></pre><h2 id="长期存活的对象将进入老年代"><a href="#长期存活的对象将进入老年代" class="headerlink" title="长期存活的对象将进入老年代"></a>长期存活的对象将进入老年代</h2><ul><li>每个对象对象头定义了一个对象年龄计数器</li><li>对象通常在Eden区诞生，如果经过第一次Minor GC仍然存活，并且能被Survivor容纳，则被移动到Survivor空间中，并且年龄设置为1</li><li>对象在Survivor区每熬过一次Minor GC，年龄+1</li><li>增长到15时，就会被晋升到老年代，晋升阈值通过-XX:MaxTenuringThreshold设置</li><li>当-XX:MaxTenuringThreshold设置为1时，allocation1在第二次GC发生时进入老年代</li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintTenuringDistribution <span class="token operator">-</span>XX<span class="token operator">:</span>MaxTenuringThreshold<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">-</span>verbose<span class="token operator">:</span>gc <span class="token operator">-</span>Xms20M <span class="token operator">-</span>Xmx20M <span class="token operator">-</span>Xmn10M <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseSerialGC <span class="token operator">-</span>XX<span class="token operator">:</span>SurvivorRatio<span class="token operator">=</span><span class="token number">8</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCDetails</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation1， allocation2， allocation3<span class="token punctuation">;</span>        allocation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>_1MB <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//什么时候进入老年代决定于-XX:MaxTenuringThreshold设置</span>        allocation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation3 <span class="token operator">=</span> null<span class="token punctuation">;</span>        allocation3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token function">GC</span> <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span> <span class="token punctuation">[</span>DefNewDesired survivor size <span class="token number">524288</span> bytes， <span class="token keyword">new</span> <span class="token class-name">threshold</span> <span class="token function">1</span> <span class="token punctuation">(</span>max <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span> age   <span class="token number">1</span><span class="token operator">:</span>     <span class="token number">886440</span> bytes，     <span class="token number">886440</span> total<span class="token operator">:</span> 6367K<span class="token operator">-</span><span class="token operator">></span><span class="token function">865K</span><span class="token punctuation">(</span>9216K<span class="token punctuation">)</span>， <span class="token number">0.0055780</span> secs<span class="token punctuation">]</span> 6367K<span class="token operator">-</span><span class="token operator">></span><span class="token function">4961K</span><span class="token punctuation">(</span>19456K<span class="token punctuation">)</span>， <span class="token number">0.0056123</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span>， real<span class="token operator">=</span><span class="token number">0.01</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token function">GC</span> <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span> <span class="token punctuation">[</span>DefNewDesired survivor size <span class="token number">524288</span> bytes， <span class="token keyword">new</span> <span class="token class-name">threshold</span> <span class="token function">1</span> <span class="token punctuation">(</span>max <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span> age   <span class="token number">1</span><span class="token operator">:</span>        <span class="token number">680</span> bytes，        <span class="token number">680</span> total<span class="token operator">:</span> 5045K<span class="token operator">-</span><span class="token operator">></span><span class="token function">0K</span><span class="token punctuation">(</span>9216K<span class="token punctuation">)</span>， <span class="token number">0.0012428</span> secs<span class="token punctuation">]</span> 9141K<span class="token operator">-</span><span class="token operator">></span><span class="token function">4958K</span><span class="token punctuation">(</span>19456K<span class="token punctuation">)</span>， <span class="token number">0.0012696</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span>， real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> Heap def <span class="token keyword">new</span> <span class="token class-name">generation</span>   total 9216K， used 4235K <span class="token punctuation">[</span><span class="token number">0x00000000fec00000</span>， <span class="token number">0x00000000ff600000</span>， <span class="token number">0x00000000ff600000</span><span class="token punctuation">)</span>  eden space 8192K，  <span class="token number">51</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000fec00000</span>， <span class="token number">0x00000000ff022a70</span>， <span class="token number">0x00000000ff400000</span><span class="token punctuation">)</span>  from space 1024K，   <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000ff400000</span>， <span class="token number">0x00000000ff4002a8</span>， <span class="token number">0x00000000ff500000</span><span class="token punctuation">)</span>  to   space 1024K，   <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000ff500000</span>， <span class="token number">0x00000000ff500000</span>， <span class="token number">0x00000000ff600000</span><span class="token punctuation">)</span> tenured generation   total 10240K， used 4958K <span class="token punctuation">[</span><span class="token number">0x00000000ff600000</span>， <span class="token number">0x0000000100000000</span>， <span class="token number">0x0000000100000000</span><span class="token punctuation">)</span>   the space 10240K，  <span class="token number">48</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000ff600000</span>， <span class="token number">0x00000000ffad7800</span>， <span class="token number">0x00000000ffad7800</span>， <span class="token number">0x0000000100000000</span><span class="token punctuation">)</span> Metaspace       used 3286K， capacity 4496K， committed 4864K， reserved 1056768K  <span class="token keyword">class</span> <span class="token class-name">space</span>    used 357K， capacity 388K， committed 512K， reserved 1048576K</code></pre><h2 id="动态对象年龄判断"><a href="#动态对象年龄判断" class="headerlink" title="动态对象年龄判断"></a>动态对象年龄判断</h2><p>如果在Survivor空间中相同年龄所有对象大小的总和大于Survovor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代</p><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintTenuringDistribution <span class="token operator">-</span>XX<span class="token operator">:</span>MaxTenuringThreshold<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">-</span>verbose<span class="token operator">:</span>gc <span class="token operator">-</span>Xms20M <span class="token operator">-</span>Xmx20M <span class="token operator">-</span>Xmn10M <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseSerialGC <span class="token operator">-</span>XX<span class="token operator">:</span>SurvivorRatio<span class="token operator">=</span><span class="token number">8</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCDetails</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation1， allocation2， allocation3， allocation4<span class="token punctuation">;</span>        allocation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>_1MB <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//allocation1 + allocation2 大于 survivor空间的一半了</span>        allocation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>_1MB <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation4 <span class="token operator">=</span> null<span class="token punctuation">;</span>        allocation4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token function">GC</span> <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span> <span class="token punctuation">[</span>DefNewDesired survivor size <span class="token number">524288</span> bytes， <span class="token keyword">new</span> <span class="token class-name">threshold</span> <span class="token function">1</span> <span class="token punctuation">(</span>max <span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">-</span> age   <span class="token number">1</span><span class="token operator">:</span>    <span class="token number">1048576</span> bytes，    <span class="token number">1048576</span> total<span class="token operator">:</span> 6623K<span class="token operator">-</span><span class="token operator">></span><span class="token function">1024K</span><span class="token punctuation">(</span>9216K<span class="token punctuation">)</span>， <span class="token number">0.0039616</span> secs<span class="token punctuation">]</span> 6623K<span class="token operator">-</span><span class="token operator">></span><span class="token function">5234K</span><span class="token punctuation">(</span>19456K<span class="token punctuation">)</span>， <span class="token number">0.0040033</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span>， real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token function">GC</span> <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span> <span class="token punctuation">[</span>DefNewDesired survivor size <span class="token number">524288</span> bytes， <span class="token keyword">new</span> <span class="token class-name">threshold</span> <span class="token function">15</span> <span class="token punctuation">(</span>max <span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">-</span> age   <span class="token number">1</span><span class="token operator">:</span>        <span class="token number">176</span> bytes，        <span class="token number">176</span> total<span class="token operator">:</span> 5204K<span class="token operator">-</span><span class="token operator">></span><span class="token function">0K</span><span class="token punctuation">(</span>9216K<span class="token punctuation">)</span>， <span class="token number">0.0011999</span> secs<span class="token punctuation">]</span> 9414K<span class="token operator">-</span><span class="token operator">></span><span class="token function">5234K</span><span class="token punctuation">(</span>19456K<span class="token punctuation">)</span>， <span class="token number">0.0012304</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span>， real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> Heap def <span class="token keyword">new</span> <span class="token class-name">generation</span>   total 9216K， used 4234K <span class="token punctuation">[</span><span class="token number">0x00000000fec00000</span>， <span class="token number">0x00000000ff600000</span>， <span class="token number">0x00000000ff600000</span><span class="token punctuation">)</span>  eden space 8192K，  <span class="token number">51</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000fec00000</span>， <span class="token number">0x00000000ff0227f0</span>， <span class="token number">0x00000000ff400000</span><span class="token punctuation">)</span>  from space 1024K，   <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000ff400000</span>， <span class="token number">0x00000000ff4000b0</span>， <span class="token number">0x00000000ff500000</span><span class="token punctuation">)</span>  to   space 1024K，   <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000ff500000</span>， <span class="token number">0x00000000ff500000</span>， <span class="token number">0x00000000ff600000</span><span class="token punctuation">)</span> tenured generation   total 10240K， used 5234K <span class="token punctuation">[</span><span class="token number">0x00000000ff600000</span>， <span class="token number">0x0000000100000000</span>， <span class="token number">0x0000000100000000</span><span class="token punctuation">)</span>   the space 10240K，  <span class="token number">51</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000ff600000</span>， <span class="token number">0x00000000ffb1c9a0</span>， <span class="token number">0x00000000ffb1ca00</span>， <span class="token number">0x0000000100000000</span><span class="token punctuation">)</span> Metaspace       used 3247K， capacity 4496K， committed 4864K， reserved 1056768K  <span class="token keyword">class</span> <span class="token class-name">space</span>    used 353K， capacity 388K， committed 512K， reserved 1048576K</code></pre><h2 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h2><ul><li>在Minor GC前，检查老年代最大可用连续空间是否大于新生代的所有对象空间，如果成立，则这次Minor GC安全。</li><li>否则要看是否允许担保失败。如果允许，则检查老年代最大可用连续空间是否大于历次晋升到老年代的平均大小，如果大于，将尝试进行一次Minor GC。如果小于，或者不允许担保，则Full GC。</li><li>新生代中，当出现大量对象在Minor GC后仍然存活的情况，就把Survivor无法容纳的对象直接送入老年代，担保前提是老年代本身有容纳这些对象的剩余空间。</li><li>但一共有多少对象会在这次回收中存活下来在实际回收完成之前是无法明确知道的，只能取之前每一次回收晋升老年代对象容量的平均大小作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间</li><li>担保失败则又得Full GC，绕的圈子最大，但一般打开，避免Full GC过于频繁</li><li>在JDK7及之后。不能设置参数影响空间分配担保策略。只要老年代最大可用连续空间大于新生代的所有对象空间，或者大于历次晋升到老年代的平均大小，就进行Minor GC，负责Full GC（相当于一定会冒险）</li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 垃圾收集算法 </tag>
            
            <tag> GC Roots </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存区域与内存溢出异常</title>
      <link href="posts/1b3d1a0.html"/>
      <url>posts/1b3d1a0.html</url>
      
        <content type="html"><![CDATA[<h1 id="内存区域"><a href="#内存区域" class="headerlink" title="内存区域"></a>内存区域</h1><h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><ul><li>当前线程所执行字节码的行号指示器</li><li>字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令</li><li>某一刻，一个处理器只会执行一个线程中的指令</li><li>为了线程切换后能够恢复到正确的执行位置，每条线程都需要一个独立的程序计数器</li><li>即线程私有的内存</li><li>Java方法，则记录正在执行的虚拟机字节码指令的地址</li><li>Native方法，则计数器值为空</li><li>唯一一个没有OutOfMemoryError情况的区域</li></ul><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><ul><li>线程私有，生命周期与线程相同</li><li>每个方法被调用直到执行完毕的过程，就对应一个栈帧从入栈到出栈的过程</li><li>每个方法被执行时，JVM都会创建一个栈帧</li></ul><h4 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h4><ul><li>局部变量表<ul><li>存储编译器可知的数据：基本数据类型、对象引用（可能是一个指向对象起始地址的引用指针、也可能是指向一个代表对象的句柄）、returnAddress类型（指向一条字节码指令的地址）</li><li>以局部变量槽存储，其中64位的long和double占用两个变量槽</li><li>所需的内存空间在编译期间完成分配</li><li>进入一个方法时，这个方法需要在栈帧中分配多大的局部变量空间完全确定</li></ul></li><li>操作数栈</li><li>动态连接</li><li>方法出口</li></ul><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><ul><li>StackOverflowError异常：线程请求的栈深度大于虚拟机所允许的深度</li><li>OutOfMemoryError异常<ul><li>如果虚拟机栈容量允许动态扩展，当栈扩展时无法申请到足够的内存时</li><li>HotSpot栈容量不允许动态扩展，所以不会由于虚拟机栈无法动态扩展而导致OOM，只要线程申请栈空间成功就不会OOM，但是申请时就失败则仍然会OOM</li></ul></li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><ul><li>虚拟机栈是为JVM执行Java方法（字节码）服务</li><li>本地方法栈是为了使用Native方法服务</li><li>HotSpot虚拟机把虚拟机栈，本地方法栈合二为一了</li></ul><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><ul><li>Java堆是被所有线程共享的一块内存区域，在JVM启动时创建</li><li>用于存放对象实例</li><li>几乎所有对象实例都在这里分配内存<ul><li>所有的对象实例以及数组都应在堆上分配</li><li>由于逃逸分析技术，一些优化手段如栈上分配、标量替换等，使得对象实例都分配在堆上不是这么绝对</li></ul></li><li>是垃圾收集器管理的内存区域</li><li>可以划分出多个线程私有的分配缓冲区以提升对象分配时的效率：Thread Local Allocation Buffer(TLAB)</li><li>可以处于物理上不连续的内存空间中，但在逻辑上是连续的。但对于大对象，例如数组对象，多数虚拟机都处于实现简单、存储高效的考虑，可能要求连续的内存空间</li><li>可扩展，通过参数-Xms、-Xmx设定</li><li>如果堆中没有内存完成实例分配，并且堆无法扩展，则OOM异常</li></ul><h4 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h4><p>字符串池/字符串常量池/字符串对象池/String Pool/String Table 都可以看作一个东西。</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><ul><li>是各个线程共享的内存区域</li><li>存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存数据等</li><li>内存回收目标主要是针对常量池的回收和类型的卸载</li><li>方法区无法满足新的内存分配需求时，抛出OOM异常</li></ul><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><ul><li>运行时常量池<ul><li>保存Class文件中描述的符号引用</li><li>由符号引用翻译出来的直接引用</li><li>与Class文件常量池区别是局部动态性。即常量不一定只有编译期产生，即并不是预置于Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可以把新的常量放入池中，例如String的intern（）方法。</li><li>无法满足新的内存分配需求时，抛出OOM异常</li></ul></li><li>class文件信息<ul><li>类的版本、字段、方法、接口等</li><li>常量池表：存放编译期生成的各种字面量与符号引用，在类加载后存放到方法区的运行时常量池中</li></ul></li></ul><h4 id="元空间"><a href="#元空间" class="headerlink" title="元空间"></a>元空间</h4><ul><li>元空间” 和 “方法区”，一个是HotSpot 的具体实现技术，一个是JVM规范的抽象定义；</li><li>类型信息全部移到元空间中</li><li>元空间是使用本地内存（Native Memory）实现的，也就是说它的内存是不在虚拟机内的，所以可以理论上物理机器还有多个内存就可以分配，而不用再受限于JVM本身分配的内存了。</li></ul><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><ul><li>不是运行时数据区的一部分，但是频繁使用到，也会OOM</li><li>NIO引入了基于管道与缓冲区的IO方式，可以使用Native函数库直接分配堆外内存</li><li>直接内存的分配不会受到堆的大小限制，但受到本机总内存限制</li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h3><ul><li>能否在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析、初始化过。没有则执行类加载过程</li><li>为新生对象分配内存，类加载完成时即可确定对象所需的内存大小<ul><li><strong>堆中内存分配</strong><ul><li>绝对规整则采用<strong>指针碰撞</strong>，所有被使用过的内存都被放在一边，空闲的内存在另一边，中间放这一个指针作为分界点的指示器。分配内存就是把那个指针向空闲空间方向挪动一段和对象内存大小相等的距离</li><li>否则<strong>空闲列表</strong>：在分配时从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录</li><li>是否规整由所采用的垃圾收集器是否带有空间压缩整理（Compact）的能力决定：Serial、ParNew带压缩整理、CMS基于清除（Sweep）算法，不带压缩整理</li></ul></li><li><strong>分配内存有并发性</strong><ul><li>可以对分配内存空间的动作进行同步处理，采用<strong>CAS配上失败重试</strong>来保证更新操作的原子性</li><li>或把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在堆中预先分配一小块内存，称为本地线程分配缓存<strong>TLAB</strong>，哪个线程需要分配内存，就在他的TLAB中分配，本地缓冲区用完才需要同步锁定。</li></ul></li></ul></li><li>为分配到的内存空间（不包括对象头）都初始化为零值，保证了对象的实例字段在代码中可以不赋初始值即可使用</li><li>对对象进行相应设置（存放在对象头中）：这个对象是哪个类的实例、如何能找到类的元数据信息、对象的哈希码（延后到真正调用Object::HashCode()方法才计算）、对象的GC分代年龄</li><li>构造函数<init>()方法，按照程序员的意愿对对象进行初始化</li></ul><h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h3><ul><li>对象头(Header)<ul><li><strong>Mark Word</strong><ul><li>存储自身的运行时数据，如HashCode、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳</li><li>在32位和64位（未开启压缩指针）虚拟机中分别位32比特和64比特</li><li>有着动态定义的数据结构，根据对象的状态复用自己的存储空间</li></ul></li><li><strong>类型指针</strong><ul><li>指向对象的类型元数据的指针</li><li>查找对象的元数据信息并不一定要经过对象本身</li></ul></li><li><strong>记录数组长度的数据</strong><ul><li>虚拟机可以通过元数据信息确定Java对象的大小，但是如果数组的长度不确定，无法通过元数据信息推断数组的大小</li></ul></li></ul></li><li>实例数据（Instance Data)<ul><li>对象真正存储的有效信息，即定义的各种类型的字段内容</li><li>无论是从父类继承的还是子类中定义的都记录</li><li>存储顺序策略<ul><li>longs/doubles、ints、shorts、chars、bytes/booleans、oops（Ordinary Object Pointers）</li><li>相同宽度的字段分配在一起存放</li><li>满足上面情况下，父类中定义的变量在子类之前</li></ul></li></ul></li><li>对齐填充（Padding）<ul><li>对象起始地址必须是8字节的整数倍</li><li>对象头已经是8字节的整数倍了（1倍或两倍）</li></ul></li></ul><h3 id="对象访问定位"><a href="#对象访问定位" class="headerlink" title="对象访问定位"></a>对象访问定位</h3><ul><li>通过栈上的reference数据来操作堆上的具体对象</li><li>访问堆对象具体位置<ul><li>句柄访问<ul><li>划分一部分为句柄池</li><li>reference中存储对象的句柄地址</li><li>句柄中包含对象实例数据和类型数据各自具体的地址</li><li>存储的是稳定句柄地址，对象移动只改变句柄，不需要改变reference</li></ul></li><li>直接指针访问<ul><li>reference中直接存储对象地址</li><li>速度更快，节省了一次指针定位的时间开销</li><li>HotSpot采用直接指针访问</li></ul></li></ul></li></ul><h2 id="Java堆异常"><a href="#Java堆异常" class="headerlink" title="Java堆异常"></a>Java堆异常</h2><p>只要不断创建对象，并且保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，总容量触及最大堆容量限制即OOM</p><p>设置堆最小值 -Xms参数和堆最大值参数 -Xmx一样即可避免堆自动扩展</p><p>-XX:+HeapDumpOnOutOfMemoryError 可以让虚拟机再出现内存溢出异常时Dump出当前内存堆存储快照以便事后分析</p><pre><code>-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tongji<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapOOM</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OOMObject</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>OOMObject<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OOMObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>OutOfMemoryError<span class="token operator">:</span> Java heap space</code></pre><h3 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h3><ul><li>通过内存映像分析工具对Dump出来的堆存储快照进行分析</li><li>首先确认内存中导致OOM的对象是否有必要存在,即是出现内存泄漏,还是内存溢出<ul><li>内存泄漏,则查看泄漏对象到GC Roots的引用链，找到泄漏对象是通过怎样的引用路径、与哪些GC Roots相关联，才导致垃圾收集器无法回收他们</li><li>内存溢出，则内存中对象确实是必须存活的，就应该检查堆参数设置（-Xms -Xmx），与机器内存对比，是否有向上调整的空间，再从代码中检查是否存在某些对象生命周期过长、持有状态时间过长、存储结构设置不合理等，尽量减少程序运行期的内存消耗</li></ul></li></ul><h2 id="虚拟机栈和本地方法栈溢出"><a href="#虚拟机栈和本地方法栈溢出" class="headerlink" title="虚拟机栈和本地方法栈溢出"></a>虚拟机栈和本地方法栈溢出</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>线程请求的栈深度大于虚拟机所允许的深度抛出StackOverflowError异常，例如调用的方法太多（递归）</li><li>如果虚拟机栈容量允许动态扩展，当栈扩展时无法申请到足够的内存时抛出OutOfMemoryError异常<ul><li>HotSpot栈容量不允许动态扩展，所以不会由于虚拟机栈无法动态扩展而导致OOM，只要线程申请栈空间成功就不会OOM，但是申请时就失败则仍然会OOM</li><li>否则线程运行时不会因为扩展而导致内存溢出，只会因为栈容量无法容纳新的栈帧导致StackOverflowError异常</li></ul></li><li>写一个死递归程序触发</li></ul><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><ul><li>使用-Xss减少栈内存容量</li><li>定义大量本地变量，增大次方法帧中本地变量表的长度</li><li>无论是栈帧太大还是虚拟机容量太小，当新的栈帧内存无法分配时，抛出的都是StackOverflowError异常</li><li>有明确的错误栈帧可供分析，栈深度达到1000-2000完全没问题，对于正常的方法调用完全足够了</li></ul><h3 id="使用-Xss减少栈内存容量"><a href="#使用-Xss减少栈内存容量" class="headerlink" title="使用-Xss减少栈内存容量"></a>使用-Xss减少栈内存容量</h3><pre><code>-Xss128k</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tongji<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackSOF</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> stackLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stackLength<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StackSOF oom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StackSOF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            oom<span class="token punctuation">.</span><span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack length:"</span><span class="token operator">+</span>oom<span class="token punctuation">.</span>stackLength<span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>stack length:985java.lang.StackOverflowError</code></pre><h3 id="定义大量本地变量，增大次方法帧中本地变量表的长度"><a href="#定义大量本地变量，增大次方法帧中本地变量表的长度" class="headerlink" title="定义大量本地变量，增大次方法帧中本地变量表的长度"></a>定义大量本地变量，增大次方法帧中本地变量表的长度</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tongji<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackSOF</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> stackLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> unused0<span class="token punctuation">,</span> unused1<span class="token punctuation">,</span> unused2<span class="token punctuation">,</span> unused3<span class="token punctuation">;</span>        <span class="token keyword">long</span> unused10<span class="token punctuation">,</span> unused11<span class="token punctuation">,</span> unused12<span class="token punctuation">,</span> unused13<span class="token punctuation">;</span>        <span class="token keyword">long</span> unused20<span class="token punctuation">,</span> unused21<span class="token punctuation">,</span> unused22<span class="token punctuation">,</span> unused23<span class="token punctuation">;</span>        stackLength<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unused0 <span class="token operator">=</span> unused1 <span class="token operator">=</span> unused2 <span class="token operator">=</span> unused3 <span class="token operator">=</span>                unused10 <span class="token operator">=</span> unused11 <span class="token operator">=</span> unused12 <span class="token operator">=</span> unused13 <span class="token operator">=</span>                        unused20 <span class="token operator">=</span> unused21 <span class="token operator">=</span> unused22 <span class="token operator">=</span> unused23 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StackSOF oom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StackSOF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            oom<span class="token punctuation">.</span><span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack length:"</span> <span class="token operator">+</span> oom<span class="token punctuation">.</span>stackLength<span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>stack length:311java.lang.StackOverflowError</code></pre><h2 id="方法区和运行时常量池的溢出"><a href="#方法区和运行时常量池的溢出" class="headerlink" title="方法区和运行时常量池的溢出"></a>方法区和运行时常量池的溢出</h2><ul><li>基本思路是运行时产生大量的类去填满方法区直到溢出为止</li><li>许多框架如Spring，都会使用CGLib这类字节码技术</li><li>当增强的类越多，就需要越大的方法区以保证动态生成的新类型可以载入内存</li><li>方法区是常见的内存溢出异常，因为一个类如果要被垃圾收集器回收，要达成的条件比较苛刻。在经常运行生成大量动态类的应用场景中，就应该特别关注这些类的回收状况</li><li>JDK8后，使用了元空间,正常的动态创建新类型的测试用例很难迫使虚拟机产生方法区的溢出异常了</li><li>-XX:MaxMetaspaceSize设置元空间最大值，默认是-1，即不限制，或者说只限制与本地内存大小</li><li>-XX:MetaspaceSize指定元空间初始空间大小，以字节为单位，达到该值则触发垃圾收集进行类型卸载</li><li>-XX:MinMetaspaceFreeRatio在垃圾收集之后控制最小的元空间剩余容量百分比，可以减少因为元空间不足导致的垃圾收集的频率</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tongji<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>Enhancer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>MethodInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>MethodProxy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaMethodAreaOOM</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OOMObject</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>OOMObject<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            enhancer<span class="token punctuation">.</span><span class="token function">setUseCache</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                    <span class="token keyword">return</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>objects<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="本地直接内存溢出"><a href="#本地直接内存溢出" class="headerlink" title="本地直接内存溢出"></a>本地直接内存溢出</h2><ul><li>容量大小通过-XX:MaxDirectMemorySize指定,默认与Java堆最大值(-Xmx)一致</li><li>由直接内存溢出明显特征是Heap Dump中看不见什么异常情况,如果发现内存溢出后Dump文件很小,而又使用了DirectMemory(如NIO),则可以重点检查下直接内存方面的原因</li><li>通过反射获取Unsafe类，并不断分配内存给静态常量</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tongji<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Unsafe<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectMemoryOOM</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalAccessException <span class="token punctuation">{</span>        Field unsafeField <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        unsafeField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Unsafe unsafe <span class="token operator">=</span> <span class="token punctuation">(</span>Unsafe<span class="token punctuation">)</span> unsafeField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            unsafe<span class="token punctuation">.</span><span class="token function">allocateMemory</span><span class="token punctuation">(</span>_1MB<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>OutOfMemoryError    at sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Unsafe<span class="token punctuation">.</span><span class="token function">allocateMemory</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>tongji<span class="token punctuation">.</span>test<span class="token punctuation">.</span>DirectMemoryOOM<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>DirectMemoryOOM<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JVM学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 运行时数据区域 </tag>
            
            <tag> OOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAS与原子类</title>
      <link href="posts/639a97cb.html"/>
      <url>posts/639a97cb.html</url>
      
        <content type="html"><![CDATA[<h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h1><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><ul><li>基于冲突检测的乐观并发策略</li><li>不管风险，先进行操作，如果没有其他线程争用共享数据，就操作成功。否则进行其他补偿操作，如不断地重试，直到出现没有竞争的共享数据为止。</li><li>不需要把线程阻塞挂起，非阻塞同步，无锁编程</li><li>测试并设置（Test And Set）</li><li>比较并交换 Compare and Swap CAS</li><li>使用cmpxchg指令完成CAS功能</li><li>CAS操作通过sun.misc.Unsafe的compareAndSwapInt()和compareAndSwapLong()等提供</li><li>使用封装好的JUC下的类，compareAndSet()，getAndIncrement()等</li><li>如果CAS失败，则会一直尝试，会给CPU带来很大的开销。</li><li>只能保证一个共享变量的原子操作</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>读取当前值E，计算结果值V，比较E和主内存的值E’，如果没人动过，则将主内存的值更新为V，结束</li><li>不需要加锁，是一种乐观锁</li><li>是一条CPU原语</li><li>内存位置（变量的内存地址 V)，旧的预期值（A)，准备设置的新值（B)。<ul><li>仅当V符合A时，才会用B更新V的值，否则不更新</li><li>不管是否更新V值，都会返回V的旧值</li><li>是原子操作，执行期间不会被其他线程中断</li></ul></li></ul><p>等价类比：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">compareAndSwap</span><span class="token punctuation">(</span><span class="token keyword">int</span> expectValue， <span class="token keyword">int</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> oldValue <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue <span class="token operator">==</span> expectValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h2><p>其他线程修改数次最后值和原值相同</p><p>可以修改版本号，添加时间戳</p><p>使用原子引用类AtomicStampedReference，通过控制变量值的版本来保证CAS的正确性</p><p>需要解决ABA问题，采用传统互斥同步比原子类更高效</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tongji<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicStampedReference<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*输出:t3 第一次版本号: 1t4 第一次版本号: 1t3 第二次版本号: 2t3 第三次版本号: 3t4 修改成功与否: false当前最新值:100 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//带时间戳的原子引用</span>    <span class="token comment" spellcheck="true">//参数为初始值，版本号</span>    <span class="token keyword">static</span> AtomicStampedReference<span class="token operator">&lt;</span>Integer<span class="token operator">></span> atomicStampedReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">100</span>，<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 第一次版本号: "</span><span class="token operator">+</span>atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//模拟了一次ABA问题，但是因为有版本号，所以t4线程并不进行更新</span>            atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">100</span>， <span class="token number">101</span>， atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>， atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 第二次版本号: "</span><span class="token operator">+</span>atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">101</span>， <span class="token number">100</span>， atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>， atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 第三次版本号: "</span><span class="token operator">+</span>atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>，<span class="token string">"t3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 第一次版本号: "</span><span class="token operator">+</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">boolean</span> result <span class="token operator">=</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">100</span>， <span class="token number">2019</span>， stamp， stamp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 修改成功与否: "</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前最新值:"</span><span class="token operator">+</span>atomicStampedReference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>，<span class="token string">"t4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h1><p>AtomicInteger调用unsafe进行自增操作，如果修改过程中遇到其他线程竞争导致没有修改成功，就在while里死循环，直到修改成功</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li>get()</li><li>getAndSet(int newValue)</li><li>getAndIncrement()</li><li>boolean compareAndSet(int expect， int update)</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><pre class=" language-java"><code class="language-java">AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> atomicInteger<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Unsafe unsafe <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//this当前对象，valueOffset该值的地址偏移量</span>    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span>， valueOffset， <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span>Object var1， <span class="token keyword">long</span> var2， <span class="token keyword">int</span> var4<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> var5<span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIntVolatile</span><span class="token punctuation">(</span>var1， var2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//因为有可能是这里被挂起，所以获取的值不是最新的</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>var1， var2， var5， var5 <span class="token operator">+</span> var4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> var5<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//可以简化想象var1， var2或var5是当前值，var4是1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*var1， var2 拼接起来得到主内存的值var5相当于自己工作内存的值如果这两个比较相等，则将var5 + var4的值赋给(var1， var2)内存地址里，即实现了i++this.compareAndSwapInt(var1， var2， var5， var5 + var4)*/</span></code></pre><p>底层:<code>compareAndSwapInt</code>是一个<code>native</code>方法</p><p>跟到c++代码后，调用<code>lock cmpxchg 指令</code>，即<code>CAS</code>在硬件层面上有指令支持</p><p><code>cmpxchg</code>仅仅比较并交换，没有确保原子性，原子性是<code>lock</code>保证的</p><p><code>lock</code>指令在执行后面指令的时候锁定一个北桥信号</p><h1 id="AtomicReference"><a href="#AtomicReference" class="headerlink" title="AtomicReference"></a>AtomicReference</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicReference<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//原子引用线程</span>    AtomicReference<span class="token operator">&lt;</span>Thread<span class="token operator">></span> atomicReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" come in"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        第一个进来的锁发现是null(说明没人锁住)，就CAS成功，返回true，就退出循环，不被锁住        之后进来的，发现不是null，于是CAS不成功，返回false，于是一直卡在循环，直到存储的再次为null         */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>null， thread<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//释放锁，给下一个线程使用</span>        atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>thread， null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" come out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Main main <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            main<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            main<span class="token punctuation">.</span><span class="token function">myUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>，<span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//保证t1线程先启动</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            main<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            main<span class="token punctuation">.</span><span class="token function">myUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>，<span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            t1 come in            t2 come in            t1 come out            t2 come out         */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> CAS </tag>
            
            <tag> AtomicReference </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Synchronized</title>
      <link href="posts/f5dbca44.html"/>
      <url>posts/f5dbca44.html</url>
      
        <content type="html"><![CDATA[<h1 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h1><p>有进行线程唤醒和阻塞带来的性能开销，是阻塞同步</p><p>是悲观的并发策略，认为不去做同步措施，就肯定出问题，所以无论共享数据是否出现竞争，都会进行加锁</p><p>互斥同步：指多个线程并发访问共享数据时，保证共享数据在同一个时刻只被一个线程使用，互斥是实现同步的一个手段</p><h2 id="基本含义"><a href="#基本含义" class="headerlink" title="基本含义"></a>基本含义</h2><p>它包含两部分：一是作为锁的对象引用，二是由这个锁保护的代码块。</p><p>它保证无论是通过正常的控制路径退出，还是通过从代码块抛出异常退出，都会在退出同步代码块时自动释放锁</p><p>java的内置锁是互斥锁，最多只有一个线程持有该锁，所以由这个锁保护的同步代码块会以原子的方式执行。</p><p>在编译后，会在同步块前后形成monitorenter，monitorexit两条字节码指令</p><p>需要一个reference类型的参数来指明要锁定和解锁的对象</p><p>如果明确指定了对象参数，就以这个对象的引用作为reference</p><p>如果没有明确指定，则根据synchronized修饰的方法类型决定线程要持有的锁，作用于实例方法上，则锁住的是该类的实例对象。作用于静态方法上，则锁住的是类对象（Class对象）</p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>一个对象中如果有多个synchronized方法，则某一时刻内，只要一个线程调用了其中一个synchronized方法，其他线程就只能等待。也就是同一时刻内，只有唯一一个线程能访问这些synchronized方法，锁住的是当前对象this，其他线程都不能进入到当前对象的其他synchronized方法（同一个手机（对象）中的多个应用（方法），一次只能由一个人（线程）用手机）</p><p>在执行monitorenter时，首先要尝试获取对象的锁。如果这个对象没有被锁定，或者当前线程已经持有这个对象的锁，则把锁的计数器+1，执行monitorexit时将锁计数器-1。一旦计数器为0，则释放锁。如果获取对象锁失败，当前线程就应被阻塞等待，直到请求锁定的对象被持有他的线程释放为止</p><p>被synchronized修饰的同步块对同一条线程是可重入的</p><p>被synchronized关键字修饰的同步块在持有锁的线程释放锁之前，会无条件阻塞后面其他线程的进入。</p><h1 id="synchronized锁升级"><a href="#synchronized锁升级" class="headerlink" title="synchronized锁升级"></a>synchronized锁升级</h1><h2 id="存储信息"><a href="#存储信息" class="headerlink" title="存储信息"></a>存储信息</h2><ul><li>正常状态:<code>hashCode</code>，分代年龄4位，默认值为15，是否是偏向锁</li><li><code>thread</code>指向了锁住的线程的指针</li></ul><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/20201019165828801.jpg" alt="20201019165828801"></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li>正常状态-偏向锁-轻量级锁(无锁，自旋锁，自适应自旋)-重量级锁</li><li>正常状态-偏向锁：即用54位的thread指向了当前线程的指针，下一个如果是那个线程则可以直接进去</li><li>偏向锁-轻量级锁：如果另外一个线程访问了该锁，则升级，即首先把thread中指针记录清空，然后大家使用CAS操作把自己的线程信息写到ptr_to_lock_record上</li><li>轻量级锁-重量级锁：默认自旋超过10次，或者等待的线程超过CPU核数的1/2，或者JVM自适应判断后升级</li></ul><h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h2><ul><li>消除数据在无竞争情况下的同步原语，连CAS操作也不做了</li><li>这个锁会偏向于第一个获得他的线程，执行过程中，该锁一直没有被其他线程获取，则持有偏向锁的线程将永远不需要再进行同步</li><li>当锁对象第一次被线程获取的时候，虚拟机会将对象头中的标志位设置为01，把偏向模式设置为1，表示进入偏向模式</li><li>同时使用CAS操作把获取到这个锁的线程的ID记录在对象的Mark Word中</li><li>如果CAS操作成功，持有偏向锁的线程以后每次进入这个锁的相关同步块时，JVM都可以不再进行任何同步操作</li><li>一旦出现另一个线程去尝试获取这个锁，偏向模式就马上宣告结束。根据锁对象目前是否处于被锁定状态决定是否撤销偏向，撤销后恢复到未锁定或轻量级锁定状态</li><li>可以提高带有同步但无竞争的程序性能，如果程序中大多数的锁都是被多个不同的线程访问，那偏向模式是多余的</li></ul><h3 id="HashCode"><a href="#HashCode" class="headerlink" title="HashCode"></a>HashCode</h3><ul><li>如果一个对象计算过HashCode，则应该保持该值不变</li><li>而绝大多数对象哈希码的来源Object::hashCode()返回的是对象的一致性哈希码，能强制保持不变</li><li>他通过在对象头中存储计算结果来保证第一次计算之后，再次调用该方法取得的哈希码值永远不会再发生改变。</li><li>因此，当一个对象已经计算过一致性哈希码后，他就再也无法进入偏向状态</li><li>如果一个对象正处于偏向状态，又需要计算一致性哈希码，则会立刻撤销偏向状态，锁膨胀为重量级锁</li></ul><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><ul><li>很多应用上，共享数据的锁定状态只会持续很短一段时间。可以让后面请求锁的那个线程稍等一下，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁。为了让线程等待，我们只须让线程执行一个忙循环。</li><li>虽然避免了线程切换的开销，但是占用处理器时间，如果占用时间长，会白白消耗处理器资源。所以自旋等待时间有一定限度</li><li>如果自旋超过了限定次数仍然没有获得锁（默认10次），则挂起线程</li></ul><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><ul><li>在没有多线程竞争的前提下，尽量减少传统的重量级锁使用操作系统互斥量产生的性能消耗</li><li>在代码即将进入同步块的时候，如果此对象没有被锁定（01），虚拟机将在当前线程的栈帧中建立一个名为锁记录（Lock Record)的空间，用于存储锁对象目前MarkWord的拷贝</li><li>将使用CAS操作尝试把对象的MarkWord更新为指向LockRecord的指针。如果更新成功，则代表该线程拥有这个对象的锁</li><li>并且Mark Word的锁标志位变为00，代表对象处于轻量级锁定状态</li><li>如果更新操作失败，就意味着至少有一个线程与当前线程竞争获取该对象的锁<ul><li>检查此对象的Mark Word是否指向当前线程的栈帧，是则说明该线程已经拥有该对象的锁，直接进入同步块执行即可</li><li>否则说明这个锁对象已经被其他线程抢占了</li><li>如果CAS 替换失败则说明当前时间锁对象已被某个线程占有，那么此时当前线程只有通过自旋的方式去获取锁。如果在自旋一定次数后仍为获得锁，那么轻量级锁将会升级成重量级锁。</li><li>如果出现两条以上的线程争用同一个锁，则膨胀为重量级锁，状态变为10，Mark Word存储指向重量级锁的指针，后面等待锁的线程必须进入阻塞状态</li></ul></li><li>解锁过程同样通过CAS操作，如果对象的Mark Word仍然指向线程的锁记录，就用CAS操作把对象当前Mark Word和复制的Displaced Mark Word替换回来。如果替换成功，则整个同步过程顺利完成。如果替换失败，则说明其他线程尝试过获取该锁，就要在释放锁的同时，唤醒被挂起的线程</li><li>对于绝大部分的锁，在整个同步周期内都是不存在竞争的。如果没有竞争，轻量级锁通过CAS操作成功避免了使用互斥量的开销。但如果确实有竞争，轻量级锁反而比重量级锁更慢</li></ul><h3 id="自适应自旋"><a href="#自适应自旋" class="headerlink" title="自适应自旋"></a>自适应自旋</h3><ul><li>自旋的时间不是固定的，而是由前一个在同一个锁上的自旋时间以及锁的拥有者的状态来决定</li><li>如果对同一个锁对象，自旋等待刚刚成功获取过锁，则运行等待更久（例如100次忙循环）</li><li>如果自旋很水获得过锁，则可能直接忽略自旋</li><li>随着程序运行时间的增长与性能监控信息的不断完善，虚拟机对程序锁的状况就会越来越精确</li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> Synchronized </tag>
            
            <tag> 锁升级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阻塞队列与AQS</title>
      <link href="posts/b4c02da2.html"/>
      <url>posts/b4c02da2.html</url>
      
        <content type="html"><![CDATA[<h1 id="阻塞队列架构"><a href="#阻塞队列架构" class="headerlink" title="阻塞队列架构"></a>阻塞队列架构</h1><p>在某些情况下会挂起线程(阻塞)，一旦条件满足，被挂起的线程又会自动被唤醒</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/image-20201202165228930.png" alt="image-20201202165228930"></p><p>ArrayBlockingQueue：有界阻塞队列</p><p>LinkedBlockingQueue：有界阻塞队列，但是最大是Integer.MAX_VALUE</p><p>SynchronousQueue：只存储一个元素，相当于定制的</p><h1 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h1><h2 id="抛出异常方法"><a href="#抛出异常方法" class="headerlink" title="抛出异常方法"></a>抛出异常方法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ArrayBlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//该队列最大为3</span>        BlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//抛出异常:java.lang.IllegalStateException: Queue full</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.add("x"));</span>        <span class="token comment" spellcheck="true">//检查队首元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        java.util.NoSuchElementException</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.remove());</span><span class="token comment" spellcheck="true">//        java.util.NoSuchElementException</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.element());</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="返回特殊值方法"><a href="#返回特殊值方法" class="headerlink" title="返回特殊值方法"></a>返回特殊值方法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ArrayBlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//该队列最大为3</span>        BlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//null</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="阻塞方法"><a href="#阻塞方法" class="headerlink" title="阻塞方法"></a>阻塞方法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ArrayBlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//该队列最大为3</span>        BlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//队列满了，该线程会等待</span><span class="token comment" spellcheck="true">//        blockingQueue.put("d");</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//不消费完线程，就阻塞掉</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="超时方法"><a href="#超时方法" class="headerlink" title="超时方法"></a>超时方法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ArrayBlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//该队列最大为3</span>        BlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span>， 2L， TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span>， 2L， TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span>， 2L， TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//只阻塞2s，就会返回false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span>， 2L， TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h1><p>有界阻塞队列</p><h1 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h1><p>有界阻塞队列，但是最大是Integer.MAX_VALUE</p><h1 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h1><p>容量为0</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210204061232883.png" alt="image-20210204061232883"></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210204061257644.png" alt="image-20210204061257644"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>SynchronousQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//同步队列不存储，只能生产一个就消费一个</span>        BlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" put"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" put"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" put"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>，<span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>，<span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h1><ul><li>构建同步组件的基础工具，帮AQS完成相应线程的阻塞或者唤醒的工作</li><li>不需要synchronized或lock</li><li>先唤醒再等待也可以正常运行</li><li>它是一个线程阻塞工具类，所有方法都是静态的，可以让线程在任意位置阻塞</li><li>它调用的是Unsafe里的native方法</li><li>它和每个使用他的线程都有一个permit关联</li><li>线程阻塞需要消耗permit，每个permit不可累计，最多一个</li></ul><h1 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h1><p>抽象的队列同步器</p><p>是用来构建锁或者其他同步器组件的重量级基础框架及整个JUC体系的基石。通过内置的FIFO队列来完成资源获取线程的排队工作，并通过一个int类型变量表示持有锁的状态</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>基本上CountDownLatch、ReentrantLock、Semaphore信号量、ReentrantReadWriteLock、CyclicBarrier都和AQS有关</p><ul><li><strong>锁</strong>是面对锁的使用者，定义了程序员和锁交互的使用层API</li><li><strong>同步器</strong>，提出统一规范并简化锁的实现，屏蔽了同步状态管理，阻塞线程排队和通知，唤醒机制等</li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 阻塞队列 </tag>
            
            <tag> LinkedBlockingQueue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>控制并发流程工具类</title>
      <link href="posts/78d7e2ab.html"/>
      <url>posts/78d7e2ab.html</url>
      
        <content type="html"><![CDATA[<h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><ul><li>java.util.concurrent</li><li>java.util.concurrent.atomic</li><li>java.util.concurrent.locks</li><li>先写一个资源类（提供一个对外服务的方法，并且使用锁等保证多个线程进来后能正常操作），然后多个线程操作这同一个资源类</li></ul><h1 id="控制并发流程"><a href="#控制并发流程" class="headerlink" title="控制并发流程"></a>控制并发流程</h1><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210204061836970.png" alt="image-20210204061836970"></p><h1 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h1><ul><li>让一些线程阻塞直到另一些线程完成一系列操作后才被唤醒</li><li>当一个或多个线程调用<code>await</code>方法时，调用线程会被阻塞</li><li>其他线程调用<code>countDown</code>方法会将计数器减一(调用<code>countDown</code>不会阻塞)</li><li>当计数器为零时，因为调用了<code>await</code>方法而被阻塞的线程会被唤醒，继续执行</li><li>CountDownLatch不能重用</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210204062322243.png" alt="image-20210204062322243"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例如启动程序，对外发布服务时，应该所有的都检查完毕（检查数据有没有完毕等前置流程）才进入下一个环节</span><span class="token comment" spellcheck="true">//主线程等待所有线程都执行完毕才结束</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 离开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>， String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//必须要减到0才能解除</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全部结束咯"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例如进行压测，创建很多线程应该先等待，再一个统一的时间再过去</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>finalI <span class="token operator">+</span> <span class="token string">"准备完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>finalI <span class="token operator">+</span> <span class="token string">"开始跑步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//检查场地等</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"比赛开始！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210204075136465.png" alt="image-20210204075136465"></p><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">final</span> Sync sync<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">CountDownLatch</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"count &lt; 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sync</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    sync<span class="token punctuation">.</span><span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync<span class="token punctuation">.</span><span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h1><ul><li>可循环(<code>Cyclic</code>)使用的屏障(<code>Barrier</code>)</li><li>让一组线程到达一个屏障(同步点)时被阻塞，直到最后一个线程到达屏障时，屏障才会打开，所有被屏障拦截的线程才会继续干活</li><li>线程进入屏障是通过<code>CyclicBarrier</code>的<code>await()</code>方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BrokenBarrierException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CyclicBarrier<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CyclicBarrier cyclicBarrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">7</span>， <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大威天龙!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" 收集龙珠"</span><span class="token operator">+</span>finalI <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>，<span class="token string">"thread"</span><span class="token operator">+</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h1><ul><li>用于多个共享资源的互斥使用</li><li>用于并发线程数的控制</li><li>当一个线程调用acquire（获取），要么成功获得信号量（信号量-1），要么阻塞到有线程释放信号量</li><li>release（释放），实际会将信号量的值+1，然后唤醒等待的线程</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Semaphore<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//抢车位</span>        Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 抢到车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 离开车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>，String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210204075438793.png" alt="image-20210204075438793"></p><h1 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h1><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210204074244081.png" alt="image-20210204074244081"></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210204082155349.png" alt="image-20210204082155349"></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> CyclicBarrier </tag>
            
            <tag> Semaphore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadLocal</title>
      <link href="posts/151f44ae.html"/>
      <url>posts/151f44ae.html</url>
      
        <content type="html"><![CDATA[<h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><ul><li><p>ThreadLocal叫做线程本地变量或线程本地存储。为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。</p></li><li><p>ThreadLocal提供的方法为每个使用该变量的线程都存有一份独立的副本，因此get总是返回由当前执行线程在调用set时设置的最新值</p></li><li><p>可以用于防止可变的单实例对象或全局变量进行共享</p></li><li><p>让某个需要使用的对象在线程间隔离（每个线程都有自己的独立的对象）</p></li><li><p>在任何方法中都可以轻松获取到该对象</p></li><li><p>initialValue：在ThreadLocal第一次get时就把对象给初始化出来，对象的初始化时机可以由我们控制</p></li><li><p>set：如果需要保存到ThreadLocal里的对象的时机不由我们随意控制，例如拦截器里的用户信息，就用set存放</p></li></ul><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><h2 id="每个线程需要一个独享的对象"><a href="#每个线程需要一个独享的对象" class="headerlink" title="每个线程需要一个独享的对象"></a>每个线程需要一个独享的对象</h2><ul><li>每个Thread内有自己的实例副本，不共享</li><li>例如教材只有一本，一起做笔记有线程安全问题，复印后就没有问题</li><li>通常是一个工具类，典型需要使用的类有SimpleDateFormat和Random，主要解决线程不安全的问题</li></ul><h2 id="每个线程内需要保存全局变量"><a href="#每个线程内需要保存全局变量" class="headerlink" title="每个线程内需要保存全局变量"></a>每个线程内需要保存全局变量</h2><p>（例如在拦截器中获取用户信息），可以让不同的方法直接使用，避免参数传递的麻烦</p><h1 id="场景1：SimpleDateFormat"><a href="#场景1：SimpleDateFormat" class="headerlink" title="场景1：SimpleDateFormat"></a>场景1：SimpleDateFormat</h1><h2 id="初始版本：使用线程池"><a href="#初始版本：使用线程池" class="headerlink" title="初始版本：使用线程池"></a>初始版本：使用线程池</h2><p>创建了1000个SimpleDateFormat</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalUsage00</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">date</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//参数单位是ms，从1970.1.1 00:00:00 GMT计时</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>1000L <span class="token operator">*</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这样的缺点是，创建了1000个SimpleDateFormat</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//从1970-01-01 08:00:00开始</span>                String date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalUsage00</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span>finalI<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="把SimpleDateFormat当静态使用"><a href="#把SimpleDateFormat当静态使用" class="headerlink" title="把SimpleDateFormat当静态使用"></a>把SimpleDateFormat当静态使用</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*1970-01-01 08:16:041970-01-01 08:16:04按道理用i递增，不应该出现一样的可以用synchronized解决，但是效率低*/</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalUsage01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SimpleDateFormat simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">date</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//参数单位是ms，从1970.1.1 00:00:00 GMT计时</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>1000L <span class="token operator">*</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//从1970-01-01 08:00:00开始</span>                String date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalUsage01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span>finalI<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="用ThreadLocal实现"><a href="#用ThreadLocal实现" class="headerlink" title="用ThreadLocal实现"></a>用ThreadLocal实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalUsage03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>SimpleDateFormat<span class="token operator">></span> simpleDateFormatThreadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span>SimpleDateFormat<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> SimpleDateFormat <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">date</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//参数单位是ms，从1970.1.1 00:00:00 GMT计时</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>1000L <span class="token operator">*</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> simpleDateFormatThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//从1970-01-01 08:00:00开始</span>                String date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalUsage03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span>finalI<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="场景2：需要用户信息"><a href="#场景2：需要用户信息" class="headerlink" title="场景2：需要用户信息"></a>场景2：需要用户信息</h2><p>不同请求（不同线程）user对象不同</p><p>即这些信息在同一个线程中相同，但是不同线程中使用的业务内容是不同的</p><p>在线程生命周期内，都可以通过这个静态ThreadLocal实例的get()方法取得自己set过的那个对象，避免了将这个对象（例如user对象）作为参数传递的麻烦</p><p>例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserContextHolder</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>User<span class="token operator">></span> holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Service1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Service1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三"</span>， <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserContextHolder<span class="token punctuation">.</span>holder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Service1:"</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Service2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Service2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> UserContextHolder<span class="token punctuation">.</span>holder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Service2:"</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Service3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Service3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> UserContextHolder<span class="token punctuation">.</span>holder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Service3:"</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>实际使用：</p><pre class=" language-java"><code class="language-java">UserDetails userDetails <span class="token operator">=</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UsernamePasswordAuthenticationToken authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>userDetails， null， userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取当前用户</span>BoyingUserDetails userDetails  <span class="token operator">=</span> SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> userDetails<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h2><p>遇到冲突采取的是线性探测法</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210203153558223.png" alt="image-20210203153558223"></p><p>每个Thread中都有一个ThreadLocalMap </p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210203152718142.png" alt="image-20210203152718142"></p><h2 id="initialValue"><a href="#initialValue" class="headerlink" title="initialValue()"></a>initialValue()</h2><p>一般来说重写该方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> T <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//键值对：(this， value)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span>， value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t， value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//先找到当前线程 再找到当前线程的ThreadLocalMap</span>    Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//key是当前threadLocal引用</span>        ThreadLocalMap<span class="token punctuation">.</span>Entry e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            T result <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果get为null，则initialValue()</span><span class="token keyword">private</span> T <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        T value <span class="token operator">=</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span>            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span>， value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">createMap</span><span class="token punctuation">(</span>t， value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ThreadLocalMap m <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> null<span class="token punctuation">)</span>        m<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="可能导致内存泄漏"><a href="#可能导致内存泄漏" class="headerlink" title="可能导致内存泄漏"></a>可能导致内存泄漏</h1><p>内存泄漏：某个对象不再有用，但是占用的内存却不能被回收</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalMap</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * The entries in this hash map extend WeakReference， using     * its main ref field as the key (which is always a     * ThreadLocal object).  Note that null keys (i.e. entry.get()     * == null) mean that the key is no longer referenced， so the     * entry can be expunged from table.  Such entries are referred to     * as "stale entries" in the code that follows.     */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/** The value associated with this ThreadLocal. */</span>        Object value<span class="token punctuation">;</span>        <span class="token function">Entry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k， Object v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            value <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * The initial capacity -- MUST be a power of two.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The table， resized as necessary.     * table.length MUST always be a power of two.     */</span>    <span class="token keyword">private</span> Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span></code></pre><ul><li>ThreadLocalMap中的每个Entry都是一个对key的弱引用，对value的强引用</li><li>正常情况下，线程终止，则保存在ThreadLocalMap里的value会被回收</li><li>但是线程不终止（例如线程池），那么value就不会被回收：value-&gt;ThreadLocalMap-&gt;Entry(key为null)-&gt;value</li><li>JDK考虑过了，在set、remove、rehash方法中会扫描key为null的Entry，并把value设置为null，但如果一个线程中ThreadLocal不被调用，就不会执行上述操作</li><li>阿里规约：在使用完ThreadLocal之后，主动调用remove方法：UserContextHolder.holder.remove();</li></ul><h1 id="存储共享对象问题"><a href="#存储共享对象问题" class="headerlink" title="存储共享对象问题"></a>存储共享对象问题</h1><p>不应该共享静态对象</p><p>线程少时，不需要强行使用ThreadLocal</p><p>一般使用Spring框架即可，不需要自己创建</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210203155018556.png" alt="image-20210203155018556"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>下述代码中，通过将JDBC的连接保存在<code>ThreadLocal</code>对象中，每个线程都会拥有属于自己的连接</p><p>当某个频繁执行的操作需要一个临时对象，例如一个缓冲区，而同时又希望避免在每次执行时都重新分配该临时对象，就可以使用该技术</p><p>当某个线程初次调用<code>ThreadLocal.get()</code>方法时，就会调用<code>initValue()</code>来获取初始值，概念上可以看作<code>ThreadLocal</code>包含了<code>Map&lt;Thread，T&gt;</code>对象，其中保存了特定于该线程的值</p><p>因为<code>ThreadLocal</code>在每个线程中对该变量会创建一个副本，即每个线程内部都会有一个该变量，且在线程内部任何地方都可以使用，线程之间互不影响，这样一来就不存在线程安全问题，也不会严重影响程序执行性能。</p><p>假如需将一个单线程应用移植到多线程环境中，通过将共享的全局变量转换为<code>ThreadLocal</code>对象，即可维持线程安全性</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>Connection<span class="token operator">></span> connectionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span>Connection<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Connection <span class="token function">initValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">return</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"DB_URL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> connectionHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> ThreadLocal </tag>
            
            <tag> 内存泄漏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锁</title>
      <link href="posts/d6e0ce95.html"/>
      <url>posts/d6e0ce95.html</url>
      
        <content type="html"><![CDATA[<h1 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h1><ul><li>是Lock的重入锁实现</li><li>提供无条件的、可轮询的、定时的、可中断的锁获取操作</li><li>与synchronized提供相同的互斥性和内存可见性</li><li>synchronized无法中断一个正在等待获取锁的线程，或者无法在请求获取一个锁时无限的等待下去</li><li>必须在finally中释放锁</li><li>tryLock方法：如果不能获得所有需要的锁，那么可以使用可定时的或可轮询的锁获取方式；它会释放已经获得的锁，然后重新尝试获取所有锁</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210204080116073.png" alt="image-20210204080116073"></p><h2 id="新功能"><a href="#新功能" class="headerlink" title="新功能"></a>新功能</h2><h3 id="等待可中断"><a href="#等待可中断" class="headerlink" title="等待可中断"></a>等待可中断</h3><p>当持有锁的线程长期不释放锁时，正在等待的线程可以放弃等待，改为处理其他事情</p><h3 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h3><ul><li>公平锁保证多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁</li><li>而非公平锁在锁被释放时，任何一个等待锁的线程都有机会获得锁</li><li>synchronized是非公平锁，ReentrantLock默认非公平，可以通过构造函数设置为公平锁</li><li>使用公平锁，性能急剧下降，明显影响吞吐量</li></ul><h3 id="锁绑定多个条件"><a href="#锁绑定多个条件" class="headerlink" title="锁绑定多个条件"></a>锁绑定多个条件</h3><ul><li>一个ReentrantLock对象可以绑定多个Condition对象</li><li>多次调用newCondition()即可</li></ul><h2 id="Synchronized和ReentrantLock的区别"><a href="#Synchronized和ReentrantLock的区别" class="headerlink" title="Synchronized和ReentrantLock的区别"></a>Synchronized和ReentrantLock的区别</h2><ul><li><p><code>Synchronized</code>是关键字，是<code>JVM</code>层面的，使用<code>monitorenter</code>进入，<code>monitorexit</code>退出，而且保证正常与异常情况都会退出。<code>Lock</code>是<code>JUC</code>下的具体类，是API层面的锁</p></li><li><p><code>Synchronized</code>不需要手动释放锁，当代码块执行完会自动让线程释放对锁的占用，而<code>ReentrantLock</code>需要用户手动释放锁</p></li><li><p><code>Synchronized</code>不可中断，除非抛出异常或者运行结束。<code>ReentrantLock</code>可中断，可以通过</p><pre class=" language-java"><code class="language-java">reentrantLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">1</span>， TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或者</span>reentrantLock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><code>Synchronized</code>默认非公平锁，<code>ReentrantLock</code>默认非公平锁，但是可以调节到公平锁</p></li><li><p><code>ReentrantLock</code>可以绑定多个条件<code>Condition</code>，用来实现分组唤醒，或者精确唤醒</p></li></ul><h1 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h1><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210203161903172.png" alt="image-20210203161903172"></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210203162524629.png" alt="image-20210203162524629"></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210203162548746.png" alt="image-20210203162548746"></p><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210203162017379.png" alt="image-20210203162017379"></p><p>最典型synchronized、Lock</p><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>最典型CAS</p><p>原子类、并发容器</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210203162107084.png" alt="image-20210203162107084"></p><h1 id="可重入锁和不可重入锁"><a href="#可重入锁和不可重入锁" class="headerlink" title="可重入锁和不可重入锁"></a>可重入锁和不可重入锁</h1><h2 id="可重入锁-递归锁"><a href="#可重入锁-递归锁" class="headerlink" title="可重入锁(递归锁)"></a>可重入锁(递归锁)</h2><ul><li>指的是同一线程外层函数获得锁之后，内层递归函数仍然能获取该锁的代码</li><li>线程可以进入任何一个他已经拥有的锁所同步着的代码块</li><li><code>ReentrantLock </code>，<code>Synchronized</code>就是经典的可重入锁</li><li>最大作用在于避免死锁</li><li>即某个线程可以再次获得一个已经由它自己持有的锁</li><li>重入的实现方式是计数（类似引用计数）</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" invoke sendSMS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" invoke sendEmail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Main main <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            main<span class="token punctuation">.</span><span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>，<span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" invoke sendSMS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" invoke sendEmail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Main main <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            main<span class="token punctuation">.</span><span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>，<span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            main<span class="token punctuation">.</span><span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>，<span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            main<span class="token punctuation">.</span><span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>，<span class="token string">"t3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>例子2</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Widget"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggingWidget</span> <span class="token keyword">extends</span> <span class="token class-name">Widget</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LoggingWidget"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//(我猜是用了多态，然后每次锁的都是Widget对象)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Widget widget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggingWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        widget<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果没有可重入锁，将发生死锁。因为在每个<code>doSomething()</code>执行前，都会获得<code>Widget</code>的锁，如果内置锁不是可重入的，那么在调用<code>super.doSomething();</code>时，就无法获得<code>Widget</code>上的锁(因为它已经被持有)，就会死锁</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210203165612217.png" alt="image-20210203165612217"></p><h1 id="公平和非公平锁"><a href="#公平和非公平锁" class="headerlink" title="公平和非公平锁"></a>公平和非公平锁</h1><p>公平锁：在并发环境下，每个线程在获取锁时会先查看此锁维护的等待队列，按照FIFO的规则。</p><p>非公平锁：运行加塞。是指多个线程获取锁的顺序并不是按照申请锁的顺序</p><p>例如让10个线程分别打印两次，如果是公平锁，就会0-10，0-10，而非公平锁则会每个线程都连续打印两次。原因是他没有陷入阻塞，所以更快的拿到锁</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210203171014652.png" alt="image-20210203171014652"></p><h2 id="特例"><a href="#特例" class="headerlink" title="特例"></a>特例</h2><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210203171000341.png" alt="image-20210203171000341"></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210203171045005.png" alt="image-20210203171045005"></p><h2 id="公平锁-1"><a href="#公平锁-1" class="headerlink" title="公平锁"></a>公平锁</h2><p>在并发环境下，每个线程在获取锁时会先查看此锁维护的等待队列，按照FIFO的规则。</p><h2 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h2><p>为了提高效率，避免唤醒带来的空档期</p><p>运行加塞。是指多个线程获取锁的顺序并不是按照申请锁的顺序</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li><code>ReentrantLock </code>默认非公平锁，可以指定构造函数决定是公平锁还是非公平锁</li><li>对于<code>Synchronized</code>是非公平锁</li></ul><h1 id="共享锁和排他锁"><a href="#共享锁和排他锁" class="headerlink" title="共享锁和排他锁"></a>共享锁和排他锁</h1><ul><li>独占锁(写锁)：指该锁一次只能被一个线程所持有。<code>ReentrantLock </code>，<code>Synchronized</code>就是独占锁</li><li>共享锁(读锁)：指该锁可被多个线程所共享，获得共享锁后，可以查看但是无法修改和删除数据，其他线程也还可以获取共享锁</li><li>ReentrantReadWriteLock的读锁，写锁（实现读写锁ReadWriteLock接口）</li><li>reentrantReadWriteLock.readLock();</li><li>reentrantReadWriteLock.writeLock();</li><li></li></ul><ul><li>读-读能共存</li><li>读-写不能共存</li><li>写-写不能共存</li></ul><ul><li>读和读互不影响，读和写互斥，写和写互斥，提高读写的效率</li><li>ReadWriteLock管理一组锁，一个是只读的锁，一个是写锁。</li><li>读锁使用共享模式；写锁使用独占模式，换句话说，读锁可以在没有写锁的时候被多个线程同时持有，写锁是独占的</li><li>当有读锁时，写锁就不能获得；而当有写锁时，除了获得写锁的这个线程可以获得读锁外，其他线程不能获得读锁</li><li>线程进入写锁的前提条件：没有其他线程的读锁、没有其他线程的写锁</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantReadWriteLock<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyCache</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//保证可见性</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> Map<span class="token operator">&lt;</span>String， Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//读写锁，可以在读和写时采取不同策略</span>    <span class="token keyword">private</span> ReentrantReadWriteLock reentrantReadWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写，读，清空</span>    <span class="token comment" spellcheck="true">//写操作必须独占，原子 中间不允许被打断</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key， Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        reentrantReadWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 正在写入: "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key， value<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 写入完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            reentrantReadWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        reentrantReadWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 正在读取: "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Object object <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 读取完成 "</span> <span class="token operator">+</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> object<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            reentrantReadWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyCache myCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                myCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>finalI<span class="token punctuation">)</span>， String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>finalI<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>， String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                myCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>finalI<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>， String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*        0 正在写入: 0        0 写入完成        1 正在写入: 1        1 写入完成        2 正在写入: 2        2 写入完成        3 正在写入: 3        3 写入完成        4 正在写入: 4        4 写入完成        5 正在读取: 0        6 正在读取: 1        7 正在读取: 2        8 正在读取: 3        9 正在读取: 4        9 读取完成 4        7 读取完成 2        6 读取完成 1        8 读取完成 3        5 读取完成 0         */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="自旋锁与非自旋锁"><a href="#自旋锁与非自旋锁" class="headerlink" title="自旋锁与非自旋锁"></a>自旋锁与非自旋锁</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210203175512244.png" alt="image-20210203175512244"></p><ul><li>是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁</li><li>好处是减少线程上下文切换，缺点是锁被占用的时间很长的话，自旋的线程不断循环会白白消耗CPU资源</li><li>java.util.concurrent的atmoic包下的类基本都是自旋锁的实现</li><li>实现的原理是CAS</li><li>AtomicInteger调用unsafe进行自增操作，如果修改过程中遇到其他线程竞争导致没有修改成功，就在while里死循环，直到修改成功</li><li>AtomicReference</li></ul><h1 id="可中断锁和不可中断锁"><a href="#可中断锁和不可中断锁" class="headerlink" title="可中断锁和不可中断锁"></a>可中断锁和不可中断锁</h1><p>当一个线程获取了锁之后，是不会被interrupt()方法中断的。因为调用interrupt()方法不能中断正在运行过程中的线程，只能中断阻塞过程中的线程。<br>因此当通过lockInterruptibly()方法获取某个锁时，如果不能获取到，只有进行等待的情况下，是可以响应中断的。<br>而用synchronized修饰的话，当一个线程处于等待某个锁的状态，是无法被中断的，只有一直等待下去。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 尝试获取锁，被中断会进入中断异常处理块中</span><span class="token comment" spellcheck="true">// 这货没有时间限制的尝试获取锁，和synchronized一样，但是，这货能相应中断</span><span class="token comment" spellcheck="true">//这是synchronized没有的优点，这使得程序在另外的线程没有释放锁时能自定义退出程序。</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span><span class="token operator">+</span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"被中断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210203175554080.png" alt="image-20210203175554080"></p><h1 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h1><ul><li>即时编译器在运行时，对一些代码要求同步，但是对被检测到不可能存在共享数据竞争的锁进行消除。</li><li>来源于逃逸分析技术的数据支持。</li><li>如果判断一段代码中堆上所有数据都不会被其他线程访问到，就可以当作栈上内存对待，认为是线程私有的</li><li>很多同步机制不是程序员自己加的</li><li>StringBuffer.append()都有同步块，锁sb对象</li><li>虚拟机观测变量sb，经过逃逸分析后发现他的动态作用域限制在方法内部，sb的所有引用都不会逃逸到方法外部，其他线程无法访问，所以可以安全消除锁</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">concatString</span><span class="token punctuation">(</span>String s1， String s2， String s3<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> s1 <span class="token operator">+</span> s2 <span class="token operator">+</span> s3<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//上面的代码在JDK5之前会转换成StringBuffer对象进行连续append</span><span class="token comment" spellcheck="true">//在JDK5之后会转换成StringBuilder对象</span><span class="token keyword">public</span> String <span class="token function">concatString</span><span class="token punctuation">(</span>String s1， String s2， String s3<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h1><ul><li>编写代码时推荐把同步块的作用访问限制得尽量小，只在共享数据的实际作用域进行同步。可以使得需要同步的操作数量尽可能变小，即使存在锁竞争，等待锁的线程也能尽快拿到锁</li><li>原则上只在共享数据的实际作用域上进行同步，使等待锁的线程能尽快获得锁。但如果一系列的连续操作都对同一个对象反复加锁解锁，甚至加锁操作出现在循环体内部，即使没有线程竞争，频繁进行互斥同步操作也会导致不必要的性能损耗</li><li>例如上述的连续append，如果虚拟机探测到一串零碎的操作对同一个对象加锁。就将会把加锁同步的范围粗化到整个操作序列的外部。例如把操作扩展到三次append（）操作外部，只需要一次加锁</li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 锁 </tag>
            
            <tag> ReentrantLock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生产者消费者</title>
      <link href="posts/92d2ba71.html"/>
      <url>posts/92d2ba71.html</url>
      
        <content type="html"><![CDATA[<h1 id="生产者消费者（等待唤醒三种机制）"><a href="#生产者消费者（等待唤醒三种机制）" class="headerlink" title="生产者消费者（等待唤醒三种机制）"></a>生产者消费者（等待唤醒三种机制）</h1><p>当队列满时，生产者需要等待队列有空间才能继续往里面放入商品，而在等待的期间内，生产者必须释放对临界资源（即队列）的占用权。</p><p>因为生产者如果不释放对临界资源的占用权，那么消费者就无法消费队列中的商品，就不会让队列有空间，那么生产者就会一直无限等待下去。</p><p>因此，一般情况下，当队列满时，会让生产者交出对临界资源的占用权，并进入挂起状态。然后等待消费者消费了商品，然后消费者通知生产者队列有空间了。</p><p>同样地，当队列空时，消费者也必须等待，等待生产者通知它队列中有商品了。这种互相通信的过程就是线程间的协作。</p><h2 id="synchronized-wait-notify"><a href="#synchronized-wait-notify" class="headerlink" title="synchronized wait notify"></a>synchronized wait notify</h2><ul><li>wait()、notify()和notifyAll()方法是本地方法，并且为final方法，无法被重写。</li><li>调用某个对象的wait()方法能让当前线程阻塞，并且当前线程必须拥有此对象的monitor（即锁）</li><li>调用某个对象的notify()方法能够唤醒一个正在等待这个对象的monitor的线程，如果有多个线程都在等待这个对象的monitor，则只能唤醒其中一个线程；</li><li>调用notifyAll()方法能够唤醒所有正在等待这个对象的monitor的线程；</li><li>为何这三个不是Thread类声明中的方法，而是Object类中声明的方法？由于每个对象都拥有monitor（即锁），所以让当前线程等待某个对象的锁，当然应该通过这个对象来操作了。</li><li>如果调用某个对象的wait()方法，当前线程必须拥有这个对象的monitor（即锁），因此调用wait()方法必须在同步块或者同步方法中进行（synchronized块或者synchronized方法）。</li><li>调用某个对象的wait()方法，相当于让当前线程交出此对象的monitor，然后进入等待状态，等待后续再次获得此对象的锁（Thread类中的sleep方法使当前线程暂停执行一段时间，从而让其他线程有机会继续执行，但它并不释放对象锁）</li><li>　notify()方法能够唤醒一个正在等待该对象的monitor的线程，当有多个线程都在等待该对象的monitor的话，则只能唤醒其中一个线程，具体唤醒哪个线程则不得而知。</li><li>同样地，调用某个对象的notify()方法，当前线程也必须拥有这个对象的monitor，因此调用notify()方法必须在同步块或者同步方法中进行（synchronized块或者synchronized方法）</li><li>举个简单的例子：假如有三个线程Thread1、Thread2和Thread3都在等待对象objectA的monitor，此时Thread4拥有对象objectA的monitor，当在Thread4中调用objectA.notify()方法之后，Thread1、Thread2和Thread3只有一个能被唤醒。注意，被唤醒不等于立刻就获取了objectA的monitor。假若在Thread4中调用objectA.notifyAll()方法，则Thread1、Thread2和Thread3三个线程都会被唤醒，至于哪个线程接下来能够获取到objectA的monitor就具体依赖于操作系统的调度了。</li><li>一个线程被唤醒不代表立即获取了对象的monitor，只有等调用完notify()或者notifyAll()并退出synchronized块，释放对象锁后，其余线程才可获得锁执行。</li><li>当线程执行wait()方法时候，会释放当前的锁，然后让出CPU，进入等待状态。</li><li>只有当 notify/notifyAll() 被执行时候，才会唤醒一个或多个正处于等待状态的线程，然后继续往下执行，直到执行完synchronized 代码块的代码或是中途遇到wait() ，再次释放锁。</li><li>也就是说，notify/notifyAll() 的执行只是唤醒沉睡的线程，而不会立即释放锁，锁的释放要看代码块的具体执行情况。所以在编程中，尽量在使用了notify/notifyAll() 后立即退出临界区，以唤醒其他线程让其获得锁</li><li>notify方法只唤醒一个等待（对象的）线程并使该线程开始执行。所以如果有多个线程等待一个对象，这个方法只会唤醒其中一个线程，选择哪个线程取决于操作系统对多线程管理的实现。notifyAll 会唤醒所有等待(对象的)线程，尽管哪一个线程将会第一个处理取决于操作系统的实现。如果当前情况下有多个线程需要被唤醒，推荐使用notifyAll 方法。比如在生产者-消费者里面的使用，每次都需要唤醒所有的消费者或是生产者，以判断程序是否可以继续往下执行。</li><li>notify唤醒沉睡的线程后，<strong>线程会接着上次的执行继续往下执行。</strong>所以在进行条件判断时候，可以先把 wait 语句忽略不计来进行考虑；显然，要确保程序一定要执行，并且要保证程序直到满足一定的条件再执行，要使用while进行等待，直到满足条件才继续往下执行。</li></ul><p><strong>条件</strong></p><ol><li>必须在synchronized中</li><li>必须先wait再notify</li></ol><p><strong>虚假唤醒</strong></p><ul><li>等待唤醒机制，就是当一个线程在执行了某一个操作的时候，将其进入等待状态，并释放锁，其他线程执行完指定的操作后，再将其唤醒。</li><li>当两个消费者线程同时执行sale方法时，产品售空，那么都将执行wait方法，处于挂起等待状态，并释放锁，然后生产者拿到锁，生产产品，执行notifyAll方法，唤醒了所有消费者线程，那么当第一个消费者执行了消费以后，第二个消费者又进行消费，此时便出现了负数，出现了问题。像这样的情况，就叫做虚假唤醒。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> tongji<span class="token punctuation">.</span>util<span class="token punctuation">.</span>thread<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*用if时四个线程出现了虚假唤醒    thread2    消费:-1    thread2    消费:-2所以使用while */</span><span class="token comment" spellcheck="true">//资源类</span><span class="token keyword">class</span> <span class="token class-name">AirCondition</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//有资源时，则不能生产</span><span class="token comment" spellcheck="true">//        if (number != 0) {</span><span class="token comment" spellcheck="true">//            this.wait();</span><span class="token comment" spellcheck="true">//        }</span>        <span class="token comment" spellcheck="true">//需要使用while</span>        <span class="token comment" spellcheck="true">//因为多个线程，有个线程进来阻塞后，之后唤醒的时候，因为是调用this.notifyAll()，所以所有的都唤醒了，而可能只是该increment()想要通知decrement()而已</span>        <span class="token comment" spellcheck="true">//wait是交出控制权的</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//生产并且唤醒消费线程</span>        number<span class="token operator">++</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t生产:"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//没有资源时，不能消费</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//消费并且唤醒生产线程</span>        number<span class="token operator">--</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t消费:"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AirCondition airCondition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AirCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生产者</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    airCondition<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>，<span class="token string">"thread1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//消费者</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    airCondition<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>，<span class="token string">"thread2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生产者2</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//多个线程自始至终使用的是同一个对象，所以synchronized可以锁住整个对象(不只是锁某个方法)</span>                    airCondition<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>，<span class="token string">"thread3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//消费者2</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    airCondition<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>，<span class="token string">"thread4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="lock-await-signal"><a href="#lock-await-signal" class="headerlink" title="lock await signal"></a>lock await signal</h2><p><strong>条件</strong></p><ol><li>必须在lock中</li><li>先await再signal</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> tongji<span class="token punctuation">.</span>util<span class="token punctuation">.</span>thread<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//资源类</span><span class="token keyword">class</span> <span class="token class-name">AirCondition</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number<span class="token operator">++</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t生产:"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>            condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number<span class="token operator">--</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t消费:"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>            condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AirCondition airCondition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AirCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生产者</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                airCondition<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>， <span class="token string">"thread1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//消费者</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                airCondition<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>， <span class="token string">"thread2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生产者2</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                airCondition<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>， <span class="token string">"thread3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//消费者2</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                airCondition<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>， <span class="token string">"thread4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Condition精确唤醒"><a href="#Condition精确唤醒" class="headerlink" title="Condition精确唤醒"></a>Condition精确唤醒</h3><ul><li>Condition是个接口，基本的方法就是await()和signal()方法；</li><li>Condition依赖于Lock接口，生成一个Condition的基本代码是lock.newCondition() </li><li>调用Condition的await()和signal()方法，都必须在lock保护之内，就是说必须在lock.lock()和lock.unlock之间才可以使用</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> jdk<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>TryCatchBlockNode<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ShareResource</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition1 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition2 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition3 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                condition1<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" print "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//通知</span>            number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            condition2<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> InterruptedException e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print10</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                condition2<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" print "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//通知</span>            number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            condition3<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> InterruptedException e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print15</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                condition3<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" print "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//通知</span>            number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            condition1<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> InterruptedException e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ShareResource shareResource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShareResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                shareResource<span class="token punctuation">.</span><span class="token function">print5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>，<span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                shareResource<span class="token punctuation">.</span><span class="token function">print10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>，<span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                shareResource<span class="token punctuation">.</span><span class="token function">print15</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>，<span class="token string">"t3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="LockSupport-park-unpark"><a href="#LockSupport-park-unpark" class="headerlink" title="LockSupport park unpark"></a>LockSupport park unpark</h2><p>LockSupport，构建同步组件的基础工具，帮AQS完成相应线程的阻塞或者唤醒的工作。</p><p>线程等待唤醒机制wait/notify的改良版本，对应的方法是park/unpark</p><p><strong>优点</strong></p><ol><li>不需要synchronized或lock</li><li>先唤醒再等待也可以正常运行</li></ol><p><strong>LockSupport详细了解</strong></p><ul><li>它是一个线程阻塞工具类，所有方法都是静态的，可以让线程在任意位置阻塞</li><li>许可证类似于0/1的信号量</li><li>它调用的是Unsafe里的native方法</li><li>它和每个使用他的线程都有一个permit关联</li><li>线程阻塞需要消耗permit，每个permit不可累计，最多一个</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tongji<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>LockSupport<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//被阻塞，要通知需要许可证</span>            <span class="token comment" spellcheck="true">//每次阻塞都需要一个permit</span>            LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//被阻塞，要通知需要许可证</span>            <span class="token comment" spellcheck="true">//下面执行不了，因为阻塞两次</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>， <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>thread1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//permit不可累加</span>            LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>thread1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//所以执行完permit还是1</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>， <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="应用-生产者消费者"><a href="#应用-生产者消费者" class="headerlink" title="应用-生产者消费者"></a>应用-生产者消费者</h1><h2 id="传统版"><a href="#传统版" class="headerlink" title="传统版"></a>传统版</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ShareData</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//资源类</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//为了防止虚假唤醒，必须使用if</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//等待，不能生产</span>                condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number<span class="token operator">++</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 生产"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通知唤醒 可以进行消费了</span>            condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//等待，不能消费</span>                condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number<span class="token operator">--</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 消费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通知唤醒 可以进行生产了</span>            condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ShareData shareData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShareData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    shareData<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>，<span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    shareData<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>，<span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="阻塞队列版"><a href="#阻塞队列版" class="headerlink" title="阻塞队列版"></a>阻塞队列版</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ArrayBlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyResource</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> FLAG<span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认开启，进行生产+消费</span>    <span class="token keyword">private</span> AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyResource</span><span class="token punctuation">(</span>BlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>blockingQueue <span class="token operator">=</span> blockingQueue<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myProd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String data <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> retValue<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span><span class="token punctuation">{</span>            data <span class="token operator">=</span> atomicInteger<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>            retValue <span class="token operator">=</span> blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>data， 2L， TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>retValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"插入队列 "</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">" 成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"插入队列 "</span><span class="token operator">+</span>data<span class="token operator">+</span><span class="token string">" 失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产动作结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//不因为FLAG影响，因为等待2s</span>            result <span class="token operator">=</span> blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>2L， TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null <span class="token operator">||</span> result<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                FLAG <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"超过2s没用取到，消费队列失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"消费队列 "</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">" 成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>FLAG <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyResource myResource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 生产线程启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                myResource<span class="token punctuation">.</span><span class="token function">myProd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>， <span class="token string">"Prod"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 消费线程启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                myResource<span class="token punctuation">.</span><span class="token function">myConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>， <span class="token string">"Consumer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5s后停止生产与消费---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myResource<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 生产者消费者 </tag>
            
            <tag> synchronized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图</title>
      <link href="posts/ee040603.html"/>
      <url>posts/ee040603.html</url>
      
        <content type="html"><![CDATA[<h1 id="无环图"><a href="#无环图" class="headerlink" title="无环图"></a>无环图</h1><h2 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter4<span class="token punctuation">;</span><span class="token keyword">import</span> offer<span class="token punctuation">.</span>chapter1<span class="token punctuation">.</span>Bag<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> V<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> E<span class="token punctuation">;</span>    <span class="token keyword">private</span> Bag<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> adj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Graph</span><span class="token punctuation">(</span><span class="token keyword">int</span> V<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>V <span class="token operator">=</span> V<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>E <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        adj <span class="token operator">=</span> <span class="token punctuation">(</span>Bag<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> V<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> V<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">E</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> E<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>        adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        adj<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        E<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">adj</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter4<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepthFirstSearch</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marked<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DepthFirstSearch</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        marked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        marked<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer w <span class="token operator">:</span> G<span class="token punctuation">.</span><span class="token function">adj</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">marked</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> marked<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="深度优先搜索-路径"><a href="#深度优先搜索-路径" class="headerlink" title="深度优先搜索-路径"></a>深度优先搜索-路径</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter4<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepthFirstPaths</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marked<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edgeTo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> s<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DepthFirstPaths</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        marked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        edgeTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        marked<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer w <span class="token operator">:</span> G<span class="token punctuation">.</span><span class="token function">adj</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                edgeTo<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPathTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> marked<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">pathTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasPathTo</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        LinkedList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> v<span class="token punctuation">;</span> x <span class="token operator">!=</span> s<span class="token punctuation">;</span> x <span class="token operator">=</span> edgeTo<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> path<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter4<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BreadthFirstPaths</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marked<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edgeTo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> s<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BreadthFirstPaths</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        marked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        edgeTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token function">bfs</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        marked<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer w <span class="token operator">:</span> G<span class="token punctuation">.</span><span class="token function">adj</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    edgeTo<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>                    marked<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPathTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> marked<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h1><h2 id="Digraph"><a href="#Digraph" class="headerlink" title="Digraph"></a>Digraph</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter4<span class="token punctuation">.</span>section2<span class="token punctuation">;</span><span class="token keyword">import</span> offer<span class="token punctuation">.</span>chapter1<span class="token punctuation">.</span>Bag<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Digraph</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> V<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> E<span class="token punctuation">;</span>    <span class="token keyword">private</span> Bag<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> adj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Digraph</span><span class="token punctuation">(</span><span class="token keyword">int</span> V<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>V <span class="token operator">=</span> V<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>E <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        adj <span class="token operator">=</span> <span class="token punctuation">(</span>Bag<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> V<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> V<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">E</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> E<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>        adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        E<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">adj</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="DirectedCycle"><a href="#DirectedCycle" class="headerlink" title="DirectedCycle"></a>DirectedCycle</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter4<span class="token punctuation">.</span>section2<span class="token punctuation">;</span><span class="token keyword">import</span> chapter1<span class="token punctuation">.</span>section3<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectedCycle</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marked<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edgeTo<span class="token punctuation">;</span>    <span class="token keyword">private</span> Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> cycle<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> onStack<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DirectedCycle</span><span class="token punctuation">(</span>Digraph G<span class="token punctuation">)</span> <span class="token punctuation">{</span>        onStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        edgeTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        marked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Digraph G<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        onStack<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        marked<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer w <span class="token operator">:</span> G<span class="token punctuation">.</span><span class="token function">adj</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                edgeTo<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>onStack<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> v<span class="token punctuation">;</span> x <span class="token operator">!=</span> w<span class="token punctuation">;</span> x <span class="token operator">=</span> edgeTo<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cycle<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                cycle<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                cycle<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        onStack<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cycle <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">cycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cycle<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="DepthFirstOrder"><a href="#DepthFirstOrder" class="headerlink" title="DepthFirstOrder"></a>DepthFirstOrder</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter4<span class="token punctuation">.</span>section2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepthFirstOrder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marked<span class="token punctuation">;</span>    <span class="token keyword">private</span> Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> pre<span class="token punctuation">;</span>    <span class="token keyword">private</span> Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> post<span class="token punctuation">;</span>    <span class="token keyword">private</span> Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> reversePost<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//逆后序</span>    <span class="token keyword">public</span> <span class="token function">DepthFirstOrder</span><span class="token punctuation">(</span>Digraph G<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        post <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reversePost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        marked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Digraph G<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pre<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        marked<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer w <span class="token operator">:</span> G<span class="token punctuation">.</span><span class="token function">adj</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        post<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        reversePost<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">getReversePost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reversePost<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p>给定一个有向图，将所有顶点排序，使得所有有向边均从排在前面的元素指向排在后面的元素</p><p>按照这个顺序，可以在满足先导课程限制的条件下修完所有课程</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter4<span class="token punctuation">.</span>section2<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Topological</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> order<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Topological</span><span class="token punctuation">(</span>Digraph G<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DirectedCycle cycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectedCycle</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cycle<span class="token punctuation">.</span><span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            DepthFirstOrder depthFirstOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DepthFirstOrder</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span>            order <span class="token operator">=</span> depthFirstOrder<span class="token punctuation">.</span><span class="token function">getReversePost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> order<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> V <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        Digraph G <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Digraph</span><span class="token punctuation">(</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span>        Topological topological <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Topological</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer v <span class="token operator">:</span> topological<span class="token punctuation">.</span>order<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h1><h2 id="Edge"><a href="#Edge" class="headerlink" title="Edge"></a>Edge</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter4<span class="token punctuation">.</span>section3<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Edge<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> w<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> weight<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">either</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token keyword">int</span> vertex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vertex <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> w<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>vertex <span class="token operator">==</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> v<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Inconsistent edge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Edge that<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> that<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> that<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d-%d %.2f"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="EdgeWeightedGraph"><a href="#EdgeWeightedGraph" class="headerlink" title="EdgeWeightedGraph"></a>EdgeWeightedGraph</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter4<span class="token punctuation">.</span>section3<span class="token punctuation">;</span><span class="token keyword">import</span> offer<span class="token punctuation">.</span>chapter1<span class="token punctuation">.</span>Bag<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EdgeWeightedGraph</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> V<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> E<span class="token punctuation">;</span>    <span class="token keyword">private</span> Bag<span class="token operator">&lt;</span>Edge<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> adj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">EdgeWeightedGraph</span><span class="token punctuation">(</span><span class="token keyword">int</span> V<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>V <span class="token operator">=</span> V<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>E <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        adj <span class="token operator">=</span> <span class="token punctuation">(</span>Bag<span class="token operator">&lt;</span>Edge<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> V<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> V<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">E</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> E<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span>Edge e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">either</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> w <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">other</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        adj<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        E<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Edge<span class="token operator">></span> <span class="token function">adj</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Edge<span class="token operator">></span> <span class="token function">edges</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Bag<span class="token operator">&lt;</span>Edge<span class="token operator">></span> edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> V<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Edge edge <span class="token operator">:</span> adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> edges<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最小生成树即含有所有顶点的所有边权重最小的连通子图，是用贪心算法实现的</p><h2 id="Prim算法-选点法"><a href="#Prim算法-选点法" class="headerlink" title="Prim算法-选点法"></a>Prim算法-选点法</h2><p>Prim算法的速度最坏情况下可以达到ElogV，因为它维护的是一个关于顶点的优先队列，所以一次最坏速度为 logV，算法进行过程中需要V次插入，V次删除最小值，以及最坏情况下E次改变权重，而每次改变权重都需要重新使堆有序，也就是又一次logV，所以总共的最坏速度为ElogV</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20171125214733268"></p><ul><li>Prim算法每次将不在树中的顶点且权重最小的边加入树中，是<strong>选点法</strong></li><li>开始把所有顶点到生成树的距离设为最大值。随后选择一个顶点设置它到生成树的距离为0，并把他加入维护有效横切边的优先队列中。</li><li>然后开始循环，不断弹出优先队列中到生成树最小的那个顶点，加入生成树中。并把把该顶点相连接的所有不在树中的顶点且距离生成树更小的节点和他们到生成树的距离（该距离初始化为最大值）加入优先队列中。当优先队列为空，停止循环，此时生成了最小生成树。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter4<span class="token punctuation">.</span>section3<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrimMST</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//距离树最近的边</span>    <span class="token keyword">private</span> Edge<span class="token punctuation">[</span><span class="token punctuation">]</span> edgeTo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> distTo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marked<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存储有效的横切边</span>    <span class="token keyword">private</span> IndexMinPQ<span class="token operator">&lt;</span>Double<span class="token operator">></span> pq<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PrimMST</span><span class="token punctuation">(</span>EdgeWeightedGraph G<span class="token punctuation">)</span> <span class="token punctuation">{</span>        edgeTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">[</span>G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        distTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span>G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        marked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            distTo<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> Double<span class="token punctuation">.</span>POSITIVE_INFINITY<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//用0顶点做生成树的起点</span>        distTo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//pq每次删除都往最小生成树中加入一个节点，为空时最小生成树就已经构成了</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">visit</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> pq<span class="token punctuation">.</span><span class="token function">delMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>EdgeWeightedGraph G<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        marked<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把该顶点相连接的所有不在树中的顶点且距离生成树更小的节点加入</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Edge e <span class="token operator">:</span> G<span class="token punctuation">.</span><span class="token function">adj</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> w <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">other</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>marked<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> distTo<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                edgeTo<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                distTo<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> distTo<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> distTo<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Kruskal算法-选边法"><a href="#Kruskal算法-选边法" class="headerlink" title="Kruskal算法-选边法"></a>Kruskal算法-选边法</h2><p>最坏情况下速度为ElogE，主要是因为它维护了一个所有边的优先队列，那每次对优先队列操作成本为logE，而最坏情况下需要遍历所有边才能够得到我们需要的V-1条边，其他的UnionFound的操作因为是对顶点进行的，所以乘的是logV，量级比较小，所以忽略。</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20171126102742349"></p><ul><li>先将所有边加入最小堆</li><li>不断删除最小边直到堆为空，或者最小生成树中边的大小为V-1</li><li>删除的最小边对应的两个顶点如果已经是连通的，则忽略，否则将之加入生成树，并使得这两个顶点连通</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter4<span class="token punctuation">.</span>section3<span class="token punctuation">;</span><span class="token keyword">import</span> offer<span class="token punctuation">.</span>chapter1<span class="token punctuation">.</span>UF<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>PriorityQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KruskalMST</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//存储最小生成树</span>    <span class="token keyword">private</span> Queue<span class="token operator">&lt;</span>Edge<span class="token operator">></span> mst<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">KruskalMST</span><span class="token punctuation">(</span>EdgeWeightedGraph G<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PriorityQueue<span class="token operator">&lt;</span>Edge<span class="token operator">></span> minPQ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Edge edge <span class="token operator">:</span> G<span class="token punctuation">.</span><span class="token function">edges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            minPQ<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        UF uf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UF</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>minPQ<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mst<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Edge e <span class="token operator">=</span> minPQ<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">either</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> w <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">other</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>uf<span class="token punctuation">.</span><span class="token function">connected</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            uf<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>            mst<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Edge<span class="token operator">></span> <span class="token function">edges</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mst<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h1><h2 id="DirectedEdge"><a href="#DirectedEdge" class="headerlink" title="DirectedEdge"></a>DirectedEdge</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter4<span class="token punctuation">.</span>section4<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectedEdge</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> w<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> weight<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DirectedEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> w<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d->%d %.2f"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="EdgeWeightedDigraph"><a href="#EdgeWeightedDigraph" class="headerlink" title="EdgeWeightedDigraph"></a>EdgeWeightedDigraph</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter4<span class="token punctuation">.</span>section4<span class="token punctuation">;</span><span class="token keyword">import</span> offer<span class="token punctuation">.</span>chapter1<span class="token punctuation">.</span>Bag<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EdgeWeightedDigraph</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> V<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> E<span class="token punctuation">;</span>    <span class="token keyword">private</span> Bag<span class="token operator">&lt;</span>DirectedEdge<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> adj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">EdgeWeightedDigraph</span><span class="token punctuation">(</span><span class="token keyword">int</span> V<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>V <span class="token operator">=</span> V<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>E <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        adj <span class="token operator">=</span> <span class="token punctuation">(</span>Bag<span class="token operator">&lt;</span>DirectedEdge<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> V<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> V<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">E</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> E<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span>DirectedEdge e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        adj<span class="token punctuation">[</span>e<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        E<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>DirectedEdge<span class="token operator">></span> <span class="token function">adj</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>DirectedEdge<span class="token operator">></span> <span class="token function">edges</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Bag<span class="token operator">&lt;</span>DirectedEdge<span class="token operator">></span> edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> V<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>DirectedEdge e <span class="token operator">:</span> adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> edges<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><ul><li>Dijkstra和Prim算法都是用贪婪和线性规划算法，每一步选择权重最小的边</li><li>Dijkstra的松弛操作加上了到起点的距离，而Prim算法只有到树的距离（相邻节点的权值）</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter4<span class="token punctuation">.</span>section4<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DijkstraSP</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> DirectedEdge<span class="token punctuation">[</span><span class="token punctuation">]</span> edgeTo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> distTo<span class="token punctuation">;</span>    <span class="token keyword">private</span> IndexMinPQ<span class="token operator">&lt;</span>Double<span class="token operator">></span> pq<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DijkstraSP</span><span class="token punctuation">(</span>EdgeWeightedDigraph G<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        edgeTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectedEdge</span><span class="token punctuation">[</span>G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        distTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span>G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexMinPQ</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            distTo<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> Double<span class="token punctuation">.</span>POSITIVE_INFINITY<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        distTo<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">relax</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> pq<span class="token punctuation">.</span><span class="token function">delMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">relax</span><span class="token punctuation">(</span>EdgeWeightedDigraph G<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>DirectedEdge e <span class="token operator">:</span> G<span class="token punctuation">.</span><span class="token function">adj</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> w <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>distTo<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">></span> distTo<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                distTo<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> distTo<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                edgeTo<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> distTo<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> distTo<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 《算法4》笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
            <tag> 最小生成树 </tag>
            
            <tag> 最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树和散列表</title>
      <link href="posts/a46f7ecf.html"/>
      <url>posts/a46f7ecf.html</url>
      
        <content type="html"><![CDATA[<h1 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter3<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BST</span><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span> Value<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Node root<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> Key key<span class="token punctuation">;</span>        <span class="token keyword">private</span> Value value<span class="token punctuation">;</span>        <span class="token keyword">private</span> Node left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> N<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            N <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span>Node x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> x<span class="token punctuation">.</span>N<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Value <span class="token function">get</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Value <span class="token function">get</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node <span class="token function">put</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> root<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>N <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">size</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Key <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node <span class="token function">min</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Key <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node <span class="token function">max</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//找到小于等于key的最大值</span>    <span class="token keyword">public</span> Key <span class="token function">floor</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node x <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node <span class="token function">floor</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">floor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node t <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Key <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">select</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node <span class="token function">select</span><span class="token punctuation">(</span>Node x<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">select</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">select</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>right<span class="token punctuation">,</span> k <span class="token operator">-</span> t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Node x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> x<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">size</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> x<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token function">deleteMin</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node <span class="token function">deleteMin</span><span class="token punctuation">(</span>Node x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deleteMin</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        x<span class="token punctuation">.</span>N <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">size</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token function">delete</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node <span class="token function">delete</span><span class="token punctuation">(</span>Node x<span class="token punctuation">,</span> Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> x<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">delete</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> x<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">delete</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> x<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> x<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Node t <span class="token operator">=</span> x<span class="token punctuation">;</span>            x <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            x<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteMin</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            x<span class="token punctuation">.</span>left <span class="token operator">=</span> t<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        x<span class="token punctuation">.</span>N <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">size</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Node x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Key<span class="token operator">></span> <span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">keys</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Iterable<span class="token operator">&lt;</span>Key<span class="token operator">></span> <span class="token function">keys</span><span class="token punctuation">(</span>Key lo<span class="token punctuation">,</span> Key hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedList<span class="token operator">&lt;</span>Key<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">keys</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> queue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">keys</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> LinkedList<span class="token operator">&lt;</span>Key<span class="token operator">></span> queue<span class="token punctuation">,</span> Key lo<span class="token punctuation">,</span> Key hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cmpLo <span class="token operator">=</span> lo<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cmpHi <span class="token operator">=</span> hi<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmpLo <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">keys</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmpLo <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cmpHi <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmpHi <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">keys</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="2-3查找树"><a href="#2-3查找树" class="headerlink" title="2-3查找树"></a>2-3查找树</h1><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><ul><li>理想情况下能保持二分查找树的平衡性。在一颗含有N个结点的树中，高为lgN，这样就能保证所有查找都能在lgN次比较内结束</li><li>3-结点含有两个键和三条链接，中链接指向的2-3树树中的键都位于该结点的两个键之间</li><li>一颗完美平衡的2-3查找树中的所有空链接到根结点的距离都应该是相同的</li><li>2-3查找树能够在插入后继续保存平衡</li></ul><h2 id="2-3查找树插入结点"><a href="#2-3查找树插入结点" class="headerlink" title="2-3查找树插入结点"></a>2-3查找树插入结点</h2><ul><li>向2-结点中插入新键：则直接替换为3-结点即可</li><li>向一颗只含有3-结点的树插入新键：则可以先变成4-结点，然后分解为3个2-结点</li><li>向一个父结点为2-结点的3-结点插入新键：先构建临时4-结点，然后分解并移动到父结点中，而父结点有空间，只是从2-结点变成3-结点</li><li>向一个父结点为3-结点的3-结点插入新键：把该结点的中键插入父结点中，此时父结点也是临时4-结点，则继续分解到更高层父结点，直到遇到一个2-结点或者到达3-结点的根</li><li>分解根结点：因为按上一个方法，可能把根结点变为临时的4-结点，此时就将它分解为3个2-结点，使得树高加一</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/v2-2a12baeeada56772c5bef3d5366c1da2_1440w.jpg" alt="img"></p><h2 id="3-结点合法性证明"><a href="#3-结点合法性证明" class="headerlink" title="3-结点合法性证明"></a>3-结点合法性证明</h2><p>首先证明了合理处理插入的2-3查找树是完美平衡的,即插入第一个结点是平衡的,插入任意一个二结点都会得到一个三结点,高度不变。而插入一个三结点时，会把中间那个结点传递上去，如果上面还是三结点，就继续传递。</p><p>如果传递到了根结点，根结点是一个的，则变成三结点，如果根结点是三结点。则分裂成三个二结点。总高度+1，而仍然是完美平衡的。</p><h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><h2 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h2><ul><li>红黑树是一种特化平衡二叉树，都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能，查找的时间复杂度为O(logN)。</li><li>红黑树基本思想是用标准二叉查找树和额外的信息来表示2-3树</li><li>红链接将两个2-结点连接起来构成3-结点，3-结点其实就是由一条左斜的红色链接表示</li><li>，红黑树是含有红黑链接的满足以下条件的二叉查找树</li><li><ul><li>红链接都是左链接<ul><li>没有任何结点有连续两个红链接，</li><li>该树完美黑色平衡：任意空链接到根结点上的黑链接数量相同</li></ul></li></ul></li><li>插入时，总是插入红色的，以不破坏平衡。之后再进行恰当的旋转，以保证红黑树特性。</li><li>如果将一颗红黑树的红链接画平，那么所有空链接到根节点的距离都将是相同的</li><li>如果我们将红链接相连的节点合并，就得到了一颗2-3树</li><li>所以红黑树既是2-3树，也是二叉查找树</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="向单个2-节点中插入新键"><a href="#向单个2-节点中插入新键" class="headerlink" title="向单个2-节点中插入新键"></a>向单个2-节点中插入新键</h3><ul><li><p>如果新键小于老键，新增一个红色链接即可</p></li><li><p>否则会产生一个右链接，此时需要左旋：root = rotateLeft(root);</p><p>  <img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/v2-193cff9367c1da14ab5ed9291ba3e5b8_1440w.jpg" alt="img"></p></li></ul><h3 id="向3-节点中插入新键"><a href="#向3-节点中插入新键" class="headerlink" title="向3-节点中插入新键"></a>向3-节点中插入新键</h3><p>如果新键大于两个老键，则把两条链接颜色变黑，就得到了一颗三个节点的，高为2的平衡树</p><p>如果新键小于两个老键，则形成了两条连续的左链接，则将最上层的红链接右旋转即可得到第一种情况</p><p>如果新键介于两个老键之间，则先左旋，就得到第二种情况</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/v2-c9a1916d6d2ea876539cbcaa86562b93_1440w.jpg" alt="img"></p><h3 id="颜色转换"><a href="#颜色转换" class="headerlink" title="颜色转换"></a>颜色转换</h3><ul><li>左右两个红色链接变黑，并且向上传递，所以父节点的颜色由黑变红</li><li>不过根节点的颜色总是黑色的</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/v2-a60b8294f8bcca7801640212998083d5_1440w.jpg" alt="img"></p><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><ul><li>操作中可能出现红色右链接或连续的红链接，但这些情况都会被旋转并修复</li><li>左旋转：把红色右链接转化为左链接</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/v2-ffed4cdbdae868224d2d6f1b24e39a53_1440w.jpg" alt="img"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li>如果右子节点是红色的而左子节点是黑色的，则进行左旋转</li><li>如果左子节点是红色的并且他的左子节点也是红色的，进行右旋转</li><li>如果左右子节点均为红色的，进行颜色转换</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter3<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedBlackBST</span><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span> Value<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Node root<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> RED <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> BLACK <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        Key key<span class="token punctuation">;</span>        Value value<span class="token punctuation">;</span>        Node left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>        <span class="token keyword">int</span> N<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> color<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一个节点的颜色，指的是指向该节点的链接的颜色</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">boolean</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            N <span class="token operator">=</span> n<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node <span class="token function">put</span><span class="token punctuation">(</span>Node h<span class="token punctuation">,</span> Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cmp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> h<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> h<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> h<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> h <span class="token operator">=</span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> h <span class="token operator">=</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">flipColors</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span>N <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">size</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">size</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> h<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isRed</span><span class="token punctuation">(</span>Node x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">.</span>color <span class="token operator">==</span> RED<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node <span class="token function">rotateLeft</span><span class="token punctuation">(</span>Node h<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node x <span class="token operator">=</span> h<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>right <span class="token operator">=</span> x<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>left <span class="token operator">=</span> h<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>color <span class="token operator">=</span> h<span class="token punctuation">.</span>color<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>N <span class="token operator">=</span> h<span class="token punctuation">.</span>N<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>N <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">size</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">size</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node <span class="token function">rotateRight</span><span class="token punctuation">(</span>Node h<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node x <span class="token operator">=</span> h<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>right <span class="token operator">=</span> h<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>color <span class="token operator">=</span> h<span class="token punctuation">.</span>color<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>N <span class="token operator">=</span> h<span class="token punctuation">.</span>N<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>N <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">size</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span>Node x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">.</span>N<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">flipColors</span><span class="token punctuation">(</span>Node h<span class="token punctuation">)</span> <span class="token punctuation">{</span>        h<span class="token punctuation">.</span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>left<span class="token punctuation">.</span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>right<span class="token punctuation">.</span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeparateChainingHashST</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> N<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> M<span class="token punctuation">;</span>    <span class="token keyword">private</span> SequentialSearchST<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> st<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SeparateChainingHashST</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        M <span class="token operator">=</span> m<span class="token punctuation">;</span>        st <span class="token operator">=</span> <span class="token punctuation">(</span>SequentialSearchST<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">SequentialSearchST</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SequentialSearchST</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">SeparateChainingHashST</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">997</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x7fffffff</span><span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        st<span class="token punctuation">[</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Value <span class="token function">get</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Value<span class="token punctuation">)</span> st<span class="token punctuation">[</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter3<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinearProbingHashST</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> N<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Key<span class="token punctuation">[</span><span class="token punctuation">]</span> keys<span class="token punctuation">;</span>    <span class="token keyword">private</span> Value<span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LinearProbingHashST</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        keys <span class="token operator">=</span> <span class="token punctuation">(</span>Key<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>        values <span class="token operator">=</span> <span class="token punctuation">(</span>Value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffff</span><span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">>=</span> M <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> M<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>        values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        N<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Value <span class="token function">get</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Key keyToRedo <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            Value valueToRedo <span class="token operator">=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>            values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>            N<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">put</span><span class="token punctuation">(</span>keyToRedo<span class="token punctuation">,</span> valueToRedo<span class="token punctuation">)</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        N<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> N <span class="token operator">==</span> M <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token function">resize</span><span class="token punctuation">(</span>M <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinearProbingHashST<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinearProbingHashST</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        keys <span class="token operator">=</span> t<span class="token punctuation">.</span>keys<span class="token punctuation">;</span>        values <span class="token operator">=</span> t<span class="token punctuation">.</span>values<span class="token punctuation">;</span>        M <span class="token operator">=</span> t<span class="token punctuation">.</span>M<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter3<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SparseVector</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Double<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hashMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>hashMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//所需的时间仅和N加上矩阵中的非零元素成正比</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">dot</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> that<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i <span class="token operator">:</span> hashMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> that<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    稀疏矩阵    每个网页中指向其他页面的链接很少，即其中大多数项都是0     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//N等于互联网所有网页的数量</span>        <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*//原始做法，时间复杂度O(N^2)        for (int i = 0; i &lt; N; i++) {            double sum = 0.0;            for (int j = 0; j &lt; N; j++) {                sum += a[i][j] * x[j];            }            b[i] = sum;        }*/</span>        SparseVector<span class="token punctuation">[</span><span class="token punctuation">]</span> sparseVectors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparseVector</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sparseVectors<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparseVector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sparseVectors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 《算法4》笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性探测法 </tag>
            
            <tag> 红黑树 </tag>
            
            <tag> 二叉查找树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="posts/735e5788.html"/>
      <url>posts/735e5788.html</url>
      
        <content type="html"><![CDATA[<h1 id="通用模板"><a href="#通用模板" class="headerlink" title="通用模板"></a>通用模板</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter2<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">less</span><span class="token punctuation">(</span>Comparable v<span class="token punctuation">,</span> Comparable w<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exch</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Comparable temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSorted</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">exch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">exch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>h <span class="token operator">&lt;</span> N <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        h <span class="token operator">=</span> h <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>h <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">-</span> h <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> h<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">exch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">-</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        h <span class="token operator">/=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    aux <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hi <span class="token operator">&lt;=</span> lo<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> lo<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        aux<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> lo<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> mid<span class="token punctuation">)</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> hi<span class="token punctuation">)</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>aux<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> aux<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hi <span class="token operator">&lt;=</span> lo<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">,</span> j <span class="token operator">=</span> hi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    Comparable v <span class="token operator">=</span> a<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> hi<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token operator">--</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> lo<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> j<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">exch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">exch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p>注意，这里把第一个位置a[0]空了出来，不参与排序</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> N <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sink</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> k<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>N <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">exch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> N<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sink</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sink</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">&lt;=</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> N <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">++</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">exch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        k <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p>当一颗二叉树的每个节点都大于等于他的两个子节点时，它被称为堆有序</p><p>二叉堆是一组能够用堆有序的完全二叉树排列的元素，并在数组中按照层级存储（不使用数组的第一个位置）</p><p>位置k的结点的父节点的位置为 k / 2，而他的两个子节点位置分别为2k,2k + 1。</p><p>这样可以通过计算数组的索引在树种上下移动：从a[k]向上一层就令k等于k / 2，向下一层就令k等于2k或2k+1</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">.</span>chapter2<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MaxPQ</span><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Key<span class="token operator">>></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Key<span class="token punctuation">[</span><span class="token punctuation">]</span> pq<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MaxPQ</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxN<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pq <span class="token operator">=</span> <span class="token punctuation">(</span>Key<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>maxN <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> N <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> N<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Key v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pq<span class="token punctuation">[</span><span class="token operator">++</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token function">swim</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Key <span class="token function">delMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Key max <span class="token operator">=</span> pq<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">exch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sink</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">less</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">exch</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Key t <span class="token operator">=</span> pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sink</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">&lt;=</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> N <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">less</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">exch</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">exch</span><span class="token punctuation">(</span>k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="统计数组中重复元素的个数"><a href="#统计数组中重复元素的个数" class="headerlink" title="统计数组中重复元素的个数"></a>统计数组中重复元素的个数</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Quick<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第k小元素的位置"><a href="#第k小元素的位置" class="headerlink" title="第k小元素的位置"></a>第k小元素的位置</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Comparable <span class="token function">select</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">></span> k<span class="token punctuation">)</span> hi <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> lo <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">,</span> j <span class="token operator">=</span> hi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    Comparable v <span class="token operator">=</span> a<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> hi<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token operator">--</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> lo<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> j<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">exch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">exch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 《算法4》笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插入排序 </tag>
            
            <tag> 快速排序 </tag>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分搜索、union-find算法</title>
      <link href="posts/16b3d50.html"/>
      <url>posts/16b3d50.html</url>
      
        <content type="html"><![CDATA[<h1 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//默认情况下，如果没有找到，那么hi对应元素第一个小于他，lo对应元素第一个大于他</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rank1</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;=</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//递归方式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hi <span class="token operator">&lt;</span> lo<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> a<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="TwoSum"><a href="#TwoSum" class="headerlink" title="TwoSum"></a>TwoSum</h1><p>统计一个数组中所有和为0的二元组数量</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TwoSumFast</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//避免重复计数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>BinarySearch<span class="token punctuation">.</span><span class="token function">rank</span><span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="ThreeSum"><a href="#ThreeSum" class="headerlink" title="ThreeSum"></a>ThreeSum</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreeSumFast</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>BinarySearch<span class="token punctuation">.</span><span class="token function">rank</span><span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token operator">++</span>cnt<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="连通性算法"><a href="#连通性算法" class="headerlink" title="连通性算法"></a>连通性算法</h1><h2 id="quick-find"><a href="#quick-find" class="headerlink" title="quick-find"></a>quick-find</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UF</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UF</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> N<span class="token punctuation">;</span>        id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">connected</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pID <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> qID <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pID <span class="token operator">==</span> qID<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> id<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pID<span class="token punctuation">)</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> qID<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="quick-union"><a href="#quick-union" class="headerlink" title="quick-union"></a>quick-union</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UF</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UF</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> N<span class="token punctuation">;</span>        id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">connected</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> id<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            p <span class="token operator">=</span> id<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> qRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pRoot <span class="token operator">==</span> qRoot<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        id<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">=</span> qRoot<span class="token punctuation">;</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="加权quick-union"><a href="#加权quick-union" class="headerlink" title="加权quick-union"></a>加权quick-union</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeightedQuickUnionUF</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//size代表规模，不是高度</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">WeightedQuickUnionUF</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> N<span class="token punctuation">;</span>        id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            size<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">connected</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> id<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            p <span class="token operator">=</span> id<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> qRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pRoot <span class="token operator">==</span> qRoot<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">&lt;</span> size<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            id<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">=</span> qRoot<span class="token punctuation">;</span>            size<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            id<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span> <span class="token operator">=</span> pRoot<span class="token punctuation">;</span>            size<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 《算法4》笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分搜索 </tag>
            
            <tag> 连通性算法 </tag>
            
            <tag> ThreeSum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户模块后端设计逻辑</title>
      <link href="posts/a280e558.html"/>
      <url>posts/a280e558.html</url>
      
        <content type="html"><![CDATA[<h1 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h1><pre><code>/user</code></pre><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><table><thead><tr><th>API</th><th>/register</th></tr></thead><tbody><tr><td>参数</td><td>username、password、telephone、authCode</td></tr><tr><td>可选参数</td><td>icon</td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td></td></tr></tbody></table><ul><li>校验验证码</li><li>检查用户名或手机号是否存在</li><li>对密码加密存储</li><li>若没有头像，则设置默认头像</li><li>删除该验证码，防止重复使用</li></ul><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/image-20210109195030427.png" alt="image-20210109195030427"></p><h2 id="账号密码登录"><a href="#账号密码登录" class="headerlink" title="账号密码登录"></a>账号密码登录</h2><table><thead><tr><th>API</th><th>/usernameLogin</th></tr></thead><tbody><tr><td>参数</td><td>username、password</td></tr><tr><td>返回值</td><td>token</td></tr><tr><td>说明</td><td></td></tr></tbody></table><ul><li><p>首先从缓存中通过<code>username</code>获取用户信息</p></li><li><p>获取不到则通过username查询数据库（数据库也没有则报错给前端）</p></li><li><p>检验账号是否被禁用</p></li><li><p>并且将查到的存入redis中（用户名，用户信息）（手机号，用户信息）</p></li><li><p>将用户输入的密码加密后与数据库查到的user密码对比（密码错误则报错给前端）</p></li><li><p>在服务器内存中存储了该用户信息，返回<code>token</code>给前端</p></li></ul><h2 id="手机号密码登录"><a href="#手机号密码登录" class="headerlink" title="手机号密码登录"></a>手机号密码登录</h2><table><thead><tr><th>API</th><th>/telephoneLogin</th></tr></thead><tbody><tr><td>参数</td><td>telephone、password</td></tr><tr><td>返回值</td><td>token</td></tr><tr><td>说明</td><td></td></tr></tbody></table><ul><li>首先从redis中通过<code>telephone</code>获取用户信息</li><li>获取不到则查询数据库（数据库也没有则报错给前端）</li><li>检验账号是否被禁用</li><li>将查到的存入redis中</li><li>将用户输入的密码与数据库查到的<code>user</code>对比（密码错误则报错给前端）</li><li>在服务器内存中存储了该用户信息，返回<code>token</code>给前端</li></ul><h2 id="手机号验证码登录"><a href="#手机号验证码登录" class="headerlink" title="手机号验证码登录"></a>手机号验证码登录</h2><table><thead><tr><th>API</th><th>/authCodeLogin</th></tr></thead><tbody><tr><td>参数</td><td>telephone、authCode</td></tr><tr><td>返回值</td><td>token</td></tr><tr><td>说明</td><td></td></tr></tbody></table><ul><li>首先校验验证码</li><li>在redis中通过<code>telephone</code>获取用户信息</li><li>获取不到则查询数据库，并且将查到的存入redis中</li><li>检验账号是否被禁用</li><li></li><li>在服务器内存中存储了该用户信息，返回<code>token</code>给前端</li></ul><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><table><thead><tr><th>API</th><th></th></tr></thead><tbody><tr><td>参数</td><td></td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td></td></tr></tbody></table><ul><li>查询该手机号是否存在</li><li>校验验证码</li><li>给密码进行加密</li><li>更新成功时删除无效缓存(删除两条，分别是{username:user}，{telephone:user})（删除该验证码，防止重复使用）</li></ul><h2 id="更新个人信息"><a href="#更新个人信息" class="headerlink" title="更新个人信息"></a>更新个人信息</h2><table><thead><tr><th>API</th><th></th></tr></thead><tbody><tr><td>参数</td><td></td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td></td></tr></tbody></table><ul><li>参数都是可选的参数</li><li>更新成功时删除无效缓存</li></ul><h2 id="获取个人信息"><a href="#获取个人信息" class="headerlink" title="获取个人信息"></a>获取个人信息</h2><table><thead><tr><th>API</th><th></th></tr></thead><tbody><tr><td>参数</td><td></td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td></td></tr></tbody></table><p>没登录时会报错，否则返回当前登录用户的信息</p><p>将核心领域模型用户对象转化为可供UI使用的viewObject对象</p><h2 id="获取验证码"><a href="#获取验证码" class="headerlink" title="获取验证码"></a>获取验证码</h2><table><thead><tr><th>API</th><th></th></tr></thead><tbody><tr><td>参数</td><td></td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td></td></tr></tbody></table><ul><li>查询生成6位随机数</li><li>用<code>redis</code>存储手机号，验证码，90秒过期</li><li>用阿里云服务向手机号发送验证码</li></ul><h2 id="刷新token"><a href="#刷新token" class="headerlink" title="刷新token"></a>刷新token</h2><table><thead><tr><th>API</th><th></th></tr></thead><tbody><tr><td>参数</td><td></td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td></td></tr></tbody></table><ul><li>如果<code>token</code>过期或者在30分钟之内刚刷新过，则不进行操作</li><li>否则通过原先的<code>token</code>的用户信息和当前的时间新生成一个<code>token</code></li></ul><h1 id="菜单模块"><a href="#菜单模块" class="headerlink" title="菜单模块"></a>菜单模块</h1><pre><code>/category</code></pre><h2 id="查看菜单"><a href="#查看菜单" class="headerlink" title="查看菜单"></a>查看菜单</h2><table><thead><tr><th>API</th><th>/categories</th></tr></thead><tbody><tr><td>参数</td><td></td></tr><tr><td>返回值</td><td>CommonResult&lt;List<BoyingCategory>&gt;</td></tr><tr><td>说明</td><td>只能查看未被管理员删除的菜单，按照weight降序</td></tr><tr><td></td><td>如果菜单列表为空，则返回404</td></tr></tbody></table><h2 id="查看菜单详情"><a href="#查看菜单详情" class="headerlink" title="查看菜单详情"></a>查看菜单详情</h2><table><thead><tr><th>API</th><th>/details/{id}</th></tr></thead><tbody><tr><td>参数</td><td>id</td></tr><tr><td>返回值</td><td>CommonResult<BoyingCategory></td></tr><tr><td>说明</td><td>只能查看未被管理员删除的菜单</td></tr></tbody></table><h1 id="演出模块"><a href="#演出模块" class="headerlink" title="演出模块"></a>演出模块</h1><pre><code>/show</code></pre><h2 id="演出的综合搜索筛选"><a href="#演出的综合搜索筛选" class="headerlink" title="演出的综合搜索筛选"></a>演出的综合搜索筛选</h2><table><thead><tr><th>API</th><th>/search</th></tr></thead><tbody><tr><td>参数</td><td></td></tr><tr><td>可选参数</td><td>keyword、city、categoryId、pageNum、pageSize</td></tr><tr><td>返回值</td><td>CommonResult&lt;CommonPage<BoyingShow>&gt;</td></tr><tr><td>说明</td><td>也返回最低价，最高价</td></tr></tbody></table><ul><li>可根据以下的几种综合搜索演出:</li><li>关键词，城市，菜单</li><li>按weight降序</li><li>分页:每页条数，分页数</li></ul><h2 id="获取某个演出详情"><a href="#获取某个演出详情" class="headerlink" title="获取某个演出详情"></a>获取某个演出详情</h2><table><thead><tr><th>API</th><th>/detail/{id}</th></tr></thead><tbody><tr><td>参数</td><td>id</td></tr><tr><td>返回值</td><td>CommonResult<BoyingShow></td></tr><tr><td>说明</td><td>通过show_id获取该演出信息,用于在进入特定的演出详情页面</td></tr><tr><td></td><td>也返回最低价，最高价</td></tr></tbody></table><h1 id="演出座次模块"><a href="#演出座次模块" class="headerlink" title="演出座次模块"></a>演出座次模块</h1><h2 id="获取某演唱会的所有座次"><a href="#获取某演唱会的所有座次" class="headerlink" title="获取某演唱会的所有座次"></a>获取某演唱会的所有座次</h2><table><thead><tr><th>API</th><th>/detail/{showId}</th></tr></thead><tbody><tr><td>参数</td><td>showId</td></tr><tr><td>返回值</td><td>CommonResult&lt;List<BoyingSeatVO>&gt;</td></tr><tr><td>说明</td><td>根据show_id获取该演出的所有座次，不用分页</td></tr></tbody></table><ul><li>根据show_id获取该演出的所有座次</li><li>从库存表中查出剩余的库存</li><li>从秒杀活动表中查询活动，并已封装成了领域模型（根据活动开始和结束的时间封装了秒杀活动状态 1表示还未开始，2表示进行中，3表示已结束）</li><li>将上述查到的组合封装成BoyingSeatModel</li><li>在controller层又封装成BoyingSeatVO对象（如果有活动则放入活动状态、活动Id，活动开始时间、活动价；没有活动则将活动状态置为0），并返回给前端</li></ul><h2 id="获取某座次详情"><a href="#获取某座次详情" class="headerlink" title="获取某座次详情"></a>获取某座次详情</h2><table><thead><tr><th>API</th><th>/detail/{seatId}</th></tr></thead><tbody><tr><td>参数</td><td>seatId</td></tr><tr><td>返回值</td><td>CommonResult<BoyingSeatVO></td></tr><tr><td>说明</td><td>聚合了活动相关信息，和上述</td></tr></tbody></table><h1 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h1><p>订单状态：待观看，已完成，已取消(1，2，3)</p><p>票模块不提供额外接口，只提供service</p><h2 id="用户下单"><a href="#用户下单" class="headerlink" title="用户下单"></a>用户下单</h2><table><thead><tr><th>API</th><th>/add</th></tr></thead><tbody><tr><td>参数</td><td>showId、seatId、ticketCount、payment、promoId</td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td></td></tr></tbody></table><p>一个用户对一个演出只能下单1次，但是可以买[1，3]张票（只能买相同座次）</p><ul><li>验证传入参数（演出座次要大于等于1，小于等于3）</li><li>验证传入的演出座次是否属于传入的演出</li><li>查看该登录用户对于该演出的订单是否已经存在（已退票的不算）</li><li>查看是否传入活动信息<ul><li>校验传入的活动是否对应于这个座次</li><li>校验活动是否正在进行中</li><li>如果都存在，则设置为活动价</li></ul></li><li>查看并减库存</li><li>生成订单，下单人为当前用户、show_id、promoId（为0代表不是活动价）、待观看状态（1）、时间、user_delete=0、admin_delete=0、订单总价，订单票总数、生成对应的二维码与信息</li></ul><h2 id="查看所有订单"><a href="#查看所有订单" class="headerlink" title="查看所有订单"></a>查看所有订单</h2><table><thead><tr><th>API</th><th>/list</th></tr></thead><tbody><tr><td>可选参数</td><td>name、userId、status、pageNum、pageSize</td></tr><tr><td>返回值</td><td>CommonResult&lt;CommonPage<BoyingOrder>&gt;</td></tr><tr><td>说明</td><td></td></tr></tbody></table><ul><li>订单信息，订单状态，禁用状态</li><li>用户删除的订单不显示，管理员删除的订单会显示状态，便于申述</li><li>只用为观看订单展示管理员删除状态</li><li>未观看订单不允许删除</li></ul><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/C38C9D225E745E10DB35A23A517BD6F5.jpg" alt="img"></p><ul><li>先查询当前用户，再根据用户Id查询订单表</li><li>可分类查询：待观看，已完成，已取消</li><li>支持订单名称（即演唱会名）模糊搜索</li><li>查看未被用户删除的订单</li><li>管理员删除的订单也返回，不过查看订单详情时则不允许</li><li>支持分页查询</li></ul><h2 id="查看订单详情"><a href="#查看订单详情" class="headerlink" title="查看订单详情"></a>查看订单详情</h2><table><thead><tr><th>API</th><th>details/{id}</th></tr></thead><tbody><tr><td>参数</td><td>id</td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td></td></tr></tbody></table><ul><li>传入订单Id，获取当前用户，校验是否是该用户的订单、获取没被用户删除的订单</li><li>如果订单被管理员删除，则提示并返回</li><li>查询票的详情，返回订单和票的信息</li></ul><h2 id="删除订单"><a href="#删除订单" class="headerlink" title="删除订单"></a>删除订单</h2><table><thead><tr><th>API</th><th>/delete/{id}</th></tr></thead><tbody><tr><td>参数</td><td>id</td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td></td></tr></tbody></table><ul><li>仅仅是用户层面的删除订单，即对用户隐藏</li><li>传入订单Id，获取当前用户</li><li>校验是否是该用户的订单（订单Id，当前用户Id，user_delete为false的）</li><li>如果订单为待观看状态，不能删除</li><li>如果订单已经被管理员删除，则不能删除</li><li>将该Id的user_delete设为true</li></ul><h2 id="取消订单"><a href="#取消订单" class="headerlink" title="取消订单"></a>取消订单</h2><table><thead><tr><th>API</th><th>/cancel/{id}</th></tr></thead><tbody><tr><td>参数</td><td>id</td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td></td></tr></tbody></table><ul><li>获取当前用户</li><li>获取订单（订单Id，当前用户Id，user_delete为false的）</li><li>只能取消待观看订单</li><li>增加订单对应座次的库存</li><li>删除订单对应的票</li><li>设置订单状态为已取消（3）</li></ul><h1 id="一些简化"><a href="#一些简化" class="headerlink" title="一些简化"></a>一些简化</h1><h2 id="订单流程简化"><a href="#订单流程简化" class="headerlink" title="订单流程简化"></a>订单流程简化</h2><ul><li>没有购物车，订单也没有待付款的操作，用户选好票后直接付款就生成了订单。</li><li>没有线下寄件的操作，用户订单生成后直接也只能可以查看电子票。</li><li>订单只有待观看，已完成，已退票状态。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博影项目笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> API </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包、队列和栈</title>
      <link href="posts/3a5ee8c4.html"/>
      <url>posts/3a5ee8c4.html</url>
      
        <content type="html"><![CDATA[<h1 id="算术表达式求值"><a href="#算术表达式求值" class="headerlink" title="算术表达式求值"></a>算术表达式求值</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Evaluate</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String input <span class="token operator">=</span> <span class="token string">"( 1 + ( ( 2 + 3 ) * ( 4 * 5 ) ) )"</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span> ops <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LinkedList<span class="token operator">&lt;</span>Double<span class="token operator">></span> vals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> strings<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">||</span> string<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">||</span> string<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">||</span> string<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">||</span> string<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"sqrt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ops<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String op <span class="token operator">=</span> ops<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">double</span> v <span class="token operator">=</span> vals<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    v <span class="token operator">=</span> vals<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> v<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    v <span class="token operator">=</span> vals<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> v<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    v <span class="token operator">=</span> vals<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    v <span class="token operator">=</span> vals<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> v<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"sqrt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    v <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                vals<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                vals<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Double<span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vals<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="数组实现栈"><a href="#数组实现栈" class="headerlink" title="数组实现栈"></a>数组实现栈</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResizingArrayStack</span><span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Item<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>Item<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> N <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> N<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Item<span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>Item<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">==</span> a<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>N<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Item <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Item item <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token operator">--</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> N <span class="token operator">==</span> a<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resize</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReverseArrayIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ReverseArrayIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> N<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Item <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="链表实现栈"><a href="#链表实现栈" class="headerlink" title="链表实现栈"></a>链表实现栈</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Node first<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> N<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        Item item<span class="token punctuation">;</span>        Node next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> first <span class="token operator">==</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> N<span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node oldFirst <span class="token operator">=</span> first<span class="token punctuation">;</span>        first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        first<span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>        first<span class="token punctuation">.</span>next <span class="token operator">=</span> oldFirst<span class="token punctuation">;</span>        N<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Item <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Item item <span class="token operator">=</span> first<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        first <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        N<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="链表实现队列"><a href="#链表实现队列" class="headerlink" title="链表实现队列"></a>链表实现队列</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Node first<span class="token punctuation">;</span>    <span class="token keyword">private</span> Node last<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> N<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        Item item<span class="token punctuation">;</span>        Node next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> first <span class="token operator">==</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> N<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node oldLast <span class="token operator">=</span> last<span class="token punctuation">;</span>        last <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        last<span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>        last<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> first <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">else</span> oldLast<span class="token punctuation">.</span>next <span class="token operator">=</span> last<span class="token punctuation">;</span>        N<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Item <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Item item <span class="token operator">=</span> first<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        first <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> last <span class="token operator">=</span> null<span class="token punctuation">;</span>        N<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="链表实现背包"><a href="#链表实现背包" class="headerlink" title="链表实现背包"></a>链表实现背包</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> offer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bag</span><span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Node first<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        Item item<span class="token punctuation">;</span>        Node next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node oldFirst <span class="token operator">=</span> first<span class="token punctuation">;</span>        first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        first<span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>        first<span class="token punctuation">.</span>next <span class="token operator">=</span> oldFirst<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ListIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> Node cur <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cur <span class="token operator">!=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Item <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Item item <span class="token operator">=</span> cur<span class="token punctuation">.</span>item<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> item<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 《算法4》笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>boying-admin技术说明</title>
      <link href="posts/5729f47f.html"/>
      <url>posts/5729f47f.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><h2 id="权限系统"><a href="#权限系统" class="headerlink" title="权限系统"></a>权限系统</h2><p>权限系统就是：明确操作人员可在平台内能做什么。即什么样的人，可以做什么样的事，这并不难理解，我们的用户是所有可以登录该平台的人员。</p><p>“用户管理”、“角色管理”、“权限管理”</p><p>RBAC即：权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。</p><p>用户与角色一一对应，一个用户对应一个角色；同一个角色可对应多个后台操作页面</p><p>RBAC结构可通过“角色”搭建用户与权限之间的关系，可在创建角色时绑定相应权限，再匹配到用户，可提高整体的效率以及稳定性。</p><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>用户认证通过后，将用户信息保存在会话中，如token等。基于JWT令牌，会话通过token保存。认证是保护用户身份的合法性。</p><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><p>更细粒度的对隐私数据进行划分。授权是用户认证通过根据用户的权限来控制用户访问资源的过程。</p><h2 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h2><p>“用户-角色-权限”管理是 <strong>“访问控制”</strong> 的一种实现方式，更为专业的叫法为 <strong>RBAC</strong>（Role-Based Access Control），即基于角色的权限访问控制。</p><p>权限的三种粒度：<strong>菜单权限、操作/功能权限、数据权限</strong>。</p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ul><li><strong>用户信息：</strong> 显示用户的基本信息（昵称、联系方式、角色、部门等）</li><li><strong>组织架构：</strong> 显示、配置（增删改）组织架构，一般为树结构</li><li><strong>用户操作：</strong> 为用户分配角色（多对多）、组织架构（多对多），删除用户</li><li><strong>用户黑白名单：</strong> 对特殊用户进行特别控制</li></ul><h2 id="角色管理"><a href="#角色管理" class="headerlink" title="角色管理"></a>角色管理</h2><ul><li><strong>角色信息：</strong> 显示角色的基本信息（名称、权限等）</li><li><strong>角色操作：</strong> 根据需要增删角色、为角色分配权限（多对多，按不同粒度分配，并实现权限的互斥性检验）</li></ul><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><p>权限一般有如下三种粒度：</p><ul><li><strong>菜单权限：</strong> 访问某一菜单（页面、路由）的权限</li><li><strong>操作/功能权限：</strong> 进行某一操作或使用某一功能的权限（如删除用户的权限）</li><li><strong>数据权限：</strong> 访问某种数据（表、字段）的权限，或对可操作数据量的控制</li></ul><h2 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h2><ul><li>用户、角色、权限、组织架构表结构设计</li><li>用户身份验证、授权、会话管理，用户信息的加密存储</li><li>不同粒度权限的具体实现</li></ul><h1 id="权限管理-1"><a href="#权限管理-1" class="headerlink" title="权限管理"></a>权限管理</h1><p>权限管理在后端项目中主要体现在对接口访问权限的控制，在前端项目中主要体现在对菜单访问权限的控制</p><p>如何结合Vue来实现菜单的动态权限控制。</p><h2 id="菜单管理"><a href="#菜单管理" class="headerlink" title="菜单管理"></a>菜单管理</h2><p>可以实现对后台管理系统左侧菜单的管理，支持更换图标、更换名称、控制菜单显示和排序（控制其隐藏显示及更换图片名称和排序，目前仅支持二级菜单）</p><p>菜单管理用于控制前端菜单的显示和隐藏</p><ul><li>查看菜单列表，可以控制隐藏显示及删除；</li><li>添加及编辑菜单，可以更改菜单的基本属性，不过只能添加前端项目<code>路由中定义</code>的菜单，并且<code>前端名称</code>要与前端项目中定义的<code>路由名称</code>一致；</li><li>菜单排序，给菜单设置排序后，菜单将按照设置的排序降序进行显示。</li></ul><h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><p>资源管理用来控制后端接口的访问权限。</p><p>后台资源表，用于控制后台用户可以访问的接口，使用了Ant路径的匹配规则，可以使用通配符定义一系列接口的权限。</p><p>实现了基于访问路径的后台动态权限控制，控制的权限可以精确到接口级别</p><p>所谓资源就是后台的接口，可以是单个接口，也可以是一系列接口的集合。这里我们使用了基于Ant的路径匹配，当后台用户访问某个接口时，如果这个后台用户分配了该资源就可以访问，否则无法访问。默认情况下，如果你没有对某个接口配置资源，则该资源直接允许访问。</p><p>例子：将订单相关菜单开放给商品管理员，但是并没有给他分配订单相关的资源；能进入那个菜单，但是由于没有给商品管理员分配订单模块相关后台资源，所以当商品管理员访问订单模块时会提示没有相关权限。</p><ul><li>查看资源列表，目前的资源是按控制器级别配置的，即一个控制器中所有的接口定义为一个资源，也可以配置到接口级别；</li><li>添加及编辑资源，这里我们添加了一个资源分类的概念，便于以后的资源分配；</li></ul><h2 id="角色管理-1"><a href="#角色管理-1" class="headerlink" title="角色管理"></a>角色管理</h2><p>可以自定义角色，并为角色分配菜单和资源；</p><p>用于对后台用户角色进行管理，我们可以给角色分配指定的菜单和资源，这样被分配了角色的后台用户就可以访问这些菜单和资源了。</p><h2 id="后台用户管理"><a href="#后台用户管理" class="headerlink" title="后台用户管理"></a>后台用户管理</h2><p>可以对后台用户进行管理并分配角色，支持分配多个角色。</p><p>用于对后台用户进行管理，直接修改信息（包括修改密码）及分配角色</p><h1 id="config"><a href="#config" class="headerlink" title="config"></a>config</h1><h2 id="AdminUserDetails"><a href="#AdminUserDetails" class="headerlink" title="AdminUserDetails"></a>AdminUserDetails</h2><p>SpringSecurity需要的用户详情</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminUserDetails</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetails</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AdminUser adminUser<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>AdminResource<span class="token operator">></span> resourceList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AdminUserDetails</span><span class="token punctuation">(</span>AdminUser AdminUser<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>AdminResource<span class="token operator">></span> resourceList<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adminUser <span class="token operator">=</span> AdminUser<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>resourceList <span class="token operator">=</span> resourceList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回当前用户拥有的资源权限</span>        <span class="token keyword">return</span> resourceList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>AdminResource <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span>AdminResource<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> AdminResource<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据status标识该账号是否可用</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> adminUser<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="BoyingSecurityConfig"><a href="#BoyingSecurityConfig" class="headerlink" title="BoyingSecurityConfig"></a>BoyingSecurityConfig</h2><h3 id="userDetailsService"><a href="#userDetailsService" class="headerlink" title="userDetailsService()"></a>userDetailsService()</h3><p>根据用户名获取登录用户信息</p><h3 id="dynamicSecurityService"><a href="#dynamicSecurityService" class="headerlink" title="dynamicSecurityService()"></a>dynamicSecurityService()</h3><p>要实现动态路径控制则必须实现该方法,注入<code>Bean</code>,目的是加载所有的资源,这通过一个Map实现,存储资源路径url,资源路径值(自定义为了 id:name )</p><h2 id="GlobalCorsConfig"><a href="#GlobalCorsConfig" class="headerlink" title="GlobalCorsConfig"></a>GlobalCorsConfig</h2><p>全局跨域相关配置</p><h2 id="MyBatisConfig"><a href="#MyBatisConfig" class="headerlink" title="MyBatisConfig"></a>MyBatisConfig</h2><p>MyBatis相关配置，控制dao或者mapper文件扫描位置</p><h2 id="SwaggerConfig"><a href="#SwaggerConfig" class="headerlink" title="SwaggerConfig"></a>SwaggerConfig</h2><p>对boying-common的swagger相关组件进行自定义配置。Swagger API文档相关配置，主要是api扫描位置以及标题等</p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>因为每次访问接口进行权限校验时都会从数据库中去查询用户信息。最近对这个问题进行了优化，通过Redis+AOP解决了该问题，下面来讲下我的优化思路。</p><p>在<code>mall-security</code>模块中有一个过滤器，当用户登录后，请求会带着token经过这个过滤器。这个过滤器会根据用户携带的token进行类似免密登录的操作，其中有一步会从数据库中查询登录用户信息，下面是这个过滤器类的代码。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * JWT登录授权过滤器 * Created by macro on 2018/4/26. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtAuthenticationTokenFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                                    HttpServletResponse response<span class="token punctuation">,</span>                                    FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String authHeader <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tokenHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authHeader <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> authHeader<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tokenHead<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String authToken <span class="token operator">=</span> authHeader<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tokenHead<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// The part after "Bearer "</span>            String username <span class="token operator">=</span> jwtTokenUtil<span class="token punctuation">.</span><span class="token function">getUserNameFromToken</span><span class="token punctuation">(</span>authToken<span class="token punctuation">)</span><span class="token punctuation">;</span>            LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"checking username:{}"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//此处会从数据库中获取登录用户信息</span>                UserDetails userDetails <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>jwtTokenUtil<span class="token punctuation">.</span><span class="token function">validateToken</span><span class="token punctuation">(</span>authToken<span class="token punctuation">,</span> userDetails<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    UsernamePasswordAuthenticationToken authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">,</span> null<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    authentication<span class="token punctuation">.</span><span class="token function">setDetails</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebAuthenticationDetailsSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"authenticated user:{}"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>                    SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当我们登录后访问任意接口时，控制台会打印如下日志，表示会从数据库中查询用户信息和用户所拥有的资源信息，每次访问接口都触发这种操作，有的时候会带来一定的性能问题。</p><p>对于上面的问题，最容易想到的就是把用户信息和用户资源信息存入到Redis中去，避免频繁查询数据库</p><p>首先我们需要对Spring Security中获取用户信息的方法添加缓存</p><p>主要是获取用户信息和获取用户的资源信息这两个操作，接下来我们需要给这两个操作添加缓存操作，这里使用的是RedisTemple的操作方式。当查询数据时，先去Redis缓存中查询，如果Redis中没有，再从数据库查询，查询到以后在把数据存储到Redis中去。</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UmsResource<span class="token operator">></span> <span class="token function">getResourceList</span><span class="token punctuation">(</span>Long adminId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//先从缓存中获取数据</span>        List<span class="token operator">&lt;</span>UmsResource<span class="token operator">></span> resourceList <span class="token operator">=</span> adminCacheService<span class="token punctuation">.</span><span class="token function">getResourceList</span><span class="token punctuation">(</span>adminId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>CollUtil<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>resourceList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span>  resourceList<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//缓存中没有从数据库中获取</span>        resourceList <span class="token operator">=</span> adminRoleRelationDao<span class="token punctuation">.</span><span class="token function">getResourceList</span><span class="token punctuation">(</span>adminId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>CollUtil<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>resourceList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将数据库中的数据存入缓存中</span>            adminCacheService<span class="token punctuation">.</span><span class="token function">setResourceList</span><span class="token punctuation">(</span>adminId<span class="token punctuation">,</span>resourceList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> resourceList<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>因为作为缓存，我们所希望的是，如果Redis宕机了，我们的业务逻辑不会有影响，而使用Spring Cache来实现的话，当Redis宕机以后，用户的登录等种种操作就会都无法进行了。</p><p>由于我们把用户信息和用户资源信息都缓存到了Redis中，所以当我们修改用户信息和资源信息时都需要删除缓存中的数据，具体什么时候删除，查看缓存业务类的注释即可。</p><p>经过上面的一系列优化之后，性能问题解决了。但是引入新的技术之后，新的问题也会产生，比如说当Redis宕机以后，我们直接就无法登录了，下面我们使用AOP来解决这个问题。</p><h2 id="使用AOP处理缓存操作异常"><a href="#使用AOP处理缓存操作异常" class="headerlink" title="使用AOP处理缓存操作异常"></a>使用AOP处理缓存操作异常</h2><p>要保证缓存业务类中的方法执行不影响正常的业务逻辑，就需要在所有方法中添加<code>try catch</code>逻辑。使用AOP，我们可以在一个地方写上<code>try catch</code>逻辑，然后应用到所有方法上去。试想下，我们如果又多了几个缓存业务类，只要配置下切面即可，这波操作多方便！</p><h2 id="RedisCacheAspect"><a href="#RedisCacheAspect" class="headerlink" title="RedisCacheAspect"></a>RedisCacheAspect</h2><p>首先我们先定义一个切面，在相关缓存业务类上面应用，在它的环绕通知中直接处理掉异常，保障后续操作能执行。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Redis缓存切面，防止Redis宕机影响正常业务逻辑 */</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisCacheAspect</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>RedisCacheAspect<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public * com.macro.mall.portal.service.*CacheService.*(..)) || execution(public * com.macro.mall.service.*CacheService.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cacheAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"cacheAspect()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">doAround</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博影项目笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> AOP </tag>
            
            <tag> 权限管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后台管理模块后端设计逻辑</title>
      <link href="posts/250d6388.html"/>
      <url>posts/250d6388.html</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><h2 id="返回值通用类型"><a href="#返回值通用类型" class="headerlink" title="返回值通用类型"></a>返回值通用类型</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>  <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"操作成功"</span><span class="token punctuation">,</span>  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"tokenHead"</span><span class="token operator">:</span> <span class="token string">"Bearer "</span><span class="token punctuation">,</span>    <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ0b25namk0bTMiLCJjcmVhdGVkIjoxNjEwMTE1NTI3MTA2LCJleHAiOjE2MTA3MjAzMjd9.v2WPjn-JsMWZZkGF8ZHmtFG1KBwRzm7B6Z8KIKNJJeBMsc0nixJY8JKqnJcA1uGita8z_y6EzfzflLX355pw8g"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="简化说明"><a href="#简化说明" class="headerlink" title="简化说明"></a>简化说明</h2><ul><li>如无特殊说明，均按照weight降序排列</li><li>演出不允许删除，只允许修改信息</li><li>演出座次一经发布就不允许修改和删除</li></ul><h1 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h1><pre><code>/login</code></pre><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><table><thead><tr><th>API</th><th>/login</th></tr></thead><tbody><tr><td>参数</td><td>username、password</td></tr><tr><td>返回值</td><td>“tokenHead”: “Bearer “、”token”: “token值”</td></tr></tbody></table><ul><li>根据用户名查询管理员账号</li><li>与加密的密码做对比</li><li>本地内存存储，并生成token</li><li>修改登录时间</li></ul><h2 id="获取管理员信息"><a href="#获取管理员信息" class="headerlink" title="获取管理员信息"></a>获取管理员信息</h2><table><thead><tr><th>API</th><th>/info</th></tr></thead><tbody><tr><td>参数</td><td></td></tr><tr><td>返回值</td><td>username、last_time、icon</td></tr><tr><td>说明</td><td>因为保存了登录状态，所以不需要传递参数</td></tr></tbody></table><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><pre><code>/user</code></pre><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><table><thead><tr><th>API</th><th>/add</th></tr></thead><tbody><tr><td>必需参数</td><td>username、password、phone</td></tr><tr><td>可选参数</td><td>email、icon、real_name、identity_number、age、gender</td></tr><tr><td>说明</td><td>密码需要加密，检查手机号，用户名是否存在</td></tr></tbody></table><h2 id="查看所有用户"><a href="#查看所有用户" class="headerlink" title="查看所有用户"></a>查看所有用户</h2><table><thead><tr><th>API</th><th>/list</th></tr></thead><tbody><tr><td>可选参数</td><td>pageSize、pageNum</td></tr><tr><td>返回值</td><td>CommonResult&lt;CommonPage<BoyingUser>&gt;</td></tr><tr><td>说明</td><td>根据创建时间降序排列、分页查询</td></tr></tbody></table><h2 id="根据用户名查找用户"><a href="#根据用户名查找用户" class="headerlink" title="根据用户名查找用户"></a>根据用户名查找用户</h2><table><thead><tr><th>API</th><th>/getUserByName</th></tr></thead><tbody><tr><td>可选参数</td><td>username（模糊匹配）、pageSize、pageNum</td></tr><tr><td>返回值</td><td>CommonResult&lt;CommonPage<BoyingUser>&gt;</td></tr><tr><td>说明</td><td>根据创建时间降序排列、分页查询</td></tr></tbody></table><h2 id="通过Id查看某一用户"><a href="#通过Id查看某一用户" class="headerlink" title="通过Id查看某一用户"></a>通过Id查看某一用户</h2><table><thead><tr><th>API</th><th>/getInformation/{id}</th></tr></thead><tbody><tr><td>参数</td><td>id</td></tr><tr><td>返回值</td><td>CommonResult<BoyingUser></td></tr><tr><td>说明</td><td></td></tr></tbody></table><h2 id="切换用户状态（启用-禁用）"><a href="#切换用户状态（启用-禁用）" class="headerlink" title="切换用户状态（启用/禁用）"></a>切换用户状态（启用/禁用）</h2><table><thead><tr><th>API</th><th>/ChangeUserStatus/{id}</th></tr></thead><tbody><tr><td>参数</td><td>id</td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td>管理员禁用后仍然显示该用户，也显示禁用状态；用户可以看到禁用状态，然后找管理员申述</td></tr></tbody></table><ul><li>让对应userId的用户admin_delete=反状态</li><li>删除redis缓存，防止用户依然能从缓存中登录</li></ul><h1 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h1><pre><code>/category</code></pre><h2 id="查看所有目录"><a href="#查看所有目录" class="headerlink" title="查看所有目录"></a>查看所有目录</h2><table><thead><tr><th>API</th><th>/listAll</th></tr></thead><tbody><tr><td>参数</td><td></td></tr><tr><td>返回值</td><td>CommonResult&lt;List<BoyingCategory>&gt;</td></tr><tr><td>说明</td><td>目录信息列表（目录信息、目录状态） ，按照weight降序</td></tr></tbody></table><h2 id="增加目录"><a href="#增加目录" class="headerlink" title="增加目录"></a>增加目录</h2><table><thead><tr><th>API</th><th>/create</th></tr></thead><tbody><tr><td>参数</td><td>name、icon、description、weight</td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td>会先校验name是否重复</td></tr></tbody></table><h2 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h2><table><thead><tr><th>API</th><th>/delete/{id}</th></tr></thead><tbody><tr><td>参数</td><td>id</td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td>该目录管理员依然可见，只是用户不可见，管理员可以随时恢复；删除目录后不级联删除其他信息</td></tr></tbody></table><h2 id="恢复目录"><a href="#恢复目录" class="headerlink" title="恢复目录"></a>恢复目录</h2><table><thead><tr><th>API</th><th>/recover/{id}</th></tr></thead><tbody><tr><td>参数</td><td>id</td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td>恢复目录的可见性</td></tr></tbody></table><h2 id="修改目录"><a href="#修改目录" class="headerlink" title="修改目录"></a>修改目录</h2><table><thead><tr><th>API</th><th>/update/{id}</th></tr></thead><tbody><tr><td>参数</td><td>id</td></tr><tr><td>可选参数</td><td>weight、name、icon、description</td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td>修改目录信息、目录名称不能重复、修改优先级即设置weight的值</td></tr></tbody></table><h2 id="根据目录Id获取目录信息"><a href="#根据目录Id获取目录信息" class="headerlink" title="根据目录Id获取目录信息"></a>根据目录Id获取目录信息</h2><table><thead><tr><th>API</th><th>/list/{id}</th></tr></thead><tbody><tr><td>参数</td><td>id</td></tr><tr><td>返回值</td><td>目录信息</td></tr><tr><td>说明</td><td></td></tr></tbody></table><h1 id="演出管理"><a href="#演出管理" class="headerlink" title="演出管理"></a>演出管理</h1><pre><code>/show</code></pre><p>演出信息，所属目录，目录状态</p><h2 id="添加演出"><a href="#添加演出" class="headerlink" title="添加演出"></a>添加演出</h2><table><thead><tr><th>API</th><th>/create</th></tr></thead><tbody><tr><td>参数</td><td>categoryId、name、poster、details、city、address、startTime、endTime、weight</td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td>演出名称不能重复、只能显示已经存在的目录</td></tr></tbody></table><h2 id="查看演出"><a href="#查看演出" class="headerlink" title="查看演出"></a>查看演出</h2><table><thead><tr><th>API</th><th>/list</th></tr></thead><tbody><tr><td>可选参数</td><td>name(模糊搜索)、categoryId、pageNum、pageSize</td></tr><tr><td>返回值</td><td>CommonResult&lt;CommonPage<BoyingShow>&gt;</td></tr><tr><td>说明</td><td>分页、按照weight降序、可根据name，catagoryId筛选</td></tr><tr><td></td><td>查看所有演出，包括被删除的目录，但是会显示目录的删除状态（提示管理员，该演出对用户不可见了）(之后应该用dto，传比较规范的信息)</td></tr></tbody></table><h2 id="根据演出Id获取演出信息"><a href="#根据演出Id获取演出信息" class="headerlink" title="根据演出Id获取演出信息"></a>根据演出Id获取演出信息</h2><table><thead><tr><th>API</th><th>/detail/{id}</th></tr></thead><tbody><tr><td>参数</td><td>id</td></tr><tr><td>返回值</td><td>演出信息</td></tr><tr><td>说明</td><td></td></tr></tbody></table><h2 id="修改演出"><a href="#修改演出" class="headerlink" title="修改演出"></a>修改演出</h2><table><thead><tr><th>API</th><th>/update/{id}</th></tr></thead><tbody><tr><td>参数</td><td>showId</td></tr><tr><td>可选参数</td><td>演出信息、weight</td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td>设定应该是演出信息修改，会给所有有此订单的人一个通知</td></tr><tr><td></td><td>可根据weight修改演出优先级</td></tr><tr><td></td><td>演出名称不能重复</td></tr></tbody></table><h1 id="座次管理"><a href="#座次管理" class="headerlink" title="座次管理"></a>座次管理</h1><h2 id="添加座次"><a href="#添加座次" class="headerlink" title="添加座次"></a>添加座次</h2><table><thead><tr><th>API</th><th>/create</th></tr></thead><tbody><tr><td>参数</td><td>showId、name、price、capacity</td></tr><tr><td>可选参数</td><td>stock</td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td>座次一经发布不可修改和删除，因为可能已经有人购买了票（或者之后可以在活动开始前编辑）</td></tr><tr><td></td><td>座次名称不能重复</td></tr><tr><td></td><td>stock不能超出容量，也不能小于等于0;默认等于容量</td></tr></tbody></table><h2 id="查看座次"><a href="#查看座次" class="headerlink" title="查看座次"></a>查看座次</h2><table><thead><tr><th>API</th><th>/seats</th></tr></thead><tbody><tr><td>参数</td><td></td></tr><tr><td>可选参数</td><td>showId、pageNum、pageSize</td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td>分页</td></tr></tbody></table><h1 id="订单管理"><a href="#订单管理" class="headerlink" title="订单管理"></a>订单管理</h1><pre><code>/order</code></pre><h2 id="查询所有订单"><a href="#查询所有订单" class="headerlink" title="查询所有订单"></a>查询所有订单</h2><table><thead><tr><th>API</th><th>/listOrders</th></tr></thead><tbody><tr><td>可选参数</td><td>userId、showId、pageNum、pageSize</td></tr><tr><td>返回值</td><td>订单列表</td></tr><tr><td>说明</td><td>分页、根据订单创建时间降序</td></tr><tr><td></td><td>可以条件查询：某用户Id的订单、某演出的订单</td></tr></tbody></table><h2 id="删除订单"><a href="#删除订单" class="headerlink" title="删除订单"></a>删除订单</h2><table><thead><tr><th>API</th><th>/deleteOrder/{id}</th></tr></thead><tbody><tr><td>参数</td><td>id</td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td>只是管理员层面的删除订单，用户查看订单时候可以看到该状态，然后找管理员申述</td></tr></tbody></table><h2 id="恢复订单"><a href="#恢复订单" class="headerlink" title="恢复订单"></a>恢复订单</h2><table><thead><tr><th>API</th><th>/recoverOrder/{id}</th></tr></thead><tbody><tr><td>参数</td><td>id</td></tr><tr><td>返回值</td><td></td></tr><tr><td>说明</td><td>把删除的订单恢复</td></tr></tbody></table><h1 id="票管理"><a href="#票管理" class="headerlink" title="票管理"></a>票管理</h1><pre><code>/ticket</code></pre><h2 id="查看所有票"><a href="#查看所有票" class="headerlink" title="查看所有票"></a>查看所有票</h2><table><thead><tr><th>API</th><th>/listTickets</th></tr></thead><tbody><tr><td>可选参数</td><td>orderId、seatId、pageNum、pageSize</td></tr><tr><td>返回值</td><td>票列表、也加上座次名称，座次容量、座次价格</td></tr><tr><td>说明</td><td>分页</td></tr><tr><td></td><td>可以组合查询查看某订单的所有票、查看某座次的所有票</td></tr></tbody></table><h1 id="报表统计模块"><a href="#报表统计模块" class="headerlink" title="报表统计模块"></a>报表统计模块</h1><p>​        该模块负责一些数据的统计。</p><h2 id="每日订单统计"><a href="#每日订单统计" class="headerlink" title="每日订单统计"></a>每日订单统计</h2><p>统计日期当日订单数量。</p><ul><li>传入日期时间</li><li>用传入的日期产生当天0点dateStart和后一天0点dateEnd两个时间</li><li>按user_order的time字段在数据库中查找dateStart到dateEnd这个时间段中的订单数量</li><li>把查询结果返回，类型为long</li></ul><h2 id="一段时间订单统计"><a href="#一段时间订单统计" class="headerlink" title="一段时间订单统计"></a>一段时间订单统计</h2><p>统计一段时间内的订单数量</p><ul><li>传入开始时间dateStart和结束时间dateEnd两个参数，表示查询在这两个时间之间的订单数量</li><li>先判断dateStart&gt;dateEnd?若是则返回”时间顺序错误”的提示信息。否则继续往下</li><li>按user_order的time字段在数据库中查找dateStart到dateEnd这个时间段中的订单数量</li><li>把查询结果返回，类型为long</li></ul><h2 id="每日订单销售额统计"><a href="#每日订单销售额统计" class="headerlink" title="每日订单销售额统计"></a>每日订单销售额统计</h2><p>统计日期当日订单销售额</p><ul><li>传入日期时间</li><li>用传入的日期产生当天0点dateStart和后一天0点dateEnd两个时间</li><li>按user_order的time字段在数据库中查找dateStart到dateEnd这个时间段中的订单并存入类型为List<UserOrder>的列表</li><li>当列表不为空时，循环取出列表中订单的money字段数值与sum相加并赋值给sum</li><li>最后返回sum的值即为当日订单的销售额，类型为double</li></ul><h2 id="一段时间订单销售额统计"><a href="#一段时间订单销售额统计" class="headerlink" title="一段时间订单销售额统计"></a>一段时间订单销售额统计</h2><p>统计一段时间内的订单销售额</p><ul><li>传入开始时间dateStart和结束时间dateEnd两个参数，表示查询在这两个时间之间的订单数量</li><li>先判断dateStart&gt;dateEnd?若是则返回”时间顺序错误”的提示信息。否则继续往下</li><li>按user_order的time字段在数据库中查找dateStart到dateEnd这个时间段中的订单并存入类型为List<UserOrder>的列表</li><li>当列表不为空时，循环取出列表中订单的money字段数值与sum相加并赋值给sum</li><li>最后返回sum的值即为这段时间内订单的销售额，类型为double</li></ul><h2 id="每日新增用户统计"><a href="#每日新增用户统计" class="headerlink" title="每日新增用户统计"></a>每日新增用户统计</h2><p>统计日期当日新增用户的数量</p><ul><li>传入日期时间</li><li>用传入的日期产生当天0点dateStart和后一天0点dateEnd两个时间</li><li>按user表的create_time字段在数据库中查找dateStart到dateEnd这个时间段中的用户数量</li><li>把查询结果返回，类型为long</li></ul><h2 id="一段时间内新增用户统计"><a href="#一段时间内新增用户统计" class="headerlink" title="一段时间内新增用户统计"></a>一段时间内新增用户统计</h2><p>统计一段时间内的新增用户数量</p><ul><li>传入开始时间dateStart和结束时间dateEnd两个参数，表示查询在这两个时间之间的订单数量</li><li>先判断dateStart&gt;dateEnd?若是则返回”时间顺序错误”的提示信息。否则继续往下</li><li>按user表的create_time字段在数据库中查找dateStart到dateEnd这个时间段中的用户数量</li><li>把查询结果返回，类型为long</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博影项目笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> API </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>boying-user技术说明</title>
      <link href="posts/364afdaa.html"/>
      <url>posts/364afdaa.html</url>
      
        <content type="html"><![CDATA[<h1 id="涉及的查询"><a href="#涉及的查询" class="headerlink" title="涉及的查询"></a>涉及的查询</h1><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>查看用户是否存在</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">from</span> boying_user    <span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{username} or phone = #{telephone}</span></code></pre><h2 id="根据用户名查询"><a href="#根据用户名查询" class="headerlink" title="根据用户名查询"></a>根据用户名查询</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span><span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Base_Column_List"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token keyword">from</span> boying_user<span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{username}</span></code></pre><h2 id="根据手机号查询"><a href="#根据手机号查询" class="headerlink" title="根据手机号查询"></a>根据手机号查询</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span><span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Base_Column_List"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token keyword">from</span> boying_user<span class="token keyword">where</span> phone <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{telephone}</span></code></pre><h2 id="菜单查询"><a href="#菜单查询" class="headerlink" title="菜单查询"></a>菜单查询</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Base_Column_List"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token keyword">from</span> boying_category    <span class="token keyword">where</span> admin_delete <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">order</span> <span class="token keyword">by</span> weight <span class="token keyword">desc</span></code></pre><h2 id="演出查询"><a href="#演出查询" class="headerlink" title="演出查询"></a>演出查询</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Base_Column_List"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token keyword">from</span> boying_show    <span class="token operator">&lt;</span><span class="token keyword">where</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"categoryId != null and categoryId != 0"</span><span class="token operator">></span>            category_id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{categoryId}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"keyword != null and keyword != ''"</span><span class="token operator">></span>            <span class="token operator">and</span> name <span class="token operator">like</span> concat<span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#{keyword,jdbcType=VARCHAR},'%')</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"city != null and city != '' and city != '全国'"</span><span class="token operator">></span>            <span class="token operator">and</span> city <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{city}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"startDay != null and endDay != null"</span><span class="token operator">></span>            <span class="token operator">and</span> start_time            <span class="token operator">between</span> <span class="token comment" spellcheck="true">#{startDay} and #{endDay}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">where</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"sort == null"</span><span class="token operator">></span>        <span class="token keyword">order</span> <span class="token keyword">by</span> weight <span class="token keyword">desc</span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"sort == 0"</span><span class="token operator">></span>        <span class="token keyword">order</span> <span class="token keyword">by</span> weight <span class="token keyword">desc</span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"sort == 1"</span><span class="token operator">></span>        <span class="token keyword">order</span> <span class="token keyword">by</span> START_TIME <span class="token keyword">asc</span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"sort == 2"</span><span class="token operator">></span>        <span class="token keyword">order</span> <span class="token keyword">by</span> START_TIME <span class="token keyword">desc</span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"sort == 3"</span><span class="token operator">></span>        <span class="token keyword">order</span> <span class="token keyword">by</span> MIN_PRICE <span class="token keyword">asc</span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"sort == 4"</span><span class="token operator">></span>        <span class="token keyword">order</span> <span class="token keyword">by</span> MIN_PRICE <span class="token keyword">desc</span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"sort == 5"</span><span class="token operator">></span>        <span class="token keyword">order</span> <span class="token keyword">by</span> MAX_PRICE <span class="token keyword">asc</span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"sort == 6"</span><span class="token operator">></span>        <span class="token keyword">order</span> <span class="token keyword">by</span> MAX_PRICE <span class="token keyword">desc</span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span></code></pre><h2 id="演出座次查询"><a href="#演出座次查询" class="headerlink" title="演出座次查询"></a>演出座次查询</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span><span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Base_Column_List"</span><span class="token operator">/</span><span class="token operator">></span><span class="token keyword">from</span> boying_seat<span class="token keyword">where</span> show_id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{showId}</span></code></pre><h2 id="查看该用户对该演出是否下单过"><a href="#查看该用户对该演出是否下单过" class="headerlink" title="查看该用户对该演出是否下单过"></a>查看该用户对该演出是否下单过</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">from</span> boying_order<span class="token keyword">where</span> user_id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{userId}</span>  <span class="token operator">and</span> show_id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{showId}</span>  <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">!=</span> <span class="token number">3</span></code></pre><h2 id="订单条件查询"><a href="#订单条件查询" class="headerlink" title="订单条件查询"></a>订单条件查询</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span><span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Base_Column_List"</span><span class="token operator">/</span><span class="token operator">></span><span class="token keyword">from</span> boying_order<span class="token keyword">where</span> user_id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{userId} and user_delete != 1</span><span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"status != null and status != 0"</span><span class="token operator">></span>    <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{status}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"name != null and name != ''"</span><span class="token operator">></span>    <span class="token operator">and</span> show_id <span class="token operator">in</span>    <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> boying_show <span class="token keyword">where</span> name <span class="token operator">like</span> concat<span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#{name},'%')</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span></code></pre><h2 id="查看并减库存"><a href="#查看并减库存" class="headerlink" title="查看并减库存"></a>查看并减库存</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> boying_stock<span class="token keyword">set</span> stock <span class="token operator">=</span> stock <span class="token operator">-</span> <span class="token comment" spellcheck="true">#{ticketCount}</span><span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{seatId}</span>  <span class="token operator">and</span> stock <span class="token operator">>=</span> <span class="token comment" spellcheck="true">#{ticketCount}</span></code></pre><h2 id="增加库存"><a href="#增加库存" class="headerlink" title="增加库存"></a>增加库存</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> boying_stock<span class="token keyword">set</span> stock <span class="token operator">=</span> stock <span class="token operator">+</span> <span class="token comment" spellcheck="true">#{ticketCount}</span><span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{seatId}</span></code></pre><h2 id="根据演出座次获取活动信息"><a href="#根据演出座次获取活动信息" class="headerlink" title="根据演出座次获取活动信息"></a>根据演出座次获取活动信息</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span><span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Base_Column_List"</span><span class="token operator">/</span><span class="token operator">></span><span class="token keyword">from</span> boying_promo<span class="token keyword">where</span> seat_id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{seatId,jdbcType=INTEGER}</span></code></pre><h1 id="expain与索引优化"><a href="#expain与索引优化" class="headerlink" title="expain与索引优化"></a>expain与索引优化</h1><h2 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h2><p>优化前：</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210216153841728.png" alt="image-20210216153841728"></p><p>虽然username、phone都是唯一的，但是只添加普通索引，不添加唯一索引</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210216154531210.png" alt="image-20210216154531210"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">from</span> boying_user<span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token string">'tongji4m3'</span> <span class="token operator">or</span> phone <span class="token operator">=</span> <span class="token string">'15316162191'</span><span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> boying_user <span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token string">'tongji4m3'</span><span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> boying_user <span class="token keyword">where</span> phone <span class="token operator">=</span> <span class="token string">'15316162191'</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span>  <span class="token keyword">TABLE</span>  <span class="token punctuation">`</span>boying_user<span class="token punctuation">`</span>  <span class="token keyword">ADD</span>  <span class="token keyword">INDEX</span> index_username <span class="token punctuation">(</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span>  <span class="token keyword">TABLE</span>  <span class="token punctuation">`</span>boying_user<span class="token punctuation">`</span>  <span class="token keyword">ADD</span>  <span class="token keyword">INDEX</span> index_phone <span class="token punctuation">(</span><span class="token punctuation">`</span>phone<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">index</span> index_name <span class="token keyword">on</span> boying_user<span class="token punctuation">;</span><span class="token keyword">show</span> indexes <span class="token keyword">from</span> boying_user<span class="token punctuation">;</span></code></pre><p>其实上述语句等价于</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> boying_user <span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token string">'tongji4m3'</span><span class="token keyword">union</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> boying_user <span class="token keyword">where</span> phone <span class="token operator">=</span> <span class="token string">'15316162191'</span><span class="token punctuation">;</span></code></pre><h2 id="订单信息"><a href="#订单信息" class="headerlink" title="订单信息"></a>订单信息</h2><p>建立了复合索引(user_id,show_id)，这样在查看该用户对该演出是否下单过时可以用到两个索引，在单独查询用户的所有订单也可以用到索引（索引前缀）</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> boying_order <span class="token keyword">where</span> user_id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> show_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> boying_order <span class="token keyword">where</span> user_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span>  <span class="token keyword">TABLE</span>  <span class="token punctuation">`</span>boying_order<span class="token punctuation">`</span>  <span class="token keyword">ADD</span>  <span class="token keyword">INDEX</span> index_order <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span>show_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">show</span> indexes <span class="token keyword">from</span> boying_order<span class="token punctuation">;</span></code></pre><h1 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h1><h2 id="多环境动态切换yml配置"><a href="#多环境动态切换yml配置" class="headerlink" title="多环境动态切换yml配置"></a>多环境动态切换yml配置</h2><p>在实际的的开发中，对于一个工程，经常会有多种环境配置，例如开发环境、测试环境、生产环境等。在不同的环境下，配置有可能是不一样的，比如接口地址、数据库连接配置等。为了避免频繁的修改配置文件，我们想要简便地切换各种环境配置。好在SpringBoot提供了这样的功能，可以很方便地切换不同场景下的配置。</p><p>对开发配置和生产环境做了配置。上面的配置是公共配置，下面我们分别配置了开发和生产的配置。<code>spring.profiles</code>表示配置的名称，<code>spring.profiles.active</code>表示要激活的环境，值和要切换的<code>spring.profiles</code>名称一致。默认激活的就是dev开发配置。</p><p>如果<code>spring.profiles.active</code>没有指定值，那么只会加载通用的配置。</p><p>工程打成jar包后，我们可以在运行的时候对配置进行选择，而不需要每次打包前都手动去修改<code>spring.profiles.active</code>的值。</p><p>例如在生产环境，我们可以使用release配置执行jar包<code>java -jar xxx.jar --spring.profiles.active=release</code></p><p>如若配置:</p><pre class=" language-xml"><code class="language-xml">spring:  profiles:    active: dev #默认为开发环境</code></pre><p>会启动:<code>application.yml</code>与<code>application-dev.yml</code></p><h1 id="config"><a href="#config" class="headerlink" title="config"></a>config</h1><h2 id="BoyingSecurityConfig"><a href="#BoyingSecurityConfig" class="headerlink" title="BoyingSecurityConfig"></a>BoyingSecurityConfig</h2><p>boying-security模块相关配置,在里面为UserDetailsService定义一个适用与boying-user组件的获取登录用户信息的方法。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoyingSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">SecurityConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> BoyingUserService boyingUserService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 注解@Bean放在方法上，产生一个Bean并且交给Spring容器管理     * 定义用户信息     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserDetailsService <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为UserDetailsService定义一个适用与boying-user组件的获取登录用户信息的方法</span>        <span class="token keyword">return</span> username <span class="token operator">-</span><span class="token operator">></span> boyingUserService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//不添加基于路径的动态权限控制</span><span class="token punctuation">}</span></code></pre><h2 id="BoyingUserDetails"><a href="#BoyingUserDetails" class="headerlink" title="BoyingUserDetails"></a>BoyingUserDetails</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * SpringSecurity需要的用户详情 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoyingUserDetails</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetails</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> BoyingUser user<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BoyingUserDetails</span><span class="token punctuation">(</span>BoyingUser user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回当前用户的角色</span>        <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">"TEST"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getAdminDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="GlobalCorsConfig"><a href="#GlobalCorsConfig" class="headerlink" title="GlobalCorsConfig"></a>GlobalCorsConfig</h2><p>全局跨域相关配置</p><h2 id="JacksonConfig"><a href="#JacksonConfig" class="headerlink" title="JacksonConfig"></a>JacksonConfig</h2><p>Jackson相关配置类,使得json不返回null的字段</p><h2 id="MyBatisConfig"><a href="#MyBatisConfig" class="headerlink" title="MyBatisConfig"></a>MyBatisConfig</h2><p>MyBatis相关配置，控制dao或者mapper文件扫描位置</p><h2 id="SwaggerConfig"><a href="#SwaggerConfig" class="headerlink" title="SwaggerConfig"></a>SwaggerConfig</h2><p>对boying-common的swagger相关组件进行自定义配置。Swagger API文档相关配置，主要是api扫描位置以及标题等</p><h1 id="param"><a href="#param" class="headerlink" title="param"></a>param</h1><p>用于将前端请求的参数封装成对象传递给service层，避免需要修改参数时controller、service方法传递的参数都要改变，编程过于繁琐</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserOrderParam</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"showId"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"演出Id不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer showId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"seatId"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"演出座次Id不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer seatId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"promoId"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer promoId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"购买的票数（最多三张)"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"购买的演出票数不能为空"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer count<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"订单支付方式"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"订单支付方式不能为空!"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String payment<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="VO、DTO"><a href="#VO、DTO" class="headerlink" title="VO、DTO"></a>VO、DTO</h1><p>因为数据库表实体经常拆分</p><p>dataObject与数据库中一一映射</p><p>在service层有一个领域模型model的概念</p><p>返回给前端视图对象VO（View Object），因为一些用户敏感信息不应该被返回</p><p>所以在mapper中查询到dataObject后，需要组装成领域模型</p><p>在controller层调用service层返回给前端信息时，需要将领域模型转为VO</p><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><p>生成验证码时，将自定义的Redis键值加上手机号生成一个Redis的key，以验证码为value存入到Redis中，并设置过期时间为自己配置的时间（这里为120s），并调用阿里云短信服务向手机号发送短信。校验验证码时根据手机号码来获取Redis里面存储的验证码，并与传入的验证码进行比对。</p><pre class=" language-java"><code class="language-java"># 自定义redis keyredis<span class="token operator">:</span>  database<span class="token operator">:</span> boying  key<span class="token operator">:</span>    authCode<span class="token operator">:</span> <span class="token string">'user:authCode'</span>    user<span class="token operator">:</span> <span class="token string">'user'</span>  expire<span class="token operator">:</span>    authCode<span class="token operator">:</span> <span class="token number">90</span> # 验证码超期时间    common<span class="token operator">:</span> <span class="token number">86400</span> # <span class="token number">24</span>小时<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${redis.database}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String REDIS_DATABASE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    除验证码之外的过期时间</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${redis.expire.common}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> Long REDIS_EXPIRE<span class="token punctuation">;</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${redis.expire.authCode}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> Long REDIS_EXPIRE_AUTH_CODE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    用户以及验证码</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${redis.key.user}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String REDIS_KEY_USER<span class="token punctuation">;</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${redis.key.authCode}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String REDIS_KEY_AUTH_CODE<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthCode</span><span class="token punctuation">(</span>String telephone<span class="token punctuation">,</span> String authCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String key <span class="token operator">=</span> REDIS_DATABASE <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> REDIS_KEY_AUTH_CODE <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> telephone<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span>    redisService<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> authCode<span class="token punctuation">,</span> REDIS_EXPIRE_AUTH_CODE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">getAuthCode</span><span class="token punctuation">(</span>String telephone<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String key <span class="token operator">=</span> REDIS_DATABASE <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> REDIS_KEY_AUTH_CODE <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> telephone<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> redisService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>每次使用完毕（注册、更新密码等）都要删除密码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//注册完删除验证码,每个验证码只能使用一次</span>boyingUserCacheService<span class="token punctuation">.</span><span class="token function">delAuthCode</span><span class="token punctuation">(</span>telephone<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="用户信息-1"><a href="#用户信息-1" class="headerlink" title="用户信息"></a>用户信息</h2><p>登录时，若缓存没有信息，则存入Redis中（用户名，用户信息）（手机号，用户信息）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//boyingUserCacheService.setUser(user);//将查询到的数据放入缓存中</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUser</span><span class="token punctuation">(</span>BoyingUser user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> REDIS_DATABASE <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> REDIS_KEY_USER <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String key2 <span class="token operator">=</span> REDIS_DATABASE <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> REDIS_KEY_USER <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        设置两条,能通过手机号,用户名查到该用户</span>        redisService<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> user<span class="token punctuation">,</span> REDIS_EXPIRE<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisService<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key2<span class="token punctuation">,</span> user<span class="token punctuation">,</span> REDIS_EXPIRE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>更新个人信息时，删除缓存</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        确保全局不会redis缓存key混乱</span>        BoyingUser user <span class="token operator">=</span> boyingUserMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String key <span class="token operator">=</span> REDIS_DATABASE <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> REDIS_KEY_USER <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String key2 <span class="token operator">=</span> REDIS_DATABASE <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> REDIS_KEY_USER <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redisService<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            redisService<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h1 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h1><p>如果没有携带token，则使用login方法</p><p>用户信息是通过缓存或数据库中查询，并封装成UserDetails对象</p><p>登录成功后将用户上下文信息存入SecurityContext中，并且生成Token返回。</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>UsernameLoginParam param<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String username <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String token <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//密码需要客户端加密后传递,但是传递的仍然是明文</span>        UserDetails userDetails <span class="token operator">=</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span><span class="token string">"密码不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//            获取该用户的上下文信息</span><span class="token comment" spellcheck="true">//            username和password被获得后封装到一个UsernamePasswordAuthenticationToken</span>        UsernamePasswordAuthenticationToken authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">,</span> null<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            围绕该用户建立安全上下文（security context）</span>        SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>        token <span class="token operator">=</span> jwtTokenUtil<span class="token punctuation">.</span><span class="token function">generateToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BoyingUser user <span class="token operator">=</span> <span class="token function">getByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BoyingUserDetails</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> BoyingUser <span class="token function">getByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BoyingUser user <span class="token operator">=</span> boyingUserCacheService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> user<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//缓存里面有数据</span>        <span class="token comment" spellcheck="true">//根据用户名查询是否存在</span>        user <span class="token operator">=</span> boyingUserMapper<span class="token punctuation">.</span><span class="token function">selectByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//不能给过于详细的错误提示！</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> Asserts<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//账号未启用</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAdminDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> Asserts<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"账号未启用,请联系管理员!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        boyingUserCacheService<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将查询到的数据放入缓存中</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="getCurrentUser"><a href="#getCurrentUser" class="headerlink" title="getCurrentUser()"></a>getCurrentUser()</h2><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> BoyingUser <span class="token function">getCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        获取之前登录存储的用户上下文信息</span>        <span class="token comment" spellcheck="true">//ThreadLocal</span>        SecurityContext ctx <span class="token operator">=</span> SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Authentication auth <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BoyingUserDetails userDetails <span class="token operator">=</span> <span class="token punctuation">(</span>BoyingUserDetails<span class="token punctuation">)</span> auth<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userDetails<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="BoyingUserDetails-1"><a href="#BoyingUserDetails-1" class="headerlink" title="BoyingUserDetails"></a>BoyingUserDetails</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * SpringSecurity需要的用户详情 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoyingUserDetails</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetails</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> BoyingUser user<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BoyingUserDetails</span><span class="token punctuation">(</span>BoyingUser user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回当前用户的角色</span>        <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">"TEST"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getAdminDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="BoyingSecurityConfig-1"><a href="#BoyingSecurityConfig-1" class="headerlink" title="BoyingSecurityConfig"></a>BoyingSecurityConfig</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoyingSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">SecurityConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> BoyingUserService boyingUserService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 注解@Bean放在方法上，产生一个Bean并且交给Spring容器管理     * 定义用户信息     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserDetailsService <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为UserDetailsService定义一个适用与boying-user组件的获取登录用户信息的方法</span>        <span class="token keyword">return</span> username <span class="token operator">-</span><span class="token operator">></span> boyingUserService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//不添加基于路径的动态权限控制</span><span class="token punctuation">}</span></code></pre><p>当有token时，过滤器会直接使用token进行登录：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                                HttpServletResponse response<span class="token punctuation">,</span>                                FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//请求头有字段Authorization，并且以‘Bearer ’开头</span>    String authHeader <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tokenHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>authHeader <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> authHeader<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tokenHead<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        String authToken <span class="token operator">=</span> authHeader<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tokenHead<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// The part after "Bearer "</span>        String username <span class="token operator">=</span> jwtTokenUtil<span class="token punctuation">.</span><span class="token function">getUserNameFromToken</span><span class="token punctuation">(</span>authToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"checking username:{}"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//SpringSecurity定义用于封装用户信息的类（主要是用户信息和权限）</span>            UserDetails userDetails <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//验证用户名和是否已过期</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>jwtTokenUtil<span class="token punctuation">.</span><span class="token function">validateToken</span><span class="token punctuation">(</span>authToken<span class="token punctuation">,</span> userDetails<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                UsernamePasswordAuthenticationToken authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">,</span> null<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                authentication<span class="token punctuation">.</span><span class="token function">setDetails</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebAuthenticationDetailsSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"authenticated user:{}"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>                SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h1><p>如果没有领域模型，处理起来很麻烦。</p><ol><li>用户进入订单页面，只能通过list获取到所有的订单列表，然后再进行查看详情、完成、取消、删除操作</li><li>所以那些其他的操作不需要再判断订单是否存在，订单是否被用户删除</li><li>但是需要判断是否被管理员删除，可能前端没设置</li></ol><pre class=" language-java"><code class="language-java"> 查询演出信息时，在List<span class="token operator">&lt;</span>BoyingSeatModel<span class="token operator">></span> <span class="token function">getShowSeatList</span><span class="token punctuation">(</span>Integer showId<span class="token punctuation">)</span><span class="token punctuation">;</span>等得到座次的方法中，BoyingSeatModel聚合了一个BoyingPromoModel，如果promoModel不为空，则表示其拥有还未结束的秒杀活动BoyingPromoModel boyingPromoModel <span class="token operator">=</span> boyingPromoService<span class="token punctuation">.</span><span class="token function">getPromo</span><span class="token punctuation">(</span>seatDO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存在秒杀活动，而且是未开始或者是正在进行中的</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>boyingPromoModel <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> boyingPromoModel<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> boyingSeatModel<span class="token punctuation">.</span><span class="token function">setBoyingPromoModel</span><span class="token punctuation">(</span>boyingPromoModel<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> BoyingPromoServiceImpl的<span class="token function">getPromo</span><span class="token punctuation">(</span>Integer seatId<span class="token punctuation">)</span>将数据库中对应座次的秒杀活动取出来，如果不存在则返回null，并且转换为BoyingPromoModel（多了一个status字段表示秒杀活动状态 <span class="token number">1</span>表示还未开始，<span class="token number">2</span>表示进行中，<span class="token number">3</span>表示已结束）  在返回给前端时，如果该演出座次有秒杀活动则返回给前端，没有则不返回<span class="token keyword">if</span> <span class="token punctuation">(</span>boyingSeatModel<span class="token punctuation">.</span><span class="token function">getBoyingPromoModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//有正在进行或即将进行的秒杀活动</span>    boyingSeatVO<span class="token punctuation">.</span><span class="token function">setPromoStatus</span><span class="token punctuation">(</span>boyingSeatModel<span class="token punctuation">.</span><span class="token function">getBoyingPromoModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    boyingSeatVO<span class="token punctuation">.</span><span class="token function">setPromoId</span><span class="token punctuation">(</span>boyingSeatModel<span class="token punctuation">.</span><span class="token function">getBoyingPromoModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    boyingSeatVO<span class="token punctuation">.</span><span class="token function">setStartTime</span><span class="token punctuation">(</span>boyingSeatModel<span class="token punctuation">.</span><span class="token function">getBoyingPromoModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStartTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    boyingSeatVO<span class="token punctuation">.</span><span class="token function">setPromoPrice</span><span class="token punctuation">(</span>boyingSeatModel<span class="token punctuation">.</span><span class="token function">getBoyingPromoModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    boyingSeatVO<span class="token punctuation">.</span><span class="token function">setPromoStatus</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="Jmeter"><a href="#Jmeter" class="headerlink" title="Jmeter"></a>Jmeter</h1><h2 id="单台机器"><a href="#单台机器" class="headerlink" title="单台机器"></a>单台机器</h2><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1612260464_2.png" alt="img"></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1612260578_3.png" alt="img"></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1612271452_8.png" alt="img"></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1612271506_9.png" alt="img"></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1612271539_10.png" alt="img"></p><h2 id="负载均衡后"><a href="#负载均衡后" class="headerlink" title="负载均衡后"></a>负载均衡后</h2><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1612273640_12.png" alt="img"></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1612515047_1.png" alt="img"></p><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>高性能的HTTP和反向代理服务器，占用内存小，并发能力强</li><li>可以作为静态页面的web服务器</li><li>注重性能，能经受高负载，支持超过50000个并发连接数</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>1、round-robin 轮询1:1轮流处理请求(默认)<br>每个请求按时间顺序逐一分配到不同的应用服务器，如果应用服务器down掉，自动剔除，剩下的继续轮询。<br>2、weight 权重(加权轮询)<br>通过配置权重，指定轮询几率，权重和访问比率成正比，用于应用服务器性能不均的情况。<br>3、ip_hash 哈希算法<br>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个应用服务器，可以解决session共享的问题。应用服务器如果故障需要手工down掉。</p><pre><code>47.103.203.188 部署数据库101.132.157.174 部署Jar包147.100.47.244  ABC123456 部署Jar包247.100.88.187 sjs@2021 部署Nginx服务器 </code></pre><pre><code>先利用/usr/local/nginx/sbin/nginx -t测试配置文件修改是否正常/usr/local/nginx/sbin/nginx -s reload重新加载./nginx -s reloadps -aux | grep nginx./nginx -s stopvim /usr/local/nginx/conf/nginx.conf</code></pre><pre><code>upstream boying {    server  101.132.157.174:8000 weight=1;    server  47.100.47.244:8000 weight=1;    keepalive 30;}server {    listen      8000;    server_name 47.100.88.187;    location / {        root   html;        index  index.html index.htm swagger-ui.html;        proxy_pass  http://boying;        proxy_http_version 1.1;        proxy_set_header Connection &quot;&quot;;    }}</code></pre><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>在客户端（浏览器）配置代理服务器，依赖代理服务器来访问真正的服务器</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1612261754_4.png" alt="img"></p><h3 id="反向代理-1"><a href="#反向代理-1" class="headerlink" title="反向代理"></a>反向代理</h3><ul><li>客户对代理无感知，客户端不需要做如何配置</li><li>反向代理服务器和目标服务器对外就是一个服务器</li><li>暴露的是代理服务器地址，隐藏了真实服务器IP地址</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1612262060_5.png" alt="img"></p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>通过反向代理服务器，把请求通过Nginx平均分配到不同的服务器中</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1612262371_6.png" alt="img"></p><h2 id="动静结合"><a href="#动静结合" class="headerlink" title="动静结合"></a>动静结合</h2><p>加快网站的解析速度，把动态页面和静态页面由不同的服务器来解析，加快解析速度，降低单个服务器的压力</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1612262513_7.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 博影项目笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> expain </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>boying-security技术说明</title>
      <link href="posts/66a07e6c.html"/>
      <url>posts/66a07e6c.html</url>
      
        <content type="html"><![CDATA[<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><pre><code>├───annotation│       CacheException.java│├───aspect│       RedisCacheAspect.java│├───component│       DynamicAccessDecisionManager.java│       DynamicSecurityFilter.java│       DynamicSecurityMetadataSource.java│       DynamicSecurityService.java│       JwtAuthenticationTokenFilter.java│       RestAuthenticationEntryPoint.java│       RestfulAccessDeniedHandler.java│├───config│       IgnoreUrlsConfig.java│       RedisConfig.java│       SecurityConfig.java│└───util        JwtTokenUtil.java</code></pre><h1 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h1><p>SpringSecurity是一个强大的可高度定制的认证和授权框架，对于Spring应用来说它是一套Web安全标准。SpringSecurity注重于为Java应用提供认证和授权功能，像所有的Spring项目一样，它对自定义需求具有强大的扩展性。</p><p>SpringSecurity 采用的是责任链的设计模式，它有一条很长的过滤器链。</p><p>Spring Security主要是从两个方面解决安全性问题：</p><ol><li><strong>web请求级别</strong>：使用Servlet规范中的过滤器（Filter）保护Web请求并限制URL级别的访问。</li><li><strong>方法调用级别</strong>：使用Spring AOP保护方法调用，确保具有适当权限的用户才能访问安全保护的方法。</li></ol><h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><p>JWT是JSON WEB TOKEN的缩写，是一种可以安全传输的的JSON对象，由于使用了数字签名，所以是可信任和安全的。</p><p>JWT是一个含签名并携带用户相关信息的加密串，页面请求校验登录接口时，请求头中携带JWT串到后端服务，后端通过签名加密串匹配校验，保证信息未被篡改。校验通过则认为是可靠的请求，将正常返回数据。</p><p>在身份验证中，当用户使用其凭据成功登录时，将返回JSON Web Token（即：JWT）。由于令牌是凭证，因此必须非常小心以防止出现安全问题。一般情况下，不应将令牌保留的时间超过要求。理论上超时时间越短越好。</p><p>每当用户想要访问受保护的路由或资源时，用户代理应该使用Bearer模式发送JWT</p><p>在某些情况下，这可以作为无状态授权机制。服务器的受保护路由将检查Authorization header中的有效JWT ，如果有效，则允许用户访问受保护资源。如果JWT包含必要的数据，则可以减少查询数据库或缓存信息。</p><h2 id="JWT-token的格式"><a href="#JWT-token的格式" class="headerlink" title="JWT token的格式"></a>JWT token的格式</h2><p><strong>header.payload.signature</strong></p><ul><li>header中用于存放签名的生成算法（算法、token的类型）{“alg”: “HS512”,”typ”: “JWT”}</li><li>payload中用于存放用户名、token的生成时间和过期时间</li><li>signature为以header和payload生成的签名，一旦header和payload被篡改，验证将失败</li></ul><h2 id="JWT实现认证和授权的原理"><a href="#JWT实现认证和授权的原理" class="headerlink" title="JWT实现认证和授权的原理"></a>JWT实现认证和授权的原理</h2><ol><li>客户端使用用户名跟密码请求登录；</li><li>服务端收到请求，去验证用户名与密码；</li><li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端；</li><li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里；</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token（在http的header中添加一个叫Authorization的头，值为JWT的token）；</li><li>服务端收到请求，通过对Authorization头中信息的解码及数字签名校验来获取其中的用户信息，从而实现认证和授权，进一步解析 Token 内容，获知用户身份。如果验证成功，就向客户端返回请求的数据。</li></ol><p><strong>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</strong></p><p>服务端仅验证 Token 合法性，校验 Token 合法性需要确认几件事情：</p><ul><li>Token 有没有过期</li><li>是不是自己签发的</li></ul><p><strong>区别</strong> </p><ul><li>session 存储在服务端占用服务器资源，而 JWT 存储在客户端</li><li>session 存储在 Cookie 中，存在伪造跨站请求伪造攻击的风险</li><li>session 只存在一台服务器上，那么下次请求就必须请求这台服务器，不利于分布式应用 </li><li>存储在客户端的 JWT 比存储在服务端的 session 更具有扩展性</li></ul><p><strong>优点</strong></p><ol><li>解决跨域问题：这种基于Token的访问策略可以克服cookies的跨域问题。</li><li>服务端无状态可以横向扩展，Token可完成认证，无需存储Session。</li><li>系统解耦，Token携带所有的用户信息，无需绑定一个特定的认证方案，只需要知道加密的方法和密钥就可以进行加密解密，有利于解耦。</li><li>防止跨站点脚本攻击，没有cookie技术，无需考虑跨站请求的安全问题。</li></ol><h1 id="JwtTokenUtil"><a href="#JwtTokenUtil" class="headerlink" title="JwtTokenUtil"></a>JwtTokenUtil</h1><p>用于生成和解析JWT token的工具类</p><pre class=" language-yml"><code class="language-yml">jwt:  tokenHeader: Authorization #JWT存储的请求头  secret: boying-user-secret #JWT加解密使用的密钥  expiration: 604800 #JWT的超期限时间(60*60*24*7) 7天过期  tokenHead: 'Bearer '  #JWT负载中拿到开头</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtTokenUtil</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CLAIM_KEY_USERNAME <span class="token operator">=</span> <span class="token string">"sub"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CLAIM_KEY_CREATED <span class="token operator">=</span> <span class="token string">"created"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.secret}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String secret<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.expiration}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Long expiration<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.tokenHead}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String tokenHead<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据登录用户信息生成token     */</span>    <span class="token keyword">public</span> String <span class="token function">generateToken</span><span class="token punctuation">(</span>UserDetails userDetails<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>CLAIM_KEY_USERNAME<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>CLAIM_KEY_CREATED<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">generateToken</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据负责生成JWT的token     */</span>    <span class="token keyword">private</span> String <span class="token function">generateToken</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> claims<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token function">generateExpirationDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS512<span class="token punctuation">,</span> secret<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成token的过期时间     */</span>    <span class="token keyword">private</span> Date <span class="token function">generateExpirationDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expiration <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从token中获取登录用户名     */</span>    <span class="token keyword">public</span> String <span class="token function">getUserNameFromToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        String username<span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            Claims claims <span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            username <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            username <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 验证token是否还有效     *     * @param token       客户端传入的token     * @param userDetails 从数据库中查询出来的用户信息     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validateToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">,</span> UserDetails userDetails<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        String username <span class="token operator">=</span> <span class="token function">getUserNameFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> username<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isTokenExpired</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断token是否已经失效     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isTokenExpired</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Date expiredDate <span class="token operator">=</span> <span class="token function">getExpiredDateFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> expiredDate<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="SecurityConfig"><a href="#SecurityConfig" class="headerlink" title="SecurityConfig"></a>SecurityConfig</h1><p>对SpringSecurity的配置的扩展，支持自定义白名单资源路径和查询用户逻辑，其他的所有类都是为它服务的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//@Autowired(required=false)：表示忽略当前要注入的bean，如果有直接注入，没有跳过，不会报错。</span>    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> DynamicSecurityService dynamicSecurityService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用于配置需要拦截的url路径、jwt过滤器及出异常后的处理器；</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity httpSecurity<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//不需要保护的资源路径允许访问</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String url <span class="token operator">:</span> <span class="token function">ignoreUrlsConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUrls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            registry<span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//允许跨域请求的OPTIONS请求</span>        registry<span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>OPTIONS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 任何请求需要身份认证</span>        registry                <span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span><span class="token function">restfulAccessDeniedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 无权限处理</span>                <span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span><span class="token function">restAuthenticationEntryPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//未登录处理</span>                <span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span><span class="token function">jwtAuthenticationTokenFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UsernamePasswordAuthenticationFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//权限拦截器JWT过滤器</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> IgnoreUrlsConfig <span class="token function">ignoreUrlsConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IgnoreUrlsConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 当用户没有访问权限时,将调用该方法。是没有访问权限时的处理器，用于返回JSON格式的处理结果     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RestfulAccessDeniedHandler <span class="token function">restfulAccessDeniedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestfulAccessDeniedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**     * 当未登录或token失效时，返回JSON格式的结果     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RestAuthenticationEntryPoint <span class="token function">restAuthenticationEntryPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestAuthenticationEntryPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 在用户名和密码校验前添加的过滤器，如果有jwt的token，会自行根据token信息进行登录。     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JwtAuthenticationTokenFilter <span class="token function">jwtAuthenticationTokenFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtAuthenticationTokenFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 用于配置UserDetailsService及PasswordEncoder     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//UserDetailsService:SpringSecurity定义的核心接口，用于根据用户名获取用户信息，需要自行实现</span>        auth<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * SpringSecurity定义的用于对密码进行编码及比对的接口，目前使用的是BCryptPasswordEncoder     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PasswordEncoder <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="IgnoreUrlsConfig"><a href="#IgnoreUrlsConfig" class="headerlink" title="IgnoreUrlsConfig"></a>IgnoreUrlsConfig</h2><p>处理SecurityConfig中的白名单，用于不需要保护的资源路径允许访问</p><pre class=" language-yml"><code class="language-yml">secure:  ignored:    urls: #安全路径白名单      - /swagger-ui.html      - /user/**      - /home/**</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 用于配置白名单资源路径 * 将大量的参数配置在 application.yml 文件中， * 通过 @ConfigurationProperties 注解，我们可以方便的获取这些参数值 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"secure.ignored"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IgnoreUrlsConfig</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> urls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="RestfulAccessDeniedHandler"><a href="#RestfulAccessDeniedHandler" class="headerlink" title="RestfulAccessDeniedHandler"></a>RestfulAccessDeniedHandler</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 处理SecurityConfig中没有权限访问时自定义返回结果，返回403相关信息 * 自定义返回结果：没有权限访问时 * 返回403相关信息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestfulAccessDeniedHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AccessDeniedHandler</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                       HttpServletResponse response<span class="token punctuation">,</span>                       AccessDeniedException e<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException    <span class="token punctuation">{</span>     response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSONUtil<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>CommonResult<span class="token punctuation">.</span><span class="token function">forbidden</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="RestAuthenticationEntryPoint"><a href="#RestAuthenticationEntryPoint" class="headerlink" title="RestAuthenticationEntryPoint"></a>RestAuthenticationEntryPoint</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义返回结果：未登录或登录过期 * 即返回401相关信息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestAuthenticationEntryPoint</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationEntryPoint</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commence</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> AuthenticationException authException<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException    <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSONUtil<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>CommonResult<span class="token punctuation">.</span><span class="token function">unauthorized</span><span class="token punctuation">(</span>authException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="JwtAuthenticationTokenFilter"><a href="#JwtAuthenticationTokenFilter" class="headerlink" title="JwtAuthenticationTokenFilter"></a>JwtAuthenticationTokenFilter</h2><p>处理SecurityConfig，在用户名和密码校验前添加的过滤器，如果请求中有jwt的token且有效，会取出token中的用户名，然后调用SpringSecurity的API进行登录操作。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * JWT登录授权过滤器  tokenHeader: Authorization #JWT存储的请求头  tokenHead: 'Bearer '  #JWT负载中拿到开头 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtAuthenticationTokenFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * SpringSecurity定义的核心接口，用于根据用户名获取用户信息     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDetailsService userDetailsService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JwtTokenUtil jwtTokenUtil<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.tokenHeader}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String tokenHeader<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.tokenHead}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String tokenHead<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                                    HttpServletResponse response<span class="token punctuation">,</span>                                    FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//请求头有字段Authorization，并且以‘Bearer ’开头</span>        String authHeader <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tokenHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authHeader <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> authHeader<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tokenHead<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            String authToken <span class="token operator">=</span> authHeader<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tokenHead<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// The part after "Bearer "</span>            String username <span class="token operator">=</span> jwtTokenUtil<span class="token punctuation">.</span><span class="token function">getUserNameFromToken</span><span class="token punctuation">(</span>authToken<span class="token punctuation">)</span><span class="token punctuation">;</span>            LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"checking username:{}"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//SpringSecurity定义用于封装用户信息的类（主要是用户信息和权限）</span>                <span class="token comment" spellcheck="true">//这里首先从缓存中获取用户信息和用户权限</span>                UserDetails userDetails <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//验证用户名和是否已过期</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>jwtTokenUtil<span class="token punctuation">.</span><span class="token function">validateToken</span><span class="token punctuation">(</span>authToken<span class="token punctuation">,</span> userDetails<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    UsernamePasswordAuthenticationToken authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">,</span> null<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    authentication<span class="token punctuation">.</span><span class="token function">setDetails</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebAuthenticationDetailsSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"authenticated user:{}"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/*                    SecurityContextHolder使用了ThreadLocal机制来保存每个使用者的安全上下文。                    这意味着，只要针对某个使用者的逻辑执行都是在同一个线程中进行，即使不在各个方法之间以参数的形式传递其安全上下文，                    各个方法也能通过SecurityContextHolder工具获取到该安全上下文。只要在处理完当前使用者的请求之后注意清除ThreadLocal中的安全上下文                     */</span>                    SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="BoyingSecurityConfig"><a href="#BoyingSecurityConfig" class="headerlink" title="BoyingSecurityConfig"></a>BoyingSecurityConfig</h2><p>实现了对SecurityConfig的扩展，获取用户信息和用户拥有的权限</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoyingSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">SecurityConfig</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UmsAdminService adminService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UmsResourceService resourceService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实现security模块的该方法，根据用户名获取用户信息</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserDetailsService <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取登录用户信息</span>        <span class="token keyword">return</span> username <span class="token operator">-</span><span class="token operator">></span> adminService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        @Override        public UserDetails loadUserByUsername(String username)        {            //获取用户信息            AdminUser AdminUser = getAdminByUsername(username);            if (AdminUser != null)            {                List&lt;AdminResource> resourceList = getResourceList(AdminUser.getId());                return new AdminUserDetails(AdminUser, resourceList);            }            throw new UsernameNotFoundException("用户名或密码错误");        }        */</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    加载所有的资源 资源路径url,资源路径值(自定义为了 id:name )</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DynamicSecurityService <span class="token function">dynamicSecurityService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DynamicSecurityService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ConfigAttribute<span class="token operator">></span> <span class="token function">loadDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ConfigAttribute<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                List<span class="token operator">&lt;</span>AdminResource<span class="token operator">></span> resourceList <span class="token operator">=</span> resourceService<span class="token punctuation">.</span><span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>AdminResource resource <span class="token operator">:</span> resourceList<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>access<span class="token punctuation">.</span>SecurityConfig</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> resource<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> map<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="UserDetails"><a href="#UserDetails" class="headerlink" title="UserDetails"></a>UserDetails</h2><p>SpringSecurity定义用于封装用户信息的类（主要是用户信息和权限）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDetails</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="AdminUserDetails"><a href="#AdminUserDetails" class="headerlink" title="AdminUserDetails"></a>AdminUserDetails</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * SpringSecurity需要的用户详情 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminUserDetails</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetails</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AdminUser adminUser<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>AdminResource<span class="token operator">></span> resourceList<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回当前用户拥有的资源权限</span>        <span class="token keyword">return</span> resourceList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>AdminResource <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span>AdminResource<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> AdminResource<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> adminUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> adminUser<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> adminUser<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="基于路径的动态权限控制"><a href="#基于路径的动态权限控制" class="headerlink" title="基于路径的动态权限控制"></a>基于路径的动态权限控制</h1><p>当有动态权限业务类时在FilterSecurityInterceptor过滤器前添加我们的动态权限过滤器。这里在创建动态权限相关对象时，还使用了@ConditionalOnBean这个注解，当没有动态权限业务类时就不会创建动态权限相关对象，实现了有动态权限控制和没有这两种情况的兼容。</p><p>例如admin中有DynamicSecurityService这个Bean对象，则所有的动态权限控制可用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> DynamicSecurityService dynamicSecurityService<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity httpSecurity<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//有动态权限配置时添加动态权限校验过滤器</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dynamicSecurityService <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//在指定的beforeFilter之前加入filter</span>            registry<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span><span class="token function">dynamicSecurityFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     FilterSecurityInterceptor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dynamicSecurityService"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DynamicSecurityFilter <span class="token function">dynamicSecurityFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DynamicSecurityFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用了@ConditionalOnBean这个注解,当没有动态权限业务类时就不会创建动态权限相关对象，实现了有动态权限控制和没有这两种情况的兼容。</span>    <span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dynamicSecurityService"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DynamicAccessDecisionManager <span class="token function">dynamicAccessDecisionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DynamicAccessDecisionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dynamicSecurityService"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DynamicSecurityFilter <span class="token function">dynamicSecurityFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DynamicSecurityFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dynamicSecurityService"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DynamicSecurityMetadataSource <span class="token function">dynamicSecurityMetadataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DynamicSecurityMetadataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="DynamicSecurityFilter"><a href="#DynamicSecurityFilter" class="headerlink" title="DynamicSecurityFilter"></a>DynamicSecurityFilter</h2><p>动态权限过滤器，用于实现基于路径的动态权限过滤。</p><p>首先我们需要创建一个过滤器，用于实现动态权限控制，这里需要注意的是<code>doFilter</code>方法，对于OPTIONS请求直接放行，否则前端调用会出现跨域问题。对于配置在<code>IgnoreUrlsConfig</code>中的白名单路径我也需要直接放行，所有的鉴权操作都会在<code>super.beforeInvocation(fi)</code>中进行。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 动态权限过滤器，用于实现基于路径的动态权限过滤 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicSecurityFilter</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSecurityInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        FilterInvocation fi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterInvocation</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">,</span> filterChain<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//OPTIONS请求直接放行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>OPTIONS<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fi<span class="token punctuation">.</span><span class="token function">getChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fi<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//白名单请求直接放行</span>        PathMatcher pathMatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AntPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String path <span class="token operator">:</span> ignoreUrlsConfig<span class="token punctuation">.</span><span class="token function">getUrls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pathMatcher<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                fi<span class="token punctuation">.</span><span class="token function">getChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fi<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//此处会调用AccessDecisionManager中的decide方法进行鉴权操作</span>        InterceptorStatusToken token <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">beforeInvocation</span><span class="token punctuation">(</span>fi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fi<span class="token punctuation">.</span><span class="token function">getChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fi<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterInvocation</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="DynamicSecurityMetadataSource"><a href="#DynamicSecurityMetadataSource" class="headerlink" title="DynamicSecurityMetadataSource"></a>DynamicSecurityMetadataSource</h2><p>自己实现SecurityMetadataSource接口的getAttributes方法，用于获取当前访问路径所需资源。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 动态权限数据源，用于获取动态权限规则 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicSecurityMetadataSource</span> <span class="token keyword">implements</span> <span class="token class-name">FilterInvocationSecurityMetadataSource</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//后台资源规则被缓存在了一个Map对象之中</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ConfigAttribute<span class="token operator">></span> configAttributeMap <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//动态权限相关业务类，自定义的一个动态权限业务接口，其主要用于加载所有的后台资源规则。</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DynamicSecurityService dynamicSecurityService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        configAttributeMap <span class="token operator">=</span> dynamicSecurityService<span class="token punctuation">.</span><span class="token function">loadDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//所以当后台资源发生变化时，我们需要清空缓存的数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clearDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        configAttributeMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configAttributeMap <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span>ConfigAttribute<span class="token operator">></span> <span class="token function">getAttributes</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalArgumentException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>configAttributeMap <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>ConfigAttribute<span class="token operator">></span>  configAttributes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前访问的路径</span>        String url <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>FilterInvocation<span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequestUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String path <span class="token operator">=</span> URLUtil<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        PathMatcher pathMatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AntPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator <span class="token operator">=</span> configAttributeMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取访问该路径所需资源</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String pattern <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pathMatcher<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                configAttributes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>configAttributeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 未设置操作请求权限，返回空集合</span>        <span class="token keyword">return</span> configAttributes<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="DynamicAccessDecisionManager"><a href="#DynamicAccessDecisionManager" class="headerlink" title="DynamicAccessDecisionManager"></a>DynamicAccessDecisionManager</h2><p>实现AccessDecisionManager接口来实现权限校验，对于没有配置资源的接口我们直接允许访问，对于配置了资源的接口，我们把访问所需资源和用户拥有的资源进行比对，如果匹配则允许访问。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 动态权限决策管理器，用于判断用户是否有访问权限 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicAccessDecisionManager</span> <span class="token keyword">implements</span> <span class="token class-name">AccessDecisionManager</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decide</span><span class="token punctuation">(</span>Authentication authentication<span class="token punctuation">,</span> Object object<span class="token punctuation">,</span>                       Collection<span class="token operator">&lt;</span>ConfigAttribute<span class="token operator">></span> configAttributes<span class="token punctuation">)</span> <span class="token keyword">throws</span> AccessDeniedException<span class="token punctuation">,</span> InsufficientAuthenticationException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当接口未被配置资源时直接放行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CollUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>configAttributes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Iterator<span class="token operator">&lt;</span>ConfigAttribute<span class="token operator">></span> iterator <span class="token operator">=</span> configAttributes<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ConfigAttribute configAttribute <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将访问所需资源或用户拥有资源进行比对</span>            String needAuthority <span class="token operator">=</span> configAttribute<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>GrantedAuthority grantedAuthority <span class="token operator">:</span> authentication<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>needAuthority<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>grantedAuthority<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span><span class="token string">"抱歉，您没有访问权限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="DynamicSecurityService"><a href="#DynamicSecurityService" class="headerlink" title="DynamicSecurityService"></a>DynamicSecurityService</h2><p>动态权限相关业务类，自定义的一个动态权限业务接口，其主要用于加载所有的后台资源规则。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 动态权限相关业务类 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DynamicSecurityService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 加载资源ANT通配符和资源对应MAP     */</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ConfigAttribute<span class="token operator">></span> <span class="token function">loadDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="BoyingSecurityConfig-1"><a href="#BoyingSecurityConfig-1" class="headerlink" title="BoyingSecurityConfig"></a>BoyingSecurityConfig</h2><p>此类是admin中的类</p><p>当有动态权限业务类时在FilterSecurityInterceptor过滤器前添加我们的动态权限过滤器。这里在创建动态权限相关对象时，还使用了@ConditionalOnBean这个注解，当没有动态权限业务类时就不会创建动态权限相关对象，实现了有动态权限控制和没有这两种情况的兼容。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoyingSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">SecurityConfig</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    加载所有的资源 资源路径url,资源路径值(自定义为了 id:name )</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DynamicSecurityService <span class="token function">dynamicSecurityService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DynamicSecurityService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ConfigAttribute<span class="token operator">></span> <span class="token function">loadDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ConfigAttribute<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                List<span class="token operator">&lt;</span>AdminResource<span class="token operator">></span> resourceList <span class="token operator">=</span> resourceService<span class="token punctuation">.</span><span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>AdminResource resource <span class="token operator">:</span> resourceList<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>access<span class="token punctuation">.</span>SecurityConfig</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> resource<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> map<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="AdminUserDetails-1"><a href="#AdminUserDetails-1" class="headerlink" title="AdminUserDetails"></a>AdminUserDetails</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminUserDetails</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetails</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回当前用户拥有的资源权限</span>        <span class="token keyword">return</span> resourceList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>AdminResource <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span>AdminResource<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> AdminResource<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="AOP优化"><a href="#AOP优化" class="headerlink" title="AOP优化"></a>AOP优化</h1><p>给获取用户信息和获取用户的资源信息这两个操作添加缓存操作，当我们修改用户信息和资源信息时都需要删除缓存中的数据</p><h2 id="RedisCacheAspect"><a href="#RedisCacheAspect" class="headerlink" title="RedisCacheAspect"></a>RedisCacheAspect</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Redis缓存切面，防止Redis宕机影响正常业务逻辑 * 定义一个切面，在相关缓存业务类上面应用，在它的环绕通知中直接处理掉异常，保障后续操作能执行。 * 因为作为缓存，我们所希望的是，如果Redis宕机了，我们的业务逻辑不会有影响。 * 要保证缓存业务类中的方法执行不影响正常的业务逻辑，就需要在所有方法中添加`try catch`逻辑。 * 使用AOP，我们可以在一个地方写上`try catch`逻辑，然后应用到所有方法上去。 */</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisCacheAspect</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>RedisCacheAspect<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public * com.tongji.boying.service.*CacheService.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cacheAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"cacheAspect()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">doAround</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable    <span class="token punctuation">{</span>        Signature signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MethodSignature methodSignature <span class="token operator">=</span> <span class="token punctuation">(</span>MethodSignature<span class="token punctuation">)</span> signature<span class="token punctuation">;</span>        Method method <span class="token operator">=</span> methodSignature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//有CacheException注解的方法需要抛出异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>CacheException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> throwable<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="CacheException"><a href="#CacheException" class="headerlink" title="CacheException"></a>CacheException</h2><p>自定义注解，有该注解的缓存方法会抛出异常。例如验证码存储，如果我们的Redis宕机了，我们的验证码存储接口需要的是报错，而不是返回执行成功。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义注解，有该注解的缓存方法会抛出异常 */</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">CacheException</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="RedisConfig"><a href="#RedisConfig" class="headerlink" title="RedisConfig"></a>RedisConfig</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Redis配置类 */</span><span class="token annotation punctuation">@EnableCaching</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRedisConfig</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h1 id="前后端分离跨域问题"><a href="#前后端分离跨域问题" class="headerlink" title="前后端分离跨域问题"></a>前后端分离跨域问题</h1><p>CORS全称Cross-Origin Resource Sharing，意为跨域资源共享。当一个资源去访问另一个不同域名或者同域名不同端口的资源时，就会发出跨域请求。如果此时另一个资源不允许其进行跨域资源访问，那么访问的那个资源就会遇到跨域问题。</p><h2 id="添加GlobalCorsConfig配置文件来允许跨域访问。"><a href="#添加GlobalCorsConfig配置文件来允许跨域访问。" class="headerlink" title="添加GlobalCorsConfig配置文件来允许跨域访问。"></a>添加GlobalCorsConfig配置文件来允许跨域访问。</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 全局跨域配置 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalCorsConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 允许跨域调用的过滤器     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CorsFilter <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CorsConfiguration config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//允许所有域名进行跨域调用</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//允许跨越发送cookie</span>        config<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放行全部原始头信息</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//允许所有请求方法跨域调用</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UrlBasedCorsConfigurationSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此时发现，需要登录认证的/admin/info接口的OPTIONS请求无法通过认证，那是因为复杂的跨越请求需要先进行一次OPTIONS请求进行预检，我们的应用整合了SpringSecurity，对OPTIONS请求并没有放开登录认证。</p><h2 id="设置SpringSecurity允许OPTIONS请求访问"><a href="#设置SpringSecurity允许OPTIONS请求访问" class="headerlink" title="设置SpringSecurity允许OPTIONS请求访问"></a>设置SpringSecurity允许OPTIONS请求访问</h2><p>在SecurityConfig类的configure(HttpSecurity httpSecurity)方法中添加如下代码。</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>OPTIONS<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//跨域请求会先进行一次options请求</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="一次完整的跨域请求"><a href="#一次完整的跨域请求" class="headerlink" title="一次完整的跨域请求"></a>一次完整的跨域请求</h2><h3 id="先发起一次OPTIONS请求进行预检"><a href="#先发起一次OPTIONS请求进行预检" class="headerlink" title="先发起一次OPTIONS请求进行预检"></a>先发起一次OPTIONS请求进行预检</h3><p><strong>请求头信息</strong></p><pre class=" language-text"><code class="language-text">Access-Control-Request-Headers: content-typeAccess-Control-Request-Method: POSTOrigin: http://localhost:8090Referer: http://localhost:8090/User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36</code></pre><p><strong>响应头信息</strong></p><pre class=" language-text"><code class="language-text">Access-Control-Allow-Credentials: trueAccess-Control-Allow-Headers: content-typeAccess-Control-Allow-Methods: POSTAccess-Control-Allow-Origin: http://localhost:8090Cache-Control: no-cache, no-store, max-age=0, must-revalidateContent-Length: 0Date: Sat, 27 Jul 2019 13:40:32 GMTExpires: 0Pragma: no-cacheVary: Origin, Access-Control-Request-Method, Access-Control-Request-HeadersX-Content-Type-Options: nosniffX-Frame-Options: DENYX-XSS-Protection: 1; mode=block</code></pre><ul><li>请求成功返回状态码为200</li></ul><h3 id="发起真实的跨域请求"><a href="#发起真实的跨域请求" class="headerlink" title="发起真实的跨域请求"></a>发起真实的跨域请求</h3>]]></content>
      
      
      <categories>
          
          <category> 博影项目笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> AOP </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>boying-mbg技术说明</title>
      <link href="posts/aa468593.html"/>
      <url>posts/aa468593.html</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-generator"><a href="#Mybatis-generator" class="headerlink" title="Mybatis generator"></a>Mybatis generator</h1><p>MyBatis的代码生成器，通常情况下的单表查询不用再手写mapper。</p><p>MyBatis Generator 生成的文件包含三类：</p><ul><li>Model实体文件，一个数据库表对应生成一个 Model 实体与一个Example文件；</li><li>Mapper接口文件，数据数操作方法都在此接口中定义；</li><li>Mapper XML配置文件</li></ul><h3 id="generator-properties"><a href="#generator-properties" class="headerlink" title="generator.properties"></a>generator.properties</h3><p>配置数据库的连接信息，之后就将生成该数据库的相关model与mapper</p><h3 id="generatorConfig-xml"><a href="#generatorConfig-xml" class="headerlink" title="generatorConfig.xml"></a>generatorConfig.xml</h3><p>Mybatis generator的一些配置信息，包括数据库连接（引用上面的配置文件）、生成文件路径、生成的表名等</p><h3 id="CommentGenerator"><a href="#CommentGenerator" class="headerlink" title="CommentGenerator"></a>CommentGenerator</h3><p>写一个新类CommentGenerator实现<code>DefaultCommentGenerator</code>接口的方法来使自动生成的model类含有中文注释</p><h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><p>运行Generator的main函数生成代码，指定生成model，mapper接口，mapper.xml的路径</p><h2 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h2><h3 id="model"><a href="#model" class="headerlink" title="model"></a>model</h3><p>基本就是数据库中的字段信息，把数据库的字段注释也生成了。同时还生成Setter，Getter，toString方法</p><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>example.setOrderByClause(“字段名 ASC”)</td><td>添加升序排列条件，DESC为降序</td></tr><tr><td>example.setDistinct(false)</td><td>去除重复，boolean型，true为选择不重复的记录。</td></tr><tr><td>criteria.andXxxIsNull</td><td>添加字段xxx为null的条件</td></tr><tr><td>criteria.andXxxIsNotNull</td><td>添加字段xxx不为null的条件</td></tr><tr><td>criteria.andXxxEqualTo(value)</td><td>添加xxx字段等于value条件</td></tr><tr><td>criteria.andXxxNotEqualTo(value)</td><td>添加xxx字段不等于value条件</td></tr><tr><td>criteria.andXxxGreaterThan(value)</td><td>添加xxx字段大于value条件</td></tr><tr><td>criteria.andXxxGreaterThanOrEqualTo(value)</td><td>添加xxx字段大于等于value条件</td></tr><tr><td>criteria.andXxxLessThan(value)</td><td>添加xxx字段小于value条件</td></tr><tr><td>criteria.andXxxLessThanOrEqualTo(value)</td><td>添加xxx字段小于等于value条件</td></tr><tr><td>criteria.andXxxIn(List&lt;？&gt;)</td><td>添加xxx字段值在List&lt;？&gt;条件</td></tr><tr><td>criteria.andXxxNotIn(List&lt;？&gt;)</td><td>添加xxx字段值不在List&lt;？&gt;条件</td></tr><tr><td>criteria.andXxxLike(“%”+value+”%”)</td><td>添加xxx字段值为value的模糊查询条件</td></tr><tr><td>criteria.andXxxNotLike(“%”+value+”%”)</td><td>添加xxx字段值不为value的模糊查询条件</td></tr></tbody></table><p>实例对应的example，example用于添加条件，相当where后面的部分，常用写法为：</p><pre class=" language-java"><code class="language-java">UserExample example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UserExample<span class="token punctuation">.</span>Criteria criteria <span class="token operator">=</span> example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>criteria<span class="token punctuation">.</span><span class="token function">andUsernameEqualTo</span><span class="token punctuation">(</span><span class="token string">"a%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>example<span class="token punctuation">.</span><span class="token function">setOrderByClause</span><span class="token punctuation">(</span><span class="token string">"desc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//按条件计数</span>    <span class="token keyword">long</span> <span class="token function">countByExample</span><span class="token punctuation">(</span>UserExample example<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    按条件删除</span>    <span class="token keyword">int</span> <span class="token function">deleteByExample</span><span class="token punctuation">(</span>UserExample example<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//按主键删除</span>    <span class="token keyword">int</span> <span class="token function">deleteByPrimaryKey</span><span class="token punctuation">(</span>Integer userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>User record<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    insertSelective对应的sql语句加入了NULL校验，即只会插入数据不为null的字段值。</span>    <span class="token keyword">int</span> <span class="token function">insertSelective</span><span class="token punctuation">(</span>User record<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectByExample</span><span class="token punctuation">(</span>UserExample example<span class="token punctuation">)</span><span class="token punctuation">;</span>    User <span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>Integer userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    第一个参数 是要修改的部分值组成的对象，其中有些属性为null则表示该项不修改。</span><span class="token comment" spellcheck="true">//    第二个参数 是一个对应的查询条件的类， 通过这个类可以实现 order by 和一部分的where 条件。</span>    <span class="token keyword">int</span> <span class="token function">updateByExampleSelective</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"record"</span><span class="token punctuation">)</span> User record， <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"example"</span><span class="token punctuation">)</span> UserExample example<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">updateByExample</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"record"</span><span class="token punctuation">)</span> User record， <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"example"</span><span class="token punctuation">)</span> UserExample example<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    更新 新的model中不为空的字段</span>    <span class="token keyword">int</span> <span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span>User record<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    会将为空的字段在数据库中置为NULL</span>    <span class="token keyword">int</span> <span class="token function">updateByPrimaryKey</span><span class="token punctuation">(</span>User record<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博影项目笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> Mybatis </tag>
            
            <tag> mapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>boying-common技术说明</title>
      <link href="posts/9f58f9fe.html"/>
      <url>posts/9f58f9fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="boying-common目录结构"><a href="#boying-common目录结构" class="headerlink" title="boying-common目录结构"></a>boying-common目录结构</h1><pre><code>src    └─main        ├─java        │  └─com        │      └─tongji        │          └─boying        │              └─common        │                  ├─api        │                  │      CommonPage.java        │                  │      CommonResult.java        │                  │      IErrorCode.java        │                  │      ResultCode.java        │                  │        │                  ├─config        │                  │      BaseRedisConfig.java        │                  │      BaseSwaggerConfig.java        │                  │        │                  ├─domain        │                  │      SwaggerProperties.java        │                  │      WebLog.java        │                  │        │                  ├─exception        │                  │      ApiException.java        │                  │      Asserts.java        │                  │      GlobalExceptionHandler.java        │                  │        │                  ├─log        │                  │      WebLogAspect.java        │                  │        │                  └─service        │                      │  RedisService.java        │                      │        │                      └─impl        │                              RedisServiceImpl.java        │        └─resources                logback-spring.xml</code></pre><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="IErrorCode"><a href="#IErrorCode" class="headerlink" title="IErrorCode"></a>IErrorCode</h2><p>封装API的错误码，为一个接口</p><h2 id="ResultCode"><a href="#ResultCode" class="headerlink" title="ResultCode"></a>ResultCode</h2><p>枚举了一些常用API操作码:</p><pre class=" language-java"><code class="language-java"><span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">200</span>， <span class="token string">"操作成功"</span><span class="token punctuation">)</span>，<span class="token function">FAILED</span><span class="token punctuation">(</span><span class="token number">500</span>， <span class="token string">"操作失败"</span><span class="token punctuation">)</span>，<span class="token function">VALIDATE_FAILED</span><span class="token punctuation">(</span><span class="token number">404</span>， <span class="token string">"参数检验失败"</span><span class="token punctuation">)</span>，<span class="token function">UNAUTHORIZED</span><span class="token punctuation">(</span><span class="token number">401</span>， <span class="token string">"暂未登录或token已经过期"</span><span class="token punctuation">)</span>，<span class="token function">FORBIDDEN</span><span class="token punctuation">(</span><span class="token number">403</span>， <span class="token string">"没有相关权限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="CommonResult"><a href="#CommonResult" class="headerlink" title="CommonResult"></a>CommonResult</h2><p>通用返回对象，封装了给前端的返回信息，例如注册：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span>，  <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"注册成功"</span>，  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">}</span></code></pre><p>也封装一些常用方法供项目中使用，例如直接调用<code>success</code>方法传入数据即可。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> CommonResult<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">success</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>ResultCode<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>， ResultCode<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>， data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>或者直接传入错误信息：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> CommonResult<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">failed</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>ResultCode<span class="token punctuation">.</span>FAILED<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="CommonPage"><a href="#CommonPage" class="headerlink" title="CommonPage"></a>CommonPage</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//分页数据封装类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonPage</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer pageNum<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer pageSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer totalPage<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long total<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 将PageHelper分页后的list转为分页信息     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> CommonPage<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">restPage</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        CommonPage<span class="token operator">&lt;</span>T<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonPage</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PageInfo<span class="token operator">&lt;</span>T<span class="token operator">></span> pageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setTotalPage</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setPageNum</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setPageSize</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将SpringData分页后的list转为分页信息     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> CommonPage<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">restPage</span><span class="token punctuation">(</span>Page<span class="token operator">&lt;</span>T<span class="token operator">></span> pageInfo<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        CommonPage<span class="token operator">&lt;</span>T<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonPage</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setTotalPage</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getTotalPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setPageNum</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setPageSize</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getTotalElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><h2 id="SwaggerProperties"><a href="#SwaggerProperties" class="headerlink" title="SwaggerProperties"></a>SwaggerProperties</h2><p>Swagger自定义配置实体类，包括API文档生成基础路径，文档标题，文档描述等等</p><h2 id="BaseSwaggerConfig"><a href="#BaseSwaggerConfig" class="headerlink" title="BaseSwaggerConfig"></a>BaseSwaggerConfig</h2><p>定义了Swagger的基础配置，供子模块进行继承的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseSwaggerConfig</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通过SwaggerProperties会在页面上打印Swagger的文档信息</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span>SwaggerProperties swaggerProperties<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//略</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//供子类自定义配置</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> SwaggerProperties <span class="token function">swaggerProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//例如在boying-user模块中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token keyword">extends</span> <span class="token class-name">BaseSwaggerConfig</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> SwaggerProperties <span class="token function">swaggerProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> SwaggerProperties<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiBasePackage</span><span class="token punctuation">(</span><span class="token string">"com.tongji.boying.controller"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"boying-userAPI文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">enableSecurity</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="Redis配置"><a href="#Redis配置" class="headerlink" title="Redis配置"></a>Redis配置</h1><ul><li>BaseRedisConfig 负责Redis基础配置</li><li>RedisService 是接口，提供了Redis常用操作</li><li>RedisServiceImpl 是redis操作实现类</li></ul><h1 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h1><p>当我们在Controller中校验失败时，直接抛出该异常，这样就可以达到校验失败返回错误信息的目的了。</p><h2 id="ApiException"><a href="#ApiException" class="headerlink" title="ApiException"></a>ApiException</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//当我们校验失败时抛出该异常</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> IErrorCode errorCode<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Asserts"><a href="#Asserts" class="headerlink" title="Asserts"></a>Asserts</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 断言处理类，用于抛出各种API异常 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Asserts</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span>IErrorCode errorCode<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>errorCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="GlobalExceptionHandler"><a href="#GlobalExceptionHandler" class="headerlink" title="GlobalExceptionHandler"></a>GlobalExceptionHandler</h2><p>定义一个全局异常的处理类，用于处理全局异常，并返回封装好的CommonResult对象</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**注解@ControllerAdvice:指定一个组件，这个组件主要用于增强@Controller注解修饰的类的功能，比如说进行全局异常处理。其抽象级别应该是用于对Controller进行“切面”环绕的，而具体的业务织入方式则是通过结合其他的注解来实现的将 Controller 层的异常和数据校验的异常进行统一处理，减少模板代码，减少编码量，提升扩展性和可维护性。*/</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    @ExceptionHandler：用来修饰全局异常处理的方法，可以指定异常的类型。</span>    <span class="token comment" spellcheck="true">//    统一处理某一类异常，从而能够减少代码重复率和复杂度</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> ApiException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> CommonResult <span class="token function">handle</span><span class="token punctuation">(</span>ApiException e<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> CommonResult<span class="token punctuation">.</span><span class="token function">failed</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> CommonResult<span class="token punctuation">.</span><span class="token function">failed</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在Service层，如果逻辑校验失败，直接调用Asserts的fail方法，就会通过全局异常处理，返回数据给前端。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>    Asserts<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"用户名不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="接口访问日志"><a href="#接口访问日志" class="headerlink" title="接口访问日志"></a>接口访问日志</h1><p>组合使用slf4j与logback搭建日志框架。</p><p>原因是logback直接实现了slf4j的接口，不需要额外引入适配器，不消耗内存和计算开销。而且使用方便，是当下最流行的日志框架。而<code>Spring boot</code>默认支持的<code>slf4j</code>+<code>logback</code>的日志框架。</p><p>实现结果是当用户访问到对应的API时就会在程序控制台打印相关日志信息。可以直观的看到哪些接口被用户访问，也可以根据日志信息轻松的debug</p><p>同时，产生的日志会记录在磁盘中存档，如果项目上线，可以随时查看日志文件，获取项目的情况</p><h2 id="日志信息封装类WebLog"><a href="#日志信息封装类WebLog" class="headerlink" title="日志信息封装类WebLog"></a>日志信息封装类WebLog</h2><p>Controller层的日志封装类，用于封装需要记录的日志信息，包括操作描述、操作用户，操作时间、消耗时间、url、请求参数，IP地址和返回结果等信息。</p><h2 id="切面类WebLogAspect"><a href="#切面类WebLogAspect" class="headerlink" title="切面类WebLogAspect"></a>切面类WebLogAspect</h2><p>定义了一个日志切面，在环绕通知中获取日志需要的信息，并应用到controller层中所有的public方法中去。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 统一日志处理切面 * @Aspect:作用是把当前类标识为一个切面供容器读取,切面是通知和切点的结合，定义了何时、何地应用通知功能。 * @Order(1):Spring在加载Bean的时候，有用到order注解 此注解可操作于类、方法、字段，当作用在类时，值越小，则加载的优先级越高！ */</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebLogAspect</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**     * 定义切入点表达式,切点定义了通知功能被应用的范围。     比如日志切面的应用范围就是所有接口，即所有controller层的接口方法。     * execution(方法修饰符 返回类型 方法所属的包.类名.方法名称(方法参数))     * com.tongji.boying包及其子包下关于controller包下的所有类中的public方法都应用切面里的通知     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public * com.tongji.boying.controller.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">webLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    通知方法会在目标方法调用之前执行 里面的参数即为上述定义的webLog切入点表达式,防止重复编程</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"webLog()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBefore</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//        该条日志标识了访问该接口的日志开始位置</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Start"</span> <span class="token operator">+</span> LINE_SP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    环绕通知，可以在切入点前后织入代码，并且可以自由的控制何时执行切点</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"webLog()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">doAround</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="logback-spring-xml"><a href="#logback-spring-xml" class="headerlink" title="logback-spring.xml"></a>logback-spring.xml</h2><ul><li><p>默认使用 logback 日志，通过独立的 xml 配置文件来配置日志打印。按照指定的规则组织配置文件名，并放在 resources 目录下，就能自动被 spring boot 加载</p></li><li><p>首先定义了一些全局变量，如日志保存路径</p></li><li><p>其次定义了一个负责将日志输出到控制台的appender，还控制了日志输出格式、输出日志级别规则 </p></li><li><p>随后定义一个将日志输出到本地磁盘的appender，并且控制了日志文件的一些策略，如文件名称等</p></li><li><p>最后控制WebLogAspect的logger日志级别为DEBUG，以及调用appender在控制台进行日志输出</p></li></ul><h1 id="日志背景材料"><a href="#日志背景材料" class="headerlink" title="日志背景材料"></a>日志背景材料</h1><h3 id="日志架构"><a href="#日志架构" class="headerlink" title="日志架构"></a>日志架构</h3><p> 门面设计模式是面向对象设计模式中的一种，日志框架采用的就是这种模式，类似JDBC的设计理念。它只提供一套接口规范，自身不负责日志功能的实现，目的是让使用者不需要关注底层具体是哪个日志库来负责日志打印机具体的使用细节等。</p><p> 在使用slf4j+具体日志库模式时，由于slf4j相当于充当api抽象接口，所以我们的日志打印是也是面向接口编程的，当我们需要更换具体的日志库时，我们只需要引入具体的maven依赖就可以了，并对原有的日志库依赖进行移除，而不需要改动代码。</p><ul><li><p>logback直接实现了slf4j的接口，不消耗内存和计算开销。</p></li><li><p>Spring Boot默认集成了Logback，可以开箱即用，非常方便。</p></li><li><p>slf4j可以理解为规则的制定者，是一个抽象层，定义了日志相关的接口。</p></li><li><p>log4j，logback，JDK Logging都是slf4j的实现层</p></li></ul><h3 id="slf4j"><a href="#slf4j" class="headerlink" title="slf4j"></a>slf4j</h3><p>The Simple Logging Facade for Java</p><p>只提供一系列日志记录接口和日志工厂，并不提供日志输出的具体实现，所以其必须搭配具体日志实现模块使用</p><p><strong>不推荐</strong>在业务代码中直接使用 Logback，而是要使用 SLF4J这类日志门面模块，<strong>面向接口编程</strong>的一种体现（设计原则之<strong>接口隔离</strong>），日志实现模块是具体的东西，是变化的不断升级的</p><pre class=" language-java"><code class="language-java">Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="logback"><a href="#logback" class="headerlink" title="logback"></a>logback</h3><p>Logback 构建在三个主要的类上：Logger，Appender 和 Layouts。这三个不同类型的组件一起作用能够让开发者根据消息的类型以及日志的级别来打印日志。</p><p><code>Logger</code> 类作为 logback-classic 模块的一部分。<code>Appender</code> 与 <code>Layouts</code> 接口作为 logback-core 的一部分。作为一个通用的模块，logback-core 没有 logger 的概念。</p><p>任何日志 API 的优势在于它能够禁止某些日志的输出，但是又不会妨碍另一些日志的输出。通过假定一个日志空间，这个空间包含所有可能的日志语句，这些日志语句根据开发人员设定的标准来进行分类。在 logback-classic 中，分类是 logger 的一部分，每一个 logger 都依附在 <code>LoggerContext</code> 上，它负责产生 logger，并且通过一个树状的层级结构来进行管理。</p><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><h4 id="通知（Advice）"><a href="#通知（Advice）" class="headerlink" title="通知（Advice）"></a>通知（Advice）</h4><p>通知描述了切面要完成的工作以及何时执行。比如我们的日志切面需要记录每个接口调用时长，就需要在接口调用前后分别记录当前时间，再取差值。</p><ul><li>前置通知（Before）：在目标方法调用前调用通知功能；</li><li>后置通知（After）：在目标方法调用之后调用通知功能，不关心方法的返回结果；</li><li>返回通知（AfterReturning）：在目标方法成功执行之后调用通知功能；</li><li>异常通知（AfterThrowing）：在目标方法抛出异常后调用通知功能；</li><li>环绕通知（Around）：通知包裹了目标方法，在目标方法调用之前和之后执行自定义的行为。</li></ul><h4 id="连接点（JoinPoint）"><a href="#连接点（JoinPoint）" class="headerlink" title="连接点（JoinPoint）"></a>连接点（JoinPoint）</h4><p>通知功能被应用的时机。比如接口方法被调用的时候就是日志切面的连接点。</p><h4 id="切点（Pointcut）"><a href="#切点（Pointcut）" class="headerlink" title="切点（Pointcut）"></a>切点（Pointcut）</h4><p>切点定义了通知功能被应用的范围。比如日志切面的应用范围就是所有接口，即所有controller层的接口方法。</p><h4 id="切面（Aspect）"><a href="#切面（Aspect）" class="headerlink" title="切面（Aspect）"></a>切面（Aspect）</h4><p>切面是通知和切点的结合，定义了何时、何地应用通知功能。</p><h4 id="引入（Introduction）"><a href="#引入（Introduction）" class="headerlink" title="引入（Introduction）"></a>引入（Introduction）</h4><p>在无需修改现有类的情况下，向现有的类添加新方法或属性。</p><h3 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h3><p>指定了通知被应用的范围，表达式格式：</p><pre class=" language-java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span>方法修饰符 返回类型 方法所属的包<span class="token punctuation">.</span>类名<span class="token punctuation">.</span>方法名称<span class="token punctuation">(</span>方法参数<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博影项目笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> AOP </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目分模块构建说明</title>
      <link href="posts/d5d3a8a5.html"/>
      <url>posts/d5d3a8a5.html</url>
      
        <content type="html"><![CDATA[<h1 id="maven分模块笔记"><a href="#maven分模块笔记" class="headerlink" title="maven分模块笔记"></a>maven分模块笔记</h1><ul><li>maven父项目和子项目的pom.xml是有继承关系的，也就是说各个模块相同的部分，我们可以配置到父项目的pom.xml文件中，这样子项目中的pom.xml只放自己个性的东西就可以了，这大大减少了工作量。另外，在编译和打包等 其他阶段，都可以统一在父项目中来进行，maven会自动操作其中的子项目，提高了效率。</li></ul><h2 id="父模块的pom-xml文件"><a href="#父模块的pom-xml文件" class="headerlink" title="父模块的pom.xml文件"></a>父模块的pom.xml文件</h2><h3 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h3><p>填写拥有的子模块，例如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>boying-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>boying-mbg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>boying-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>boying-admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>boying-user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span></code></pre><h3 id="relativePath"><a href="#relativePath" class="headerlink" title="relativePath"></a>relativePath</h3><p>Maven parent.relativePath默认值为../pom.xml</p><p>查找顺序：relativePath元素中的地址–本地仓库–远程仓库</p><p>如果设定一个空值将始终从仓库中获取，不从本地路径获取。</p><p>如<relativePath/></p><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>项目中所有要使用到的jar包的版本都集中由父工程管理。这样你在写其他工程pom文件中maven依赖时就不需要写<strong>版本号</strong></p><h3 id="dependencyManagement"><a href="#dependencyManagement" class="headerlink" title="dependencyManagement"></a>dependencyManagement</h3><p>先声明依赖，并不实际引用。</p><p>通过它元素来管理JAR包的版本，让子项目中引用一个依赖而不用显示的列出版本号。Maven会沿着父子层次向上走，直到找到一个拥有dependencyManagement元素的项目，然后它就会使用在这个dependencyManagement元素中指定的版本号。</p><h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3><p>即使在子项目中不写该依赖项，那么子项目仍然会从父项目中继承该依赖项（全部继承）。</p><h2 id="子模块pom-xml"><a href="#子模块pom-xml" class="headerlink" title="子模块pom.xml"></a>子模块pom.xml</h2><p>首先要定义对父类的引用</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.tongji.boying<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>boying<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span></code></pre><p>其次是自身的一些描述信息</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>boying-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>boying-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>boying-common project for boying<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span></code></pre><p>最后是一些依赖信息，因为定义在父模块里了，所以不需要声明版本号。例如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h2><ul><li>很好生成mbg文件，不用管其他的依赖</li><li>封装通用模块</li><li>易于管理，不会一个大工程，太乱</li><li>把用户模块和管理员模块解耦，各自开发，各自部署</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博影项目笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> pom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="posts/f7ede91d.html"/>
      <url>posts/f7ede91d.html</url>
      
        <content type="html"><![CDATA[<h1 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h1><h2 id="Java特点"><a href="#Java特点" class="headerlink" title="Java特点"></a>Java特点</h2><ul><li>简单性(不能直接操作指针)</li><li>面向对象性</li><li>健壮性(GC机制)</li><li>多线程并发</li><li>可移植性/跨平台性 </li></ul><h2 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h2><p><strong>javac</strong></p><ul><li>javac在编译期,将.java文件形成.class文件 </li><li>javac MainTest.java</li><li>相对路径写法，即MainTest.java必须在当前路径下</li></ul><p><strong>java</strong></p><ul><li><p>java在运行期,运行.class文件   </p></li><li><p>java MainTest</p><p>  如果指定了classpath则不必，否则MainTest.class也必须在当前路径下</p></li></ul><h2 id="环境变量简介"><a href="#环境变量简介" class="headerlink" title="环境变量简介"></a>环境变量简介</h2><ul><li>环境变量包括了 系统变量,用户变量</li><li>系统变量的范围比较大,会让所有计算机用户都生效</li><li>用户变量只会作用与当前用户</li><li>path环境变量告诉windows可以去哪里找到命令.这样就不用写程序的绝对路径了,如：C:\Program Files\Java\jdk8.0_261\bin\javac.exe可以直接在任何路径下的命令行敲javac</li><li>默认情况下classpath只加载当前路径下的class文件</li><li>classpath给类加载器指定路径,让类加载器去指定路径下加载字节码</li><li>classpath不区分大小写,如CLASSPATHCLASSPATH配置：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</li></ul><h2 id="class文件"><a href="#class文件" class="headerlink" title="class文件"></a>class文件</h2><ul><li>一个java源文件可以定义多个class</li><li>源文件中只要有一个class定义，就会产生一个class文件</li><li>public类可以没有，但有则必须与源文件名保持一致，且只能有一个</li><li>每个类都能有自己的main方法</li></ul><h2 id="语法特点"><a href="#语法特点" class="headerlink" title="语法特点"></a>语法特点</h2><ul><li>局部变量没有初始值，只能手动赋值</li><li>常量，静态变量存储在方法区中，在类加载时初始化</li><li>若类的某个成员是基本数据类型，即使没有进行初始化，Java也会确保他获得一个默认值（对于boolean是false,其他是0）</li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ul><li>方法名和参数列表唯一标识出某个方法</li><li>方法中的局部变量,Java以编译错误的形式来保证所有变量在使用前都能得到恰当的初始化</li><li>方法传递参数实际上是传递参数的引用</li><li>按值调用：如果是基本数据类型,那么值不变；引用数据类型:引用被拷贝,指向的是原对象,所以仍能改变对象值</li></ul><h1 id="访问权限修饰符"><a href="#访问权限修饰符" class="headerlink" title="访问权限修饰符"></a>访问权限修饰符</h1><ul><li>默认是包访问权限,意味着当前的包中所有其他类对那个成员都有访问权限,但对应这个包之外的所有类,这个成员是private的</li><li>protected也提供包访问权限</li><li>继承可以访问public和protected的,但只有同一个包内,才能访问包访问权限的</li><li>类访问权限：类只能是包访问权限或public的</li></ul><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><ul><li>在为对象赋值时,实际上是将引用从一个地方复制到另一个地方,他们都会指向原先引用所指向的对象,指向相同的对象</li><li>两边只要有一边是字符串类型，拼接完就还是字符串。遵循从左到右的原则，例如System.out.println(100+200+”300”);//300300</li><li>所有浮点型默认当作double类型处理，要当作Float，后面加F</li></ul><h2 id="直接常量"><a href="#直接常量" class="headerlink" title="直接常量"></a>直接常量</h2><ul><li>后缀标识标志了他们的类型：大写的L代表long、大写的F代表float、一个字面量，默认当作int类型处理，后面加L则默认为long类型</li><li>int型中，0x开头代表16进制,如:0xCAFE ，0b开头为二进制，例如int a=0b110,输出结果为6</li><li>如果编译器能正确识别类型,则不必在数值后附加字符,例如long n=200</li><li>而对于指数标记法,例如1e-43,通常作为双精度数处理.如果没有f,则会有错误提示.float x = 1e-43f;</li></ul><h2 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h2><ul><li>左移位操作符:&lt;&lt;,右边补0</li><li>有符号右移位操作符:&gt;&gt;,使用符号扩展,若符号为正,则在高位插入0,否则插入1</li><li>无符号右移位操作符:&gt;&gt;&gt;,无论正负,都在高位插入0</li></ul><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li>窄化转换:将能容纳更多信息的数据类型转换成无法容纳那么多信息的类型.面临信息丢失的危险.编译器此时就会强制要求我们进行类型转换</li><li>扩展转换:不必显式进行类型转换,因为新类型肯定能容纳原来类型的信息</li><li>如果对基本数据类型执行算术运算或移位运算,char,byte,short在运算前自动转换成int,最终生成的类型就是int类型</li><li>表达式中出现的最大数据类型决定了表达式最终结果的数据类型</li><li>不能对布尔值进行其他任何运算</li><li>大容量转小容量需要强制类型转换，有可能损失精度</li><li>自动类型转换： long b=200; 200字面量首先默认当作int型，但是自动转换为long。而long b=300L,300字面量默认当作long，赋值给b不存在类型转换。</li><li>long a=200_0000_0000会报错，因为后者默认先为int时，已经超出int，就报错了</li><li>byte中，当整数型不超过[-128,127]时，该字面量可以直接赋值给byte，不需要类型转换。byte x=127; byte a = (byte)128;short，char也是可以的。只有字面量可以这样转换，例如 short s=a+x则会报错：不兼容的类型：从int转换到short可能会有损失。</li><li>char ch=97一个整数赋值给char类型变量能自动类型转换</li><li>byte，short，char混合运算，都会先转换为int再运算</li><li>多种数据类型混合运算，最终结果为“最大容量”类型</li><li>如果整数型字面量没有超过byte，short,char的取值范围，可以直接将其赋值给他们相应类型的变量</li><li>容量比较：byte&lt;short(char)&lt;int&lt;long&lt;float&lt;double  char比short代表更大的正整数</li></ul><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><ul><li>是try语句中的一个语句体，不能单独使用，用来释放资源</li><li>如果catch里面有return语句，此时会先执行return将返回值打包并创建一个返回路径等待，接着往下搜寻有没有finally语句，如果有则需先执行完finally后，再根据已经创建好的返回路径返回。</li><li>千万不要在finally内写return 返回语句，因为finally是只要JVM不结束就一定会执行的，那么在try和catch中写的return语句就会毫无意义，因为会被finally的return语句覆盖。</li></ul><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><ul><li>final修饰的变量只能赋一次值</li><li>引用也是变量，存内存地址。所以final修饰的引用只要指向了一个对象就永远指向那个变量</li><li>虽然实例变量如果没有手动赋值，但是系统会赋默认值。但是final修饰实例变量，内部实现让他必须要手动赋值。手动赋值可以在变量后面直接赋值，或者在构造器中赋值</li><li>实例对象用final修饰，说明该实例变量值不会随着对象的变化而变化，所以一般加static修饰变成常量</li><li>常量代表了永不改变的编译时常量或运行时被初始化后不希望他改变的值,这类常量必须是基本数据类型,并且以关键字final标识,定义时必须赋值</li><li>一个既是static,又是final的域只占据一段不能改变的存储空间</li><li>对应对象引用,final使引用恒定不变,一旦引用被初始化指向一个对象,就无法再把它改为指向另一个对象.但是对象自身是可以修改的</li><li>空白final：指被声明为final但又未给定初值的域，必须在域的定义处或者每个构造器中对final赋值</li><li>final参数：类似void test(final Date g),无法在方法中更改参数引用所指向的对象</li><li>final方法：把方法锁定,防止任何继承类修改他的含义；类中所有private方法都是final的</li><li>final类：禁止继承该类,所有方法隐式指定为final</li></ul><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><ul><li>如果没有写构造器,编译器会自动创建默认构造器;如果已经定义了构造器,则不会默认自动创建</li><li>执行类似x.f(1)方法时,编译器把所操作对象的引用作为第一个参数传递给了f(),实际上就形如X.f(x,1).</li><li>所以在方法内部,如果想获得对调用方法的那个对象的引用,则用this</li><li>在方法内部调用同一个类的另一个方法,不必用this,因为当前方法的this引用会自动应用于同一类中的所有方法</li><li>构造器中可以用this来调用另一个构造器,但是只能置于最起始处,而且只能调用一次</li></ul><h2 id="成员初始化"><a href="#成员初始化" class="headerlink" title="成员初始化"></a>成员初始化</h2><ul><li>在类中定义一个对象引用,若没有初始化,则会获得特殊值–null</li><li>无法阻止自动初始化的进行,他将会在构造器被调用前发生</li><li>变量定义会在任何方法(包括构造器)被调用之前得到初始化</li><li>静态初始化只在必要时刻才会进行,且不会再次被初始化</li></ul><h2 id="初始化过程"><a href="#初始化过程" class="headerlink" title="初始化过程"></a>初始化过程</h2><ul><li>当静态方法/静态域首次被访问时，java解释器必须查找类路径,单位Dog.class</li><li>载入Dog.class,执行且只执行静态初始化操作一次</li><li>当使用new Dog()创建对象时,在堆上为该对象分配足够的存储空间</li><li>存储空间清零,就自动的把所有基本类型数据设为默认值,引用设置为null</li><li>执行字段定义处的初始化动作</li><li>执行构造器</li></ul><h1 id="继承与多态"><a href="#继承与多态" class="headerlink" title="继承与多态"></a>继承与多态</h1><h2 id="了解-1"><a href="#了解-1" class="headerlink" title="了解"></a>了解</h2><ul><li>子类会自动得到基类中所有的域和方法</li><li>一般为了继承,会将所有的数据成员指定为private,所有方法指定为public</li><li>当创建了一个导出类的对象时,该对象包含了一个基类的子对象</li><li>Java会自动在导出类的构造器中插入对基类构造器的调用</li><li>如果没有默认的基类构造器,或者想要调用一个带参数的基类构造器,则必须用关键词super</li><li>父类引用指向子类对象.编译看左边,运行看右边</li><li>编译阶段绑定父类的方法，运行阶段绑定子类对象的方法</li><li>编译期间只知道引用是父类型的变量</li><li>子类继承父类的所有除了构造方法，但是父类私有的属性无法在子类直接访问</li><li>super不是引用，也不保存内存地址，也不指向一块对象，只是代表当前对象内部的那一块父类型的特征</li><li>this（），super（）都只能出现在构造方法第一行。为u的是创建子类对象时，先初始化父类的特征</li><li>protected，就类用户而言,他是private的,但是对于任何继承于此类的导出类或者同一个包的类,他是可访问的(也提供包访问权限)</li><li>名称屏蔽：子类可以进行重载或重写,而且重载不会屏蔽父类的重载方法，使用@Override注解可以防止你在不想重载时而意外地进行了重载</li></ul><h2 id="构造器-1"><a href="#构造器-1" class="headerlink" title="构造器"></a>构造器</h2><ul><li>基类的构造器总是在导出类的构造过程中被调用,导出类只能访问它自己的成员,不能访问基类的成员(因为通常是private),只有基类构造器才比较恰当的对自己元素进行初始化,因此必须令所有构造器得到调用</li><li>如果没有明确指定调用某个基类构造器,他就会默默调用默认构造器</li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><ul><li>数组是引用数据类型,数组父类是Object,存储在堆中</li><li>数组标识符是一个引用,指向堆中创建的一个真实对象，这个对象用以保存指向其他对象的引用</li><li>基本类型数组直接保存基本类型的值</li><li>数组元素首地址作为整个数组对象的地址</li><li>返回一个数组与返回任何其他对象没区别</li><li>不能实例化泛型的数组，因为擦除会移除参数类型信息，而数组必须知道他们所持有的确切类型</li><li>在使用任何引用前，必须为其指定一个对象，如果试图使用一个还是null的引用，在运行时将会报错。</li></ul><h2 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h2><ul><li>String [] names=new String[6]每个元素初始化为null</li><li>当创建一个数组对象时,实际上就是创建了一个引用数组,并且每个引用都会自动被初始化为一个特定值,该值拥有自己的关键字null,说明没有指向某个对象。</li><li>创建用来存放基本数据类型的数组时，会将这种数组所占内存全部置为零</li></ul><h2 id="System-arraycopy"><a href="#System-arraycopy" class="headerlink" title="System.arraycopy"></a>System.arraycopy</h2><ul><li>如果复制对象数组，则只是复制了对象的引用，即浅拷贝</li><li>而且不会执行自动拆箱，装箱，两个数组必须具有相同的确切类型</li><li>源数组，源数组起始处，目的数组，目的数组起始处，需要复制的元素个数</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> test<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//源数组，源数组起始处，目的数组，目的数组起始处，需要复制的元素个数</span>    System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>test<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h2><ul><li>异常通过编译器强制执行的，它往往能够降低错误处理代码的复杂度</li><li>使用new在堆上创建异常对象,然后当前的执行路径被终止,并且从当前环境中弹出对异常对象的引用,此时异常处理机制接管程序,将程序从错误状态中恢复,使程序继续运行下去</li><li>异常运行我们强制程序停止运行,并告诉我们出现了什么问题,或者强制程序处理问题,并返回到稳定状态</li><li>异常处理将错误处理直接置于编程语言中。异常是一种对象，他从出错地点被抛出，并被专门用来处理特定类型错误的相应的异常处理器捕获。</li><li>异常处理就像是与程序正常执行路径并行的，在错误发生时执行的另一条路径。因为他是另一条完全分离的执行路径，它不会干扰正常的执行代码。</li><li>异常不能被忽略，所以他保证一定会在某处得到处理</li><li>异常提供了一种从错误状况进行可靠恢复的途径，可以进行校正，并恢复程序的执行</li></ul><h2 id="异常限制"><a href="#异常限制" class="headerlink" title="异常限制"></a>异常限制</h2><ul><li>当覆盖方法时,子类只能抛出在基类方法的异常说明中列出的那些异常,保证了对象的可替换性</li><li>异常限制对构造器不起作用,然而因为基类构造器必须被调用,所有派生类构造器的异常说明必须包含基类构造器的异常说明</li><li>派生类可以不抛出任何异常,即使它是基类定义的异常</li><li>不能基于异常说明来重载方法</li><li>一个出现在基类方法的异常说明中的异常,不一定会出现在派生类的异常说明里,即某个特定方法的异常说明的接口变小了,和继承相反</li></ul><h2 id="异常声明"><a href="#异常声明" class="headerlink" title="异常声明"></a>异常声明</h2><ul><li>如果方法里的代码产生了异常却没有进行处理，编译器会发现这个问题并提醒你:要么处理，要么在异常说明中表明该方法将产生异常</li><li>可以声明方法将抛出异常，而实际上不抛出</li><li>可以定义接口时预先声明异常，这样接口实现就可以抛出这些预先声明的异常</li><li>在编译器被强制检查的异常称为被检查的异常</li><li>如果在方法内部抛出异常,它将在抛出异常的过程中结束</li><li>异常可以写入标准错误流System.err,他不会被重定向</li><li>e.printStackTrace()打印从方法调用处直到异常抛出处的方法调用序列,默认是被输出到标准错误流</li><li>printStackTrace返回一个由栈轨迹中的元素构成的数组,栈顶是调用序列中的最后一个方法调用</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span>    <span class="token punctuation">{</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable<span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Throwable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    java.lang.Throwable    at com.tongji.MainTest.test(MainTest.java:22)    at com.tongji.MainTest.main(MainTest.java:12)     */</span></code></pre><h2 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h2><h3 id="Error-非受查异常"><a href="#Error-非受查异常" class="headerlink" title="Error 非受查异常"></a>Error 非受查异常</h3><p>用来表示编译时和系统错误</p><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><h4 id="IOException等受查异常"><a href="#IOException等受查异常" class="headerlink" title="IOException等受查异常"></a>IOException等受查异常</h4><ul><li><p>Exception中除了RuntimeException的其他子类，都是编译时异常，又叫受检异常。即编写程序时必须预先对异常进行处理，否则编译器报错。编译时异常发生概率高。所以未雨绸缪。</p></li><li><p>编译时异常例子：大雨天，出门不带伞，很大可能会生病（很大可能发生的一种异常）。那就提前带一把伞（对概率较高的异常进行预处理）</p></li><li><p>编译期，运行期异常都发生在运行阶段。编译阶段异常不会发生。</p></li><li><p>编译时异常在编写程序时就要预先处理，可以继续向上抛出，或者自行处理。</p></li><li><p>throws ClassNotFoundException交给调用该方法的调用者处理</p></li><li><p>如果异常一直上抛，main再上抛则上抛到了JVM，则会终止程序</p></li><li><p>异常堆栈信息从上往下看。先看抛出的异常名。再看自己代码中最顶端报错的代码位置。</p></li><li><p>finally</p><ul><li><p>无论try里执行了return语句、break语句、还是continue语句，finally语句块还会继续执行。</p></li><li><p>当try或者catch的代码在运行的时候，JVM退出了。那么finally语句块就不会执行。同样，如果线程在运行try或者catch的代码时被中断了或者被杀死了(killed)，那么finally语句可能也不会执行了，即使整个运用还会继续执行。</p></li><li><p>如果在try语句里有return语句，finally语句还是会执行。它会在把控制权转移到该方法的调用者或者构造器前执行finally语句。也就是说，使用return语句把控制权转移给其他的方法前会执行finally语句。</p></li></ul></li></ul><h4 id="RuntimeException-非受查异常"><a href="#RuntimeException-非受查异常" class="headerlink" title="RuntimeException 非受查异常"></a>RuntimeException 非受查异常</h4><ul><li>是Java标准运行时检测的一部分,会自动被虚拟机抛出,不必要声明方法将抛出RuntimeException类型的异常</li><li>它称为不受检查异常,属于错误,将被自动捕获</li><li>该异常通常会穿越所有执行路径直达main方法,并在程序退出前调用异常的printStackTrace方法</li><li>RuntimeException代表的其实是编程错误,要么是无法预料的错误(如传入null引用),程序员应该在代码中检查的错误(数组越界)</li><li>所有的RuntimeException及其子类都属于运行时异常。在编写处理程序阶段可以处理，也可以选择不处理</li><li>运行时异常例子：被飞机砸中，发生概率比较低。如果提前预处理，就很麻烦</li><li>一个方法必须声明所有可能抛出的受查异常.非受查异常要么不可控制,要么应该避免发生.</li></ul><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><ul><li>可以将枚举看成常规类,他可以有自己的方法</li><li>枚举定义结束,编译期不允许我们使用他的构造器来构造任何其他实例</li><li>枚举的values()方法是编译期添加的static方法</li><li>枚举被标记为了final类,无法继承</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Ozwitch<span class="token punctuation">{</span>    <span class="token function">WEST</span><span class="token punctuation">(</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">NORTH</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">EAST</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SOUTH</span><span class="token punctuation">(</span><span class="token string">"This is my life"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String description<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Ozwitch</span><span class="token punctuation">(</span>String description<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Ozwitch ozwitch <span class="token operator">:</span> Ozwitch<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ozwitch<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>ozwitch<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数组 </tag>
            
            <tag> 操作符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ConcurrentHashMap</title>
      <link href="posts/cdf574e9.html"/>
      <url>posts/cdf574e9.html</url>
      
        <content type="html"><![CDATA[<h1 id="JDK7的ConcurrentHashMap"><a href="#JDK7的ConcurrentHashMap" class="headerlink" title="JDK7的ConcurrentHashMap"></a>JDK7的ConcurrentHashMap</h1><ul><li>首先将数据分为一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据时，其他段的数据也能被其他线程访问。</li><li>由一个Segment数组和多个HashEntry组成</li></ul><h2 id="Segment"><a href="#Segment" class="headerlink" title="Segment"></a>Segment</h2><ul><li>Segment 是一种可重入的锁 ReentrantLock。</li><li>Segment数组的意义就是将一个大的table分割成多个小的table来进行加锁</li><li>每一个Segment元素存储的是HashEntry数组+链表</li><li>可以把每个 Segment 看成是一个小的 HashMap，其内部结构和 HashMap 是一模一样的</li><li>当对某个 Segment 加锁时，并不会影响到其他 Segment 的读写。每个 Segment 内部自己操作自己的数据。</li></ul><h2 id="HashEntry"><a href="#HashEntry" class="headerlink" title="HashEntry"></a>HashEntry</h2><ul><li><p>每个 Segment 守护着一个HashEntry数组里的元素，当对 HashEntry 数组的数据进行修改时，必须首先获得对应的 Segment的锁。</p></li><li><p>每个 HashEntry 是一个链表结构的元素</p></li></ul><h1 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h1><ul><li>抛弃了Segment分段锁机制，利用CAS+Synchronized来保证并发更新的安全，底层采用数组+链表+红黑树的存储结构。</li><li>在构造函数中只会初始化sizeCtl值，并不会直接初始化table，而是延缓到第一次put操作。</li><li>ConcurrentHashMap不允许key或value为null值</li></ul><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//    记录容器的容量大小，通过CAS更新</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> baseCount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 这个sizeCtl是volatile的，那么他是线程可见的     * 当sizeCtl小于0说明有多个线程正则等待扩容结果，参考transfer函数     * sizeCtl等于0是默认值，大于0是扩容的阀值     */</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> sizeCtl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自旋锁 （锁定通过 CAS） 在调整大小和/或创建 CounterCells 时使用。 * 在CounterCell类更新value中会使用，功能类似显示锁和内置锁，性能更好 */</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> cellsBusy<span class="token punctuation">;</span></code></pre><h2 id="sizeCtl"><a href="#sizeCtl" class="headerlink" title="sizeCtl"></a>sizeCtl</h2><ul><li>控制标识符，在不同的地方有不同用途，而且它的取值不同，也代表不同的含义</li><li>负数代表正在进行初始化或扩容操作</li><li>-1代表正在初始化</li><li>-N 表示有N-1个线程正在进行扩容操作</li><li>正数或0代表hash表还没有被初始化，这个数值表示初始化或下一次进行扩容的大小，类似于扩容阈值loadfactor,它的值始终是当前ConcurrentHashMap容量的0.75倍</li></ul><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><ul><li>最核心的内部类，它包装了key-value键值对，所有插入ConcurrentHashMap的数据都包装在这里面。</li><li>它对value和next属性设置了volatile同步锁</li><li>它不允许调用setValue方法直接改变Node的value域</li><li>它增加了find方法辅助map.get()方法。</li></ul><h2 id="TreeNode"><a href="#TreeNode" class="headerlink" title="TreeNode"></a>TreeNode</h2><ul><li>当链表长度过长的时候，会转换为TreeNode。</li><li>但是与HashMap不相同的是，它并不是直接转换为红黑树，而是把这些结点包装成TreeNode放在TreeBin对象中，由TreeBin完成对红黑树的包装。</li><li>TreeNode集成自Node类，而并非HashMap中的集成自LinkedHashMap.Entry&lt;K,V&gt;类，也就是说TreeNode带有next指针，这样做的目的是方便基于TreeBin的访问。</li></ul><h2 id="TreeBin"><a href="#TreeBin" class="headerlink" title="TreeBin"></a>TreeBin</h2><ul><li>包装TreeNode节点。它代替了TreeNode的根节点</li><li>ConcurrentHashMap“数组”中，存放TreeBin对象</li><li>带有读写锁。</li></ul><h2 id="ForwardingNode"><a href="#ForwardingNode" class="headerlink" title="ForwardingNode"></a>ForwardingNode</h2><ul><li>一个用于连接两个table的节点类。它包含一个nextTable指针，用于指向下一张表。</li><li>这个节点的key value next指针全部为null，它的hash值为-1.</li><li>这里面定义的find的方法是从nextTable里进行查询节点，而不是以自身为头节点进行查找</li><li>只有table发生扩容的时候，ForwardingNode才会发挥作用，作为一个占位符放在table中表示当前节点为null或则已经被移动。</li></ul><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><ul><li>默认为null，初始化发生在第一次插入操作，默认大小为16的数组，用来存储Node节点数据，扩容时大小总是2的幂次方。</li></ul><h2 id="nextTable"><a href="#nextTable" class="headerlink" title="nextTable"></a>nextTable</h2><ul><li>默认为null，扩容时新生成的数组，其大小为原数组的两倍。</li></ul><h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><h2 id="Unsafe与CAS"><a href="#Unsafe与CAS" class="headerlink" title="Unsafe与CAS"></a>Unsafe与CAS</h2><ul><li>大量使用了U.compareAndSwapXXX的方法，这个方法是利用一个CAS算法实现无锁化的修改值的操作，他可以大大降低锁代理的性能消耗。</li><li>unsafe静态块控制了一些属性的修改工作，比如最常用的SIZECTL</li><li>这个算法的基本思想就是不断地去比较当前内存中的变量值与你指定的一个变量值是否相等，如果相等，则接受你指定的修改的值，否则拒绝你的操作。因为当前线程中的值已经不是最新的值，你的修改很可能会覆盖掉其他线程修改的结果。</li><li>利用CAS进行无锁操作，可以大大提高性能。</li><li>大量应用来的CAS方法进行变量、属性的修改工作。</li></ul><h2 id="三个辅助方法"><a href="#三个辅助方法" class="headerlink" title="三个辅助方法"></a>三个辅助方法</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获得在i位置上的Node节点</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">tabAt</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>U<span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> ASHIFT<span class="token punctuation">)</span> <span class="token operator">+</span> ABASE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* *计算偏移量(long)i &lt;&lt; ASHIFT) + ABASE为i最后的地址 *ASHIFT是指tab[i]中第i个元素在相对于数组第一个元素的偏移量，ABASE是数组的偏移地址 * compareAndSwapObject把tab[i]和c比较，如果相等就tab[i]=v否则tab[i]=c;*/</span><span class="token comment" spellcheck="true">/*利用CAS算法设置i位置上的Node节点。之所以能实现并发是因为他指定了原来这个节点的值是多少在CAS算法中，会比较内存中的值与你指定的这个值是否相等，如果相等才接受你的修改，否则拒绝你的修改*/</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">boolean</span> <span class="token function">casTabAt</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>                                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> c<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> U<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> ASHIFT<span class="token punctuation">)</span> <span class="token operator">+</span> ABASE<span class="token punctuation">,</span> c<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*利用volatile方法设置节点位置的值这些原子操作保证了ConcurrentHashMap的线程安全。*/</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">setTabAt</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    U<span class="token punctuation">.</span><span class="token function">putObjectVolatile</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> ASHIFT<span class="token punctuation">)</span> <span class="token operator">+</span> ABASE<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="put"><a href="#put" class="headerlink" title="put"></a>put</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li>禁止null key/value</li><li>根据key高低位参与运算,最终得到非负hash</li><li>不断循环,直到插入操作成功<ul><li>判断是否需要初始化<ul><li>tab == null || (n = tab.length) == 0</li><li>tab = initTable();</li></ul></li><li>计算位置,且该位置元素为null<ul><li>CAS放入，不需要加锁操作。</li><li>利用Unsafe.compareAndSwapObject方法插入Node节点。</li><li>如果CAS成功，说明Node节点已经插入，随后addCount(1L, binCount)方法会检查当前容量是否需要进行扩容。</li><li>如果CAS失败，说明有其它线程提前插入了节点，自旋重新尝试在这个位置插入节点。</li></ul></li><li>hashcode == MOVED ( -1) <ul><li>tab = helpTransfer(tab, f);</li><li>如果f的hash值为-1，说明当前f是ForwardingNode节点，意味有其它线程正在扩容，则一起进行扩容操作。</li></ul></li><li>其余情况把新的Node节点按链表或红黑树的方式插入到合适的位置，这个过程采用同步内置锁实现并发<ul><li>在节点f上进行同步，节点插入之前，再次利用tabAt(tab, i) == f判断，防止被其它线程修改。</li><li>如果f.hash &gt;= 0，说明f是链表结构的头结点，遍历链表，如果找到对应的node节点，则修改value，否则在链表尾部加入节点。</li><li>如果f是TreeBin类型节点，说明f是红黑树根节点，则在树结构上遍历元素，更新或增加节点。</li><li>如果链表中节点数binCount &gt;= TREEIFY_THRESHOLD(默认是8)，则把链表转化为红黑树结构。</li></ul></li></ul></li><li>addCount(1L，binCount)，主要是看是否需要扩容。当table容量不足的时候，即table的元素数量达到容量阈值sizeCtl，需要对table进行扩容。<ul><li>构建一个nextTable，大小为table的两倍。<ul><li>只有单个线程进行nextTable的初始化</li><li>通过Unsafe.compareAndSwapInt修改sizeCtl值，保证只有一个线程能够初始化nextTable</li><li>扩容后的数组长度为原来的两倍，但是容量是原来的1.5。</li></ul></li><li>把table的数据复制到nextTable中。<ul><li>可以支持节点的并发复制</li><li>大体思想是遍历、复制的过程。</li><li>首先根据运算得到需要遍历的次数i，然后利用tabAt方法获得i位置的元素f，初始化一个forwardNode实例fwd。</li><li>如果f == null，则在table中的i位置放入fwd，这个过程是采用Unsafe.compareAndSwapObjectf方法实现的，很巧妙的实现了节点的并发移动。</li><li>如果f是链表的头节点，就构造一个反序链表，把他们分别放在nextTable的i和i+n的位置上，移动完成，采用Unsafe.putObjectVolatile方法给table原位置赋值fwd。</li><li>如果f是TreeBin节点，也做一个反序处理，并判断是否需要untreeify，把处理的结果分别放在nextTable的i和i+n的位置上，移动完成，同样采用Unsafe.putObjectVolatile方法给table原位置赋值fwd。</li><li>遍历过所有的节点以后就完成了复制工作，把table指向nextTable，并更新sizeCtl为新数组大小的0.75倍 ，扩容完成。</li></ul></li></ul></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>采用CAS+synchronized实现并发插入或更新操作</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null <span class="token operator">||</span> value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    //避免hash值是负数    //HASH_BITS的符号位是0，&amp; 下来的最高位肯定是0    static final int spread(int h) {        return (h ^ (h >>> 16)) &amp; HASH_BITS;    }    */</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这边加了一个循环，就是不断的尝试，因为在table的初始化和casTabAt用到了compareAndSwapInt、compareAndSwapObject</span>    <span class="token comment" spellcheck="true">//因为如果其他线程正在修改tab，那么尝试就会失败，所以这边要加一个for循环，不断的尝试</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//CAS</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> null<span class="token punctuation">,</span>                         <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//CAS</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// no lock when adding to empty bin</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*        //如果Table节点是ForwardNode节点的话那么Hash的值就等于-1         static final class ForwardingNode&lt;K,V> extends Node&lt;K,V> {        final Node&lt;K,V>[] nextTable;        ForwardingNode(Node&lt;K,V>[] tab) {            super(MOVED, null, null, null);            this.nextTable = tab;        }        */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> MOVED<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//如果线程进入到这边说明已经有其他线程正在做扩容操作，这个是一个辅助方法</span>            tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            V oldVal <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//这个地方设计非常的巧妙，内置锁synchronized锁住了f,因为f是指定特定的tab[i]的，</span>            <span class="token comment" spellcheck="true">// 所以就锁住了整行链表,这个设计跟分段锁有异曲同工之妙，只是其他读取操作需要用cas来保证</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//CAS</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        binCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            K ek<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                                <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>                                 <span class="token punctuation">(</span>ek <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                oldVal <span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                    e<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> pred <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                          value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span>                        binCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeBin<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                       value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            oldVal <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                p<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD<span class="token punctuation">)</span>                    <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转化为红黑树</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVal <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">addCount</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> check<span class="token punctuation">)</span> <span class="token punctuation">{</span>    CounterCell<span class="token punctuation">[</span><span class="token punctuation">]</span> as<span class="token punctuation">;</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span> s<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x) 每次竟来都baseCount都加1因为x=1</span>    <span class="token comment" spellcheck="true">/*    每次都会对baseCount 加1，如果并发竞争太大，那么可能导致U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x) 失败，那么为了提高高并发的时候baseCount可见性失败的问题，又避免一直重试，这样性能会有很大的影响，那么在jdk8的时候是有引入一个类Striped64，其中LongAdder和DoubleAdder就是对这个类的实现。这两个方法都是为解决高并发场景而生的，是AtomicLong的加强版，AtomicLong在高并发场景性能会比LongAdder差。但是LongAdder的空间复杂度会高点。    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>as <span class="token operator">=</span> counterCells<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">||</span>        <span class="token operator">!</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> BASECOUNT<span class="token punctuation">,</span> b <span class="token operator">=</span> baseCount<span class="token punctuation">,</span> s <span class="token operator">=</span> b <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CounterCell a<span class="token punctuation">;</span> <span class="token keyword">long</span> v<span class="token punctuation">;</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> uncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>as <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> as<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>            <span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span>ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span>            <span class="token operator">!</span><span class="token punctuation">(</span>uncontended <span class="token operator">=</span>              U<span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> CELLVALUE<span class="token punctuation">,</span> v <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">,</span> v <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//多线程CAS发生失败的时候执行</span>            <span class="token function">fullAddCount</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> uncontended<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>check <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> <span class="token function">sumCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>check <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> nt<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> sc<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当条件满足开始扩容</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>s <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>               <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">resizeStamp</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果小于0说明已经有线程在进行扩容操作了</span>                <span class="token comment" spellcheck="true">//一下的情况说明已经有在扩容或者多线程进行了扩容，其他线程直接break不要进入扩容操作</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">>>></span> RESIZE_STAMP_SHIFT<span class="token punctuation">)</span> <span class="token operator">!=</span> rs <span class="token operator">||</span> sc <span class="token operator">==</span> rs <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">||</span>                    sc <span class="token operator">==</span> rs <span class="token operator">+</span> MAX_RESIZERS <span class="token operator">||</span> <span class="token punctuation">(</span>nt <span class="token operator">=</span> nextTable<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span>                    transferIndex <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> SIZECTL<span class="token punctuation">,</span> sc<span class="token punctuation">,</span> sc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果相等说明扩容已经完成，可以继续扩容</span>                    <span class="token function">transfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> nt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//这个时候sizeCtl已经等于(rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2等于一个大的负数，这边加上2很巧妙,因为transfer后面对sizeCtl--操作的时候，最多只能减两次就结束</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> SIZECTL<span class="token punctuation">,</span> sc<span class="token punctuation">,</span>                                         <span class="token punctuation">(</span>rs <span class="token operator">&lt;&lt;</span> RESIZE_STAMP_SHIFT<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">transfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            s <span class="token operator">=</span> <span class="token function">sumCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">fullAddCount</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">boolean</span> wasUncontended<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取当前线程的probe值作为hash值,如果0则强制初始化当前线程的Probe值，初始化的probe值不为0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">localInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// force initialization</span>        h <span class="token operator">=</span> ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wasUncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置未竞争标记为true</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// True if last slot nonempty</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CounterCell<span class="token punctuation">[</span><span class="token punctuation">]</span> as<span class="token punctuation">;</span> CounterCell a<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token keyword">long</span> v<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>as <span class="token operator">=</span> counterCells<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> as<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Try to attach new Cell如果当前没有CounterCell就创建一个</span>                    CounterCell r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CounterCell</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Optimistic create</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                        U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> CELLSBUSY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这边加上cellsBusy锁</span>                        <span class="token keyword">boolean</span> created <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// Recheck under lock</span>                            CounterCell<span class="token punctuation">[</span><span class="token punctuation">]</span> rs<span class="token punctuation">;</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> j<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rs <span class="token operator">=</span> counterCells<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                                <span class="token punctuation">(</span>m <span class="token operator">=</span> rs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                                rs<span class="token punctuation">[</span>j <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                rs<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>                                created <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                            cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//释放cellsBusy锁，让其他线程可以进来</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>created<span class="token punctuation">)</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// Slot is now non-empty</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wasUncontended<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// CAS already known to fail wasUncontended为false说明已经发生了竞争，重置为true重新执行上面代码</span>                wasUncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Continue after rehash</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> CELLVALUE<span class="token punctuation">,</span> v <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">,</span> v <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//对cell的value值进行累计x（1）</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>counterCells <span class="token operator">!=</span> as <span class="token operator">||</span> n <span class="token operator">>=</span> NCPU<span class="token punctuation">)</span>                collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// At max size or stale 表明as已经过时，说明cells已经初始化完成，看下面，重置collide为false表明已经存在竞争</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>collide<span class="token punctuation">)</span>                collide <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                     U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> CELLSBUSY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>counterCells <span class="token operator">==</span> as<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// Expand table unless stale 下面的代码主要是给counterCells扩容，尽可能避免冲突</span>                        CounterCell<span class="token punctuation">[</span><span class="token punctuation">]</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CounterCell</span><span class="token punctuation">[</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                            rs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> as<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                        counterCells <span class="token operator">=</span> rs<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// Retry with expanded table</span>            <span class="token punctuation">}</span>            h <span class="token operator">=</span> ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">advanceProbe</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> counterCells <span class="token operator">==</span> as <span class="token operator">&amp;&amp;</span>                 U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> CELLSBUSY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//表明counterCells还没初始化，则初始化，这边用cellsBusy加锁</span>            <span class="token keyword">boolean</span> init <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                           <span class="token comment" spellcheck="true">// Initialize table</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>counterCells <span class="token operator">==</span> as<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    CounterCell<span class="token punctuation">[</span><span class="token punctuation">]</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CounterCell</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    rs<span class="token punctuation">[</span>h <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CounterCell</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    counterCells <span class="token operator">=</span> rs<span class="token punctuation">;</span>                    init <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>init<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> BASECOUNT<span class="token punctuation">,</span> v <span class="token operator">=</span> baseCount<span class="token punctuation">,</span> v <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//最终如果上面的都失败就把x累计到baseCount</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// Fall back on using base</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="get"><a href="#get" class="headerlink" title="get"></a>get</h1><ul><li>判断table是否为空，如果为空，直接返回null。</li><li>计算key的hash值，并获取指定table中指定位置的Node节点，通过遍历链表或则树结构找到对应的节点，返回value值。</li></ul><p>需要cas来保证变量的原子性。如果tab[i]正被锁住，那么CAS就会失败，失败之后就会不断的重试。这也保证了get在高并发情况下不会出错。</p><p>有多少种情况会导致get在并发的情况下可能取不到值。1、一个线程在get的时候，另一个线程在对同一个key的node进行remove操作；2、一个线程在get的时候，另一个线程正则重排table。可能导致旧table取不到值。<br>那么本质是，我在get的时候，有其他线程在对同一桶的链表或树进行修改。那么get是怎么保证同步性的呢？我们看到e = tabAt(tab, (n - 1) &amp; h)) != null</p><p>它是对tab[i]进行原子性的读取，因为我们知道putVal等对table的桶操作是有加锁的，那么一般情况下我们对桶的读也是要加锁的，但是我们这边为什么不需要加锁呢？因为我们用了Unsafe的getObjectVolatile，因为table是volatile类型，所以对tab[i]的原子请求也是可见的。因为如果同步正确的情况下，根据happens-before原则，<strong>对volatile域的写入操作happens-before于每一个后续对同一域的读操作</strong>。所以不管其他线程对table链表或树的修改，都对get读取可见。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">,</span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> eh<span class="token punctuation">;</span> K ek<span class="token punctuation">;</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>eh <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eh <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果eh=-1就说明e节点为ForWordingNode,这说明什么，说明这个节点已经不存在了，被另一个线程正则扩容</span>        <span class="token comment" spellcheck="true">//所以要查找key对应的值的话，直接到新newtable找</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">?</span> p<span class="token punctuation">.</span>val <span class="token operator">:</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="初始化方法initTable"><a href="#初始化方法initTable" class="headerlink" title="初始化方法initTable"></a>初始化方法initTable</h1><ul><li>调用它的构造方法仅仅是设置了一些参数而已。</li><li>整个table的初始化是在向ConcurrentHashMap中插入元素的时候发生的。</li><li>如调用put、computeIfAbsent、compute、merge等方法的时候，调用时机是检查table==null。</li><li>初始化方法主要应用了关键属性sizeCtl<ul><li>如果一个线程发现sizeCtl&lt;0，意味着另外的线程执行CAS操作成功，当前线程只需要让出cpu时间片，初始化只能由一个线程完成，Thread.yield();</li><li>如果获得了初始化权限，就用CAS方法将sizeCtl置为-1，防止其他线程进入。U.compareAndSwapInt(this, SIZECTL, sc, -1)</li><li>初始化数组后，将sizeCtl的值改为0.75*n</li></ul></li></ul><h1 id="扩容方法-transfer"><a href="#扩容方法-transfer" class="headerlink" title="扩容方法 transfer"></a>扩容方法 transfer</h1><ul><li>支持多线程进行扩容操作，而且没有加锁。</li><li>第一部分是构建一个nextTable,它的容量是原来的两倍，这个操作是单线程完成的。这个单线程的保证是通过RESIZE_STAMP_SHIFT这个常量经过一次运算来保证的</li><li>第二个部分就是将原来table中的元素复制到nextTable中，允许多线程进行操作。如果遍历到的节点是forward节点，就向后继续遍历，再加上给节点上锁的机制，就完成了多线程的控制。多线程遍历节点，处理了一个节点，就把对应点的值set为forward，另一个线程看到forward，就向后遍历。这样交叉就完成了复制工作。</li></ul><h1 id="helpTransfer方法"><a href="#helpTransfer方法" class="headerlink" title="helpTransfer方法"></a>helpTransfer方法</h1><ul><li>协助扩容的方法</li><li>这个方法被调用的时候，当前ConcurrentHashMap一定已经有了nextTable对象，首先拿到这个nextTable对象，调用transfer方法。</li><li>回看上面的transfer方法可以看到，当本线程进入扩容方法的时候会直接进入复制阶段。</li></ul><h1 id="treeifyBin方法"><a href="#treeifyBin方法" class="headerlink" title="treeifyBin方法"></a>treeifyBin方法</h1><ul><li>这个方法用于将过长的链表转换为TreeBin对象。但是他并不是直接转换，而是进行一次容量判断，如果容量没有达到转换的要求，直接进行扩容操作并返回；</li><li>如果满足条件才链表的结构抓换为TreeBin ，这与HashMap不同的是，它并没有把TreeNode直接放入红黑树，而是利用了TreeBin这个小容器来封装所有的TreeNode.</li></ul><h1 id="Size"><a href="#Size" class="headerlink" title="Size"></a>Size</h1><ul><li>对于ConcurrentHashMap来说，这个table里到底装了多少东西其实是个不确定的数量，因为不可能在调用size()方法的时候像GC的“stop the world”一样让其他线程都停下来让你去统计，因此只能说这个数量是个估计值。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> 源码 </tag>
            
            <tag> ConcurrentHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedHashMap</title>
      <link href="posts/54458703.html"/>
      <url>posts/54458703.html</url>
      
        <content type="html"><![CDATA[<h1 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h1><ul><li>继承HashMap</li><li>它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。</li><li>在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。</li><li>每次插入数据，或者访问、修改数据时，会增加节点、或调整链表的节点顺序。以决定迭代时输出的顺序</li><li>LinkedHashMap并没有重写任何put方法。但是其重写了构建新节点的newNode()方法.在每次构建新节点时，将新节点链接在内部双向链表的尾部</li><li>在HashMap的插入删除等操作后会调用钩子方法(afterNodeAccess, afterNodeInsertion, afterNodeRemoval)，</li><li>而这些方法的实现就在LinkedHashMap中，这些方法的目的就是操作 before 和 after 指针。</li><li>通过维护一个运行于所有条目的双向链表，LinkedHashMap保证了元素迭代的顺序。该迭代顺序可以是插入顺序或者是访问顺序</li><li>LinkedHashMap可以认为是HashMap+LinkedList，即它既使用HashMap操作数据结构，又使用LinkedList维护插入元素的先后顺序</li><li>LinkedHashMap虽然逻辑上有两套,但实际上是通过引用指向而形成的head,tail链表(他们拿node节点链接而形成),实际上也只有一份数据</li><li>注意该循环双向链表的头部存放的是最久访问的节点或最先插入的节点，尾部为最近访问的或最近插入的节点，迭代器遍历方向是从链表的头部开始到链表尾部结束，在链表尾部有一个空的header节点，该节点不存放key-value内容，为LinkedHashMap类的成员属性，循环双向链表的入口。</li><li>使用了模板模式</li></ul><h2 id="accessOrder"><a href="#accessOrder" class="headerlink" title="accessOrder"></a>accessOrder</h2><p>accessOrder==false(默认) ，迭代时输出的顺序是插入节点的顺序</p><p><strong>accessOrder==true</strong></p><ul><li>输出的顺序是按照访问节点的顺序。为true时，可以在这基础之上构建一个LruCache</li><li>在afterNodeAccess()函数中，会将当前被访问到的节点e，移动至内部的双向链表的尾部</li><li>afterNodeAccess()函数中，会修改modCount,因此当你正在accessOrder=true的模式下,迭代LinkedHashMap时，如果同时查询访问数据，也会导致fail-fast，因为迭代的顺序已经改变。</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li><p>LinkedHashMap 重写newNode，newTreeNode 方法，这两个方法是在插入时HashMap构建新节点时调用的，对于重写后的newNode 先是创建LinkedHashMap#Entry节点，之后将其加到 before/after 链的尾部；</p></li><li><p>对于重写后的newTreeNode 先是创建HashMap的TreeNode节点，因为其继承自LinkedHashMap#Entry，</p><p>  所以含有before/after 指针，之后同样加入到链尾。</p></li></ul><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//多了指向前面的,后面的指针</span><span class="token comment" spellcheck="true">//before 与 after 提供了一种视图，从该角度看是一个所有节点按插入顺序排列的双向链表。</span><span class="token comment" spellcheck="true">//维护双向链表</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap<span class="token punctuation">.</span>Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">{</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> before<span class="token punctuation">,</span> after<span class="token punctuation">;</span>    <span class="token function">Entry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">transient</span> LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> head<span class="token punctuation">;</span><span class="token keyword">transient</span> LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> tail<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true则是LRU顺序</span><span class="token comment" spellcheck="true">//false则是插入顺序(默认)</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> accessOrder<span class="token punctuation">;</span></code></pre><h1 id="辅助方法"><a href="#辅助方法" class="headerlink" title="辅助方法"></a>辅助方法</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//新建一个节点,并且链接到最后一个位置上</span><span class="token comment" spellcheck="true">//重写了HashMap的newNode方法,这样基本创建节点都会用到</span><span class="token comment" spellcheck="true">//newNode()会在HashMap的putVal()方法里被调用，putVal()方法会在 put(K key, V value)时被调用</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">newNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> p <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在每次构建新节点时，通过linkNodeLast(p);将新节点链接在内部双向链表的尾部。</span>        <span class="token function">linkNodeLast</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//将新增的节点，连接在链表的尾部</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkNodeLast</span><span class="token punctuation">(</span>LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> last <span class="token operator">=</span> tail<span class="token punctuation">;</span>    tail <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> null<span class="token punctuation">)</span>        head <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//将新节点连接在链表的尾部</span>        p<span class="token punctuation">.</span>before <span class="token operator">=</span> last<span class="token punctuation">;</span>        last<span class="token punctuation">.</span>after <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    由于LinkedHashMap维护了一个双向链表，因此它的containsValue(value)方法直接    遍历双向链表查找对应的Entry即可，而无需去遍历哈希桶。     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> e <span class="token operator">=</span> head<span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>after<span class="token punctuation">)</span> <span class="token punctuation">{</span>            V v <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> value <span class="token operator">||</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//LinkedHashMap 默认返回false 则不删除节点。 返回true 代表要删除最早的节点。通常构建一个LruCache会在达到Cache的上限是返回true</span>    <span class="token comment" spellcheck="true">//是构建LruCache需要的回调</span>    <span class="token comment" spellcheck="true">//一般新加一个时可能要删除</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="三大方法"><a href="#三大方法" class="headerlink" title="三大方法"></a>三大方法</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//正常的断开链条</span><span class="token comment" spellcheck="true">//从链式关系中删除节点e</span><span class="token comment" spellcheck="true">//该方法会在Node&lt;K,V> removeNode(int hash, Object key, Object value, boolean matchValue, boolean movable)方法中回调</span>    <span class="token keyword">void</span> <span class="token function">afterNodeRemoval</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// unlink</span>        LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> p <span class="token operator">=</span>                <span class="token punctuation">(</span>LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">)</span> e<span class="token punctuation">,</span> b <span class="token operator">=</span> p<span class="token punctuation">.</span>before<span class="token punctuation">,</span> a <span class="token operator">=</span> p<span class="token punctuation">.</span>after<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//待删除节点 p 的前置后置节点都置空</span>        p<span class="token punctuation">.</span>before <span class="token operator">=</span> p<span class="token punctuation">.</span>after <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果前置节点是null，则现在的头结点应该是后置节点a</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> null<span class="token punctuation">)</span>            head <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token comment" spellcheck="true">//否则将前置节点b的后置节点指向a</span>            b<span class="token punctuation">.</span>after <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//该元素是尾元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> null<span class="token punctuation">)</span>            tail <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token keyword">else</span>            a<span class="token punctuation">.</span>before <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//元素插入后，可能会删除最旧的、访问次数最少的元素，也就是头节点</span><span class="token comment" spellcheck="true">//按需删除最早插入的一个元素</span><span class="token comment" spellcheck="true">//回调函数，新节点插入之后回调 ， 根据evict判断是否需要删除最老插入的节点。如果实现LruCache会用到这个方法。</span>    <span class="token keyword">void</span> <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// possibly remove eldest</span>        LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> first<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//removeEldestEntry默认返回false，可以被子类改写，如果实现LRU Cache，可以返回true</span>        <span class="token comment" spellcheck="true">//把最老的没有被访问的元素移除掉</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>evict <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>first <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            K key <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">;</span>            <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//访问的元素如果不是尾节点，那么就把它与尾节点交换，所以随着元素的访问，访问次数越多的元素越靠后</span>    <span class="token comment" spellcheck="true">//通过afterNodeAccess方法维护访问顺序，每次访问该元素就将该元素移动到双向链表的末尾</span>    <span class="token keyword">void</span> <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// move node to last</span>        LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> last<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果是按照访问元素顺序遍历，将该元素移到到最后一个，注意要求该元素不能是最后一个元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>accessOrder <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>last <span class="token operator">=</span> tail<span class="token punctuation">)</span> <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//节点e强转成双向链表节点p</span>            LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> p <span class="token operator">=</span>                    <span class="token punctuation">(</span>LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">)</span> e<span class="token punctuation">,</span> b <span class="token operator">=</span> p<span class="token punctuation">.</span>before<span class="token punctuation">,</span> a <span class="token operator">=</span> p<span class="token punctuation">.</span>after<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//p现在是尾节点， 后置节点一定是null</span>            p<span class="token punctuation">.</span>after <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果p的前置节点是null，则p以前是头结点，所以更新现在的头结点是p的后置节点a</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> null<span class="token punctuation">)</span>                head <span class="token operator">=</span> a<span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token comment" spellcheck="true">//否则更新p的前直接点b的后置节点为 a</span>                b<span class="token punctuation">.</span>after <span class="token operator">=</span> a<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//该元素不是尾元素</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> null<span class="token punctuation">)</span>                a<span class="token punctuation">.</span>before <span class="token operator">=</span> b<span class="token punctuation">;</span>            <span class="token keyword">else</span>                last <span class="token operator">=</span> b<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> null<span class="token punctuation">)</span>                head <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                p<span class="token punctuation">.</span>before <span class="token operator">=</span> last<span class="token punctuation">;</span>                last<span class="token punctuation">.</span>after <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//尾节点的引用赋值成p</span>            tail <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//注意此时modCount会自增</span>            <span class="token operator">++</span>modCount<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h1 id="get-、put-、remove"><a href="#get-、put-、remove" class="headerlink" title="get()、put()、remove()"></a>get()、put()、remove()</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> e<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用父类的get方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        当 accessOrder = true 时，即表示按照最近访问的迭代顺序，会将访问过的元素放在链表后面。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>accessOrder<span class="token punctuation">)</span>            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> V <span class="token function">getOrDefault</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span> V defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> e<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> defaultValue<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这个也算是访问了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>accessOrder<span class="token punctuation">)</span>            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//都是调用父类HashMap的删除方法,而那个方法又会回调afterNodeRemoval(node); 所以不用担心</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> e <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        Object key <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object value <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">LinkedHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//默认是插入顺序</span>        <span class="token comment" spellcheck="true">//按照调用put方法插入的顺序进行排序的</span>        accessOrder <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//能指定accessOrder的值</span>    <span class="token keyword">public</span> <span class="token function">LinkedHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span>                         <span class="token keyword">float</span> loadFactor<span class="token punctuation">,</span>                         <span class="token keyword">boolean</span> accessOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accessOrder <span class="token operator">=</span> accessOrder<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="Iterators"><a href="#Iterators" class="headerlink" title="Iterators"></a>Iterators</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//保证迭代顺序为双向链表的顺序</span><span class="token comment" spellcheck="true">//从链表头部开始遍历,那么如果插入a,b,c ,则输出还是a,b,c</span><span class="token comment" spellcheck="true">//如果是按照访问顺序,插入a,b,c后访问了a,则顺序变为了b,c,a 因为a被插入链表尾部</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashIterator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//下一节点</span>    LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前节点</span>    LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> current<span class="token punctuation">;</span>    <span class="token keyword">int</span> expectedModCount<span class="token punctuation">;</span>    <span class="token function">LinkedHashIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//从双向链表的头元素开始遍历</span>        next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录当前modCount，以满足fail-fast</span>        expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前节点为null</span>        current <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> next <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//nextNode() 就是迭代器里的next()方法 。</span>    <span class="token comment" spellcheck="true">//该方法的实现可以看出，迭代LinkedHashMap，就是从内部维护的双链表的表头开始循环输出</span>    <span class="token keyword">final</span> LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">nextNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> e <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//按照双向链表而不是哈希数组的顺序遍历</span>        current <span class="token operator">=</span> e<span class="token punctuation">;</span>        next <span class="token operator">=</span> e<span class="token punctuation">.</span>after<span class="token punctuation">;</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除方法 最终还是调用了HashMap的removeNode方法</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> p <span class="token operator">=</span> current<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> null<span class="token punctuation">;</span>        K key <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">;</span>        <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//迭代器自己删除不算fail-fast</span>        expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> 源码 </tag>
            
            <tag> LinkedHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap</title>
      <link href="posts/3d614825.html"/>
      <url>posts/3d614825.html</url>
      
        <content type="html"><![CDATA[<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul><li>HashMap是基于哈希表的Map接口的非同步实现.</li><li>采用了（数组 + 链表 + 红黑树）的结构</li><li>HashMap的table默认初始容量为16（1&lt;&lt;4），默认负载因子为0.75f，容量总是2的n次方</li><li>16是一个经验值，既然一定要设置一个默认的2^n 作为初始值，那么就需要在效率和内存使用上做一个权衡.太小了就有可能频繁发生扩容，影响效率.太大了又浪费空间，不划算.</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>允许使用null值和null键</li><li>它不保证映射的顺序，特别是它不保证该顺序恒久不变.</li><li>HashMap查找添加元素的时间复杂度都为O(1)</li><li>数组的查询效率为O(1)，链表的查询效率是O(k)，红黑树的查询效率是O(log k)，k为桶中的元素个数，所以当元素数量非常多的时候，转化为红黑树能极大地提高效率.</li><li>都实现了Comparable时用比较来排序树(用反射实现)，否则用hashcode.这样在hashCode不均匀的情况下表现较好</li><li>为它的子类LinkedHashMap提供一些钩子方法</li><li>默认null值hash为0</li></ul><h2 id="树化与反树化"><a href="#树化与反树化" class="headerlink" title="树化与反树化"></a>树化与反树化</h2><ul><li>当同一个索引位置的节点在增加后达到8个时，并且此时数组的长度大于等于 64，则则会触发链表节点（Node）转红黑树节点（TreeNode），转成红黑树节点后，其实链表的结构还存在，通过 next 属性维持.</li><li>链表节点转红黑树节点的具体方法为源码中的 treeifyBin 方法.而如果数组长度小于64，则不会触发链表转红黑树，而是会进行扩容.</li><li>链表中节点个数为8时的概率为 0.00000006</li><li>当单个桶中元素数量小于6时，进行反树化</li></ul><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul><li>HashMap 有 threshold 属性和 loadFactor 属性，但是没有 capacity 属性.初始化时，如果传了初始化容量值，该值是存在 threshold 变量</li><li>Node 数组是在第一次 put 时才会进行初始化</li><li>初始化时会将此时的 threshold 值作为新表的 capacity 值，然后用 capacity 和 loadFactor 计算新表的真正 threshold 值.</li></ul><h1 id="继承体系"><a href="#继承体系" class="headerlink" title="继承体系"></a>继承体系</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>K， V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token operator">&lt;</span>K， V<span class="token operator">></span>        <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span>K， V<span class="token operator">></span>， Cloneable， Serializable</code></pre><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//序列号</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 362498820763181265L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认的初始容量是16</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// aka 16</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//树化至少应该为8</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反树化阈值</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNTREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 桶中结构转化为红黑树对应的table的最小大小</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_TREEIFY_CAPACITY <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一次put时初始化</span><span class="token comment" spellcheck="true">//存储元素的数组，总是2的幂次倍</span><span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历时经常用到的</span><span class="token keyword">transient</span> Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K， V<span class="token operator">>></span> entrySet<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 存放元素的个数，注意这个不等于数组的长度.</span><span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 每次扩容和更改map结构的计数器</span><span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    threshold表示当HashMap的size大于threshold时会执行resize操作.</span><span class="token comment" spellcheck="true">//    threshold=capacity*loadFactor</span><span class="token keyword">int</span> threshold<span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span></code></pre><h1 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Map.Entry是Map的一个内部接口.表示Map中一个key-value对.接口有getKey()，getValue方法.</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K， V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K， V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>    <span class="token keyword">final</span> K key<span class="token punctuation">;</span>    V value<span class="token punctuation">;</span>    HashMap<span class="token punctuation">.</span>Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash， K key， V value， HashMap<span class="token punctuation">.</span>Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> K <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> V <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> V <span class="token function">setValue</span><span class="token punctuation">(</span>V newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        V oldValue <span class="token operator">=</span> value<span class="token punctuation">;</span>        value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span>， <span class="token operator">?</span><span class="token operator">></span> e <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span>， <span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key， e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value， e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*默认null值hash为0拿到 key 的 hashCode 值将 hashCode 的高位参与运算，重新计算 hash 值 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//源码喜欢在 if/for 等语句中进行赋值并判断</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="tableSizeFor"><a href="#tableSizeFor" class="headerlink" title="tableSizeFor"></a>tableSizeFor</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    例如10001(17)    首先cap-1:     10000    n |= n >>> 1: n=(10000 | 01000) =11000    n |= n >>> 2: n=(11000 | 00110) =11110    n |= n >>> 4: n=(11110 | 00001) =11111    n |= n >>> 8: n=(11111 | 00000) =11111    n |= n >>> 16: n=(11111 | 00000) =11111    return n+1:100000(32)    ...    因为int为32位，所以为了保证结果，最后右移16位结束    使得要求的数字1开始的后面全为1 */</span>    <span class="token comment" spellcheck="true">//大于等于输入参数且最近的2的整数次幂的数</span>    <span class="token comment" spellcheck="true">//无符号右移>>>: 就是右移之后，无论该数为正还是为负，右移之后左边都是补上0</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//cap-1是为了例如16这些之后还是16</span>        <span class="token comment" spellcheck="true">//如果没有这一步，10000则会变成11111，最后100000(32)，不符合</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">8</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span> MAXIMUM_CAPACITY <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h1><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//开始没有赋值给capacity，而是给了threshold</span>    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity， <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal initial capacity: "</span> <span class="token operator">+</span>                    initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>            initialCapacity <span class="token operator">=</span> MAXIMUM_CAPACITY<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> Float<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span>                    loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//此处仅用于接收初始容量大小（capacity）、加载因子(Load factor)，</span>        <span class="token comment" spellcheck="true">//但仍无真正初始化哈希表，即初始化存储数组table</span>        <span class="token comment" spellcheck="true">//此处不是真正的阈值，该阈值后面会重新计算</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到大于他的最小二次幂</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity， DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这里没传入DEFAULT_CAPACITY</span>    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// all other fields defaulted</span>    <span class="token punctuation">}</span></code></pre><h1 id="HashMap-Map-lt-extends-K，-extends-V-gt-m"><a href="#HashMap-Map-lt-extends-K，-extends-V-gt-m" class="headerlink" title="HashMap(Map&lt;? extends K， ? extends V&gt; m)"></a>HashMap(Map&lt;? extends K， ? extends V&gt; m)</h1><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span>， <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> m<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span>        <span class="token function">putMapEntries</span><span class="token punctuation">(</span>m， <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果是构造方法，则evict为false</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">putMapEntries</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span>， <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> m， <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 说明是拷贝构造函数来调用的putMapEntries，或者构造后还没放过任何元素</span>            <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// pre-size</span>                <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> s <span class="token operator">/</span> loadFactor<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1.0F</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算出所需容量，因为之后要向下取整，所以再+1</span>                <span class="token comment" spellcheck="true">//始终不能超过最大容量</span>                <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span>                        <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> ft <span class="token operator">:</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                这里的threshold成员实际存放的值是capacity的值.</span><span class="token comment" spellcheck="true">//                因为在table还没有初始化时（table还是null），用户给定的capacity会暂存到threshold成员上去</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">></span> threshold<span class="token punctuation">)</span>                    threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//大于它的最小的二次幂</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> threshold<span class="token punctuation">)</span>                <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//说明原本有，但是原本的位置不够了</span>            <span class="token comment" spellcheck="true">//循环里的putVal可能也会触发resize</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span>， <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> e <span class="token operator">:</span> m<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                K key <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                V value <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>， key， value， <span class="token boolean">false</span>， evict<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h1 id="get"><a href="#get" class="headerlink" title="get"></a>get</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//key为null也可能是本身就是存储null的key</span><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span><span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>， key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash， Object key<span class="token punctuation">)</span><span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> first， e<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    K k<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//table不为空，table长度不为0，table相应的索引位置不为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//因为索引相同hash却不一定相同(多个hash映射到同一个槽)</span>        <span class="token comment" spellcheck="true">//hash相同并不一定是键相同，还要检查键是否相同或相等</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">// always check first node</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果是红黑树节点，则调用红黑树的查找目标节点方法getTreeNode</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">)</span> first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash， key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//执行链表节点的查找，向下遍历链表， 直至找到节点的key和入参的key相等时，返回该节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>， key<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="put"><a href="#put" class="headerlink" title="put"></a>put</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>①.判断键值对数组table[i]是否为空或为null，否则执行resize()进行扩容；</li><li>②.根据键值key计算hash值得到插入的数组索引i，如果table[i]==null，直接新建节点添加，转向⑥，如果table[i]不为空，转向③；</li><li>③.判断table[i]的首个元素是否和key一样，如果相同直接覆盖value，否则转向④，这里的相同指的是hashCode以及equals；</li><li>④.判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对，否则转向⑤；</li><li>⑤.遍历table[i]，判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操作，否则进行链表的插入操作；遍历过程中若发现key已经存在直接覆盖value即可；</li><li>⑥.插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold，如果超过，进行扩容.</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*    put相同键会替代    返回被替换的那个key的value或者null     */</span>    <span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key， V value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>， key， value， <span class="token boolean">false</span>， <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    onlyIfAbsent 当键相同时，不修改已存在的值    evict        仅在创建时为false    返回值 先前的值或null     */</span>    <span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash， K key， V value， <span class="token keyword">boolean</span> onlyIfAbsent，                   <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前节点</span>        <span class="token keyword">int</span> n， i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        校验table是否为空或者length等于0，如果是则调用resize方法进行初始化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//直接新建节点，多好</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash， key， value， null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> e<span class="token punctuation">;</span>            K k<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//直接覆盖相同的值p</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                e <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//调用红黑树的put方法</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">)</span> p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span>， tab， hash， key， value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//binCount记录是否需要树化</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//1.8采用了尾插法</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash， key， value， null<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 校验节点数是否超过TREEIFY_THRESHOLD，如果超过则调用treeifyBin方法将链表节点转为红黑树节点，</span>                        <span class="token comment" spellcheck="true">// 减一是因为前面加了节点，但是binCount没更新</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1 for 1st</span>                            <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab， hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时break，e==null，不会进入 if (e != null)</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//说明存在相同的key，要修改</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//继续遍历下一个Node</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//代表目标节点存在，使用传入的value覆盖该节点的value，并返回oldValue</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//说明要放的位置之前存在了元素</span>                V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> null<span class="token punctuation">)</span>                    e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用于LinkedHashMap</span>                <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//插入则size+1，而且大于threshold则需要扩容了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用于LinkedHashMap的钩子函数</span>        <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h1><ul><li>扩容前的table不为空，即正常的扩容操作.将容量变成原来的两倍</li><li>如果老表的容量为0， 老表的阈值大于0， 是因为初始容量被放入阈值，则将新表的容量设置为老表的阈值<ul><li>对应前两种初始化HashMap的方法 例如new HashMap&lt;&gt;(32)</li></ul></li><li>老表的容量为0， 老表的阈值为0，这种情况是没有传初始容量的new方法创建的空表，将阈值和容量设置为默认值<ul><li>即初始化的第三种情况 new HashMap()</li><li>默认容量16，负载因子0.75f</li></ul></li><li>Node&lt;K， V&gt;[] newTab = (Node&lt;K， V&gt;[]) new Node[newCap];<ul><li>说明在第一次调用resize()方法时才进行了tab的初始化</li></ul></li><li>如果老表不为空，则需遍历所有节点，将节点赋值给新表</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*初始化或扩容 */</span><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCap， newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//扩容前的table不为空，即正常的扩容操作.将容量变成原来的两倍</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//阈值设为最大，但是不扩容</span>            threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span>                oldCap <span class="token operator">>=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// double threshold</span>        <span class="token comment" spellcheck="true">//容量和阈值都*2扩容</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果老表的容量为0， 老表的阈值大于0， 是因为初始容量被放入阈值，则将新表的容量设置为老表的阈值</span>    <span class="token comment" spellcheck="true">//对应前两种初始化HashMap的方法 例如new HashMap&lt;>(32)</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// initial capacity was placed in threshold</span>        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//老表的容量为0， 老表的阈值为0，这种情况是没有传初始容量的new方法创建的空表，将阈值和容量设置为默认值</span>        <span class="token comment" spellcheck="true">//即初始化的第三种情况 new HashMap()</span>        <span class="token comment" spellcheck="true">// zero initial threshold signifies using defaults</span>        newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对应前两种初始化方法，之前的threshold已经在初始化newCap时用过了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//计算新的负载因子</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//很合理，假如new HashMap(32)，即ft=32*0.75</span>        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> MAXIMUM_CAPACITY <span class="token operator">?</span>                <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> ft <span class="token operator">:</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//说明在第一次调用resize()方法时才进行了tab的初始化</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"rawtypes"</span>， <span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果老表不为空，则需遍历所有节点，将节点赋值给新表</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> null<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> e<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 将索引值为j的老表头节点赋值给e</span>            <span class="token punctuation">{</span>                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将老表的节点设置为空， 以便垃圾收集器回收空间</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//只有一个节点，直接散列</span>                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调用红黑树的重新散列</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">)</span> e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span>， newTab， j， oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// preserve order</span>                    Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> loHead <span class="token operator">=</span> null， loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> hiHead <span class="token operator">=</span> null， hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> next<span class="token punctuation">;</span>                    <span class="token keyword">do</span>                    <span class="token punctuation">{</span>                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/*                        例如 3和19，00011，10011                        如果oldCap=10000(16)                        00011 &amp; 10000 = 0                        10011 &amp; 10000 = 10000 != 0                        将原本在一个索引的分成两条链表                         */</span>                        <span class="token comment" spellcheck="true">//因为扩容为原来两倍，所以根据oldCap的最高位，来把链表区分成两块链表</span>                        <span class="token comment" spellcheck="true">//如果 e 的 hash 值与老表的容量进行位与运算为 0，则说明 e 节点扩容后的索引位置跟老表的索引位置一样</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//好强的代码，巧妙的构造了链表</span>                            <span class="token comment" spellcheck="true">//还是尾插法，尾插法就要维护一个头部(loHead)，以及当前指针(loTail)</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span>                        <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//散列开来</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//放在新的位置</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="treeifyBin"><a href="#treeifyBin" class="headerlink" title="treeifyBin"></a>treeifyBin</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//转为红黑树节点后，链表的结构还存在，通过 next 属性维持，红黑树节点在进行操作时都会维护链表的结构</span><span class="token comment" spellcheck="true">//    在红黑树上，叶子节点也可能有 next 节点，因为红黑树的结构跟链表的结构是互不影响的</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">treeifyBin</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab， <span class="token keyword">int</span> hash<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n， index<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> e<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果table为空或者table的长度小于64， 调用resize方法进行扩容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MIN_TREEIFY_CAPACITY<span class="token punctuation">)</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> tab<span class="token punctuation">[</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            TreeNode<span class="token operator">&lt;</span>K， V<span class="token operator">></span> hd <span class="token operator">=</span> null， tl <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//这一步只是构造了一个双向链表</span>            <span class="token keyword">do</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//将链表节点转红黑树节点，但是没有构建成树</span>                TreeNode<span class="token operator">&lt;</span>K， V<span class="token operator">></span> p <span class="token operator">=</span> <span class="token function">replacementTreeNode</span><span class="token punctuation">(</span>e， null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//第一次循环将头节点赋值给hd</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tl <span class="token operator">==</span> null<span class="token punctuation">)</span>                    hd <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    p<span class="token punctuation">.</span>prev <span class="token operator">=</span> tl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//循环只是赋值给了prev，还没构建红黑树</span>                    tl<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                tl <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将table该索引位置赋值为新转的TreeNode的头节点，如果该节点不为空，则以以头节点(hd)为根节点， 构建红黑树</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> hd<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                hd<span class="token punctuation">.</span><span class="token function">treeify</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h1 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//返回null可能本来就绑定了null，也可能是找不到key</span><span class="token keyword">public</span> V <span class="token function">remove</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span><span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>， key， null， <span class="token boolean">false</span>， <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span>            null <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*matchValue if true only remove if value is equalmovable    if false do not move other nodes while removing*/</span><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash， Object key， Object value，                            <span class="token keyword">boolean</span> matchValue， <span class="token keyword">boolean</span> movable<span class="token punctuation">)</span><span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> p<span class="token punctuation">;</span>    <span class="token keyword">int</span> n， index<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> node <span class="token operator">=</span> null， e<span class="token punctuation">;</span>        K k<span class="token punctuation">;</span>        V v<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找到要删除的那个节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            node <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">)</span> p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash， key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">do</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>                                    <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        node <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//是否需要值相同才删除</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchValue <span class="token operator">||</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> value <span class="token operator">||</span>                <span class="token punctuation">(</span>value <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">)</span> node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeTreeNode</span><span class="token punctuation">(</span><span class="token keyword">this</span>， tab， movable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> p<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//说明删除的是头元素</span>                tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//p是要删除元素的前一个元素(对应上面的else if)</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">++</span>modCount<span class="token punctuation">;</span>            <span class="token operator">--</span>size<span class="token punctuation">;</span>            <span class="token function">afterNodeRemoval</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除后的钩子方法</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="containsValue"><a href="#containsValue" class="headerlink" title="containsValue"></a>containsValue</h1><p>暴力搜索所有节点</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span><span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span>    V v<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> value <span class="token operator">||</span>                        <span class="token punctuation">(</span>value <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="HashIterator"><a href="#HashIterator" class="headerlink" title="HashIterator"></a>HashIterator</h1><ul><li><p>初始化记录modCount当前值，并让next指向第一个非空元素，而current=null</p></li><li></li><li><p>nextNode方法，首先查看modCount值以决定是否fail-fast</p></li><li><p>然后检查当前元素是否为空，为空则抛出NoSuchElementException异常</p></li><li><p>最后让current等于当前元素，next继续指向下一个非空元素</p></li><li></li><li><p>hasNext方法则简单判断next是否为空即可</p></li><li></li><li><p>remove方法首先判断当前节点是否为空，为空则抛出IllegalStateException异常</p></li><li><p>随后查看modCount值决定是否fail-fast</p></li><li><p>删除该节点，且修改expectedModCount，即迭代器中的remove方法不会导致fail-fast</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HashIterator</span><span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// next entry to return</span>    Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> current<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// current entry</span>    <span class="token keyword">int</span> expectedModCount<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// for fast-fail</span>    <span class="token keyword">int</span> index<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// current slot</span>    <span class="token function">HashIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> t <span class="token operator">=</span> table<span class="token punctuation">;</span>        current <span class="token operator">=</span> next <span class="token operator">=</span> null<span class="token punctuation">;</span>        index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// advance to first entry</span>            <span class="token keyword">do</span>            <span class="token punctuation">{</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>next <span class="token operator">=</span> t<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//让next能指向第一个非空的元素</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> next <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> <span class="token function">nextNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> t<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> e <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//fail-fast机制</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找到下一个非空元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>next <span class="token operator">=</span> <span class="token punctuation">(</span>current <span class="token operator">=</span> e<span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">do</span>            <span class="token punctuation">{</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>next <span class="token operator">=</span> t<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> p <span class="token operator">=</span> current<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//依然是fail-fast</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> null<span class="token punctuation">;</span>        K key <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里导致的modCount+1，所以需要下一条语句</span>        <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>， key， null， <span class="token boolean">false</span>， <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此处remove不会触发fail-fast</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h1><h2 id="Java7和Java8的区别？"><a href="#Java7和Java8的区别？" class="headerlink" title="Java7和Java8的区别？"></a>Java7和Java8的区别？</h2><ul><li>存储结构<ul><li>拉链法：将链表和数组相结合.也就是说创建一个链表数组，数组中每一格就是一个链表.若遇到哈希冲突，则将冲突的值加到链表中即可.</li><li>在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间.</li></ul></li><li>插入数据方式<ul><li>头插法（先讲原位置的数据移到后1位，再插入数据到该位置）</li><li>尾插法（直接插入到链表尾部/红黑树），解决了多线程死循环问题，但仍是非线程安全的，多线程时可能会造成数据丢失问题.<ul><li>导致死循环的主要原因是扩容后，节点的顺序会反掉，即采用头插法造成的</li><li>JDK7 头插法 死循环 环形链表</li><li>使⽤头插会改变链表的上的顺序，但是如果使⽤尾插，在扩容时会保持链表元素原本的顺序，就不会出现链表成环的问题了.</li><li>Java7在多线程操作HashMap时可能引起死循环，原因是扩容转移后前后链表顺序倒置，在转移过程中修改了原来链表中节点的引⽤关系.</li><li>Java8在同样的前提下并不会引起死循环，原因是扩容转移后前后链表顺序不变，保持之前节点的引⽤关系.</li></ul></li></ul></li></ul><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><ul><li>创建一个新的Entry空数组，长度是原数组的2倍.</li><li>遍历原Entry数组，把所有的Entry重新Hash到新数组.</li><li>Hash的公式—&gt; index = HashCode（Key） &amp; （Length - 1）</li><li>扩容后节点重 hash 只可能出现在“原索引位置” 与 “原索引 + oldCap 位置”</li></ul><pre><code>如16-&gt;32即hash &amp; 1111 变成 hash &amp; 11111可以看到只有最高位可能会改变，即分成 0xxxx 或者 1xxxx，即要不在原索引位置，要不在原索引 + oldCap 位置</code></pre><h2 id="hash-1"><a href="#hash-1" class="headerlink" title="hash"></a>hash</h2><h3 id="计算下标"><a href="#计算下标" class="headerlink" title="计算下标"></a>计算下标</h3><ul><li>拿到 key 的 hashCode 值</li><li>将 hashCode 的高位参与运算，重新计算 hash 值<ul><li>(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</li><li>将 hashCode 的高 16 位与 hashCode 进行异或运算，主要是为了在 table 的 length 较小的时候，让高位也参与运算</li><li>通过两次扰动使得它自己的哈希值高低位自行进行异或运算，降低哈希碰撞概率也使得数据分布更平均；</li></ul></li><li>将计算出来的 hash 值与 (table.length - 1) 进行 &amp; 运算<ul><li>比取余操作更加有效率</li><li>因为x mod 2^n = x &amp; (2^n - 1)，而底层数组长度总是 2 的 n 次方，所以x mod table.length = x &amp; (table.length - 1)</li></ul></li></ul><h3 id="解决hash冲突"><a href="#解决hash冲突" class="headerlink" title="解决hash冲突"></a>解决hash冲突</h3><ul><li>使用链地址法（使用散列表）来链接拥有相同hash值的数据；</li><li>使用2次扰动函数（hash函数）来降低哈希冲突的概率，使得数据分布更平均；</li><li>引入红黑树进一步降低遍历的时间复杂度，使得遍历更快；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> 源码 </tag>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="posts/43a71ae4.html"/>
      <url>posts/43a71ae4.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>索引是存储引擎用于快速找到记录的一种数据结构</li><li>索引是帮助MySQL高效获取数据的数据结构，索引存储在硬盘中</li><li>索引优化是对查询性能优化最有效的手段</li><li>存储引擎先在索引中找到对应值，然后根据匹配的索引记录找到对应的数据行</li></ul><h2 id="索引理解"><a href="#索引理解" class="headerlink" title="索引理解"></a>索引理解</h2><ul><li>每个索引都对应一棵B+树，B+树分为好多层，最下边一层是叶子节点，其余的是内节点。所有用户记录都存储在B+树的叶子节点，所有目录项记录都存储在内节点。</li><li>InnoDB存储引擎会自动为主键（如果没有它会自动帮我们添加）建立聚簇索引，聚簇索引的叶子节点包含完整的用户记录。</li><li>可以为自己感兴趣的列建立二级索引，二级索引的叶子节点包含的用户记录由索引列 + 主键组成，所以如果想通过二级索引来查找完整的用户记录的话，需要通过回表操作，也就是在通过二级索引找到主键值之后再到聚簇索引中查找完整的用户记录。</li><li>B+树中每层节点都是按照索引列值从小到大的顺序排序而组成了双向链表，而且每个页内的记录（不论是用户记录还是目录项记录）都是按照索引列的值从小到大的顺序而形成了一个单链表。如果是联合索引的话，则页面和记录先按照联合索引前边的列排序，如果该列值相同，再按照联合索引后边的列排序。</li><li>通过索引查找记录是从B+树的根节点开始，一层一层向下搜索。由于每个页面都按照索引列的值建立了Page Directory（页目录），所以在这些页面中的查找非常快。</li><li>尽量少地访问资源是数据库设计的重要原则之一。</li></ul><h2 id="页结构"><a href="#页结构" class="headerlink" title="页结构"></a>页结构</h2><ul><li>各个数据页可以组成⼀个双向链表</li><li>⽽每个数据页中的记录又可以组成⼀个单向链表</li><li>每个数据页都会为存储在它里面的记录⽣成⼀个页⽬录，在通过主键查找某条记录的时候可以在页目录中使用⼆分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录</li><li>以其他列(非主键)作为搜索条件：只能从最小记录开始依次遍历单链表中的每条记录。</li></ul><h2 id="索引代价"><a href="#索引代价" class="headerlink" title="索引代价"></a>索引代价</h2><ul><li>空间代价</li><li>时间代价：对数据增删改查要修改B+树的索引</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>一个市的公民信息系统等身份证号前6位区分度很低</p><ul><li>倒序存储</li><li>使用hash字段。你可以在表上再创建一个整数字段，来保存身份证的校验码，同时在这个字段上创建索引。</li></ul><p>它们的相同点是，都不支持范围查询。倒序存储的字段上创建的索引是按照倒序字符串的方式排序的，已经没有办法利用索引方式查出身份证号码在[ID_X， ID_Y]的所有市民了。同样地，hash字段的方式也只能支持等值查询。</p><p>从占用的额外空间来看，倒序存储方式在主键索引上，不会消耗额外的存储空间，而hash字段方法需要增加一个字段。当然，倒序存储方式使用4个字节的前缀长度应该是不够的，如果再长一点，这个消耗跟额外这个hash字段也差不多抵消了。</p><p>在CPU消耗方面，倒序方式每次写和读的时候，都需要额外调用一次reverse函数，而hash字段的方式需要额外调用一次crc32()函数。如果只从这两个函数的计算复杂度来看的话，reverse函数额外消耗的CPU资源会更小些。</p><p>从查询效率上看，使用hash字段方式的查询性能相对更稳定一些。因为crc32算出来的值虽然有冲突的概率，但是概率非常小，可以认为每次查询的平均扫描行数接近1。而倒序存储方式毕竟还是用的前缀索引的方式，也就是说还是会增加扫描行数。</p><h1 id="索引模型"><a href="#索引模型" class="headerlink" title="索引模型"></a>索引模型</h1><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><ul><li><p>只有Memory引擎显示支持，且是Memory引擎的默认索引类型，支持非唯一哈希索引(即冲突的以链表存储).只适用特定场合，但是性能显著</p></li><li><p>因为不是有序的，所以哈希索引做区间查询很慢，不支持排序</p></li><li><p>只适用于只有等值查询的场景</p></li><li><p>不能利用部分索引键查询，始终使用索引列的全部内容计算Hash，即如果有索引(A，B)，查询只有数据列A，则无法使用索引。</p></li><li><p>Hash冲突时，必须遍历链表中所有行指针，逐行比较</p></li><li><p>Hash在内存中，但是有几千万的数据时不行</p></li><li><p>可以快速的精确查询，但是不⽀持范围查询。</p></li><li><p>无法被用来避免数据的排序操作</p></li><li><p>不能避免表扫描</p></li></ul><h2 id="有序数组"><a href="#有序数组" class="headerlink" title="有序数组"></a>有序数组</h2><ul><li>在等值查询和范围查询场景中的性能就都非常优秀</li><li>只适用于静态存储引擎</li><li>往中间插入一个记录就必须得挪动后面所有的记录，成本太高</li></ul><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><ul><li>一般来说索引非常大，尤其是关系型数据库这种，当数据量比较大的时候，索引的大小有可能几个G甚至更多，数据量大的索引能达到亿级别，所以为了减少内存的占用，<strong>数据库索引是存储在外部磁盘上的</strong>。</li><li>因为索引不止存在内存中，还要写到磁盘上。一棵100万节点的平衡二叉树，树高20。一次查询可能需要访问20个数据块</li><li>为了让一个查询尽量少地读磁盘，就必须让查询过程访问尽量少的数据块。那么，我们就不应该使用二叉树，而是要使用“N叉”树。</li><li>运行瓶颈在IO。IO次数太多，而且造成IO浪费</li><li>二叉树是搜索效率最高的，但是实际上大多数的数据库存储却并不使用二叉树。其原因是，索引不止存在内存中，还要写到磁盘上。</li><li>当我们利用索引查询的时候，不可能把整个索引全部加载到内存，只能逐一加载每个磁盘页，磁盘页对应索引树的节点。那么Mysql衡量查询效率的标准就是磁盘IO次数。如果我们利用二叉树作为索引结构，那么磁盘的IO次数和索引树的高度是相关的。那么为了提高查询效率，就需要减少磁盘IO数。为了减少磁盘IO的次数，就需要尽量降低树的高度，需要把原来“瘦高”的树结构变的“矮胖”，树的每层的分叉越多越好，因此B树正好符合我们的要求，这也是B-树的特征之一。</li></ul><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><ul><li>B树⼀个节点可以存储多个元素，相对于完全平衡⼆叉树整体的树⾼降低了，磁盘IO效率提⾼了。</li><li>⽽B+树是B树的升级版，只是把非叶子节点冗余⼀下，这么做的好处是为了提⾼范围查找的效率。</li><li>需要遵循一些约束，目的是尽可能存储更多的信息</li></ul><h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><ul><li>B+树很好地配合磁盘的读写特性，减少单次查询的磁盘访问次数，磁盘读写代价更低</li><li>B+树的查询效率更加稳定</li><li>B+树更有利于对数据库的扫描（范围查询）</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/5824016-540158230f76f9cc.png"></p><ul><li>根节点至少一个元素</li><li>非根节点元素范围：m/2 &lt;= k &lt;= m-1</li><li>父节点存有右孩子的第一个元素的索引。</li><li>B+ 树是一种树数据结构，是一个n叉树，每个节点通常有多个孩子，一棵B+树包含根节点、内部节点和叶子节点。根节点可能是一个叶子节点，也可能是一个包含两个或两个以上孩子节点的节点。</li><li>有n棵子树的结点中含有n个关键字，每个关键字不保存数据，只用来索引，所有数据都保存在叶子节点。</li><li>所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。</li><li>所有的中间节点元素都同时存在于子节点，在子节点元素中是最大（或最小）元素。</li></ul><p><strong>区别</strong></p><ul><li>B+树中间节点没有存储数据，只有叶节点存放数据，其余节点用来索引，所以同样大小的磁盘页可以容纳更多的节点元素，而B-树是每个索引节点都会有Data域。这就意味着，数据量相同的情况下，B+树的结构比B-树更加“矮胖”，因此查询是IO次数也更少。这就决定了B+树更适合用来存储外部数据，也就是所谓的磁盘数据。</li><li>其次，B+树的查询必须最终查询到叶子节点，而B-树只要找到匹配元素即可，无论匹配元素处于中间节点还是叶子节点。因此，B-树的查询性能并不稳定（最好情况是只查根节点，最坏情况是查到叶子节点）。而B+树每一次查找都是稳定的。</li><li>B+树只要遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作（或者说效率太低）。对于<strong>范围查询</strong>，比如查询范围为3~11的元素，B-树只能依靠繁琐的中序遍历，首先自顶向下查找范围的下限，然后中序遍历找到上限。B+树的范围查询则要简单的多，首先自顶向下查找范围的下限，然后只需要在叶子节点所在的链表上做遍历即可。</li></ul><p><strong>优势</strong></p><p>1.单一节点存储更多的元素，使得查询的IO次数更少。</p><p>2.所有查询都要查找到叶子节点，查询性能稳定。</p><p>3.所有叶子节点形成有序链表，便于范围查询。</p><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>对于插入操作很简单，只需要记住一个技巧即可：<strong>当节点元素数量大于m-1的时候，按中间元素分裂成左右两部分，中间元素分裂到父节点当做索引存储，但是，本身中间元素还是分裂右边这一部分的</strong>。</p><p>下面以一颗5阶B+树的插入过程为例，5阶B+树的节点最少2个元素，最多4个元素。</p><ul><li>插入5，10，15，20</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5824016-d382af5adae64c9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/352/format/webp" alt="img"></p><ul><li>插入25，此时元素数量大于4个了，分裂</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5824016-0fdf67534b398b14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/542/format/webp" alt="img"></p><ul><li>接着插入26，30，继续分裂</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5824016-5c335f386d0d7518.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/602/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/5824016-0f74727e08f5a45d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/687/format/webp" alt="img"></p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p><strong>叶子节点有指针的存在，向兄弟节点借元素时，不需要通过父节点了，而是可以直接通过兄弟节移动即可（前提是兄弟节点的元素大于m/2），然后更新父节点的索引；如果兄弟节点的元素不大于m/2（兄弟节点也没有多余的元素），则将当前节点和兄弟节点合并，并且删除父节点中的key</strong>，下面我们看看具体的实例。</p><ul><li>初始状态</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5824016-8b1c2a995b8da6b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/963/format/webp" alt="img"></p><ul><li>删除10，删除后，不满足要求，发现左边兄弟节点有多余的元素，所以去借元素，最后，修改父节点索引</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5824016-3363541b1c6a0765.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/995/format/webp" alt="img"></p><ul><li>删除元素5，发现不满足要求，并且发现左右兄弟节点都没有多余的元素，所以，可以选择和兄弟节点合并，最后修改父节点索引</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5824016-4ea5c178a3435518.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/944/format/webp" alt="img"></p><ul><li>发现父节点索引也不满足条件，所以，需要做跟上面一步一样的操作</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5824016-091103cefce92d4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/919/format/webp" alt="img"></p><h1 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h1><h2 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h2><ul><li>也称为聚簇索引，主键索引的叶子节点存的是整行数据。</li><li>所有完整的用户记录都存放在这个聚簇索引的叶子节点处</li><li>会自动的为我们创建聚簇索引</li><li>一般是通过主键聚集数据，但是如果没有定义主键，则回选取唯一非空索引替代。若没有这样的索引，则会隐式定义一个主键作为聚簇索引</li><li>只有主键索引是聚集索引，其他的索引都是非聚集索引。数据区挂载在主键索引上</li></ul><h2 id="二级索引"><a href="#二级索引" class="headerlink" title="二级索引"></a>二级索引</h2><ul><li>也叫非聚簇索引</li><li>按照该索引列的大小顺序排成一个单向链表</li><li>非主键索引的叶子节点内容是该索引列、主键的值。</li><li>由于查询结果所需要的数据只在主键索引上有，所以不得不回表。回到主键索引树搜索的过程，即回表查询</li><li>没有唯一性约束，所以索引列值为4的记录可能分布在多个数据页中</li><li>对于普通索引来说，查找到满足条件的第一个记录(5，500)后，需要查找下一个记录，直到碰到第一个不满足k=5条件的记录。</li></ul><h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><ul><li>对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。</li><li>普通索引和唯一索引对更新语句性能影响的差别</li><li>因为change buffer，尽量选择普通索引。</li></ul><h2 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h2><ul><li>时以多个列的大小作为排序规则，也就是同时为多个列建立索引</li><li>索引（c2，c3），先把各个记录和页按照c2列进行排序。在记录的c2列相同的情况下，采用c3列进行排序</li></ul><h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><ul><li>索引k已经“覆盖了”我们的查询需求，不需要使用回表</li><li>覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</li><li>最好在查询列表里只包含索引列，很不鼓励用*号作为查询列表，最好把我们需要查询的列依次标明</li></ul><h2 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h2><ul><li>使用前缀压缩来减少索引的大小，从而让更多的索引可以放入内存中</li><li>要选择足够长的前缀以保证较高的选择性</li><li>索引的选择性:不重复的索引值和数据表的记录总数。索引的选择性越高则查询效率越高，因为索引的选择性高则可以在查找时过滤更多的行。唯一索引的选择性是1，是最好的索引选择性，性能最好</li><li>一般情况下某个列前缀的选择性也足够高，足以满足查询性能，大大节约索引空间</li><li>如果你创建索引的语句不指定前缀长度，那么索引就会包含整个字符串。</li><li>alter table user add index index2(email(6));</li><li>使用前缀索引，定义好长度，就可以做到既节省空间，又不用额外增加太多的查询成本。</li><li>在建立索引时关注的是区分度，区分度越高越好。因为区分度越高，意味着重复的键值越少。因此，我们可以通过统计索引上有多少个不同的值来判断要使用多长的前缀。</li><li>select count(distinct left(email，4)) as L4 from user;</li><li>使用前缀索引就用不上覆盖索引对查询性能的优化</li></ul><h1 id="索引适用场景"><a href="#索引适用场景" class="headerlink" title="索引适用场景"></a>索引适用场景</h1><ul><li>全值匹配（顺序颠倒也有查询优化器帮忙）</li><li>匹配左边的列</li><li>匹配列前缀（tongji%能，%tongji则不能使用索引）</li><li>匹配范围值：先找范围左边，再找范围右边，取中间的。如果对多个列同时进行范围查找的话，只有对索引最左边的那个列进行范围查找的时候才能用到B+树索引，例如中通过name进行范围查找的记录中可能并不是按照birthday列进行排序的</li><li>精确匹配某一列并范围匹配另外一列</li><li>用于排序</li><li>用于分组</li></ul><h1 id="实践原则"><a href="#实践原则" class="headerlink" title="实践原则"></a>实践原则</h1><h2 id="普通索引与唯一索引"><a href="#普通索引与唯一索引" class="headerlink" title="普通索引与唯一索引"></a>普通索引与唯一索引</h2><p>尽量选择普通索引：这两类索引在查询能力上是没差别的，主要考虑的是对更新性能的影响</p><p>普通索引和change buffer的配合使用，对于数据量大的表的更新优化还是很明显的。</p><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><p>查询性能差距微乎其微：InnoDB的数据是按数据页为单位来读写的。也就是说，当需要读一条记录的时候，并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。数据页的大小默认是16KB。因为引擎是按页读写的，所以说，当找到k=5的记录的时候，它所在的数据页就都在内存里了。那么，对于普通索引来说，要多做的那一次“查找和判断下一条记录”的操作，就只需要一次指针寻找和一次计算。</p><p>流程：对于普通索引来说，查找到满足条件的第一个记录(5，500)后，需要查找下一个记录，直到碰到第一个不满足k=5条件的记录。对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。</p><h3 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h3><p>当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InooDB会将这些更新操作缓存在change buffer中，这样就不需要从磁盘中读入这个数据了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行change buffer中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。需要说明的是，虽然名字叫作change buffer，实际上它是可以持久化的数据。也就是说，change buffer在内存中有拷贝，也会被写入到磁盘上。如果能够将更新操作先记录在change buffer，减少读磁盘，语句的执行速度会得到明显的提升。而且，数据读入内存是需要占用buffer pool的，所以这种方式还能够避免占用内存，提高内存利用率。</p><p>对于唯一索引来说，所有的更新操作都要先判断这个操作是否违反唯一性约束。比如，要插入(4，400)这个记录，就要先判断现在表中是否已经存在k=4的记录，而这必须要将数据页读入内存才能判断。如果都已经读入到内存了，那直接更新内存会更快，就没必要使用change buffer了。</p><p>因此，唯一索引的更新就不能使用change buffer，实际上也只有普通索引可以使用。</p><h2 id="自增主键"><a href="#自增主键" class="headerlink" title="自增主键"></a>自增主键</h2><ul><li>每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。</li><li>由于每个非主键索引的叶子节点上都是主键的值。所以主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。</li></ul><h2 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h2><ul><li>不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索。这个最左前缀可以是联合索引的最左N个字段，也可以是字符串索引的最左M个字符。</li><li>第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。</li><li>索引可以简单如⼀个列 (a)，也可以复杂如多个列 (a，b，c，d)，即联合索引。</li><li>如果是联合索引，那么key也由多个列组成，同时，索引只能⽤于查找key是否存在（相等），遇到范围查询 (&gt;、&lt;、between、like左匹配)等就不能进⼀步匹配了，后续退化为线性查找。</li><li>因此，列的排列顺序决定了可命中索引的列数。</li><li>MySQL会⼀直向右匹配直到遇到范围查询 （&gt;，&lt;，BETWEEN，LIKE）就停⽌匹配。</li></ul><h2 id="索引下推优化"><a href="#索引下推优化" class="headerlink" title="索引下推优化"></a>索引下推优化</h2><p>可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p><h2 id="只为用于搜索、排序或分组的列创建索引"><a href="#只为用于搜索、排序或分组的列创建索引" class="headerlink" title="只为用于搜索、排序或分组的列创建索引"></a>只为用于搜索、排序或分组的列创建索引</h2><p>只为出现在WHERE子句中的列、连接子句中的连接列，或者出现在ORDER BY或GROUP BY子句中的列创建索引</p><h2 id="考虑列的基数"><a href="#考虑列的基数" class="headerlink" title="考虑列的基数"></a>考虑列的基数</h2><ul><li>指的是某一列中不重复数据的个数</li><li>且如果某个建立了二级索引的列的重复值特别多，那么使用这个二级索引查出的记录还可能要做回表操作，这样性能损耗就更大了</li></ul><h2 id="索引列的类型尽量小"><a href="#索引列的类型尽量小" class="headerlink" title="索引列的类型尽量小"></a>索引列的类型尽量小</h2><ul><li>在表示的整数范围允许的情况下，尽量让索引列使用较小的类型</li><li>对于表的主键来说更加适用，因为不仅是聚簇索引中会存储主键值，其他所有的二级索引的节点处都会存储一份记录的主键值，如果主键适用更小的数据类型，也就意味着节省更多的存储空间和更高效的I/O</li></ul><h2 id="索引字符串值的前缀"><a href="#索引字符串值的前缀" class="headerlink" title="索引字符串值的前缀"></a>索引字符串值的前缀</h2><p>只对字符串的前几个字符进行索引    </p><h2 id="让索引列在比较表达式中单独出现"><a href="#让索引列在比较表达式中单独出现" class="headerlink" title="让索引列在比较表达式中单独出现"></a>让索引列在比较表达式中单独出现</h2><p>如果索引列在比较表达式中不是以单独列的形式出现，而是以某个表达式，或者函数调用形式出现的话，是用不到索引的。</p><h2 id="避免冗余和重复索引"><a href="#避免冗余和重复索引" class="headerlink" title="避免冗余和重复索引"></a>避免冗余和重复索引</h2><p>重复索引是指在相同的列上按照相同的顺序创建的相同类型的索引，应该避免这样创建重复索引，发现后也应该立即移除</p><h2 id="选择合适的索引列顺序"><a href="#选择合适的索引列顺序" class="headerlink" title="选择合适的索引列顺序"></a>选择合适的索引列顺序</h2><p>正确的顺序依赖于使用该索引的查询，同时需要考虑如何更好地满足排序和分组的需求将选择性最高的列放到索引的最前列</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 索引 </tag>
            
            <tag> InnoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedList</title>
      <link href="posts/2a29d56f.html"/>
      <url>posts/2a29d56f.html</url>
      
        <content type="html"><![CDATA[<h1 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h1><ul><li>双向循环链表</li><li>允许null值</li><li>如果找索引,则先判断从头找快还是从尾找快</li><li>存储元素的节点需要额外的空间存储前驱和后继的引用</li></ul><h2 id="继承体系"><a href="#继承体系" class="headerlink" title="继承体系"></a>继承体系</h2><h3 id="extends-AbstractSequentialList"><a href="#extends-AbstractSequentialList" class="headerlink" title="extends AbstractSequentialList"></a>extends AbstractSequentialList</h3><ul><li>只支持按次序访问,提供了一套基于顺序访问的接口</li><li>通过继承此类，子类仅需实现部分代码即可拥有完整的一套访问某种序列表（比如链表）的接口</li><li>public abstract ListIterator<E> listIterator(int index);</li></ul><h3 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h3><ul><li>double ended queue</li><li>Deque 又继承自 Queue 接口</li><li>实现栈行为</li></ul><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> java<span class="token punctuation">.</span>util<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Consumer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 对首部的操作: * getFirst() * removeFirst() * addFirst(E e) * peek()//获取首部元素 * peekFirst() * element() * poll() //获取并删除首部元素 * pollFirst() * remove() * offerFirst(E e) * push(E e)//调用addFirst(e); * pop() //调用removeFirst(); * * 对尾部的操作: * getLast() * removeLast() * addLast(E e) * add(E e) //调用linkLast(e); * offer(E e)//调用add(e); * addAll(Collection&lt;? extends E> c)  //return addAll(size, c); 在尾部添加 * offerLast(E e) * peekLast() * pollLast() * * 索引操作 * addAll(int index, Collection&lt;? extends E> c) * add(int index, E element) * * *      都是往index对应的node节点前面进行添加,而如果index==size,就会往最后添加 *     假设开始有0,1,2   size=3 *     addAll(3,Arrays.asList(5, 6, 7)),则变成 0,1,2,5,6,7 *     addAll(1,Arrays.asList(5, 6, 7)),则变成 0,5,6,7,1,2 *     即0,1,2 在1处插入,则pred=node(0),succ=node(1),会在pred与succ直接构建那几个链表节点 * */</span><span class="token comment" spellcheck="true">/** * 双向链表 * 允许null值 * 如果找索引,则先判断从头找快还是从尾找快 * List list = Collections.synchronizedList(new LinkedList(...)); * fail-fast的迭代器,抛出 ConcurrentModificationException */</span><span class="token comment" spellcheck="true">/*AbstractSequentialList 只支持按次序访问,提供了一套基于顺序访问的接口。通过继承此类，子类仅需实现部分代码即可拥有完整的一套访问某种序列表（比如链表）的接口需要实现的方法：public abstract ListIterator&lt;E> listIterator(int index);对于随机访问集合类一般建议继承 AbstractList 而不是 AbstractSequentialList。实现了 Deque (double ended queue)，Deque 又继承自 Queue 接口。这样 LinkedList 就具备了队列的功能。实现栈等LinkedList 存储元素的节点需要额外的空间存储前驱和后继的引用LinkedList 在链表头部和尾部插入效率比较高，但在指定位置进行插入时，效率一般。LinkedList 是非线程安全的集合类，并发环境下，多个线程同时操作 LinkedList，会引发不可预知的错误。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>        <span class="token keyword">extends</span> <span class="token class-name">AbstractSequentialList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>        <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> Deque<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> Serializable<span class="token punctuation">{</span>    <span class="token keyword">transient</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Pointer to first node.     * Invariant: (first == null &amp;&amp; last == null) ||     *            (first.prev == null &amp;&amp; first.item != null)     */</span>    <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> first<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Pointer to last node.     * Invariant: (first == null &amp;&amp; last == null) ||     *            (last.next == null &amp;&amp; last.item != null)     */</span>    <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> last<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Constructs an empty list.     */</span>    <span class="token keyword">public</span> <span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Constructs a list containing the elements of the specified     * collection, in the order they are returned by the collection's     * iterator.     *     * @param  c the collection whose elements are to be placed into this list     * @throws NullPointerException if the specified collection is null     */</span>    <span class="token keyword">public</span> <span class="token function">LinkedList</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Links e as first element.     */</span>    <span class="token comment" spellcheck="true">//在链表首部加一个元素</span>    <span class="token comment" spellcheck="true">//基本实现都是比较套路的,最好记下来,自己写时也比较好实现:</span>    <span class="token comment" spellcheck="true">/*    用一个引用f指向(old)first    新增一个节点,并且指向f(此时就算f为null也无所谓,只是指向了个null而已)    更新first到新的引用上    此时要判断f(oldFirst)是否为null,为null说明插入的是第一个元素,直接让last=first(new),不为null则更新引用     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkFirst</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span>            last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            f<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Links e as last element.     */</span>    <span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Inserts element e before non-null Node succ.     */</span>    <span class="token keyword">void</span> <span class="token function">linkBefore</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> succ<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert succ != null;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> succ<span class="token punctuation">)</span><span class="token punctuation">;</span>        succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> null<span class="token punctuation">)</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Unlinks non-null first node f.     */</span>    <span class="token comment" spellcheck="true">//会保证传入的f都是first</span>    <span class="token keyword">private</span> E <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert f == first &amp;&amp; f != null;</span>        <span class="token keyword">final</span> E element <span class="token operator">=</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        f<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>        f<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>        first <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>            last <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">else</span>            next<span class="token punctuation">.</span>prev <span class="token operator">=</span> null<span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Unlinks non-null last node l.     */</span>    <span class="token keyword">private</span> E <span class="token function">unlinkLast</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert l == last &amp;&amp; l != null;</span>        <span class="token keyword">final</span> E element <span class="token operator">=</span> l<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev <span class="token operator">=</span> l<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        l<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>        l<span class="token punctuation">.</span>prev <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>        last <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> null<span class="token punctuation">)</span>            first <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">else</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Unlinks non-null node x.     */</span>    E <span class="token function">unlink</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert x != null;</span>        <span class="token keyword">final</span> E element <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>prev <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            last <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        x<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns the first element in this list.     *     * @return the first element in this list     * @throws NoSuchElementException if this list is empty     */</span>    <span class="token keyword">public</span> E <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns the last element in this list.     *     * @return the last element in this list     * @throws NoSuchElementException if this list is empty     */</span>    <span class="token keyword">public</span> E <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> l<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Removes and returns the first element from this list.     *     * @return the first element from this list     * @throws NoSuchElementException if this list is empty     */</span>    <span class="token keyword">public</span> E <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Removes and returns the last element from this list.     *     * @return the last element from this list     * @throws NoSuchElementException if this list is empty     */</span>    <span class="token keyword">public</span> E <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">unlinkLast</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Inserts the specified element at the beginning of this list.     *     * @param e the element to add     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">linkFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Appends the specified element to the end of this list.     *     * &lt;p>This method is equivalent to {@link #add}.     *     * @param e the element to add     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns {@code true} if this list contains the specified element.     * More formally, returns {@code true} if and only if this list contains     * at least one element {@code e} such that     * &lt;tt>(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt>.     *     * @param o element whose presence in this list is to be tested     * @return {@code true} if this list contains the specified element     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns the number of elements in this list.     *     * @return the number of elements in this list     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Appends the specified element to the end of this list.     *     * &lt;p>This method is equivalent to {@link #addLast}.     *     * @param e element to be appended to this list     * @return {@code true} (as specified by {@link Collection#add})     */</span>    <span class="token comment" spellcheck="true">//在尾部添加一个元素</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除根据对象是否为null来进行删除操作</span>    <span class="token comment" spellcheck="true">//调用equals来进行对比</span>    <span class="token comment" spellcheck="true">//只会删除遇到的第一个元素</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">unlink</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">unlink</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Appends all of the elements in the specified collection to the end of     * this list, in the order that they are returned by the specified     * collection's iterator.  The behavior of this operation is undefined if     * the specified collection is modified while the operation is in     * progress.  (Note that this will occur if the specified collection is     * this list, and it's nonempty.)     *     * @param c collection containing elements to be added to this list     * @return {@code true} if this list changed as a result of the call     * @throws NullPointerException if the specified collection is null     */</span>    <span class="token comment" spellcheck="true">//在尾部添加</span>    <span class="token comment" spellcheck="true">// size表明追加到链表的最后</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">addAll</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Inserts all of the elements in the specified collection into this     * list, starting at the specified position.  Shifts the element     * currently at that position (if any) and any subsequent elements to     * the right (increases their indices).  The new elements will appear     * in the list in the order that they are returned by the     * specified collection's iterator.     *     * @param index index at which to insert the first element     *              from the specified collection     * @param c collection containing elements to be added to this list     * @return {@code true} if this list changed as a result of the call     * @throws IndexOutOfBoundsException {@inheritDoc}     * @throws NullPointerException if the specified collection is null     */</span>    <span class="token comment" spellcheck="true">/*    假设开始有0,1,2   size=3    addAll(3,Arrays.asList(5, 6, 7)),则变成 0,1,2,5,6,7    addAll(1,Arrays.asList(5, 6, 7)),则变成 0,5,6,7,1,2    即0,1,2 在1处插入,则pred=node(0),succ=node(1),会在pred与succ直接构建那几个链表节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//index >= 0 &amp;&amp; index &lt;= size</span>        <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//转换为了数组</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 集合为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numNew <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> pred<span class="token punctuation">,</span> succ<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//size直接代表在尾部添加</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            succ <span class="token operator">=</span> null<span class="token punctuation">;</span>            pred <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//当前节点为传入的位置对应的节点</span>            succ <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span> E e <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> o<span class="token punctuation">;</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> null<span class="token punctuation">)</span>                first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token keyword">else</span>                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            pred <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//说明是插入size位置的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>succ <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            last <span class="token operator">=</span> pred<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> succ<span class="token punctuation">;</span>            succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Removes all of the elements from this list.     * The list will be empty after this call returns.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Clearing all of the links between nodes is "unnecessary", but:</span>        <span class="token comment" spellcheck="true">// - helps a generational GC if the discarded nodes inhabit</span>        <span class="token comment" spellcheck="true">//   more than one generation</span>        <span class="token comment" spellcheck="true">// - is sure to free memory even if there is a reachable Iterator</span>        <span class="token comment" spellcheck="true">//注意链接也要全部搞干净</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>prev <span class="token operator">=</span> null<span class="token punctuation">;</span>            x <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        first <span class="token operator">=</span> last <span class="token operator">=</span> null<span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//modCount居然没清空</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Positional Access Operations</span>    <span class="token comment" spellcheck="true">/**     * Returns the element at the specified position in this list.     *     * @param index index of the element to return     * @return the element at the specified position in this list     * @throws IndexOutOfBoundsException {@inheritDoc}     */</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//首先要检查是否index合法</span>        <span class="token comment" spellcheck="true">//然后根据从左边或者右边找节点</span>        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Replaces the element at the specified position in this list with the     * specified element.     *     * @param index index of the element to replace     * @param element element to be stored at the specified position     * @return the element previously at the specified position     * @throws IndexOutOfBoundsException {@inheritDoc}     */</span>    <span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        E oldVal <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Inserts the specified element at the specified position in this list.     * Shifts the element currently at that position (if any) and any     * subsequent elements to the right (adds one to their indices).     *     * @param index index at which the specified element is to be inserted     * @param element element to be inserted     * @throws IndexOutOfBoundsException {@inheritDoc}     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span>            <span class="token function">linkLast</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">linkBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Removes the element at the specified position in this list.  Shifts any     * subsequent elements to the left (subtracts one from their indices).     * Returns the element that was removed from the list.     *     * @param index the index of the element to be removed     * @return the element previously at the specified position     * @throws IndexOutOfBoundsException {@inheritDoc}     */</span>    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Tells if the argument is the index of an existing element.     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isElementIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> index <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Tells if the argument is the index of a valid position for an     * iterator or an add operation.     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isPositionIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> index <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Constructs an IndexOutOfBoundsException detail message.     * Of the many possible refactorings of the error handling code,     * this "outlining" performs best with both server and client VMs.     */</span>    <span class="token keyword">private</span> String <span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Index: "</span><span class="token operator">+</span>index<span class="token operator">+</span><span class="token string">", Size: "</span><span class="token operator">+</span>size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkElementIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns the (non-null) Node at the specified element index.     */</span>    <span class="token comment" spellcheck="true">//根据索引找节点,而且根据index与size/2的大小决定从哪里开始找</span>    <span class="token comment" spellcheck="true">//也是从0开始的</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert isElementIndex(index);</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Search Operations</span>    <span class="token comment" spellcheck="true">/**     * Returns the index of the first occurrence of the specified element     * in this list, or -1 if this list does not contain the element.     * More formally, returns the lowest index {@code i} such that     * &lt;tt>(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt>,     * or -1 if there is no such index.     *     * @param o element to search for     * @return the index of the first occurrence of the specified element in     *         this list, or -1 if this list does not contain the element     */</span>    <span class="token comment" spellcheck="true">//从头开始找该对象,而且索引从0开始,找不到则返回-1</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns the index of the last occurrence of the specified element     * in this list, or -1 if this list does not contain the element.     * More formally, returns the highest index {@code i} such that     * &lt;tt>(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt>,     * or -1 if there is no such index.     *     * @param o element to search for     * @return the index of the last occurrence of the specified element in     *         this list, or -1 if this list does not contain the element     */</span>    <span class="token comment" spellcheck="true">//从尾部开始找链表的索引,last处索引为size-1</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>                index<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>                index<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Queue operations.</span>    <span class="token comment" spellcheck="true">/**     * Retrieves, but does not remove, the head (first element) of this list.     *     * @return the head of this list, or {@code null} if this list is empty     * @since 1.5     */</span>    <span class="token keyword">public</span> E <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Retrieves, but does not remove, the head (first element) of this list.     *     * @return the head of this list     * @throws NoSuchElementException if this list is empty     * @since 1.5     */</span>    <span class="token keyword">public</span> E <span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Retrieves and removes the head (first element) of this list.     *     * @return the head of this list, or {@code null} if this list is empty     * @since 1.5     */</span>    <span class="token keyword">public</span> E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Retrieves and removes the head (first element) of this list.     *     * @return the head of this list     * @throws NoSuchElementException if this list is empty     * @since 1.5     */</span>    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Adds the specified element as the tail (last element) of this list.     *     * @param e the element to add     * @return {@code true} (as specified by {@link Queue#offer})     * @since 1.5     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Deque operations</span>    <span class="token comment" spellcheck="true">/**     * Inserts the specified element at the front of this list.     *     * @param e the element to insert     * @return {@code true} (as specified by {@link Deque#offerFirst})     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offerFirst</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Inserts the specified element at the end of this list.     *     * @param e the element to insert     * @return {@code true} (as specified by {@link Deque#offerLast})     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offerLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Retrieves, but does not remove, the first element of this list,     * or returns {@code null} if this list is empty.     *     * @return the first element of this list, or {@code null}     *         if this list is empty     * @since 1.6     */</span>    <span class="token keyword">public</span> E <span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Retrieves, but does not remove, the last element of this list,     * or returns {@code null} if this list is empty.     *     * @return the last element of this list, or {@code null}     *         if this list is empty     * @since 1.6     */</span>    <span class="token keyword">public</span> E <span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> l<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Retrieves and removes the first element of this list,     * or returns {@code null} if this list is empty.     *     * @return the first element of this list, or {@code null} if     *     this list is empty     * @since 1.6     */</span>    <span class="token keyword">public</span> E <span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Retrieves and removes the last element of this list,     * or returns {@code null} if this list is empty.     *     * @return the last element of this list, or {@code null} if     *     this list is empty     * @since 1.6     */</span>    <span class="token keyword">public</span> E <span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token function">unlinkLast</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Pushes an element onto the stack represented by this list.  In other     * words, inserts the element at the front of this list.     *     * &lt;p>This method is equivalent to {@link #addFirst}.     *     * @param e the element to push     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Pops an element from the stack represented by this list.  In other     * words, removes and returns the first element of this list.     *     * &lt;p>This method is equivalent to {@link #removeFirst()}.     *     * @return the element at the front of this list (which is the top     *         of the stack represented by this list)     * @throws NoSuchElementException if this list is empty     * @since 1.6     */</span>    <span class="token keyword">public</span> E <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Removes the first occurrence of the specified element in this     * list (when traversing the list from head to tail).  If the list     * does not contain the element, it is unchanged.     *     * @param o element to be removed from this list, if present     * @return {@code true} if the list contained the specified element     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeFirstOccurrence</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Removes the last occurrence of the specified element in this     * list (when traversing the list from head to tail).  If the list     * does not contain the element, it is unchanged.     *     * @param o element to be removed from this list, if present     * @return {@code true} if the list contained the specified element     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeLastOccurrence</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">unlink</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">unlink</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns a list-iterator of the elements in this list (in proper     * sequence), starting at the specified position in the list.     * Obeys the general contract of {@code List.listIterator(int)}.&lt;p>     *     * The list-iterator is &lt;i>fail-fast&lt;/i>: if the list is structurally     * modified at any time after the Iterator is created, in any way except     * through the list-iterator's own {@code remove} or {@code add}     * methods, the list-iterator will throw a     * {@code ConcurrentModificationException}.  Thus, in the face of     * concurrent modification, the iterator fails quickly and cleanly, rather     * than risking arbitrary, non-deterministic behavior at an undetermined     * time in the future.     *     * @param index index of the first element to be returned from the     *              list-iterator (by a call to {@code next})     * @return a ListIterator of the elements in this list (in proper     *         sequence), starting at the specified position in the list     * @throws IndexOutOfBoundsException {@inheritDoc}     * @see List#listIterator(int)     */</span>    <span class="token comment" spellcheck="true">//必须重写的方法</span>    <span class="token comment" spellcheck="true">//index为从哪个位置开始迭代</span>    <span class="token keyword">public</span> ListIterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListItr</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    一样的套路,开始next指向第一个访问的位置    调用一次next时,返回当前的next,并且让next指向下一个访问位置     */</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ListItr</span> <span class="token keyword">implements</span> <span class="token class-name">ListIterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> lastReturned<span class="token punctuation">;</span>        <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> nextIndex<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        <span class="token function">ListItr</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// assert isPositionIndex(index);</span>            next <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            nextIndex <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> nextIndex <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lastReturned <span class="token operator">=</span> next<span class="token punctuation">;</span>            next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> lastReturned<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> nextIndex <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> E <span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lastReturned <span class="token operator">=</span> next <span class="token operator">=</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> last <span class="token operator">:</span> next<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            nextIndex<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> lastReturned<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> nextIndex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> nextIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastReturned <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> lastNext <span class="token operator">=</span> lastReturned<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token function">unlink</span><span class="token punctuation">(</span>lastReturned<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> lastReturned<span class="token punctuation">)</span>                next <span class="token operator">=</span> lastNext<span class="token punctuation">;</span>            <span class="token keyword">else</span>                nextIndex<span class="token operator">--</span><span class="token punctuation">;</span>            lastReturned <span class="token operator">=</span> null<span class="token punctuation">;</span>            expectedModCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastReturned <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lastReturned<span class="token punctuation">.</span>item <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lastReturned <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">linkBefore</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>            nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>            expectedModCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>modCount <span class="token operator">==</span> expectedModCount <span class="token operator">&amp;&amp;</span> nextIndex <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>                lastReturned <span class="token operator">=</span> next<span class="token punctuation">;</span>                next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        E item<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">,</span> E element<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @since 1.6     */</span>    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">descendingIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DescendingIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Adapter to provide descending iterators via ListItr.previous     */</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">DescendingIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> ListItr itr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListItr</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> itr<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> itr<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            itr<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">superClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns a shallow copy of this {@code LinkedList}. (The elements     * themselves are not cloned.)     *     * @return a shallow copy of this {@code LinkedList} instance     */</span>    <span class="token comment" spellcheck="true">//还是浅克隆,存储的元素并没有克隆一遍</span>    <span class="token keyword">public</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token operator">&lt;</span>E<span class="token operator">></span> clone <span class="token operator">=</span> <span class="token function">superClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Put clone into "virgin" state</span>        clone<span class="token punctuation">.</span>first <span class="token operator">=</span> clone<span class="token punctuation">.</span>last <span class="token operator">=</span> null<span class="token punctuation">;</span>        clone<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        clone<span class="token punctuation">.</span>modCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Initialize clone with our elements</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span>            clone<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> clone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns an array containing all of the elements in this list     * in proper sequence (from first to last element).     *     * &lt;p>The returned array will be "safe" in that no references to it are     * maintained by this list.  (In other words, this method must allocate     * a new array).  The caller is thus free to modify the returned array.     *     * &lt;p>This method acts as bridge between array-based and collection-based     * APIs.     *     * @return an array containing all of the elements in this list     *         in proper sequence     */</span>    <span class="token keyword">public</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span>            result<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//String[] y = x.toArray(new String[0]);</span>    <span class="token comment" spellcheck="true">//本质就是用传入的a的类型来接收链表node节点</span>    <span class="token comment" spellcheck="true">//a的length不重要,因为总能处理掉</span>    <span class="token comment" spellcheck="true">//但是如果传入过大的a,则a的后面元素全部为null</span>    <span class="token comment" spellcheck="true">//例如:Integer[] integers = linkedList.toArray(new Integer[5]); 链表中原本只有3,2,1</span>    <span class="token comment" spellcheck="true">//结果就是;[3, 2, 1, null, null]</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>            a <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>                    a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span>            result<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">></span> size<span class="token punctuation">)</span>            a<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 876323262645176354L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Saves the state of this {@code LinkedList} instance to a stream     * (that is, serializes it).     *     * @serialData The size of the list (the number of elements it     *             contains) is emitted (int), followed by all of its     *             elements (each an Object) in the proper order.     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream s<span class="token punctuation">)</span>            <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Write out any hidden serialization magic</span>        s<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Write out size</span>        s<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Write out all elements in the proper order.</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span>            s<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Reconstitutes this {@code LinkedList} instance from a stream     * (that is, deserializes it).     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream s<span class="token punctuation">)</span>            <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Read in any hidden serialization magic</span>        s<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Read in size</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Read in all elements in the proper order.</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">linkLast</span><span class="token punctuation">(</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Creates a &lt;em>&lt;a href="Spliterator.html#binding">late-binding&lt;/a>&lt;/em>     * and &lt;em>fail-fast&lt;/em> {@link Spliterator} over the elements in this     * list.     *     * &lt;p>The {@code Spliterator} reports {@link Spliterator#SIZED} and     * {@link Spliterator#ORDERED}.  Overriding implementations should document     * the reporting of additional characteristic values.     *     * @implNote     * The {@code Spliterator} additionally reports {@link Spliterator#SUBSIZED}     * and implements {@code trySplit} to permit limited parallelism..     *     * @return a {@code Spliterator} over the elements in this list     * @since 1.8     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Spliterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LLSpliterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** A customized variant of Spliterators.IteratorSpliterator */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">LLSpliterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Spliterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BATCH_UNIT <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// batch array size increment</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_BATCH <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">25</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// max batch array size;</span>        <span class="token keyword">final</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token operator">&lt;</span>E<span class="token operator">></span> list<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// null OK unless traversed</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> current<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// current node; null until initialized</span>        <span class="token keyword">int</span> est<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// size estimate; -1 until first needed</span>        <span class="token keyword">int</span> expectedModCount<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// initialized when est set</span>        <span class="token keyword">int</span> batch<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// batch size for splits</span>        <span class="token function">LLSpliterator</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token operator">&lt;</span>E<span class="token operator">></span> list<span class="token punctuation">,</span> <span class="token keyword">int</span> est<span class="token punctuation">,</span> <span class="token keyword">int</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>est <span class="token operator">=</span> est<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>expectedModCount <span class="token operator">=</span> expectedModCount<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getEst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// force initialization</span>            <span class="token keyword">final</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token operator">&lt;</span>E<span class="token operator">></span> lst<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> est<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lst <span class="token operator">=</span> list<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                    s <span class="token operator">=</span> est <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    expectedModCount <span class="token operator">=</span> lst<span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>                    current <span class="token operator">=</span> lst<span class="token punctuation">.</span>first<span class="token punctuation">;</span>                    s <span class="token operator">=</span> est <span class="token operator">=</span> lst<span class="token punctuation">.</span>size<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">estimateSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">getEst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> Spliterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">trySplit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> p<span class="token punctuation">;</span>            <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">getEst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> current<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> n <span class="token operator">=</span> batch <span class="token operator">+</span> BATCH_UNIT<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> s<span class="token punctuation">)</span>                    n <span class="token operator">=</span> s<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> MAX_BATCH<span class="token punctuation">)</span>                    n <span class="token operator">=</span> MAX_BATCH<span class="token punctuation">;</span>                Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">do</span> <span class="token punctuation">{</span> a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">.</span>item<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                current <span class="token operator">=</span> p<span class="token punctuation">;</span>                batch <span class="token operator">=</span> j<span class="token punctuation">;</span>                est <span class="token operator">=</span> s <span class="token operator">-</span> j<span class="token punctuation">;</span>                <span class="token keyword">return</span> Spliterators<span class="token punctuation">.</span><span class="token function">spliterator</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> Spliterator<span class="token punctuation">.</span>ORDERED<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">getEst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> current<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                current <span class="token operator">=</span> null<span class="token punctuation">;</span>                est <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">do</span> <span class="token punctuation">{</span>                    E e <span class="token operator">=</span> p<span class="token punctuation">.</span>item<span class="token punctuation">;</span>                    p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">--</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryAdvance</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> p<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getEst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> current<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token operator">--</span>est<span class="token punctuation">;</span>                E e <span class="token operator">=</span> p<span class="token punctuation">.</span>item<span class="token punctuation">;</span>                current <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">characteristics</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Spliterator<span class="token punctuation">.</span>ORDERED <span class="token operator">|</span> Spliterator<span class="token punctuation">.</span>SIZED <span class="token operator">|</span> Spliterator<span class="token punctuation">.</span>SUBSIZED<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> LinkedList </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList</title>
      <link href="posts/48b6827e.html"/>
      <url>posts/48b6827e.html</url>
      
        <content type="html"><![CDATA[<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><ul><li>底层实现是数组Object[] elementData</li><li>查询效率高，增删效率低，线程不安全。使用频率很高</li><li>正常使用的场景中，都是用来查询，不会涉及太频繁的增删，如果涉及频繁的增删，可以使用LinkedList，如果你需要线程安全就使用Vector</li><li>遍历快，由于内存的连续性，CPU内部缓存结构会缓存连续的内存片段，可以大幅降低读取内存的性能开销</li><li>不适合做队列，因为尾部插入，首部删除，会涉及数组的数据搬迁，耗费性能。可以采用定长的环形数组实现队列</li><li>可以做堆栈，因为push/pop不涉及数据移动操作</li><li>将<code>ArrayList</code>作为默认首选,只有因为经常从表中间插入删除而导致性能下降时,才选择<code>LinkedList</code></li></ul><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ul><li>可扩容数组</li><li>允许null值</li><li>add()的均摊开销是常数级别，均摊花费为O(1)</li><li>在分配大量元素前,使用ensureCapacity减少重新分配的次数</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="Cloneable"><a href="#Cloneable" class="headerlink" title="Cloneable"></a>Cloneable</h3><p>要重写<code>clone()</code>则必须实现<code>Cloneable</code>的接口,否则会报<code>CloneNotSupportedException </code>异常</p><p><code>Cloneable </code>接口为空,只是个合法调用 <code>clone</code>方法的标识</p><h3 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h3><p>Serializable接口也为空,只是个合法调用方法的标识目的是实现序列化:可以将一个对象的转换成字节流,写成文件,需要的时候可以从流中再次读取(反序列化)。实现序列化之后的对象,可以通过IO操作进行读写</p><h3 id="AbstractList"><a href="#AbstractList" class="headerlink" title="AbstractList"></a>AbstractList</h3><ul><li>实现接口中一些通用的方法，而具体的类，如ArrayList就继承这个AbstractList类，</li><li>拿到一些通用的方法，然后自己在实现一些自己特有的方法，这样一来，让代码更简洁，就继承结构最底层的类中通用的方法都抽取出来</li><li>实现了List接口,提供了List 的基本实现,目的是为了使得他的子类不需要重写List中的所有方法</li></ul><h3 id="RandomAccess"><a href="#RandomAccess" class="headerlink" title="RandomAccess"></a>RandomAccess</h3><ul><li>是一个标志接口，表明实现这个这个接口的 List 集合是支持快速随机访问的。</li><li>如果是实现了这个接口的 List，那么使用for循环的方式获取数据会优于用迭代器获取数据。</li></ul><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><ul><li>ArrayList可以通过构造⽅法在初始化的时候指定底层数组的⼤⼩</li><li>通过⽆参构造⽅法的⽅式ArrayList()初始化，则赋值底层数Object[] elementData为⼀个默认空数组Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}所以数组容量为0，只有真正对数据进⾏添加add时，才分配默认DEFAULT_CAPACITY = 10的初始容量。</li><li>他会重新定义⼀个⻓度为10+10/2的数组也就是新增⼀个⻓度为15的数组</li><li>然后把原数组的数据，原封不动的复制到新数组中，这个时候再把指向原数的地址换到新数组，</li><li>在使⽤ArrayList的时候⼀般不会设置初始值的⼤⼩，那ArrayList默认的⼤⼩就刚好是10。</li></ul><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><p>他有指定index新增，也有直接新增的，在这之前他会有⼀步校验⻓度的判断</p><p>ensureCapacityInternal，就是说如果⻓度不够，是需要扩容的。</p><h2 id="为什么-ArrayList-的-elementData-加上-transient-修饰"><a href="#为什么-ArrayList-的-elementData-加上-transient-修饰" class="headerlink" title="为什么 ArrayList 的 elementData 加上 transient 修饰"></a>为什么 ArrayList 的 elementData 加上 transient 修饰</h2><ul><li>ArrayList 实现了 Serializable 接口，这意味着 ArrayList 支持序列化。transient 的作用是说不希望 elementData 数组被序列化</li><li>而ArrayList中重写了 writeObject 实现。每次序列化时，先调用 defaultWriteObject() 方法序列化 ArrayList 中的非 transient 元素，然后遍历 elementData，只序列化已存入的元素，这样既加快了序列化的速度，又减小了序列化之后的文件大小。</li></ul><h1 id="源码注释"><a href="#源码注释" class="headerlink" title="源码注释"></a>源码注释</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> java<span class="token punctuation">.</span>util<span class="token punctuation">;</span><span class="token keyword">import</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>SharedSecrets<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Consumer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Predicate<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>UnaryOperator<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 可扩容数组 * 允许null值 * add()的均摊开销是常数级别 * 在分配大量元素前,使用ensureCapacity减少重新分配的次数 * List list = Collections.synchronizedList(new ArrayList(...)) * fail-fast */</span><span class="token comment" spellcheck="true">/*add均摊花费为O(1)接口中全都是抽象的方法，而抽象类中可以有抽象方法，还可以有具体的实现方法，正是利用了这一点，让AbstractList是实现接口中一些通用的方法，而具体的类，如ArrayList就继承这个AbstractList类，拿到一些通用的方法，然后自己在实现一些自己特有的方法，这样一来，让代码更简洁，就继承结构最底层的类中通用的方法都抽取出来RandomAccess 是一个标志接口，表明实现这个这个接口的 List 集合是支持快速随机访问的。如果是实现了这个接口的 List，那么使用for循环的方式获取数据会优于用迭代器获取数据。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>        <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 8683452581122892189L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Default initial capacity.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Shared empty array instance used for empty instances.     */</span>    <span class="token comment" spellcheck="true">//new ArrayList(0)时,默认是这个</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Shared empty array instance used for default sized empty instances. We     * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when     * first element is added.     */</span>    <span class="token comment" spellcheck="true">//new ArrayList()时,默认是这个</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The array buffer into which the elements of the ArrayList are stored.     * The capacity of the ArrayList is the length of this array buffer. Any     * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA     * will be expanded to DEFAULT_CAPACITY when the first element is added.     */</span>    <span class="token comment" spellcheck="true">//元素第一次被添加时,扩展到DEFAULT_CAPACITY</span>    <span class="token comment" spellcheck="true">//底层依然是用Object类型的数组,只有在需要取出的时候,才转型为T</span>    <span class="token keyword">transient</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// non-private to simplify nested class access</span>    <span class="token comment" spellcheck="true">/**     * The size of the ArrayList (the number of elements it contains).     *     * @serial     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Constructs an empty list with the specified initial capacity.     *     * @param initialCapacity the initial capacity of the list     * @throws IllegalArgumentException if the specified initial capacity     *                                  is negative     */</span>    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span> <span class="token operator">+</span>                    initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Constructs an empty list with an initial capacity of ten.     */</span>    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Constructs a list containing the elements of the specified     * collection, in the order they are returned by the collection's     * iterator.     *     * @param c the collection whose elements are to be placed into this list     * @throws NullPointerException if the specified collection is null     */</span>    <span class="token comment" spellcheck="true">//浅拷贝</span>    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//浅拷贝</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                elementData <span class="token operator">=</span> a<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> size<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// replace with empty array.</span>            elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Trims the capacity of this &lt;tt>ArrayList&lt;/tt> instance to be the     * list's current size.  An application can use this operation to minimize     * the storage of an &lt;tt>ArrayList&lt;/tt> instance.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trimToSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//来截取elementData数组,缩小空间,即elementData后面可能为null值,就截取到了size的位置</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            elementData <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token operator">?</span> EMPTY_ELEMENTDATA                    <span class="token operator">:</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Increases the capacity of this &lt;tt>ArrayList&lt;/tt> instance, if     * necessary, to ensure that it can hold at least the number of elements     * specified by the minimum capacity argument.     *     * @param minCapacity the desired minimum capacity     */</span>    <span class="token comment" spellcheck="true">//最好在 add 大量元素之前用 ensureCapacity 方法，以减少增量重新分配的次数</span>    <span class="token comment" spellcheck="true">// 扩容的函数.但是在扩容前会检查是否合法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//确保它至少可以容纳由minimum capacity参数指定的元素数</span>        <span class="token comment" spellcheck="true">//用new ArrayList()创建出来的,是DEFAULTCAPACITY_EMPTY_ELEMENTDATA,所以此时最小容量为10</span>        <span class="token keyword">int</span> minExpand <span class="token operator">=</span> <span class="token punctuation">(</span>elementData <span class="token operator">!=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// any size if not default element table</span>                <span class="token operator">?</span> <span class="token number">0</span>                <span class="token comment" spellcheck="true">// larger than default for default empty table. It's already</span>                <span class="token comment" spellcheck="true">// supposed to be at default size.</span>                <span class="token operator">:</span> DEFAULT_CAPACITY<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">></span> minExpand<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateCapacity</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//也是为了确保elemenData数组有合适的大小</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token comment" spellcheck="true">//当数组满的时候才扩容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * The maximum size of array to allocate.     * Some VMs reserve some header words in an array.     * Attempts to allocate larger arrays may result in     * OutOfMemoryError: Requested array size exceeds VM limit     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_ARRAY_SIZE <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Increases the capacity to ensure that it can hold at least the     * number of elements specified by the minimum capacity argument.     *     * @param minCapacity the desired minimum capacity     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.5倍</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//说明比想扩容的大小还小</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// minCapacity is usually close to size, so this is a win:</span>        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//扩容操作</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">></span> MAX_ARRAY_SIZE<span class="token punctuation">)</span> <span class="token operator">?</span>                Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span>                MAX_ARRAY_SIZE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 调用equals进行比较     * 针对null与非null进行不同的比较     * 找不到返回-1     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns the index of the last occurrence of the specified element     * in this list, or -1 if this list does not contain the element.     * More formally, returns the highest index &lt;tt>i&lt;/tt> such that     * &lt;tt>(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt>,     * or -1 if there is no such index.     */</span>    <span class="token comment" spellcheck="true">//从后向前找</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns a shallow copy of this &lt;tt>ArrayList&lt;/tt> instance.  (The     * elements themselves are not copied.)     *     * @return a clone of this &lt;tt>ArrayList&lt;/tt> instance     */</span>    <span class="token keyword">public</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span>elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//浅拷贝 元素对象本身不拷贝</span>            v<span class="token punctuation">.</span>modCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// this shouldn't happen, since we are Cloneable</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns an array containing all of the elements in this list     * in proper sequence (from first to last element).     *     * &lt;p>The returned array will be "safe" in that no references to it are     * maintained by this list.  (In other words, this method must allocate     * a new array).  The caller is thus free to modify the returned array.     *     * &lt;p>This method acts as bridge between array-based and collection-based     * APIs.     *     * @return an array containing all of the elements in this list in     * proper sequence     */</span>    <span class="token comment" spellcheck="true">//某种程度上是安全的,因为创建了一个新的数组</span>    <span class="token keyword">public</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 如果a的length不够大,就新建一个同样类型的数组     * a.length够大,则把值赋值到a中,并且把多余的部分赋值为null,然后返回传入的那个a(末尾没用到的元素为null)     * 只能说数组是不重复的,但是把toArray里面元素内容改变了,arrayList的也变化,他们里面存储的是相同的引用     * 除非是把toArray里面的元素引用换掉,就没问题     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Make a new array of a's runtime type, but my contents:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">></span> size<span class="token punctuation">)</span>            a<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Positional Access Operations</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    E <span class="token function">elementData</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//需要使用时,转型为E</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns the element at the specified position in this list.     *     * @param index index of the element to return     * @return the element at the specified position in this list     * @throws IndexOutOfBoundsException {@inheritDoc}     */</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Replaces the element at the specified position in this list with     * the specified element.     *     * @param index   index of the element to replace     * @param element element to be stored at the specified position     * @return the element previously at the specified position     * @throws IndexOutOfBoundsException {@inheritDoc}     */</span>    <span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        E oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Appends the specified element to the end of this list.     *     * @param e element to be appended to this list     * @return &lt;tt>true&lt;/tt> (as specified by {@link Collection#add})     */</span>    <span class="token comment" spellcheck="true">/*    如果new ArrayList(),就马上调用add    则会接着调用ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));    此时elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA    calculateCapacity(elementData, minCapacity)则会return Math.max(DEFAULT_CAPACITY, minCapacity);  即10    接下来调用grow(int minCapacity)    创建elementData数组,容量为max(minCapacity,oldCapacity + (oldCapacity >> 1))    即max(10,1)    所以创建了容量为1的数组    不管怎么样,调用了add,都会使得modCount++;     */</span>    <span class="token comment" spellcheck="true">//如果是new ArrayList(),那么第一次add(),ensureCapacityInternal方法里面就会自动初始化容量为10</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//扩容至少要求size+1</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>        <span class="token comment" spellcheck="true">//如果不够,则要扩容 modCount也会增加</span>        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Inserts the specified element at the specified position in this     * list. Shifts the element currently at that position (if any) and     * any subsequent elements to the right (adds one to their indices).     *     * @param index   index at which the specified element is to be inserted     * @param element element to be inserted     * @throws IndexOutOfBoundsException {@inheritDoc}     */</span>    <span class="token comment" spellcheck="true">/*    检查index是否合法    检查是否需要扩容    将index开始的元素往后移一位    将index处赋值    ++size     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//必须 [0,size]</span>        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查看是否越界</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>        <span class="token comment" spellcheck="true">//源数组,源数组中起始copy的position,目标数组,目标数组的位置,复制的长度</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Removes the element at the specified position in this list.     * Shifts any subsequent elements to the left (subtracts one from their     * indices).     *     * @param index the index of the element to be removed     * @return the element that was removed from the list     * @throws IndexOutOfBoundsException {@inheritDoc}     */</span>    <span class="token comment" spellcheck="true">//把目标之后的数组元素复制到删除那块</span>    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        E oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//要移除的不是最后一个元素,则把后面的往前面拷贝</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                    numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// clear to let GC do its work</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Removes the first occurrence of the specified element from this list,     * if it is present.  If the list does not contain the element, it is     * unchanged.  More formally, removes the element with the lowest index     * &lt;tt>i&lt;/tt> such that     * &lt;tt>(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt>     * (if such an element exists).  Returns &lt;tt>true&lt;/tt> if this list     * contained the specified element (or equivalently, if this list     * changed as a result of the call).     *     * @param o element to be removed from this list, if present     * @return &lt;tt>true&lt;/tt> if this list contained the specified element     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * Private remove method that skips bounds checking and does not     * return the value removed.     */</span>    <span class="token comment" spellcheck="true">//不检查,不返回</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fastRemove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                    numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// clear to let GC do its work</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Removes all of the elements from this list.  The list will     * be empty after this call returns.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// clear to let GC do its work</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Appends all of the elements in the specified collection to the end of     * this list, in the order that they are returned by the     * specified collection's Iterator.  The behavior of this operation is     * undefined if the specified collection is modified while the operation     * is in progress.  (This implies that the behavior of this call is     * undefined if the specified collection is this list, and this     * list is nonempty.)     *     * @param c collection containing elements to be added to this list     * @return &lt;tt>true&lt;/tt> if this list changed as a result of the call     * @throws NullPointerException if the specified collection is null     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>        <span class="token keyword">return</span> numNew <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Inserts all of the elements in the specified collection into this     * list, starting at the specified position.  Shifts the element     * currently at that position (if any) and any subsequent elements to     * the right (increases their indices).  The new elements will appear     * in the list in the order that they are returned by the     * specified collection's iterator.     *     * @param index index at which to insert the first element from the     *              specified collection     * @param c     collection containing elements to be added to this list     * @return &lt;tt>true&lt;/tt> if this list changed as a result of the call     * @throws IndexOutOfBoundsException {@inheritDoc}     * @throws NullPointerException      if the specified collection is null     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> numNew<span class="token punctuation">,</span>                    numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>        <span class="token keyword">return</span> numNew <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Removes from this list all of the elements whose index is between     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.     * Shifts any succeeding elements to the left (reduces their index).     * This call shortens the list by {@code (toIndex - fromIndex)} elements.     * (If {@code toIndex==fromIndex}, this operation has no effect.)     *     * @throws IndexOutOfBoundsException if {@code fromIndex} or     *                                   {@code toIndex} is out of range     *                                   ({@code fromIndex &lt; 0 ||     *                                   fromIndex >= size() ||     *                                   toIndex > size() ||     *                                   toIndex &lt; fromIndex})     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">removeRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> toIndex<span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> toIndex<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> fromIndex<span class="token punctuation">,</span>                numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// clear to let GC do its work</span>        <span class="token keyword">int</span> newSize <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token punctuation">(</span>toIndex <span class="token operator">-</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> newSize<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size <span class="token operator">=</span> newSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Checks if the given index is in range.  If not, throws an appropriate     * runtime exception.  This method does *not* check if the index is     * negative: It is always used immediately prior to an array access,     * which throws an ArrayIndexOutOfBoundsException if index is negative.     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> size<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * A version of rangeCheck used by add and addAll.     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> size <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Constructs an IndexOutOfBoundsException detail message.     * Of the many possible refactorings of the error handling code,     * this "outlining" performs best with both server and client VMs.     */</span>    <span class="token keyword">private</span> String <span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Index: "</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">", Size: "</span> <span class="token operator">+</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Removes from this list all of its elements that are contained in the     * specified collection.     *     * @param c collection containing elements to be removed from this list     * @return {@code true} if this list changed as a result of the call     * @throws ClassCastException   if the class of an element of this list     *                              is incompatible with the specified collection     *                              (&lt;a href="Collection.html#optional-restrictions">optional&lt;/a>)     * @throws NullPointerException if this list contains a null element and the     *                              specified collection does not permit null elements     *                              (&lt;a href="Collection.html#optional-restrictions">optional&lt;/a>),     *                              or if the specified collection is null     * @see Collection#contains(Object)     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Retains only the elements in this list that are contained in the     * specified collection.  In other words, removes from this list all     * of its elements that are not contained in the specified collection.     *     * @param c collection containing elements to be retained in this list     * @return {@code true} if this list changed as a result of the call     * @throws ClassCastException   if the class of an element of this list     *                              is incompatible with the specified collection     *                              (&lt;a href="Collection.html#optional-restrictions">optional&lt;/a>)     * @throws NullPointerException if this list contains a null element and the     *                              specified collection does not permit null elements     *                              (&lt;a href="Collection.html#optional-restrictions">optional&lt;/a>),     *                              or if the specified collection is null     * @see Collection#contains(Object)     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">retainAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//complement标识了要放入集合中存在/不存在的元素</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">,</span> <span class="token keyword">boolean</span> complement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> modified <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将元素都放在集合的前部</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> complement<span class="token punctuation">)</span>                    elementData<span class="token punctuation">[</span>w<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> elementData<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Preserve behavioral compatibility with AbstractCollection,</span>            <span class="token comment" spellcheck="true">// even if c.contains() throws.</span>            <span class="token comment" spellcheck="true">//抛出异常则把r后面这部分都放入其中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> r<span class="token punctuation">,</span>                        elementData<span class="token punctuation">,</span> w<span class="token punctuation">,</span>                        size <span class="token operator">-</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                w <span class="token operator">+=</span> size <span class="token operator">-</span> r<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">!=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// clear to let GC do its work</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> w<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                modCount <span class="token operator">+=</span> size <span class="token operator">-</span> w<span class="token punctuation">;</span>                size <span class="token operator">=</span> w<span class="token punctuation">;</span>                modified <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> modified<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Save the state of the &lt;tt>ArrayList&lt;/tt> instance to a stream (that     * is, serialize it).     *     * @serialData The length of the array backing the &lt;tt>ArrayList&lt;/tt>     * instance is emitted (int), followed by all of its elements     * (each an &lt;tt>Object&lt;/tt>) in the proper order.     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span>ObjectOutputStream s<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Write out element count, and any hidden stuff</span>        <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Write out size as capacity for behavioural compatibility with clone()</span>        s<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Write out all elements in the proper order.</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Reconstitute the &lt;tt>ArrayList&lt;/tt> instance from a stream (that is,     * deserialize it).     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>ObjectInputStream s<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Read in size, and any hidden stuff</span>        s<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Read in capacity</span>        s<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ignored</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// be like clone(), allocate array based upon size not capacity</span>            <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            SharedSecrets<span class="token punctuation">.</span><span class="token function">getJavaOISAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkArray</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> elementData<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Read in all elements in the proper order.</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns a list iterator over the elements in this list (in proper     * sequence), starting at the specified position in the list.     * The specified index indicates the first element that would be     * returned by an initial call to {@link ListIterator#next next}.     * An initial call to {@link ListIterator#previous previous} would     * return the element with the specified index minus one.     *     * &lt;p>The returned list iterator is &lt;a href="#fail-fast">&lt;i>fail-fast&lt;/i>&lt;/a>.     *     * @throws IndexOutOfBoundsException {@inheritDoc}     */</span>    <span class="token keyword">public</span> ListIterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"Index: "</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListItr</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns a list iterator over the elements in this list (in proper     * sequence).     *     * &lt;p>The returned list iterator is &lt;a href="#fail-fast">&lt;i>fail-fast&lt;/i>&lt;/a>.     *     * @see #listIterator(int)     */</span>    <span class="token keyword">public</span> ListIterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListItr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns an iterator over the elements in this list in proper sequence.     *     * &lt;p>The returned iterator is &lt;a href="#fail-fast">&lt;i>fail-fast&lt;/i>&lt;/a>.     *     * @return an iterator over the elements in this list in proper sequence     */</span>    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * An optimized version of AbstractList.Itr     * 没调用next前,cursor等于0,lastRet=-1     * 调用next时,cursor已经指向了下一个元素,而lastRet指向当前元素     * 此时如果调用删除,则删除的是cursor,且操作expectedModCount,使得不影响fail-fast     */</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cursor<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// index of next element to return</span>        <span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// index of last element returned; -1 if no such</span>        <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        <span class="token function">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cursor <span class="token operator">!=</span> size<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> size<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">)</span><span class="token punctuation">;</span>                cursor <span class="token operator">=</span> lastRet<span class="token punctuation">;</span>                lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> size <span class="token operator">&amp;&amp;</span> modCount <span class="token operator">==</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// update once at end of iteration to reduce heap write traffic</span>            cursor <span class="token operator">=</span> i<span class="token punctuation">;</span>            lastRet <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * An optimized version of AbstractList.ListItr     */</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ListItr</span> <span class="token keyword">extends</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">ListIterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">ListItr</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cursor <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cursor <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cursor<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cursor <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> E <span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cursor <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>                ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns a view of the portion of this list between the specified     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.  (If     * {@code fromIndex} and {@code toIndex} are equal, the returned list is     * empty.)  The returned list is backed by this list, so non-structural     * changes in the returned list are reflected in this list, and vice-versa.     * The returned list supports all of the optional list operations.     *     * &lt;p>This method eliminates the need for explicit range operations (of     * the sort that commonly exist for arrays).  Any operation that expects     * a list can be used as a range operation by passing a subList view     * instead of a whole list.  For example, the following idiom     * removes a range of elements from a list:     * &lt;pre>     *      list.subList(from, to).clear();     * &lt;/pre>     * Similar idioms may be constructed for {@link #indexOf(Object)} and     * {@link #lastIndexOf(Object)}, and all of the algorithms in the     * {@link Collections} class can be applied to a subList.     *     * &lt;p>The semantics of the list returned by this method become undefined if     * the backing list (i.e., this list) is &lt;i>structurally modified&lt;/i> in     * any way other than via the returned list.  (Structural modifications are     * those that change the size of this list, or otherwise perturb it in such     * a fashion that iterations in progress may yield incorrect results.)     *     * @throws IndexOutOfBoundsException {@inheritDoc}     * @throws IllegalArgumentException  {@inheritDoc}     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">subList</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">subListRangeCheck</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">,</span> toIndex<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SubList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">,</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">subListRangeCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fromIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"fromIndex = "</span> <span class="token operator">+</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>toIndex <span class="token operator">></span> size<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"toIndex = "</span> <span class="token operator">+</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fromIndex <span class="token operator">></span> toIndex<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"fromIndex("</span> <span class="token operator">+</span> fromIndex <span class="token operator">+</span>                    <span class="token string">") > toIndex("</span> <span class="token operator">+</span> toIndex <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">SubList</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">RandomAccess</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> AbstractList<span class="token operator">&lt;</span>E<span class="token operator">></span> parent<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> parentOffset<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> offset<span class="token punctuation">;</span>        <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token function">SubList</span><span class="token punctuation">(</span>AbstractList<span class="token operator">&lt;</span>E<span class="token operator">></span> parent<span class="token punctuation">,</span>                <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>parentOffset <span class="token operator">=</span> fromIndex<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>offset <span class="token operator">=</span> offset <span class="token operator">+</span> fromIndex<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> toIndex <span class="token operator">-</span> fromIndex<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            E oldValue <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">elementData</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">[</span>offset <span class="token operator">+</span> index<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">elementData</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            parent<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parentOffset <span class="token operator">+</span> index<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">=</span> parent<span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            E result <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>parentOffset <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">=</span> parent<span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">removeRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            parent<span class="token punctuation">.</span><span class="token function">removeRange</span><span class="token punctuation">(</span>parentOffset <span class="token operator">+</span> fromIndex<span class="token punctuation">,</span>                    parentOffset <span class="token operator">+</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">=</span> parent<span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">-=</span> toIndex <span class="token operator">-</span> fromIndex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cSize <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cSize <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            parent<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>parentOffset <span class="token operator">+</span> index<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">=</span> parent<span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">+=</span> cSize<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> ListIterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offset<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListIterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> cursor <span class="token operator">=</span> index<span class="token punctuation">;</span>                <span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> cursor <span class="token operator">!=</span> SubList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                <span class="token keyword">public</span> E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> SubList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">+</span> i <span class="token operator">>=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token punctuation">(</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> cursor <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                <span class="token keyword">public</span> E <span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> i <span class="token operator">=</span> cursor <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">+</span> i <span class="token operator">>=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cursor <span class="token operator">=</span> i<span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token punctuation">(</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> SubList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>                    <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">+</span> i <span class="token operator">>=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> size <span class="token operator">&amp;&amp;</span> modCount <span class="token operator">==</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// update once at end of iteration to reduce heap write traffic</span>                    lastRet <span class="token operator">=</span> cursor <span class="token operator">=</span> i<span class="token punctuation">;</span>                    <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> cursor<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> cursor <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        SubList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">)</span><span class="token punctuation">;</span>                        cursor <span class="token operator">=</span> lastRet<span class="token punctuation">;</span>                        lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                        expectedModCount <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> lastRet<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>                        SubList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                        cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                        lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                        expectedModCount <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>expectedModCount <span class="token operator">!=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>modCount<span class="token punctuation">)</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">subList</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">subListRangeCheck</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">,</span> toIndex<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SubList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> fromIndex<span class="token punctuation">,</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> String <span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Index: "</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">", Size: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Spliterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayListSpliterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span>                    offset <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span> <span class="token keyword">final</span> E<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> modCount <span class="token operator">==</span> expectedModCount <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Creates a &lt;em>&lt;a href="Spliterator.html#binding">late-binding&lt;/a>&lt;/em>     * and &lt;em>fail-fast&lt;/em> {@link Spliterator} over the elements in this     * list.     *     * &lt;p>The {@code Spliterator} reports {@link Spliterator#SIZED},     * {@link Spliterator#SUBSIZED}, and {@link Spliterator#ORDERED}.     * Overriding implementations should document the reporting of additional     * characteristic values.     *     * @return a {@code Spliterator} over the elements in this list     * @since 1.8     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Spliterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayListSpliterator</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Index-based split-by-two, lazily initialized Spliterator     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListSpliterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Spliterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * If ArrayLists were immutable, or structurally immutable (no         * adds, removes, etc), we could implement their spliterators         * with Arrays.spliterator. Instead we detect as much         * interference during traversal as practical without         * sacrificing much performance. We rely primarily on         * modCounts. These are not guaranteed to detect concurrency         * violations, and are sometimes overly conservative about         * within-thread interference, but detect enough problems to         * be worthwhile in practice. To carry this out, we (1) lazily         * initialize fence and expectedModCount until the latest         * point that we need to commit to the state we are checking         * against; thus improving precision.  (This doesn't apply to         * SubLists, that create spliterators with current non-lazy         * values).  (2) We perform only a single         * ConcurrentModificationException check at the end of forEach         * (the most performance-sensitive method). When using forEach         * (as opposed to iterators), we can normally only detect         * interference after actions, not before. Further         * CME-triggering checks apply to all other possible         * violations of assumptions for example null or too-small         * elementData array given its size(), that could only have         * occurred due to interference.  This allows the inner loop         * of forEach to run without any further checks, and         * simplifies lambda-resolution. While this does entail a         * number of checks, note that in the common case of         * list.stream().forEach(a), no checks or other computation         * occur anywhere other than inside forEach itself.  The other         * less-often-used methods cannot take advantage of most of         * these streamlinings.         */</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span> list<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// current index, modified on advance/split</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> fence<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -1 until used; then one past last index</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> expectedModCount<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// initialized when fence set</span>        <span class="token comment" spellcheck="true">/**         * Create new spliterator covering the given  range         */</span>        <span class="token function">ArrayListSpliterator</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span> list<span class="token punctuation">,</span> <span class="token keyword">int</span> origin<span class="token punctuation">,</span> <span class="token keyword">int</span> fence<span class="token punctuation">,</span>                             <span class="token keyword">int</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK if null unless traversed</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> origin<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>fence <span class="token operator">=</span> fence<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>expectedModCount <span class="token operator">=</span> expectedModCount<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// initialize fence to size on first use</span>            <span class="token keyword">int</span> hi<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (a specialized variant appears in method forEach)</span>            ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span> lst<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hi <span class="token operator">=</span> fence<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lst <span class="token operator">=</span> list<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                    hi <span class="token operator">=</span> fence <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    expectedModCount <span class="token operator">=</span> lst<span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>                    hi <span class="token operator">=</span> fence <span class="token operator">=</span> lst<span class="token punctuation">.</span>size<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> hi<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> ArrayListSpliterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">trySplit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> hi <span class="token operator">=</span> <span class="token function">getFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lo <span class="token operator">=</span> index<span class="token punctuation">,</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>lo <span class="token operator">+</span> hi<span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>lo <span class="token operator">>=</span> mid<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token comment" spellcheck="true">// divide range in half unless too small</span>                    <span class="token keyword">new</span> <span class="token class-name">ArrayListSpliterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> index <span class="token operator">=</span> mid<span class="token punctuation">,</span>                            expectedModCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryAdvance</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> hi <span class="token operator">=</span> <span class="token function">getFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>                index <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span> E e <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> list<span class="token punctuation">.</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i<span class="token punctuation">,</span> hi<span class="token punctuation">,</span> mc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hoist accesses and checks from loop</span>            ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span> lst<span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lst <span class="token operator">=</span> list<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> lst<span class="token punctuation">.</span>elementData<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hi <span class="token operator">=</span> fence<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mc <span class="token operator">=</span> lst<span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>                    hi <span class="token operator">=</span> lst<span class="token punctuation">.</span>size<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                    mc <span class="token operator">=</span> expectedModCount<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> index<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>index <span class="token operator">=</span> hi<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hi<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span> E e <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                        action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>lst<span class="token punctuation">.</span>modCount <span class="token operator">==</span> mc<span class="token punctuation">)</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">estimateSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">getFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">characteristics</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Spliterator<span class="token punctuation">.</span>ORDERED <span class="token operator">|</span> Spliterator<span class="token punctuation">.</span>SIZED <span class="token operator">|</span> Spliterator<span class="token punctuation">.</span>SUBSIZED<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeIf</span><span class="token punctuation">(</span>Predicate<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// figure out which elements are to be removed</span>        <span class="token comment" spellcheck="true">// any exception thrown from the filter predicate at this stage</span>        <span class="token comment" spellcheck="true">// will leave the collection unmodified</span>        <span class="token keyword">int</span> removeCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> BitSet removeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSet</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> modCount <span class="token operator">==</span> expectedModCount <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span> <span class="token keyword">final</span> E element <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                removeSet<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                removeCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// shift surviving elements left over the spaces left by removed elements</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> anyToRemove <span class="token operator">=</span> removeCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>anyToRemove<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> newSize <span class="token operator">=</span> size <span class="token operator">-</span> removeCount<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> newSize<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i <span class="token operator">=</span> removeSet<span class="token punctuation">.</span><span class="token function">nextClearBit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                elementData<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> newSize<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                elementData<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Let gc do its work</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> newSize<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> anyToRemove<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span>UnaryOperator<span class="token operator">&lt;</span>E<span class="token operator">></span> operator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> modCount <span class="token operator">==</span> expectedModCount <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> operator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> elementData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> 源码 </tag>
            
            <tag> ArrayList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL事务</title>
      <link href="posts/f91535f.html"/>
      <url>posts/f91535f.html</url>
      
        <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>事务是应用程序中一系列严密的操作，所有操作必须成功完成，否则在每个操作中所作的所有更改都会被撤消。也就是事务具有原子性，一个事务中的一系列的操作要么全部成功，要么一个都不做。<br>事务的结束有两种，当事务中的所有步骤全部成功执行时，事务提交。如果其中一个步骤失败，将发生回滚操作，撤消撤消之前到事务开始时的所有操作。</p><p>事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账1000元，这个转账会涉及到两个关键操作就是：将小明的余额减少1000元，将小红的余额增加1000元。万一在这两个操作之间突然出现错误比如银行系统崩溃，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。</p><h1 id="四大特性（ACID）"><a href="#四大特性（ACID）" class="headerlink" title="四大特性（ACID）"></a>四大特性（ACID）</h1><h2 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h2><p>事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么全部失败；</p><h2 id="一致性（Consistency）"><a href="#一致性（Consistency）" class="headerlink" title="一致性（Consistency）"></a>一致性（Consistency）</h2><p>事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。</p><p>如果数据库系统运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是不一致的状态。</p><p>事务操作成功后，保证数据不会被破坏。如A账户转账100元到B账户，不管操作成功与否，A和B账户的存款总额是不变的。</p><p>现实世界中转账操作完成后，有一个一致性需求就是参与转账的账户的总的余额是不变的</p><p>数据库某些操作的原子性和隔离性都是保证一致性的一种手段</p><h2 id="隔离性（Isolation）"><a href="#隔离性（Isolation）" class="headerlink" title="隔离性（Isolation）"></a>隔离性（Isolation）</h2><p>当并发访问数据库时，一个正在执行的事务在执行完毕前，对应其他的会话是不可见的，多个并发事务之间的数据是相互隔离的。</p><h2 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h2><p>⼀个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发⽣故障也不应该对其有任何影响。</p><h1 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h1><h2 id="脏写"><a href="#脏写" class="headerlink" title="脏写"></a>脏写</h2><ul><li>一个事务修改了另一个未提交事务修改过的数据</li><li>A写，B写，A提交，B回滚，最后A提交的不复存在</li><li>不论是哪种隔离级别，都不允许脏写的情况发生。</li><li>InnoDB使用锁来保证不会有脏写情况的发生，也就是在第一个事务更新了某条记录后，就会给这条记录加锁，另一个事务再次更新时就需要等待第一个事务提交了，把锁释放之后才可以继续更新。</li><li>由于写-写产生的</li></ul><h2 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h2><ul><li>一个事务读到了另一个未提交事务修改过的数据</li><li>读未提交</li><li>当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</li><li>脏读指的是读到了其他事务未提交的数据，未提交意味着这些数据可能会回滚，也就是可能最终不会存到数据库中，也就是不存在的数据。读到了并一定最终存在的数据，这就是脏读。</li></ul><h2 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h2><ul><li>一个事务只能读到另一个已经提交的事务修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值</li><li>读已提交</li><li>指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</li><li>对比可重复读，不可重复读指的是在同一事务内，不同的时刻读到的同一批数据可能是不一样的，可能会受到其他事务的影响，比如其他事务改了这批数据并提交了。通常针对数据<strong>更新（UPDATE）</strong>操作。</li></ul><h2 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h2><ul><li>一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来</li><li>不像之前是读取和写入一条相同记录而产生的，幻读强调的是一个事务按照某个相同条件多次读取记录时，后读取时读到了之前没有读到的记录。</li><li>MySQL在REPEATABLEREAD隔离级别下，是可以禁止幻读问题的发生的</li><li>幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</li><li>不可重复读的重点是修改，幻读的重点在于新增或者删除。</li></ul><p>例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为 1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导 致A再读自己的工资时工资变为 2000；这就是不可重复读。</p><p>例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。</p><h1 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h1><ul><li>“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念。</li><li>在“读提交”隔离级 别下，这个视图是在每个SQL语句开始执行的时候创建的。</li><li>在“可重复读”隔离 级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。</li><li>“串行化”隔离级别下直接用加锁的方式来避免并行访问。</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210206101335402.png" alt="image-20210206101335402"></p><h2 id="READ-UNCOMMITTED-读取未提交"><a href="#READ-UNCOMMITTED-读取未提交" class="headerlink" title="READ-UNCOMMITTED(读取未提交)"></a>READ-UNCOMMITTED(读取未提交)</h2><ul><li>一个事务还没提交时，它做的变更就能被别的事务看到。</li><li>“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念</li></ul><h2 id="READ-COMMITTED-读取已提交"><a href="#READ-COMMITTED-读取已提交" class="headerlink" title="READ-COMMITTED(读取已提交)"></a>READ-COMMITTED(读取已提交)</h2><ul><li>一个事务提交之后，它做的变更才会被其他事务看到。</li><li>在“读提交”隔离级别下，这个视图是在每个SQL语句开始执行的时候创建的。</li></ul><h2 id="REPEATABLE-READ（可重复读）"><a href="#REPEATABLE-READ（可重复读）" class="headerlink" title="REPEATABLE-READ（可重复读）"></a>REPEATABLE-READ（可重复读）</h2><ul><li>一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。</li><li>数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。在“可重复读”隔离级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。</li><li>默认隔离级别</li><li>MySQL在REPEATABLEREAD隔离级别下，是可以禁止幻读问题的发生的</li><li>事务启动时的视图可以认为是静态的，不受其他事务更新的影响。</li><li>是可重复读隔离级别，事务T启动的时候会创建一个视图read-view，之后事务T执行期间，即使有其他事务修改了数据，事务T看到的仍然跟在启动时看到的一样。也就是说，一个在可重复读隔离级别下执行的事务，好像与世无争，不受外界影响。</li></ul><h2 id="SERIALIZABLE-可串行化"><a href="#SERIALIZABLE-可串行化" class="headerlink" title="SERIALIZABLE(可串行化)"></a>SERIALIZABLE(可串行化)</h2><p>最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰。</p><p>对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</p><h1 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h1><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><ul><li>聚簇索引记录中都包含两个必要的隐藏列<ul><li>trx_id：每次一个事务对某条聚簇索引记录进行改动时，都会把该事务的事务id赋值给trx_id隐藏列。</li><li>roll_pointer：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</li></ul></li><li>每次对记录进行改动，都会记录一条undo日志，每条undo日志也都有一个roll_pointer属性（INSERT操作对应的undo日志没有该属性，因为该记录并没有更早的版本），可以将这些undo日志都连起来，串成一个链表</li><li>对该记录每次更新后，都会将旧值放到一条undo日志中，就算是该记录的一个旧版本，随着更新次数的增多，所有的版本都会被roll_pointer属性连接成一个链表，我们把这个链表称之为版本链，版本链的头节点就是当前记录最新的值。另外，每个版本中还包含生成该版本时对应的事务id</li><li>按照可重复读的定义，一个事务启动的时候，能够看到所有已经提交的事务结果。但是之后，这个事务执行期间，其他事务的更新对它不可见。一个事务只需要在启动的时候声明说，“以我启动的时刻为准，如果一个数据版本是在我启动之前生成的，就认；如果是我启动以后才生成的，我就不认，我必须要找到它的上一个版本”。</li><li>为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务ID。“活跃”指的就是，启动了但还没提交。</li><li>更新数据都是先读后写的，而这个读，只能读当前的值，称为“当前读”（current read）。</li><li>可重复读的核心就是一致性读（consistent read）；而事务更新数据的时候，只能用当前读。如果当前的记录的行锁被其他事务占用的话，就需要进入锁等待。</li><li>同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）实际上每条记录在更新的时候都会同时记录一条回滚操作。记录上的最新值，通过回滚操作，都可以得到前一个状态的值。系统里面应该避免长事务</li><li>读提交的逻辑和可重复读的逻辑类似，它们最主要的区别是：<ul><li>在可重复读隔离级别下，只需要在事务开始的时候创建一致性视图，之后事务里的其他查询都共用这个一致性视图；</li><li>在读提交隔离级别下，每一个语句执行前都会重新算出一个新的视图。</li><li>对于可重复读，查询只承认在事务启动前就已经提交完成的数据</li><li>对于读提交，查询只承认在语句启动前就已经提交完成的数据；</li><li>而当前读，总是读取已经提交完成的最新版本。</li></ul></li><li>MVCC（Multi-VersionConcurrencyControl，多版本并发控制）指的就是在使用READ COMMITTD、REPEATABLE READ这两种隔离级别的 事务在执行普通的SEELCT操作时访问记录的版本链的过程，这样子可以使不同事务的读-写、写-读操作并发执行，从而提升系统性能。READ COMMITTD、REPEATABLE READ这两个隔离级别的一个很大不同就是：生成ReadView的时机不同，READCOMMITTD在每一次进行普通SELECT操作前都会生成一个ReadView，而REPEATABLE READ只在第一次进行普通SELECT操作前生成一个ReadView，之后的查询操作都重复使用这个ReadView就好了。</li></ul><h2 id="一致性读视图（consistent-read-view）"><a href="#一致性读视图（consistent-read-view）" class="headerlink" title="一致性读视图（consistent read view）"></a>一致性读视图（consistent read view）</h2><ul><li>对于使用READ COMMITTED和REPEATABLE READ隔离级别的事务来说，都必须保证读到已经提交了的事务修改过的记录，也就是说假如另一个事务已经修改了记录但是尚未提交，是不能直接读取最新版本的记录的，核心问题就是：需要判断一下版本链中的哪个版本是当前事务可见的</li><li>READ COMMITTED和REPEATABLE READ隔离级别的的一个非常大的区别就是它们生成ReadView的时机不同。READ COMMITTED ——每次读取数据前都生成一个ReadView。REPEATABLEREAD ——在第一次读取数据时生成一个ReadView</li></ul><ul><li><p>在可重复读隔离级别下，事务在启动的时候就“拍了个快照”。注意，这个快照是基于整库的。</p></li><li><p>按照可重复读的定义，一个事务启动的时候，能够看到所有已经提交的事务结果。但是之后，这个事务执行期间，其他事务的更新对它不可见。因此，一个事务只需要在启动的时候声明说，“以我启动的时刻为准，如果一个数据版本是在我启动之前生成的，就认；如果是我启动以后才生成的，我就不认，我必须要找到的上一个版本”。如果是这个事务自己更新的数据，它自己还是要认的。</p></li><li><p>InnoDB的行数据有多个版本，每个数据版本有自己的rowtrx_id，每个事务或者语句有自己的一致性视图。普通查询语句是一致性读，一致性读会根据rowtrx_id和一致性视图确定数据版本的可见性。对于可重复读，查询只承认在事务启动前就已经提交完成的数据；对于读提交，查询只承认在语句启动前就已经提交完成的数据；而当前读，总是读取已经提交完成的最新版本。</p></li></ul><p>  ​    </p><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="共享锁与排他锁"><a href="#共享锁与排他锁" class="headerlink" title="共享锁与排他锁"></a>共享锁与排他锁</h2><ul><li>共享锁（读锁）：其他事务可以读，但不能写。</li><li>排他锁（写锁） ：其他事务不能读取，也不能写。</li></ul><h2 id="粒度锁"><a href="#粒度锁" class="headerlink" title="粒度锁"></a>粒度锁</h2><p>MyISAM默认使用表级锁，不支持行级锁</p><p>InnoDB默认使用行级锁，支持表级锁</p><p>默认情况下，表锁和行锁都是自动获得的， 不需要额外的命令。</p><p>但是在有的情况下， 用户需要明确地进行锁表或者进行事务的控制， 以便确保整个事务的完整性，这样就需要使用事务控制和锁定语句来完成。</p><ul><li><p>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</p></li><li><ul><li>这些存储引擎通过总是一次性同时获取所有需要的锁以及总是按相同的顺序获取表锁来避免死锁。<ul><li>表级锁更适合于以查询为主，并发用户少，只有少量按索引条件更新数据的应用，如Web 应用</li></ul></li></ul></li><li><p>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p></li><li><ul><li>最大程度的支持并发，同时也带来了最大的锁开销。<ul><li>在 InnoDB 中，除单个 SQL 组成的事务外，锁是逐步获得的，这就决定了在 InnoDB 中发生死锁是可能的。</li><li>行级锁只在存储引擎层实现，而Mysql服务器层没有实现。 行级锁更适合于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线事务处理（OLTP）系统</li></ul></li></ul></li><li><p>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p></li></ul><h2 id="乐观锁、悲观锁"><a href="#乐观锁、悲观锁" class="headerlink" title="乐观锁、悲观锁"></a>乐观锁、悲观锁</h2><ul><li>**乐观锁(Optimistic Lock)**：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。 乐观锁不能解决脏读的问题。</li></ul><p>乐观锁, 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库如果提供类似于write_condition机制的其实都是提供的乐观锁。</p><ul><li>**悲观锁(Pessimistic Lock)**：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。</li></ul><p>悲观锁，顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210206171833981.png" alt="image-20210206171833981"></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210206113508784.png" alt="image-20210206113508784"></p><p>锁设计的初衷是处理并发问题。作为多用户共享的资源，当出现并发访问的时候，数据库需要合理地控制资源的访问规则。</p><h2 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h2><ul><li>Flush tables with read lock (FTWRL)。你需要让整个库处于只读状态的时候。典型使用场景是，做全库逻辑备份。</li></ul><h2 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h2><p>MySQL里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)</p><h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><p>共享锁、排它锁</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210206145740253.png" alt="image-20210206145740253"></p><ul><li>表锁一般是在数据库引擎不支持行锁的时候才会被用到的。</li><li>不支持行锁意味着并发控制只能使用表锁，对于这种引擎的表，同一张表上任何时刻只能有一个更新在执行，这就会影响到业务并发度。</li><li>举个例子, 如果在某个线程A中执行lock tables t1 read, t2 write; 这个语句，则其他线程写t1、读写t2的语句都会被阻塞。同时，线程A在执行unlock tables之前，也只能执行读t1、读写t2的操作。连写t1都不允许，自然也不能访问其他表。</li><li>在还没有出现更细粒度的锁的时候，表锁是最常用的处理并发的方式。</li></ul><h3 id="元数据锁（meta-data-lock）"><a href="#元数据锁（meta-data-lock）" class="headerlink" title="元数据锁（meta data lock）"></a>元数据锁（meta data lock）</h3><p>MDL不需要显式使用，在访问一个表的时候会被自动加上。MDL的作用是，保证读写的正确性。你可以想象一下，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。当对一个表做增删改查操作的时候，加MDL读锁；当要对表做结构变更操作的时候，加MDL写锁。读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查，读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。</p><p>事务中的MDL锁，在语句执行开始时申请，但是语句结束后并不会马上释放，而会等到整个事务提交后再释放。</p><p>解决长事务，事务不提交，就会一直占着MDL锁。</p><p>MDL会直到事务提交才释放，在做表结构变更的时候，你一定要小心不要导致锁住线上查询和更新。</p><h2 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h2><h3 id="两阶段锁协议"><a href="#两阶段锁协议" class="headerlink" title="两阶段锁协议"></a>两阶段锁协议</h3><ul><li>行锁就是针对数据表中行记录的锁。</li><li>行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。</li><li>如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。</li><li>根据两阶段锁协议，不论你怎样安排语句顺序，所有的操作需要的行锁都是在事务提交的时候才释放的。所以，如果你把语句2安排在最后，比如按照3、1、2这样的顺序，那么影院账户余额这一行的锁时间就最少。这就最大程度地减少了事务之间的锁等待，提升了并发度。</li></ul><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul><li>当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。</li><li>例如事务A更新t1，事务B更新t2，事务A要继续更新t2，事务B要继续更新t1</li></ul><h4 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h4><ul><li>直接进入等待，直到超时。</li><li>主动死锁检测：发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。</li><li>每当一个事务被锁的时候，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现了循环等待，也就是死锁。</li><li>每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁，这是一个时间复杂度是O(n)的操作。假设有1000个并发线程要同时更新同一行，那么死锁检测操作就是100万这个量级的。虽然最终检测的结果是没有死锁，但是这期间要消耗大量的CPU资源。因此，你就会看到CPU利用率很高，但是每秒却执行不了几个事务。</li><li>死锁检测要耗费大量的CPU资源。如何解决由这种热点行更新导致的性能问题<ul><li>可以临时把死锁检测关掉。而关掉死锁检测意味着可能会出现大量的超时，这是业务有损的。</li><li>控制并发度，这个并发控制要做在数据库服务端，中间件等。</li></ul></li></ul><h1 id="InnoDB行级锁和表级锁"><a href="#InnoDB行级锁和表级锁" class="headerlink" title="InnoDB行级锁和表级锁"></a>InnoDB行级锁和表级锁</h1><h2 id="行锁-1"><a href="#行锁-1" class="headerlink" title="行锁"></a>行锁</h2><ul><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。</li><li>排他锁（X）：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。</li></ul><p>为了允许行锁和表锁共存，实现多粒度锁机制，InnoDB 还有两种内部使用的意向锁（Intention Locks），这两种意向锁都是<strong>表锁</strong></p><ul><li>意向共享锁（IS）：事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的 IS 锁。</li><li>意向排他锁（IX）：事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的 IX 锁。</li></ul><p><strong>锁模式的兼容情况</strong></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210206175518730.png" alt="image-20210206175518730"></p><p>（如果一个事务请求的锁模式与当前的锁兼容， InnoDB 就将请求的锁授予该事务； 反之， 如果两者不兼容，该事务就要等待锁释放。）</p><h2 id="InnoDB的间隙锁"><a href="#InnoDB的间隙锁" class="headerlink" title="InnoDB的间隙锁"></a>InnoDB的间隙锁</h2><p>当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP)”，InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁（Next-Key锁）。</p><p>很显然，在使用范围条件检索并锁定记录时，InnoDB这种加锁机制会阻塞符合条件范围内键值的并发插入，这往往会造成严重的锁等待。因此，在实际应用开发中，尤其是并发插入比较多的应用，我们要尽量优化业务逻辑，尽量使用相等条件来访问更新数据，避免使用范围条件。</p><p><strong>InnoDB使用间隙锁的目的：</strong></p><ol><li>防止幻读，以满足相关隔离级别的要求；</li><li>满足恢复和复制的需要：</li></ol><p>MySQL 通过 BINLOG 录入执行成功的 INSERT、UPDATE、DELETE 等更新数据的 SQL 语句，并由此实现 MySQL 数据库的恢复和主从复制。MySQL 的恢复机制（复制其实就是在 Slave Mysql 不断做基于 BINLOG 的恢复）有以下特点：</p><p>一是 MySQL 的恢复是 SQL 语句级的，也就是重新执行 BINLOG 中的 SQL 语句。</p><p>二是 MySQL 的 Binlog 是按照事务提交的先后顺序记录的， 恢复也是按这个顺序进行的。</p><p>由此可见，MySQL 的恢复机制要求：在一个事务未提交前，其他并发事务不能插入满足其锁定条件的任何记录，也就是不允许出现幻读。</p><h1 id="事务隔离级别实现方案"><a href="#事务隔离级别实现方案" class="headerlink" title="事务隔离级别实现方案"></a>事务隔离级别实现方案</h1><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p><strong>读操作利用多版本并发控制（MVCC），写操作进行加锁。</strong></p><p>就是通过生成一个ReadView，然后通过ReadView找到符合条件的记录版本（历史版本是由undo日志构建的），其实就像是在生成ReadView的那个时刻</p><p>做了一次时间静止（就像用相机拍了一个快照），查询语句只能读到在生成ReadView之前已提交事务所做的更改，在生成ReadView之前未提交的事务或者之后才开启的事务所做的更改是看不</p><p>到的。而写操作肯定针对的是最新版本的记录，读记录的历史版本和改动记录的最新版本本身并不冲突，也就是采用MVCC时，读-写操作并不冲突。</p><p>普通的SELECT语句在READCOMMITTED和REPEATABLEREAD隔离级别下会使用到MVCC读取记录。在READCOMMITTED隔离级别下，一个事务在执行过程</p><p>中每次执行SELECT操作时都会生成一个ReadView，ReadView的存在本身就保证了事务不可以读取到未提交的事务所做的更改，也就是避免了脏读现象；</p><p>REPEATABLEREAD隔离级</p><p>别下，一个事务在执行过程中只有第一次执行SELECT操作才会生成一个ReadView，之后的SELECT操作都复用这个ReadView，这样也就避免了不可重复读和幻读的问题。</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p><strong>读、写操作都采用加锁的方式。</strong></p><p>如果我们的一些业务场景不允许读取记录的旧版本，而是每次都必须去读取记录的最新版本，比方在银行存款的事务中，你需要先把账户的余额读出来，然后将其加上本次存款的数额，最后 再写到数据库中。在将账户余额读取出来后，就不想让别的事务再访问该余额，直到本次存款事务执行完成，其他事务才可以访问账户的余额。这样在读取记录的时候也就需要对其进行加锁操 作，这样也就意味着读操作和写操作也像写-写操作那样排队执行。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> ACID </tag>
            
            <tag> 事务隔离级别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合基础</title>
      <link href="posts/ca057823.html"/>
      <url>posts/ca057823.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h1><ul><li>HashMap快,TreeMap按照比较结果的升序保存键,LinkedHashMap按照插入顺序保存键,还保留了HashMap的查询速度</li><li>HashSet快,TreeSet按比较结果升序排列,LinkedHashSet按照被添加顺序保存对象</li><li>ArrayList,LinkedList按照被插入的顺序保存元素,使用LinkedList来实现queue,stack</li><li>AbstractCollection是提供Collection部分实现的抽象类</li><li>如果除了在末尾外不能在其他位置插入或者删除元素，那么ArrayList效率更高，如果需要经常插入或者删除元素，就选择LinkedList</li></ul><h1 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h1><ul><li><p>比HashMap多了个线程安全,直接在方法上锁，并发度很低，最多同时允许一个线程访问，效率比较低下</p></li><li><p>HashTable容器使用synchronized来保证线程安全，但在线程竞争激烈的情况下HashTable的效率非常低下。因为当一个线程访问HashTable的同步方法时，其他线程访问HashTable的同步方法时，可能会进入阻塞或轮询状态。如线程1使用put进行添加元素，线程2不但不能使用put方法添加元素，并且也不能使用get方法来获取元素，所以竞争越激烈效率越低。也就是说对于Hashtable而言，synchronized是针对整张Hash表的，即每次锁住整张表让线程独占。相当于所有线程进行读写时都去竞争一把锁，导致效率非常低下。</p></li><li><p>Hashtable 是不允许键或值为 null 的，HashMap 的键值则都可以为 null。</p><ul><li>Hashtable在我们put 空值的时候会直接抛空指针异常，但是HashMap却做了特殊处理。</li><li>Hashtable使用的是安全失败机制（fail-safe），这种机制会使你此次读到的数据不⼀定是最新的数据。</li><li>如果你使⽤null值，就会使得其⽆法判断对应的key是不存在还是为空，因为你⽆法再调⽤一次contain(key）来对key是否存在进⾏判断，ConcurrentHashMap同理。</li><li>HashMap 中，null 可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为 null。但是在 HashTable 中 put 进的键值只要有一个 null，直接抛NullPointerException。</li></ul></li><li><p>初始化容量不同：HashMap 的初始容量为：16，Hashtable 初始容量为：11，两者的负载因子默认都是：0.75。</p></li><li><p>扩容机制不同：当现有容量大于总容量 * 负载因⼦时，HashMap 扩容规则为当前容量翻倍，Hashtable 扩容规则为当前容量翻倍 + 1。</p></li><li><p>迭代器不同：HashMap 中的 Iterator 迭代器是 fail-fast 的，⽽ Hashtable 的 Enumerator 不是 failfast 的</p></li><li><p>HashMap 的 hash 值重新计算过，Hashtable 直接使用 hashCode。</p></li><li><p>HashMap 继承自 AbstractMap 类，Hashtable 继承自 Dictionary 类。</p></li></ul><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul><li>不保证集合顺序</li><li>允许null值</li><li>HashSet 不允许重复的值</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>HashSet的值存放于HashMap的key上，HashMap的value统一为PRESENT</li><li>private transient HashMap&lt;E,Object&gt; map;底层使用HashMap来保存HashSet中所有元素</li><li>private static final Object PRESENT = new Object();定义一个虚拟的Object对象作为HashMap的value，将此对象定义为static final</li><li>add()；添加成功则返回true</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//因为put会返回原Value,如果放入相同的,则返回就不为null</span>    <span class="token comment" spellcheck="true">//则该方法返回false,代表添加不成功,代表已经有了元素</span>    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><p>红黑树</p><h2 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h2><ul><li>LinkedHashSet 内部是通过 LinkedHashMap 来实现的。</li><li>继承HashSet</li><li>LinkedHashSet的构造器调用父类HashSet的其中一个构造器，将map初始化为LinkedHashMap,所以再调用方法时,就会有LinkedHashMap的调用效果</li><li>用双向链表维持元素的插入顺序</li><li>重新插入时不会影响顺序</li></ul><h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><h2 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ul><li>push(E e)，调用addFirst(e);</li><li>pop()，调用removeFirst();</li><li>peek()，获取首部元素</li></ul><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ul><li>offer(E e)，调用linkLast(e)</li><li>poll()，获取并删除首部元素</li><li>peek()，获取首部元素</li></ul><h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><ul><li>是一个队列，在进行检索或移除一个元素的时候，它会等待队列变为非空；当在添加一个元素时，它会等待队列中的可用空间。</li><li>主要用于实现生产者-消费者模式。</li><li>ArrayBlockingQueue、LinkedBlockingQueue、PriorityBlockingQueue,、SynchronousQueue等</li></ul><h1 id="集合安全"><a href="#集合安全" class="headerlink" title="集合安全"></a>集合安全</h1><ul><li>提供了包装器工厂方法(例如Collections.synchronizedList等).他们将容器类封装在一个同步的包装器对象中,而包装器能将接口中的每个方法都实现为同步方法,并将调用请求转发到底层的容器对象中,使得每次只有一个线程能访问容器的状态</li><li>CopyOnWriteArrayList、CopyOnWriteArraySet、ConcurrentHashMap、ConcurrentSkipListMap、ConcurrentSkipListSet、ArrayBlockingQueue、LinkedBlockingQueue、ConcurrentLinkedQueue、ConcurrentLinkedDeque</li><li>同步容器类是线程安全的,但复合操作仍然需要额外的客户端加锁来保护,例如迭代</li><li>尽管Vector线程安全,仍然需要用synchronized保护复合操作</li></ul><h2 id="Collections-synchronizedMap-Map"><a href="#Collections-synchronizedMap-Map" class="headerlink" title="Collections.synchronizedMap(Map)"></a>Collections.synchronizedMap(Map)</h2><ul><li>在SynchronizedMap内部维护了⼀个普通对象Map，还有排斥锁mutex</li><li>我们在调⽤这个⽅法的时候就需要传⼊⼀个Map，可以看到有两个构造器，如果你传⼊了mutex参数，则将对象排斥锁赋值为传⼊的对象。如果没有，则将对象排斥锁赋值为this，即调⽤synchronizedMap的对象，就是上⾯的Map</li><li>创建出synchronizedMap之后，再操作map的时候，就会对⽅法上锁</li></ul><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><ul><li>写时复制容器,往一个容器中添加元素的时候,不直接往当前容器的<code>Object[]</code>添加,而是将当前容器<code>Object[]</code>进行<code>Copy</code>,复制出一个新的<code>Object[] newElements</code>,然后往新的<code>newElements</code>中添加元素<code> setArray(newElements)</code></li><li>可以对<code>CopyOnWrite</code>容器进行并发的读而不需要加锁,因为当前容器不会添加任何元素</li><li>是一种读写分离的思想,读和写不同的元素,适用于读多写少</li><li>最后再将原容器的引用指向新的容器</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拷贝一份进行写操作</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通知系统写完成</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放锁</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="迭代器机制"><a href="#迭代器机制" class="headerlink" title="迭代器机制"></a>迭代器机制</h1><ul><li>用迭代器来表示容器之间的共性,实现Collection就意味着需要提供iterator()方法,因为Collection继承了Iterable接口</li><li>创建了任何实现Iterable接口的类,都可以用于foreach语句中</li><li>数组也能使用foreach,但是不存在任何从数组到Iterable的自动转换</li></ul><h2 id="快速失败（fail-fast）"><a href="#快速失败（fail-fast）" class="headerlink" title="快速失败（fail-fast）"></a>快速失败（fail-fast）</h2><ul><li><p>快速失败（fail—fast）是java集合中的一种机制，在用迭代器遍历一个集合对象时，如果遍历过程中有另一个线程对集合对象的内容进行了修改,则会抛出ConcurrentModificationException</p></li><li><p>迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 modCount变量。集合在被遍历期间如果内容发生变化，就会改变modCount的值。</p></li><li><p>每当迭代器使用hashNext()/next()遍历下一个元素之前，都会检测modCount变量是否为expectedModCount值，是的话就返回遍历；否则抛出异常，终止遍历。</p></li><li><p>java.util包下的集合类都是快速失败的，不能在多线程下发生并发修改（迭代过程中被修改）</p></li><li><p>隐式的迭代器,就是没有显示调用,但是也用到了迭代器，例如直接打印集合System.out.println(set)</p></li><li><p>会快速失败的方法：put(),remove(),clear(),resize()</p></li><li><p>解决办法</p><ul><li>在遍历过程中，所有涉及到改变modCount值得地方全部加上synchronized</li><li>使用 Collections. unmodifiableCollection(Collection c) 方法来创建一个只读集合，这样改变集合的任何操作都会抛出 Java. lang. UnsupportedOperationException 异常。</li><li>如果不希望在迭代过程中加锁,可以选择克隆容器,并在副本上进行迭代,但是克隆时还是要对容器进行加锁</li><li>List<String> list=Collections.synchronizedList(new ArrayList&lt;&gt;());</li><li>List<String> list = new CopyOnWriteArrayList&lt;&gt;(); //写时复制 </li></ul></li></ul><h2 id="安全失败（fail—safe）"><a href="#安全失败（fail—safe）" class="headerlink" title="安全失败（fail—safe）"></a>安全失败（fail—safe）</h2><ul><li>fail-safe允许在遍历的过程中对容器中的数据进行修改</li><li>这种遍历基于容器的一个克隆。因此，对容器内容的修改不影响遍历</li><li>java.util.concurrent包下的容器都是安全失败的,可以在多线程下并发使用,并发修改。</li><li>常见的的使用fail-safe方式遍历的容器有ConcerrentHashMap和CopyOnWriteArrayList</li><li>采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。由于迭代时是对原集合的拷贝进行遍历，所以在遍历过程中对原集合所作的修改并不能被迭代器检测到，所以不会触发Concurrent Modification Exception。</li><li>基于拷贝内容的优点是避免了Concurrent Modification Exception，但同样地，迭代器并不能访问到修改后的内容，即：迭代器遍历的是开始遍历那一刻拿到的集合拷贝，在遍历期间原集合发生的修改迭代器是不知道的。</li><li>所得到的Iterator中的elements只是CopyOnWriteArrayList中array的拷贝，当对CopyOnWriteArrayList中array操作时并不会影响到Iterator中的elements，因此永远都不会抛出安全失败的异常。但也是因为这个，无法保证读取的数据是目前原始数据结构中的数据。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> 迭代器 </tag>
            
            <tag> CopyOnWriteArrayList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL日志相关</title>
      <link href="posts/5d40a06.html"/>
      <url>posts/5d40a06.html</url>
      
        <content type="html"><![CDATA[<h1 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h1><ul><li>WAL技术(Write Ahead Logging)：先写日志,再写磁盘</li><li>是循环写的，写到末尾就又回到开头循环写。空间固定会用完</li><li>crash-safe：保证即使数据库发生异常重启，之前提交的记录不会丢失</li><li>InnoDB引擎特有的日志</li><li>主要用于系统崩溃后恢复</li><li>是物理日志，记录的是“在某个数据页上做了什么修改”</li><li>设置参数可以让每次事务的redo log都直接持久化到磁盘</li></ul><p>对于一个已经提交的事务，在事务提交后即使系统发生了崩溃，这个事务对数据库中所做的更改也不能丢失。那么如何保证持久性？</p><p>一个很简单的做法就是在事务提交完成之前把该事务所修改的所有页面都刷新到磁盘。问题是刷新一个完整的数据页太浪费、随机IO刷起来比较慢。</p><p>如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程IO成本、查找成本都很高。</p><p>既然我们只是想让已经提交了的事务对数据库中数据所做的修改永久生效，即使后来系统崩溃，在重启后也能把这种修改恢复出来。只需要把修改了哪些东西记录一下就好</p><p>这样我们在事务提交时，把上述内容刷新到磁盘中，即使之后系统崩溃了，重启之后只要按照上述内容所记录的步骤重新更新一下数据页，那么该事务对数据库中所</p><p>做的修改又可以被恢复出来，也就意味着满足持久性的要求。因为在系统崩溃重启时需要按照上述内容所记录的步骤重新更新数据页，所以上述内容也被称之为重做日志，英文名为redo log</p><p>优点</p><p>redo日志占用的空间非常小、redo日志是顺序写入磁盘的</p><h1 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h1><ul><li><p>是MySQL的Server层实现的，所有引擎都可以使用</p></li><li><p>只能用于归档</p></li><li><p>是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID=2这一行的c字段加1 ”</p></li><li><p>binlog是可以追加写入的。“追加写”是指binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。binlog会记录所有的逻辑操作</p></li><li><p>主要用于备份日志</p></li><li><p>扩容：用全量备份加上应用binlog实现，如果没有两阶段提交，这个“不一致”就会导致你的线上出现主从数据库不一致的情况</p></li><li><p>设置参数可以让每次事务的binlog都持久化到磁盘。</p></li><li><p>就会发现在正式的生产库上，binlog都是开着的。因为binlog有着redo log无法替代的功能.一个是归档。redo log是循环写，写到末尾是要回到开头继续写的。这样历史日志没法保留，redo log也就起不到归档的作用。一个就是MySQL系统依赖于binlog。binlog作为MySQL一开始就有的功能，被用在了很多地方。其中，MySQL系统高可用的基础，就是binlog复制。</p></li></ul><h1 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h1><ul><li>事务回滚的需求</li><li>把回滚时所需的东西都给记下</li></ul><h1 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h1><ul><li>将redo log的写入拆成了两个步骤：prepare和commit，这就是”两阶段提交”。</li><li>redo log和binlog都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。</li><li>如果不使用“两阶段提交”，那么数据库的状态就有可能和用它的日志恢复出来的库的状态不一致。</li><li>两阶段提交是跨系统维持数据逻辑一致性时常用的一个方案</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> redo日志 </tag>
            
            <tag> undo日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL慢查询与优化</title>
      <link href="posts/1cb7ab34.html"/>
      <url>posts/1cb7ab34.html</url>
      
        <content type="html"><![CDATA[<h1 id="如何定位并优化慢查询SQL"><a href="#如何定位并优化慢查询SQL" class="headerlink" title="如何定位并优化慢查询SQL"></a>如何定位并优化慢查询SQL</h1><h2 id="根据慢日志定位查询sql"><a href="#根据慢日志定位查询sql" class="headerlink" title="根据慢日志定位查询sql"></a>根据慢日志定位查询sql</h2><pre class=" language-mysql"><code class="language-mysql">SHOW VARIABLES LIKE 'slow_query_log'; //查看慢查询日志是否打开SHOW VARIABLES LIKE 'slow_query_log_file';//查看慢查询日志位置SHOW VARIABLES LIKE 'long_query_time';//多慢会记录到慢查询日志show status like '%slow_queries%';//有多少条慢查询日志 只是本次连接的//重启服务器则会失效，需要改配置文件//需要重新连接数据库set global slow_query_log = on;set global long_query_time = 1;</code></pre><h2 id="使用explain分析sql"><a href="#使用explain分析sql" class="headerlink" title="使用explain分析sql"></a>使用explain分析sql</h2><p>一条查询语句在经过MySQL查询优化器的各种基于成本和规则的优化会后生成一个所谓的执行计划，这个执行计划展示了接下来具体执行查询的方式，比如多表连接的顺序是什么，对于每个表采用什么访问方法来具体执行查询等等。提供了EXPLAIN语句来帮助我们查看某个查询语句的具体执行计划，从而可以有针对性的提升我们查询语句的性能。</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210218170118879.png" alt="image-20210218170118879"></p><p>EXPLAIN语句输出的每条记录都对应着某个单表的访问方法，该条记录的 table列代表着该表的表名</p><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><ul><li><p>在一个大的查询语句中每个SELECT关键字都对应一个唯一的id</p></li><li><p>查询语句中每出现一个SELECT关键字，就会为它分配一个唯一的id值。</p></li><li><p>对于连接查询来说，一个SELECT关键字后边的FROM子句中可以跟随多个表，所以在连接查询的执行计划中，每个表都会对应一条记录，但是这些记录的id值都是相同的</p></li><li><p>在连接查询的执行计划中，每个表都会对应一条记录，这些记录的id列的值是相同的，出现在前边的表表示驱动表，出现在后边的表表示被驱动表</p><p>  <img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210218170813309.png" alt="image-20210218170813309"></p></li></ul><h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><p>SELECT关键字对应的那个查询的类型</p><p>查询语句中不包含UNION或者子查询的查询都算作是SIMPLE类型</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210218170932915.png" alt="image-20210218170932915"></p><p>对于包含UNION、UNION ALL或者子查询的大查询来说，它是由几个小查询组成的，其中最左边的那个查询的select_type值就是PRIMARY</p><h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><p>表名</p><h3 id="partitions"><a href="#partitions" class="headerlink" title="partitions"></a>partitions</h3><p>匹配的分区信息</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>着MySQL对某个表的执行查询时的访问方法</p><ul><li>system 当表中只有一条记录并且该表使用的存储引擎的统计数据是精确的，比如MyISAM、Memory，那么对该表的访问方法就是system</li><li>const 当我们根据主键或者唯一二级索引列与常数进行等值匹配时，对单表的访问方法就是const</li><li>eq_ref 在连接查询时，如果被驱动表是通过主键或者唯一二级索引列等值匹配的方式进行访问</li><li>ref 当通过普通的二级索引列与常量进行等值匹配时来查询某个表，那么对该表的访问方法就可能是ref</li><li>range 如果使用索引获取某些范围区间的记录，那么就可能使用到range访问方法</li><li>index 当我们可以使用索引覆盖，但需要扫描全部的索引记录时，该表的访问方法就是index</li><li>ALL 最熟悉的全表扫描</li></ul><h3 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h3><p>表示在某个查询语句中，对某个表执行单表查询时可能用到的索引有哪些</p><p>possible_keys列中的值并不是越多越好，可能使用的索引越多，查询优化器计算查询成本时就得花费更长时间，所以如果可以的话，尽量删除那些用不到的索引。</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>key列表示实际用到的索引有哪些</p><h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h3><p>key_len列表示当优化器决定使用某个索引执行查询时，该索引记录的最大长度</p><p>它是由这三个部分构成的：</p><ul><li>对于使用固定长度类型的索引列来说，它实际占用的存储空间的最大长度就是该固定值，对于指定字符集的变长类型的索引列来说，比如某个索引列的类型是VARCHAR(100)，使用的字符集是utf8， 那么该列实际占用的最大存储空间就是100 × 3 = 300个字节。 </li><li>如果该索引列可以存储NULL值，则key_len比不可以存储NULL值时多1个字节。 </li><li>对于变长字段来说，都会有2个字节的空间来存储该变长列的实际长度。</li></ul><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>当使用索引列等值查询时，与索引列进行等值匹配的对象信息 </p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210218173701880.png" alt="image-20210218173701880"></p><h3 id="rows-预估的需要读取的记录条数"><a href="#rows-预估的需要读取的记录条数" class="headerlink" title="rows 预估的需要读取的记录条数"></a>rows 预估的需要读取的记录条数</h3><p>如果查询优化器决定使用全表扫描的方式对某个表执行查询时，执行计划的rows列就代表预计需要扫描的行数，如果使用索引来执行查询时，执行计划的rows列就代表预计扫描的索引记录行数。</p><h3 id="filtered-某个表经过搜索条件过滤后剩余记录条数的百分比"><a href="#filtered-某个表经过搜索条件过滤后剩余记录条数的百分比" class="headerlink" title="filtered 某个表经过搜索条件过滤后剩余记录条数的百分比"></a>filtered 某个表经过搜索条件过滤后剩余记录条数的百分比</h3><p>如果使用的是全表扫描的方式执行的单表查询，那么计算驱动表扇出时需要估计出满足搜索条件的记录到底有多少条。 </p><p>如果使用的是索引执行的单表扫描，那么计算驱动表扇出的时候需要估计出满足除使用到对应索引的搜索条件外的其他搜索条件的记录有多少条。 </p><h3 id="Extra-一些额外的信息"><a href="#Extra-一些额外的信息" class="headerlink" title="Extra 一些额外的信息"></a>Extra 一些额外的信息</h3><p>我们可以通过这些额外信息来更准确的理解MySQL到底将如何执行给定的查询语句。</p><p><strong>Using index</strong> </p><p>当我们的查询列表以及搜索条件中只包含属于某个索引的列，也就是在可以使用索引覆盖的情况下，在Extra列将会提示该额外信息。比方说下边这个查询中只需要用到idx_key1而不需要回表操作：</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210218180232658.png" alt="image-20210218180232658"></p><p><strong>Using where</strong></p><p>当我们使用全表扫描来执行对某个表的查询，并且该语句的WHERE子句中有针对该表的搜索条件时，在Extra列中会提示上述额外信息。</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210218180202646.png" alt="image-20210218180202646"></p><h2 id="尽量让sql走索引"><a href="#尽量让sql走索引" class="headerlink" title="尽量让sql走索引"></a>尽量让sql走索引</h2><h1 id="特殊优化"><a href="#特殊优化" class="headerlink" title="特殊优化"></a>特殊优化</h1><h2 id="自增id用完"><a href="#自增id用完" class="headerlink" title="自增id用完"></a>自增id用完</h2><ul><li>下次插入拿到相同的自增id值，再试图执行插入语句，报主键冲突错误。</li><li>达到上限则应该建成8个字节的bigint unsigned。</li></ul><h2 id="count"><a href="#count" class="headerlink" title="count(*)"></a>count(*)</h2><ul><li><p>而InnoDB引擎需要把数据一行一行地从引擎里面读出来，然后累积计数。</p></li><li><p>是因为即使是在同一个时刻的多个查询，由于多版本并发控制（MVCC）的原因，InnoDB表“应该返回多少行”也是不确定的。所以InnoDB不跟MyISAM一样，也把数字存起来</p></li><li><p>可重复读是它默认的隔离级别，在代码上就是通过多版本并发</p><p>  控制，也就是MVCC来实现的。每一行记录都要判断自己是否对这个会话可见，因此对于count(*)请求来说，InnoDB只好把数据一行一行地读出依次判断，可见的行才能够用于计算“基于这个查询”的表的总行数。</p></li><li><p>InnoDB是索引组织表，主键索引树的叶子节点是数据，而普通索引树的叶子节点是主键值。所以，普通索引树比主键索引树小很多。对于count(*)这样的操作，遍历哪个索引树得到的结果逻辑上都是一样的。因此，MySQL优化器会找到最小的那棵树来遍历。在保证逻辑正确的前提下，尽量减少扫描的数据量，是数据库系统设计的通用法则之一。</p></li><li><p>count()是一个聚合函数，对于返回的结果集，一行行地判断，如果count函数的参数不是NULL，累计值就加1，否则不加。最后返回累计值。</p></li><li><p>所以，count(*)、count(主键id)和count(1) 都表示返回满足条件的结果集的总行数；而count(字段），则表示返回满足条件的数据行里面，参数“字段”不为NULL的总个数。</p></li></ul><h3 id="性能差别"><a href="#性能差别" class="headerlink" title="性能差别"></a>性能差别</h3><ul><li>server层要什么就给什么、InnoDB只给必要的值</li><li>现在的优化器只优化了count(*)的语义为“取行数”，其他“显而易见”的优化并没有做。</li><li><code>按照效率排序的话，count(字段)&lt;count(主键id)&lt;count(1)≈count(*)，尽量使用count(*)。</code></li><li>对于count(主键id)来说，InnoDB引擎会遍历整张表，把每一行的id值都取出来，返回给server层。server层拿到id后，判断是不可能为空的，就按行累加。</li><li>对于count(1)来说，InnoDB引擎遍历整张表，但不取值。server层对于返回的每一行，放一个数字“1”进去，判断是不可能为空的，按行累加。</li><li>count(字段)。如果这个“字段”是定义为not null的话，一行行地从记录里面读出这个字段，判断不能为null，按行累加；如果这个“字段”定义允许为null，那么执行的时候，判断到有可能是null，还要把值取出来再判断一下，不是null才累加。</li><li>但是<code>count(*)</code>是例外，并不会把全部字段取出来，而是专门做了优化，不取值。count(*)肯定不是null，按行累加。</li></ul><h2 id="MySQL抖一下"><a href="#MySQL抖一下" class="headerlink" title="MySQL抖一下"></a>MySQL抖一下</h2><ul><li>当内存数据页跟磁盘数据页内容不一致的时候，我们称这个内存页为“脏页”。内存数据写入到磁盘后，内存和磁盘上的数据页的内容就一致了，称为“干净页”。</li><li>MySQL偶尔“抖”一下的那个瞬间，可能就是在刷脏页（flush）。</li><li>对应的就是InnoDB的redo log写满了。这时候系统会停止所有更新操作，把checkpoint往前推进，redo log留出空间可以继续写。要flush脏页    这种情况是InnoDB要尽量避免的。因为出现这种情况的时候，整个系统就不能再接受更新了，所有的更新都必须堵住。如果你从监控上看，这时候更新数会跌为0。</li><li>系统内存不足。当需要新的内存页，而内存不够用的时候，就要淘汰一些数据页，空出内存给别的数据页使用。如果淘汰的是“脏页”，就要先将脏页写到磁盘。如果刷脏页一定会写盘，就保证了每个数据页有两种状态：<ul><li>一种是内存里存在，内存里就肯定是正确的结果，直接返回；</li><li>另一种是内存里没有数据，就可以肯定数据文件上是正确的结果，读入内存后返回。这样的效率最高。</li></ul></li><li>对应的就是MySQL认为系统“空闲”的时候。见缝插针地找时间，只要有机会就刷一点“脏页”。</li><li>对应的就是MySQL正常关闭的情况。这时候，MySQL会把内存的脏页都flush到磁盘上，这样下次MySQL启动的时候，就可以直接从磁盘上读数据，启动速度会很快。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 慢SQL </tag>
            
            <tag> explain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础知识</title>
      <link href="posts/9d61f8d3.html"/>
      <url>posts/9d61f8d3.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL设计"><a href="#MySQL设计" class="headerlink" title="MySQL设计"></a>MySQL设计</h1><ul><li>存储管理</li><li>缓存机制</li><li>SQL解析</li><li>日志管理</li><li>权限划分</li><li>容灾机制</li><li>索引管理</li><li>锁管理</li></ul><h1 id="MySQL各种引擎的区别"><a href="#MySQL各种引擎的区别" class="headerlink" title="MySQL各种引擎的区别"></a>MySQL各种引擎的区别</h1><h2 id="MyISAM存储引擎"><a href="#MyISAM存储引擎" class="headerlink" title="MyISAM存储引擎"></a>MyISAM存储引擎</h2><p>插入数据快，空间和内存使用比较低。如果表主要是用于插入新记录和读出记录，那么选择MyISAM能实现处理高效率。如果应用的完整性、并发性要求比较低，也可以使用。如果数据表主要用来插入和查询记录，则MyISAM引擎能提供较高的处理效率</p><ul><li>适用频繁执行全表count语句，因为InnoDB没有存储的字段</li><li>对数据进行增删改的频率不高，查询非常频繁</li><li>没有事务</li></ul><h2 id="InnoDB存储引擎"><a href="#InnoDB存储引擎" class="headerlink" title="InnoDB存储引擎"></a>InnoDB存储引擎</h2><p>支持事务处理，支持外键，支持崩溃修复能力和并发控制。如果需要对事务的完整性要求比较高（比如银行），要求实现并发控制（比如售票），那选择InnoDB有很大的优势。如果需要频繁的更新、删除操作的数据库，也可以选择InnoDB，因为支持事务的提交（commit）和回滚（rollback）。</p><ul><li>增删改查都相当频繁</li><li>对可靠性要求高</li></ul><h2 id="MEMORY存储引擎"><a href="#MEMORY存储引擎" class="headerlink" title="MEMORY存储引擎"></a>MEMORY存储引擎</h2><p>所有的数据都在内存中，数据的处理速度快，但是安全性不高。如果需要很快的读写速度，对数据的安全性要求较低，可以选择MEMOEY。它对表的大小有要求，不能建立太大的表。所以，这类数据库只使用在相对较小的数据库表。如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存中的Memory引擎，MySQL中使用该引擎作为临时表，存放查询的中间结果</p><p>默认情况下，MEMORY数据表使用散列索引，利用这种索引进行“相等比较”非常快，但是对“范围比较”的速度就慢多了。因此，散列索引值适合使用在”=”和”&lt;=&gt;”的操作符中，不适合使用在”&lt;”或”&gt;”操作符中，也同样不适合用在order by字句里。如果确实要使用”&lt;”或”&gt;”或betwen操作符，可以使用btree索引来加快速度。</p><h2 id="MyISAM和InnoDB区别"><a href="#MyISAM和InnoDB区别" class="headerlink" title="MyISAM和InnoDB区别"></a>MyISAM和InnoDB区别</h2><p>MyISAM是MySQL的默认数据库引擎（5.5版之前）。虽然性能极佳，⽽且提供了⼤量的特性，包括全文索引、压缩、空间函数等，但MyISAM不支持事务和行级锁，而且最大的缺陷就是崩溃后无法安全恢复。</p><p>5.5版本之后，MySQL引入了InnoDB（事务性数据库引擎），MySQL 5.5版本后默认的存储引擎为 InnoDB。 </p><p>大多数时候我们使⽤的都是 InnoDB 存储引擎，但是在某些情况下使⽤ MyISAM 也是合适的比如读密集的情况下。（如果你不介意 MyISAM 崩溃恢复问题的话）。</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210206075525367.png" alt="image-20210206075525367"></p><h1 id="MySQL服务器"><a href="#MySQL服务器" class="headerlink" title="MySQL服务器"></a>MySQL服务器</h1><h2 id="Server层"><a href="#Server层" class="headerlink" title="Server层"></a>Server层</h2><h3 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h3><ul><li>连接器负责跟客户端建立连接、获取权限、维持和管理连接。</li><li>经过TCP握⼿，然后身份验证</li><li>长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。</li><li>短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。</li><li>建立连接的过程通常是比较复杂的，尽量使用长连接。</li><li>通过执行mysql_reset_connection来重新初始化连接资源。将连接恢复到刚刚创建完时的状态。避免长连接累积导致内存占用太大</li></ul><h3 id="查询缓存（通常不用）"><a href="#查询缓存（通常不用）" class="headerlink" title="查询缓存（通常不用）"></a>查询缓存（通常不用）</h3><ul><li>两次查询任何字符不同都会失效</li><li>只要有对一个表的更新，这个表上所有的查询缓存都会被清空</li><li>查询缓存的命中率会非常低</li></ul><h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><h4 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h4><p>你的语句有这么多单词、空格，MySQL就需要识别每个字符串所代表的是什么，是关键字，还是表名，还是列名等等。</p><h4 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h4><p>根据词法分析的结果，语法分析会判断你sql的对错，错了会提醒你的，并且会提</p><p>示你哪⾥错了。</p><h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><ul><li><p>执行计划</p></li><li><p>EXPLAIN</p></li><li><p>要确认使用哪个索引，⽐如使⽤你的主键索引，联合索引还是什么索引更好。而优化器选择索引的目的，是找到一个最优的执行方案，并用最小的代价去执行语句。在数据库里面，扫描行数是影响执行代价的因素之一。扫描的行数越少，意味着访问磁盘数据的次数越少，消耗的CPU资源越少。</p></li><li><p>根据统计信息来估算记录数。这个统计信息就是索引的“区分度”。显然，一个索引上不同的值越多，这个索引的区分度就越好。而一个索引上不同的值的个数，我们称之为“基数”（cardinality）。</p></li><li><p>采样统计得到索引的基数：默认会选择N个数据页，统计这些页面上的不同值，得到一个平均值，然后乘以这个索引的页面数，就得到了这个索引的基数。使用普通索引需要把回表的代价算进去</p></li><li><p>是对执行顺序进⾏优化，条件那么多，先查哪个表，还是先关联，会出现很多⽅案，最后由优化器决定选用哪种方案。</p></li></ul><h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><ul><li>检查权限</li><li>调用存储引擎</li></ul><h2 id="存储引擎层"><a href="#存储引擎层" class="headerlink" title="存储引擎层"></a>存储引擎层</h2><ul><li><p>InnoDB：具备外键支持功能的事务存储引擎，默认的存储引擎</p></li><li><p>Memory：置于内存的表</p></li><li><p>MyISAM：主要的非事务处理存储引擎</p></li></ul><h1 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h1><p><strong>闭包</strong></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210206085950120.png" alt="image-20210206085950120"></p><p><strong>超码</strong></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210206090053252.png" alt="image-20210206090053252"></p><p><strong>函数依赖</strong></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210206090123972.png" alt="image-20210206090123972"></p><p><strong>超码superkey</strong></p><ul><li>可能包含无关属性</li><li>超码的任意超集也是超码。</li><li>一张表（一个关系）一定有超码，因为至少所有属性的组合一定是超码，能唯一确定一个元组</li><li>不唯一</li></ul><p><strong>候选码candidate key</strong></p><ul><li>是超码的一个子集</li><li>任意真子集都不可能是超码，候选码就是最小的超码</li><li>没有无关属性</li><li>不唯一</li></ul><p><strong>主码primary key</strong></p><ul><li>是候选码之一</li><li>唯一或没有</li><li>由数据库设计者指定，不指定的话表就没有主码</li></ul><h2 id="第一范式（1NF"><a href="#第一范式（1NF" class="headerlink" title="第一范式（1NF)"></a>第一范式（1NF)</h2><p>一个关系模式R中的所有属性的域都是原子的（该域的元素是不可再分单元）</p><ul><li>第一范式是对关系模式的最起码的要求，不满足第一范式的数据库模式不能称为关系数据库</li><li>强调的是<strong>列的原子性</strong>，即列不能够再分成其他几列。 </li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>考虑这样一个表：【联系人】（姓名，性别，电话） </p><p>如果在实际场景中，一个联系人有家庭电话和公司电话，那么这种表结构设计就没有达到 1NF。要符合 1NF 我们只需把列（电话）拆分，即：【联系人】（姓名，性别，家庭电话，公司电话）</p><h2 id="第二范式（2NF"><a href="#第二范式（2NF" class="headerlink" title="第二范式（2NF)"></a>第二范式（2NF)</h2><p>若关系模式R∈1NF，并且每一个非主属性都完全依赖于R的主码，则R∈2NF。</p><p>所谓完全依赖是指不能存在仅依赖主关键字一部分的属性</p><ul><li>满足1NF</li><li>表必须有主键</li><li>没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。 </li></ul><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><table><thead><tr><th>学号</th><th>课程</th><th>成绩</th><th>课程学分</th></tr></thead><tbody><tr><td>10001</td><td>数学</td><td>100</td><td>6</td></tr><tr><td>10001</td><td>语文</td><td>90</td><td>2</td></tr><tr><td>10001</td><td>英语</td><td>85</td><td>3</td></tr><tr><td>10002</td><td>数学</td><td>90</td><td>6</td></tr><tr><td>10003</td><td>数学</td><td>99</td><td>6</td></tr><tr><td>10004</td><td>语文</td><td>89</td><td>2</td></tr></tbody></table><p>表中主键为 （学号，课程），我们可以表示为 (学号，课程) -&gt; (成绩，课程学分)， 表示所有非主键列 (成绩，课程学分)都依赖于主键 (学号，课程)。 但是，表中还存在另外一个依赖：（课程）-&gt;(课程学分）。这样非主键列 ‘课程学分‘ 依赖于部分主键列 ’课程‘， 所以上表是不满足第二范式的。</p><p>拆分为<strong>学生选课表</strong>、 <strong>课程信息表</strong></p><h2 id="第三范式（3NF"><a href="#第三范式（3NF" class="headerlink" title="第三范式（3NF)"></a>第三范式（3NF)</h2><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210206091536431.png" alt="image-20210206091536431"></p><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p>满足第二范式，并且表中的列不存在对非主键列的传递依赖。</p><table><thead><tr><th align="left">学号</th><th align="left">姓名</th><th align="left">性别</th><th align="left">班级</th><th align="left">班主任</th></tr></thead><tbody><tr><td align="left">10001</td><td align="left">张三</td><td align="left">男</td><td align="left">一班</td><td align="left">小王</td></tr><tr><td align="left">10002</td><td align="left">李四</td><td align="left">男</td><td align="left">一班</td><td align="left">小王</td></tr><tr><td align="left">10003</td><td align="left">王五</td><td align="left">男</td><td align="left">二班</td><td align="left">小李</td></tr><tr><td align="left">10004</td><td align="left">张小三</td><td align="left">男</td><td align="left">二班</td><td align="left">小李</td></tr></tbody></table><p>主键为：（学号），所有字段 （姓名，性别，班级，班主任）都依赖与主键（学号），不存在对主键的部分依赖。所以是满足第二范式。</p><p>虽然满足第二范式，所有字段都依赖主键（学号），但是，表中存在一个传力依赖，(学号）-&gt;(班级）-&gt;（班主任）。也就是说，（班主任）这个非主键列依赖与另外一个非主键列 （班级）。所以不符合第三范式。</p><p>拆分为：<strong>学生信息表</strong>、<strong>班级信息表</strong></p><h2 id="BC范式（BCNF"><a href="#BC范式（BCNF" class="headerlink" title="BC范式（BCNF)"></a>BC范式（BCNF)</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210206085215574.png" alt="image-20210206085215574"></p><h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210206091108929.png" alt="image-20210206091108929"></p><p><strong>问题：</strong></p><p>先新增加一个仓库，但尚未存放任何物品，是否可以为该仓库指派管理员？——不可以，因为物品名也是主属性，根据实体完整性的要求，主属性不能为空。</p><p>某仓库被清空后，需要删除所有与这个仓库相关的物品存放记录，会带来什么问题？——仓库本身与管理员的信息也被随之删除了。</p><p>如果某仓库更换了管理员，会带来什么问题？——这个仓库有几条物品存放记录，就要修改多少次管理员信息。</p><p>仓库名——》管理员</p><p>管理员——》仓库名</p><p>仓库名、物品名——》数量</p><p>管理员、物品名——》数量</p><p>候选码：（管理员、物品名）、（仓库名、物品名）</p><p>符合第三范式：管理员包含在候选码中</p><p>但是不符合BC范式</p><p><strong>拆分为：</strong></p><p>仓库（仓库名，管理员）</p><p>库存（仓库名，物品名，数量）</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 存储引擎 </tag>
            
            <tag> 三大范式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel</title>
      <link href="posts/1408c19.html"/>
      <url>posts/1408c19.html</url>
      
        <content type="html"><![CDATA[<h1 id="Sentinel简介"><a href="#Sentinel简介" class="headerlink" title="Sentinel简介"></a>Sentinel简介</h1><p>Sentinel（哨岗、哨兵）是<strong>Redis的高可用性（high availability）解决方案：</strong>由一个或多个Sentinel实例（instance）组成的Sentinel系统（system）可以<strong>监视任意多个</strong>主服务器，以及这些主服务器属下的所有从服务器，并在被监视的<strong>主服务器进入下线状态时</strong>，自动将下线主服务器属下的某个从服务器<strong>升级为新的主服务器</strong>，然后由新的主服务器代替已下线的主服务器继续处理命令请求</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201213815316.png" alt="img"></p><ul><li>根据上面的图片，假设这时，主服务器server1进入下线状态，那么从服务器server2、server3、server4对 主服务器的复制操作将被中止，并且Sentinel系统会察觉到server1已下线，如下图所示（下线的服务器用虚线表示）</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201214010487.png" alt="img"></p><ul><li><p>当server1的<strong>下线时长超过用户设定的下线时长上限时</strong>，Sentinel系统就会对server1执行<strong>故障转移</strong></p><p>  操作：</p><ul><li>首先，Sentinel系统会挑选server1属下的其中一个从服务器，并将这个被选中的从服务器升级为新的主服务器</li><li>之后，Sentinel系统会向server1属下的所有从服务器发送新的复制指令，让它们成为新的主服务器的从服务器，当所有从服务器都开始复制新的主服务器时，故障转移操作执行完毕</li><li>另外，Sentinel还会继续监视已下线的server1，并在它重新上线时，将它设置为新的主服务器的从服务器</li></ul></li><li><p>举个例子，下图展示了Sentinel系统<strong>将server2升级为新的主服务器</strong>，并让服务器server3和server4成为server2的从服务器的过程</p></li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201214149843.png" alt="img"></p><ul><li>之后，如果server1<strong>重新上线的话</strong>，它将被Sentinel系统<strong>降级为server2的从服务器</strong>，如下图所示：</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201214154597.png" alt="img"></p><h1 id="启动并初始化Sentinel"><a href="#启动并初始化Sentinel" class="headerlink" title="启动并初始化Sentinel"></a>启动并初始化Sentinel</h1><p>启动<code>Sentinel</code>会执行以下操作：</p><ol><li>初始化服务器</li><li>将普通Redis服务器使用的代码替换成<code>Sentinel</code>专用代码</li><li>初始化<code>Sentinel</code>状态</li><li>根据给定的配置文件,初始化<code>Sentinel</code>的监视主服务器列表</li><li>创建连向主服务器的网络连接</li></ol><h2 id="初始化Sentinel状态"><a href="#初始化Sentinel状态" class="headerlink" title="初始化Sentinel状态"></a>初始化Sentinel状态</h2><p>在应用了Sentinel的专用代码之后，接下来，服务器会初始化一个<strong>sentinel.c/sentinelState结构</strong>（后面简称“Sentinel状态”），这个结构<strong>保存了服务器中所有和Sentinel功能有关的状态</strong> （服务器的一般状态仍然由redis.h/redisServer结构保存）</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> sentinelState <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当前纪元，用于实现故障转移</span>    uint64_t current_epoch<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保存了所有被这个sentinel 监视的主服务器</span>    dict <span class="token operator">*</span>masters<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//略</span><span class="token punctuation">}</span> sentinel<span class="token punctuation">;</span></code></pre><h2 id="初始化Sentinel状态的masters属性"><a href="#初始化Sentinel状态的masters属性" class="headerlink" title="初始化Sentinel状态的masters属性"></a>初始化Sentinel状态的masters属性</h2><p>Sentinel状态中的<strong>masters字典记录了所有被Sentinel监视的主服务器的相关信息</strong>，其中：</p><ul><li><strong>字典的键</strong>是被监视主服务器的名字</li><li><strong>字典的值</strong>则是被监视主服务器对应的sentinel.c/<strong>sentinelRedisInstance结构</strong></li></ul><ul><li>每个sentinelRedisInstance结构（后面简称“实例结构”）<strong>代表一个被Sentinel监视的Redis服务器实例</strong>（instance），这个实例可以是<strong>主服务器、从服务器，或者另外一个Sentinel</strong></li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> sentinelRedisInstance <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//标识值，记录了实例的类型，以及该实例的当前状态</span>    <span class="token keyword">int</span> flags<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实例的名字</span>    <span class="token comment" spellcheck="true">//主服务器的名字由用户在配置文件中设置</span>    <span class="token comment" spellcheck="true">//从服务器以及Sentinel 的名字由Sentinel 自动设置</span>    <span class="token comment" spellcheck="true">//格式为ip:port ，例如"127.0.0.1:26379"</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实例的运行ID</span>    <span class="token keyword">char</span> <span class="token operator">*</span>runid<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//配置纪元，用于实现故障转移</span>    uint64_t config_epoch<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实例的地址</span>    sentinelAddr <span class="token operator">*</span>addr<span class="token punctuation">;</span><span class="token punctuation">}</span> sentinelRedisInstance<span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> sentinelAddr<span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span> ip<span class="token punctuation">;</span>    <span class="token keyword">int</span> port<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul><li>对Sentinel状态的初始化将引发对masters字典的初始化，而masters字典的初始化是<strong>根据被载入的Sentinel配置文件</strong>来进行的</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201220900699.png" alt="img"></p><h2 id="创建连向主服务器的网络连接"><a href="#创建连向主服务器的网络连接" class="headerlink" title="创建连向主服务器的网络连接"></a>创建连向主服务器的网络连接</h2><ul><li><p>初始化Sentinel的最后一步是创建连向被监视主服务器的网络连接，<strong>Sentinel将成为主服务器的客户端</strong>，它可以向主服务器发送命令，并从命令回复中获取相关的信息</p></li><li><p>对于每个被Sentinel监视的主服务器来说，Sentinel会</p><p>  <strong>创建两个连向主服务器的异步网络连接：</strong></p><ul><li>一个是<strong>命令连接</strong>，这个连接专门用于向主服务器发送命令，并接收命令回复</li><li>另一个是<strong>订阅连接</strong>，这个连接专门用于订阅主服务器的<strong>sentinel</strong>:hello频道</li></ul></li></ul><h1 id="获取主服务器的信息"><a href="#获取主服务器的信息" class="headerlink" title="获取主服务器的信息"></a>获取主服务器的信息</h1><ul><li><p>Sentinel默认会以<strong>每十秒一次的频率</strong>，通过命令连接向被监视的主服务器发送INFO命令，并通过分析INFO命令的回复来<strong>获取主服务器的当前信息</strong></p></li><li><p>通过分析主服务器返回的INFO命令回复，<strong>Sentinel可以获取以下两方面的信息：</strong></p><ul><li>一方面是<strong>关于主服务器本身的信息</strong>，包括run_id域记录的服务器运行ID，以及role域记录的服务器角色</li><li>另一方面是关于主服务器属下<strong>所有从服务器的信息</strong>，每个从服务器都由一个”slave”字符 串开头的行记录，每行的ip=域记录了从服务器的IP地址，而port=域则记录了从服务器的端 口号。根据这些IP地址和端口号，Sentinel无须用户提供从服务器的地址信息，就可以自动发现从服务器</li></ul></li><li><p><strong>根据run_id域和role域记录的信息，Sentinel将对主服务器的实例结构进行更新</strong>，例如， 主服务器重启之后，它的运行ID就会和实例结构之前保存的运行ID不同，Sentinel检测到这 一情况之后，就会对实例结构的运行ID进行更新</p></li><li><p>Sentinel在分析INFO命令中包含的从服务器信息时，<strong>会检查从服务器对应的实例结构是否已经存在于slaves字典：</strong></p><ul><li>如果<strong>从服务器对应的实例结构已经存在</strong>，那么Sentinel对从服务器的实例结构进行更新</li><li>如果<strong>从服务器对应的实例结构不存在</strong>，那么说明这个从服务器是新发现的从服务器， Sentinel会在slaves字典中为这个从服务器新创建一个实例结构</li></ul></li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201223205478.png" alt="img"></p><h1 id="获取从服务器信息"><a href="#获取从服务器信息" class="headerlink" title="获取从服务器信息"></a>获取从服务器信息</h1><ul><li>当Sentinel发现主服务器有新的从服务器出现时，Sentinel除了会为这个新的<strong>从服务器创建相应的实例结构之外</strong>，Sentinel还会创建连接到从服务器的<strong>命令连接和订阅连接</strong></li><li>举个例子，对于上面那张图所示的主从服务器关系来说，Sentinel将对slave0、slave1和 slave2三个从服务器分别创建命令连接和订阅连接，如下图所示：</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/2019120122373496.png" alt="img"></p><p><strong>根据INFO命令的回复，Sentinel会提取出以下信息：</strong></p><ul><li>从服务器的运行ID run_id</li><li>从服务器的角色role</li><li>主服务器的IP地址master_host，以及主服务器的端口号master_port</li><li>主从服务器的连接状态master_link_status</li><li>从服务器的优先级slave_priority</li><li>从服务器的复制偏移量slave_repl_offset</li></ul><h1 id="Sentinel向主服务器和从服务器发送信息"><a href="#Sentinel向主服务器和从服务器发送信息" class="headerlink" title="Sentinel向主服务器和从服务器发送信息"></a>Sentinel向主服务器和从服务器发送信息</h1><p>在默认情况下，Sentinel会以<strong>每两秒一次的频率</strong>，通过命令连接向所有被监视的<strong>主服务器和从服务器</strong>发送命令</p><p>对于监视同一个服务器的多个Sentinel来说，<strong>一个Sentinel发送的信息会被其他Sentinel接收到</strong>，这些信息会被用于更新其他Sentinel对发送信息Sentinel的认知，也会被用于更新其他Sentinel对被监视服务器的认知。</p><h1 id="Sentinel接收服务器和从服务器的频道信息"><a href="#Sentinel接收服务器和从服务器的频道信息" class="headerlink" title="Sentinel接收服务器和从服务器的频道信息"></a>Sentinel接收服务器和从服务器的频道信息</h1><p>当一个Sentinel从<strong>sentinel</strong>:hello频道收到一条信息时，Sentinel会对这条信息进行分 析，<strong>提取出信息中的Sentinel IP地址、Sentinel端口号、Sentinel运行ID等八个参数，并进行以下检查：</strong></p><ul><li>如果信息中记录的Sentinel运行ID和接收信息的Sentinel的<strong>运行ID相同</strong>，那么说明这条信 息是Sentinel自己发送的，Sentinel将丢弃这条信息，不做进一步处理</li><li>相反地，如果信息中记录的Sentinel运行ID和接收信息的Sentinel的<strong>运行ID不相同</strong>，那么 说明这条信息是监视同一个服务器的其他Sentinel发来的，接收信息的Sentinel将根据信息中的各个参数，<strong>对相应主服务器的实例结构进行更新</strong></li><li>因为一个Sentinel可以通过分析接收到的频道信息来<strong>获知其他Sentinel的存在</strong>，并通过发送频道信息来<strong>让其他Sentinel知道自己</strong>的存在，所以用户在使用Sentinel的时候并不需要提供各个Sentinel的地址信息，监视同一个主服务器的多个Sentinel<strong>可以自动发现对方</strong></li><li>当Sentinel通过频道信息发现一个新的Sentinel时，它不仅会为新Sentinel在sentinels字典中创建相应的实例结构，<strong>还会创建一个连向新Sentinel的命令连接</strong>，而新Sentinel也同样会创建连向这个Sentinel的命令连接，最终监视同一主服务器的<strong>多个Sentinel将形成相互连接的网络：</strong>Sentinel A有连向Sentinel B的命令连接，而Sentinel B也有连向Sentinel A的命令连接</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191202184847281.png" alt="img"></p><h1 id="检测主观下线状态"><a href="#检测主观下线状态" class="headerlink" title="检测主观下线状态"></a>检测主观下线状态</h1><ul><li>在默认情况下，Sentinel会<strong>以每秒一次的频率</strong>向所有与它创建了命令连接的实例（<strong>包括主服务器、从服务器、其他Sentinel在内</strong>）发送<strong>PING命令</strong>，并通过实例返回的PING命令回复来判断实例是否在线</li><li>如果配置文件指定Sentinel1的<strong>down-after-milliseconds选项的值为50000毫秒</strong>，那么当主服务器master连续50000毫秒都向Sentinel1<strong>返回无效回复时</strong>， Sentinel1就会将master标记为主观下线</li></ul><h1 id="检测客观下线状态"><a href="#检测客观下线状态" class="headerlink" title="检测客观下线状态"></a>检测客观下线状态</h1><ul><li>当Sentinel将一个主服务器判断为主观下线之后，为了确认这个主服务器是否真的下线 了，它会<strong>向同样监视这一主服务器的其他Sentinel进行询问</strong>，看它们是否也认为主服务器已经进入了下线状态（可以是主观下线或者客观下线）。当Sentinel从其他Sentinel那里<strong>接收到足够数量的已下线判断之后</strong>，Sentinel就会将从服务器判定为客观下线，并对主服务器<strong>执行故障转移操作</strong></li></ul><h1 id="选取领头Sentinel"><a href="#选取领头Sentinel" class="headerlink" title="选取领头Sentinel"></a>选取领头Sentinel</h1><ul><li><p>当一个主服务器被判断为客观下线时，监视这个下线主服务器的<strong>各个Sentinel会进行协商</strong>，选举出一个领头Sentinel，并由领头Sentinel<strong>对下线主服务器执行故障转移操作</strong></p></li><li><p>1.<strong>所有在线的Sentinel都有被选为领头Sentinel的资格</strong>，换句话说，监视同一个主服务器的 多个在线Sentinel中的任意一个都有可能成为领头Sentinel</p></li><li><p>2.每次进行领头Sentinel选举之后，<strong>不论选举是否成功，所有Sentinel的配置纪元 （configuration epoch）的值都会自增一次</strong>。配置纪元实际上就是一个计数器，并没有什么特别的</p></li><li><p>3.在一个配置纪元里面，<strong>所有Sentinel都有一次将某个Sentinel设置为局部领头Sentinel的机会</strong>，并且局部领头一旦设置，在这个配置每个发现主服务器进入客观下线的Sentinel都会要求其他Sentinel将自己设置为局部领头Sentinel</p></li><li><p>4.当一个Sentinel（源Sentinel）向另一个Sentinel（目标Sentinel）发送<strong>SENTINEL ismaster-down-by-addr命令</strong>，并且命令中的runid参数不是*符号而是源Sentinel的运行ID时，这<strong>表示源Sentinel要求目标Sentinel将前者设置为后者的局部领头Sentinel</strong></p></li><li><p>5.Sentinel设置局部领头Sentinel的规则是先到先得：<strong>最先向目标Sentinel发送设置要求的源Sentinel将成为目标Sentinel的局部领头</strong>Sentinel，而<strong>之后接收到的所有设置要求都会被目标Sentinel拒绝</strong></p></li><li><p>6.目标Sentinel在接收到SENTINEL is-master-down-by-addr命令之后，<strong>将向源Sentinel返回 一条命令回复，</strong>回复中的leader_runid参数和leader_epoch参数分别<strong>记录了目标Sentinel的局部领头Sentinel的运行ID和配置纪元</strong></p></li><li><p>7.源Sentinel在接收到目标Sentinel返回的命令回复之后，<strong>会检查回复中leader_epoch参数的值和自己的配置纪元是否相同</strong>，如果相同的话，那么源Sentinel继续取出回复中的 leader_runid参数，如果leader_runid参数的值和源Sentinel的运行ID一致，那么表示目标 Sentinel将源Sentinel设置成了局部领头Sentinel</p></li><li><p>8.如果<strong>有某个Sentinel被半数以上的Sentinel设置成了局部领头Sentinel，那么这个Sentinel成为领头Sentinel</strong>。举个例子，在一个由10个Sentinel组成的Sentinel系统里面，只要有大于等于 10/2+1=6个Sentinel将某个Sentinel设置为局部领头Sentinel，那么被设置的那个Sentinel就会成 为领头Sentine</p></li><li><p>9.因为领头Sentinel的产生需要半数以上Sentinel的支持，并且每个Sentinel在每个配置纪元里面只能设置一次局部领头Sentinel，<strong>所以在一个配置纪元里面，只会出现一个领头 Sentinel</strong></p></li><li><p>10.如果在给定时限内，<strong>没有一个Sentinel被选举为领头Sentinel</strong>，那么各个Sentinel将在一段时间之后<strong>再次进行选举</strong>，直到选出领头Sentinel为止</p></li></ul><h1 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h1><ul><li>在选举产生出领头Sentinel之后，领头Sentinel将对已下线的主服务器<strong>执行故障转移操作</strong></li><li><strong>该操作包含下面3个步骤：</strong><ul><li>①在已下线主服务器属下的所有从服务器里面，挑选出一个从服务器，并将其转换为主服务器</li><li>②让已下线主服务器属下的所有从服务器改为复制新的主服务器</li><li>③将已下线主服务器设置为新的主服务器的从服务器，当这个旧的主服务器重新上线 时，它就会成为新的主服务器的从服务器</li></ul></li></ul><h2 id="选出新的主服务器"><a href="#选出新的主服务器" class="headerlink" title="选出新的主服务器"></a>选出新的主服务器</h2><ul><li>故障转移操作第一步要做的就是<strong>在已下线主服务器属下的所有从服务器中</strong>，挑选出一个状态良好、数据完整的从服务器，然后向这个从服务器发送<strong>SLAVEOF no one命令</strong>，将这个<strong>从服务器转换为主服务器</strong></li></ul><h3 id="演示案例"><a href="#演示案例" class="headerlink" title="演示案例"></a>演示案例</h3><ul><li>下图展示了在一次故障转移操作中，领头Sentinel向<strong>被选中的从服务器server2</strong>发送SLAVEOF no one命令的情形：</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191202193156859.png" alt="img"></p><ul><li>在发送SLAVEOF no one命令之后，领头Sentinel会以每秒一次的频率（平时是每十秒一 次），向被升级的从服务器<strong>发送INFO命令，</strong>并观察命令回复中的角色（role）信息，<strong>当被升级服务器的role从原来的slave变为master时</strong>，领头Sentinel就知道被选中的从服务器已经顺利升级为主服务器了</li></ul><h2 id="修改从服务器的复制目标"><a href="#修改从服务器的复制目标" class="headerlink" title="修改从服务器的复制目标"></a>修改从服务器的复制目标</h2><ul><li>当新的主服务器出现之后，领头Sentinel下一步要做的就是，让已下线主服务器属下的<strong>所有从服务器去复制新的主服务器</strong>，这一动作可以<strong>通过向从服务器发送SLAVEOF命令来实现</strong></li></ul><h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><ul><li>下图展示了在故障转移操作中，领头Sentinel向已下线主服务器server1的两个从服务器server3和server4发送SLAVEOF命令，让<strong>它们复制新的主服务器server2的例子</strong></li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191202193616934.png" alt="img"></p><ul><li>下图展示了<strong>server3和server4成为server2的从服务器之后</strong>，各个服务器以及领头Sentinel的样子</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191202193633254.png" alt="img"></p><h2 id="将旧的主服务器变为从服务器"><a href="#将旧的主服务器变为从服务器" class="headerlink" title="将旧的主服务器变为从服务器"></a>将旧的主服务器变为从服务器</h2><ul><li>故障转移操作最后要做的是，<strong>将已下线的主服务器设置为新的主服务器的从服务器</strong>。比如说，下图就展示了被领头Sentinel设置为从服务器之后，服务器server1的样子</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191202193748287.png" alt="img"></p><ul><li>因为旧的主服务器已经下线，所以这种设置是保存在server1对应的实例结构里面的，当 server1重新上线时，<strong>Sentinel就会向它发送SLAVEOF命令，让它成为server2的从服务器</strong></li><li>例如，下图就展示了server1重新上线并成为server2的从服务器的例子</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191202193757739.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Sentinel </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis主从复制</title>
      <link href="posts/b7e51ad7.html"/>
      <url>posts/b7e51ad7.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>被复制的服务器称为主服务器，对主服务器进行复制的服务器称为从服务器</p><p>进行复制中的主从服务器双方的数据库将保存相同的数据</p><h1 id="旧版复制功能的实现"><a href="#旧版复制功能的实现" class="headerlink" title="旧版复制功能的实现"></a>旧版复制功能的实现</h1><ul><li><strong>同步操作</strong>（sync）<strong>：</strong>用于将从服务器的数据库状态<strong>更新至</strong>主服务器当前所处的数据库状态</li><li><strong>命令传播操作</strong>（command propagate）<strong>：</strong>则用于在主服务器的数据库状态被修改，导致主从服务器的数据库状态出现不一致时，让主从服务器的数据库<strong>重新回到一致状态</strong></li></ul><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><ul><li><p><strong>概念：</strong>当客户端向从服务器发送SLAVEOF命令，要求从服务器复制主服务器时，从服务器首先需要执行同步操作，也即是，<strong>将从服务器的数据库状态更新至主服务器当前所处的数据库状态</strong></p></li><li><p><strong>SYNC命令：</strong></p><p>  从服务器对主服务器的同步操作需要通过向主服务器发送SYNC命令来完成，以下是SYNC命令的执行步骤：</p><ul><li>①从服务器向主服务器<strong>发送SYNC命令</strong></li><li>②收到SYNC命令的主服务器<strong>执行BGSAVE命令，在后台生成一个RDB文件</strong>，并使用一 个缓冲区记录从现在开始执行的所有写命令</li><li>③当主服务器的BGSAVE命令执行完毕时，主服务器会将BGSAVE命令生成的<strong>RDB文件发送给从服务器</strong>，从服务器<strong>接收并载入</strong>这个RDB文件，将自己的数据库状态更新至主服务器 执行BGSAVE命令时的数据库状态</li><li>④主服务器将记录在缓冲区里面的所有写命令发送给从服务器，从服务器执行这些写 命令，将自己的数据库状态更新至主服务器数据库当前所处的状态</li></ul></li><li><p>下图展示了SYNC命令执行期间，主从服务器的通信过程：</p></li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201105150863.png" alt="20191201105150863"></p><h2 id="命令传播"><a href="#命令传播" class="headerlink" title="命令传播"></a>命令传播</h2><ul><li>在同步操作执行完毕之后，主从服务器两者的数据库将达到一致状态，但这种一致并不是一成不变的，每当主服务器执行客户端发送的写命令时，主服务器的数据库就有可能会被修改，并<strong>导致主从服务器状态不再一致</strong></li><li>为了让主从服务器再次回到一致状态，<strong>主服务器需要对从服务器执行命令传播操作：</strong>主 服务器会将自己执行的写命令，也即是造成主从服务器不一致的那条写命令，发送给从服务器执行，当从服务器执行了相同的写命令之后，主从服务器将再次回到一致状态</li><li>例如，主服务器执行了DEL k3的命令，那么主服务器将向从服务器发送相同的命令DEL k3，当从服务器执行完这个命令之后，主从服务器将再次回到一致状态，现在主从服务器两者的数据库都不再包含键k3了。</li></ul><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><p>旧版复制功能在处理断线重复制情况时低效</p><p>在Redis中，<strong>从服务器对主服务器的复制可以分为以下两种情况：</strong></p><ul><li><strong>初次复制：</strong>从服务器以前没有复制过任何主服务器，或者从服务器当前要复制的主服务 器和上一次复制的主服务器不同。</li><li><strong>断线后重复制：</strong>处于命令传播阶段的主从服务器因为网络原因而中断了复制，但从服务 器通过自动重连接重新连上了主服务器，并继续复制主服务器</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201105727757.png" alt="20191201105727757"></p><p><strong>为什么网络断开之后重新复制效率低，以上面的演示案例为例：</strong></p><ul><li>主从服务器在时间T0至时间T10086中一直处于一致状态，这两个服务器保存的数据<strong>大部分都是相同的</strong></li><li>从服务器想要将自己更新至主服务器当前所处的状态，<strong>真正需要的是主从服务器连接中断期间</strong>，主服务器新添加的k10087、k10088、k10089三个键的数据</li><li>可惜的是，旧版复制功能并没有利用以上列举的两点条件，而是继续让主服务器生成并向从服务器发送包含键k1至键k10089的RDB文件，但实际上RDB文件包含的键k1至键k10086的数据对于从服务器来说都是不必要的</li></ul><p>主从服务器断开的时 间越短，主服务器在断线期间执行的写命令就越少，而执行少量写命令所产生的数据量通常比整个数据库的数据量要少得多，在这种情况下，为了让从服务器补足一小部分缺失的数 据，<strong>却要让主从服务器重新执行一次SYNC命令，这种做法无疑是非常低效的</strong></p><h1 id="新版复制功能的实现"><a href="#新版复制功能的实现" class="headerlink" title="新版复制功能的实现"></a>新版复制功能的实现</h1><ul><li>为了解决旧版复制功能在处理断线重复制情况时的低效问题，Redis从2.8版本开始，<strong>使用PSYNC命令代替SYNC命令</strong>来执行复制时的同步操作</li><li><strong>PSYNC命令具有完整重同步（full resy nchronization）和部分重同步（partial resynchronization）两种模式：</strong><ul><li><strong>完整重同步：</strong>用于处理初次复制情况：完整重同步的执行步骤和SYNC命令的执行步 骤基本一样，它们都是通过让主服务器创建并发送RDB文件，以及向从服务器发送保存在缓冲区里面的写命令来进行同步</li><li><strong>部分重同步：</strong>则用于处理断线后重复制情况：当从服务器在断线后重新连接主服务器时，如果条件允许，主服务器可以将主从服务器连接断开期间执行的写命令发送给从服务器，从服务器只要接收并执行这些写命令，就可以将数据库更新至主服务器当前所处的状态</li></ul></li><li>PSYNC命令的部分重同步模式<strong>解决了旧版复制功能在处理断线后重复制时出现的低效情况</strong></li></ul><p><strong>执行部分重同步所需的资源比起执行SYNC命令所需的资源要少得多</strong>，完成同步的速度也快得多。执行SYNC命令需要生成、传送和载入整个RDB文件，而部分重同步只需要将从服务器缺少的写命令发送给从服务器执行就可以了</p><h1 id="部分重同步的实现"><a href="#部分重同步的实现" class="headerlink" title="部分重同步的实现"></a>部分重同步的实现</h1><p><strong>同步功能由以下三个部分构成：</strong></p><ul><li>主服务器的复制偏移量（replication offset）和从服务器的复制偏移量</li><li>主服务器的复制积压缓冲区（replication backlog）</li><li>服务器的运行ID（run ID）</li></ul><h2 id="复制偏移量"><a href="#复制偏移量" class="headerlink" title="复制偏移量"></a>复制偏移量</h2><ul><li><p>执行复制的双方——主服务器和从服务器会<strong>分别维护一个复制偏移量：</strong></p><ul><li>主服务器每次向从服务器传播N个字节的数据时，就将自己的复制偏移量的值加上N</li><li>从服务器每次收到主服务器传播来的N个字节的数据时，就将自己的复制偏移量的值加上N</li></ul></li><li><p>通过对比主从服务器的复制偏移量，</p><p>  <strong>程序可以很容易地知道主从服务器是否处于一致状态：</strong></p><ul><li>如果主从服务器处于一致状态，那么主从服务器两者的偏移量总是相同的</li><li>相反，如果主从服务器两者的偏移量并不相同，那么说明主从服务器并未处于一致状态</li></ul></li></ul><p>在下图所示的例子中，主从服务器的复制偏移量的值都为10086</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201121350757.png"></p><p>如果这时主服务器向三个从服务器传播长度为33字节的数据，那么主服务器的复制偏移量将更新为10086+33=10119，而三个从服务器在接收到主服务器传播的数据之后，也会将复制偏移量更新为10119</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201121359413.png" alt="img"></p><h2 id="复制积压缓冲区"><a href="#复制积压缓冲区" class="headerlink" title="复制积压缓冲区"></a>复制积压缓冲区</h2><ul><li>复制积压缓冲区是由主服务器维护的一个<strong>固定长度（fixed-size）先进先出（FIFO）队列</strong>，默认大小为1MB</li><li>当主服务器进行命令传播时，它不仅会将写命令发送给所有从服务器，还会<strong>将写命令入队到复制积压缓冲区里面</strong>，如下图所示：</li><li><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201121909779.png" alt="img"></li><li>因此，主服务器的复制积压缓冲区里面会保存着一部分最近传播的写命令，并且复制积压缓冲区会<strong>为队列中的每个字节记录相应的复制偏移量</strong></li><li><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201121943503.png" alt="img"></li><li>当从服务器重新连上主服务器时，从服务器会通过PSYNC命令<strong>将自己的复制偏移量offset发送给主服务器</strong>，主服务器会根据这个复制偏移量来决定对从服务器执行何种同步操 作：<ul><li>如果offset偏移量之后的数据（也即是偏移量offset+1开始的数据）<strong>仍然存在于复制积压缓冲区里面</strong>，那么主服务器将对从服务器执行部分重同步操作</li><li>相反，如果offset偏移量之后的数据<strong>已经不存在于复制积压缓冲区</strong>，那么主服务器将对从服务器执行完整重同步操作</li></ul></li></ul><p><strong>演示案例：</strong></p><ul><li>回到之前上面图片所展示的断线后重连接例子：</li><li><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201121522212.png" alt="img"></li><li>当从服务器A断线之后，它立即重新连接主服务器，并<strong>向主服务器发送PSYNC命令，报告自己的复制偏移量为10086</strong></li><li>主服务器收到从服务器发来的PSYNC命令以及偏移量10086之后，主服务器将<strong>检查偏移量10086之后的数据是否存在于复制积压缓冲区里面</strong>，结果发现<strong>这些数据仍然存在</strong>，于是主服务器向从服务器发送+CONTINUE回复，表示数据同步将以部分重同步模式来进行</li><li>接着主服务器会将复制积压缓冲区10086偏移量之后的<strong>所有数据（偏移量为10087至 10119）都发送给从服务器</strong></li><li>从服务器只要接收这33字节的缺失数据，就可以回到与主服务器一致的状态，如下图所示</li><li><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201122209306.png" alt="img"></li></ul><h2 id="服务器运行ID"><a href="#服务器运行ID" class="headerlink" title="服务器运行ID"></a>服务器运行ID</h2><ul><li><p>除了复制偏移量和复制积压缓冲区之外，</p><p>  <strong>实现部分重同步还需要用到服务器运行ID（run ID）：</strong></p><ul><li>每个Redis服务器，不论主服务器还是从服务，都会有自己的运行ID</li><li>运行ID在服务器启动时自动生成，由40个随机的十六进制字符组成，例如 53b9b28df8042fdc9ab5e3fcbbbabff1d5dce2b3</li></ul></li><li><p>当从服务器对主服务器<strong>进行初次复制时</strong>，主服务器会<strong>将自己的运行ID传送给从服务器</strong>， 而从服务器则会将<strong>这个运行ID保存起来</strong></p></li><li><p>当从服务器断线并重新连上一个主服务器时，<strong>从服务器将向当前连接的主服务器发送之前保存的运行ID：</strong></p><ul><li>如果从服务器保存的运行ID和当前连接的主服务器的<strong>运行ID相同</strong>，那么说明从服务器 断线之前复制的就是当前连接的这个主服务器，主服务器可以继续尝试执行部分重同步操 作</li><li>相反地，如果从服务器保存的运行ID和当前连接的主服务器的<strong>运行ID并不相同</strong>，那么 说明从服务器断线之前复制的主服务器并不是当前连接的这个主服务器，主服务器将对从服务器执行完整重同步操作</li></ul></li><li><p>举个例子，假设从服务器原本正在复制一个运行ID为 53b9b28df8042fdc9ab5e3fcbbbabff1d5dce2b3的主服务器，那么在网络断开，从服务器重新连 接上主服务器之后，从服务器将向主服务器发送这个运行ID，主服务器根据自己的运行ID是 否53b9b28df8042fdc9ab5e3fcbbbabff1d5dce2b3来判断是执行部分重同步还是执行完整重同步</p></li></ul><h1 id="PSYNC命令的实现"><a href="#PSYNC命令的实现" class="headerlink" title="PSYNC命令的实现"></a>PSYNC命令的实现</h1><h2 id="PSYNC命令的调用方法有两种："><a href="#PSYNC命令的调用方法有两种：" class="headerlink" title="PSYNC命令的调用方法有两种："></a>PSYNC命令的调用方法有两种：</h2><ul><li><p>如果从服务器<strong>以前没有复制过任何主服务器，或者之前执行过SLAVEOF no one命令：</strong>那么从服务器在开始一次新的复制时将向主服务器发送PSYNC ? -1命令，主动请求主服务器<strong>进行完整重同步</strong>（因为这时不可能执行部分重同步）</p></li><li><p>如果从服务器<strong>已经复制过某个主服务器</strong></p><p>  ，那么从服务器在开始一次新的复制时将向主服务器发送PSYNC <runid> <offset>命令：</p><ul><li>其中runid是上一次复制的主服务器的运行 ID，而offset则是从服务器当前的复制偏移量</li><li>接收到这个命令的主服务器会<strong>通过这两个参数来判断应该对从服务器执行哪种同步操作</strong></li></ul></li></ul><h2 id="接收到PSYNC命令的主服务器会向从服务器返回以下三种回复的其中一种："><a href="#接收到PSYNC命令的主服务器会向从服务器返回以下三种回复的其中一种：" class="headerlink" title="接收到PSYNC命令的主服务器会向从服务器返回以下三种回复的其中一种："></a>接收到PSYNC命令的主服务器会向从服务器返回以下三种回复的其中一种：</h2><ul><li>如果<strong>主服务器返回+FULLRESYNC  回复</strong>，那么<strong>表示主服务器将与从服务器执行完整重同步操作：</strong>其中runid是这个主服务器的运行ID，从服务器会将这个ID保存起 来，在下一次发送PSYNC命令时使用；而offset则是主服务器当前的复制偏移量，从服务器 会将这个值作为自己的初始化偏移量</li><li>如果<strong>主服务器返回+CONTINUE回复</strong>，那么表示<strong>主服务器将与从服务器执行部分重同步操作</strong>，从服务器只要等着主服务器将自己缺少的那部分数据发送过来就可以了</li><li>如果<strong>主服务器返回-ERR回复</strong>，那么表示主服务器的版本低于Redis 2.8，<strong>它识别不了PSYNC命令</strong>，从服务器将向主服务器发送SYNC命令，并与主服务器执行完整同步操作</li></ul><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><ul><li>下面的流程图总结了PSYNC命令执行完整重同步和部分重同步时可能遇上的情况：</li><li><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201123546284.png" alt="img"></li></ul><h2 id="演示案例"><a href="#演示案例" class="headerlink" title="演示案例"></a>演示案例</h2><p>为了熟悉PSYNC命令的用法，让我们来看一个完整的复制——网络中断——重复制例 子</p><ul><li>首先，假设有两个Redis服务器，它们的版本都是Redis 2.8，其中主服务器的地址为 127.0.0.1:6379，从服务器的地址为127.0.0.1:12345</li><li>如果客户端向从服务器发送命令SLAVEOF 127.0.0.1 6379，并且假设从服务器是第一次 执行复制操作，那么从服务器将向主服务器发送PSYNC ? -1命令，请求主服务器执行完整重 同步操作</li><li>主服务器在收到完整重同步请求之后，将在后台执行BGSAVE命令，并向从服务器返回 +FULLRESYNC 53b9b28df8042fdc9ab5e3fcbbbabff1d5dce2b3 10086回复，其中 53b9b28df8042fdc9ab5e3fcbbbabff1d5dce2b3是主服务器的运行ID，而10086则是主服务器当 前的复制偏移量</li><li>假设完整重同步成功执行，并且主从服务器在一段时间之后仍然保持一致，但是在复制 偏移量为20000的时候，主从服务器之间的网络连接中断了，这时从服务器将重新连接主服 务器，并再次对主服务器进行复制。</li><li>因为之前曾经对主服务器进行过复制，所以从服务器将向主服务器发送命令PSYNC 53b9b28df8042fdc9ab5e3fcbbbabff1d5dce2b3 20000，请求进行部分重同步</li><li>主服务器在接收到从服务器的PSYNC命令之后，首先对比从服务器传来的运行 ID53b9b28df8042fdc9ab5e3fcbbbabff1d5dce2b3和主服务器自身的运行ID，结果显示该ID和 主服务器的运行ID相同，于是主服务器继续读取从服务器传来的偏移量20000，检查偏移量 为20000之后的数据是否存在于复制积压缓冲区里面，结果发现数据仍然存在</li><li>确认运行ID相同并且数据存在之后，主服务器将向从服务器返回+CONTINUE回复，表 示将与从服务器执行部分重同步操作，之后主服务器会将保存在复制积压缓冲区20000偏移 量之后的所有数据发送给从服务器，主从服务器将再次回到一致状态</li></ul><h1 id="复制的实现"><a href="#复制的实现" class="headerlink" title="复制的实现"></a>复制的实现</h1><h2 id="步骤1-设置主服务器的地址和端口"><a href="#步骤1-设置主服务器的地址和端口" class="headerlink" title="步骤1:设置主服务器的地址和端口"></a>步骤1:设置主服务器的地址和端口</h2><p>当客户端向从服务器发送以下命令时:<code>SLAVEOF 127.0.0.1 6379</code></p><p>从服务器首先要做的就是将客户端给定的主服务器IP地址127.0.0.1以及端口6379<strong>保存到服务器状态的masterhost属性和masterport属性里面</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> redisServer<span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span> masterhost<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//主服务器的地址</span>    <span class="token keyword">int</span> masterport<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//主服务器的端口号</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>SLAVEOF命令是一个异步命令</strong>，在完成masterhost属性和masterport属性的设置工作之 后，从服务器将向发送SLAVEOF命令的客户端返回OK，表示复制指令已经被接收，而<strong>实际的复制工作将在OK返回之后才真正开始执行</strong></p><h2 id="步骤2-建立套接字连接"><a href="#步骤2-建立套接字连接" class="headerlink" title="步骤2:建立套接字连接"></a>步骤2:建立套接字连接</h2><ul><li>在SLAVEOF命令执行之后，从服务器将根据命令所设置的IP地址和端口，<strong>创建连向主服务器的套接字连接</strong>，如下图所示：</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201131155414.png" alt="img"></p><ul><li>如果<strong>从服务器创建的套接字能成功连接（connect）到主服务器</strong>，那么从服务器将为这个套接字关联一个专门<strong>用于处理复制工作的文件事件处理器</strong>，这个处理器将负责执行后续的复制工作，比如接收RDB文件，以及接收主服务器传播来的写命令，诸如此类</li><li>而<strong>主服务器在接受（accept）从服务器的套接字连接之后</strong>，将为该套接字创建相应的客户端状态，并将从服务器看作是一个连接到主服务器的客户端来对待，这时从服务器将同时具有服务器（server）和客户端（client）两个身份：从服务器可以向主服务器发送命令请求，而主服务器则会向从服务器返回命令回复，如下图所示：</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201131243941.png" alt="img"></p><ul><li>因为复制工作接下来的几个步骤都会以从服务器向主服务器发送命令请求的形式来进 行，所以<strong>理解“从服务器是主服务器的客户端”这一点非常重要</strong></li></ul><h2 id="步骤3-发送PING命令"><a href="#步骤3-发送PING命令" class="headerlink" title="步骤3:发送PING命令"></a>步骤3:发送PING命令</h2><ul><li>从服务器成为主服务器的客户端之后，做的第一件事就是<strong>向主服务器发送一个PING命令</strong>，如下图所示：</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201131333757.png" alt="img"></p><ul><li><strong>这个PING命令有两个作用：</strong><ul><li>虽然主从服务器成功建立起了套接字连接，但双方并未使用该套接字进行过任何通信， 通过发送PING命令可以<strong>检查套接字的读写状态是否正常</strong></li><li>因为复制工作接下来的几个步骤都必须在主服务器可以正常处理命令请求的状态下才能进行，通过发送PING命令可以<strong>检查主服务器能否正常处理命令请求</strong></li></ul></li><li><strong>从服务器在发送PING命令之后将遇到以下三种情况的其中一种：</strong><ul><li>如果主服务器向从服务器返回了一个命令回复，但从服务器却<strong>不能在规定的时限 （timeout）内读取出命令回复的内容</strong>，那么表示主从服务器之间的网络连接状态不佳，不能 继续执行复制工作的后续步骤。当出现这种情况时，从服务器<strong>断开并重新创建</strong>连向主服务器 的套接字</li><li>如果主服务器<strong>向从服务器返回一个错误</strong>，那么表示主服务器暂时没办法处理从服务器的命令请求，不能继续执行复制工作的后续步骤。当出现这种情况时，<strong>从服务器断开并重新创建连向主服务器的套接字</strong>。比如说，如果主服务器正在处理一个超时运行的脚本，那么当从 服务器向主服务器发送PING命令时，从服务器将收到主服务器返回的BUSY Redisis busy running a script.You can only call SCRIPT KILL or SHUTDOWN NOSAVE.错误</li><li>如果从服务器<strong>读取到”PONG”回复</strong>，那么表示主从服务器之间的网络连接状态正常，并 且主服务器可以正常处理从服务器（客户端）发送的命令请求，在这种情况下，从服务器可 以继续执行复制工作的下个步骤</li></ul></li><li>下面的流程图总结了从服务器在发送PING命令时可能遇到的情况，以及各个情况的处理方式</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201131558981.png" alt="img"></p><h2 id="步骤4-身份验证"><a href="#步骤4-身份验证" class="headerlink" title="步骤4:身份验证"></a>步骤4:身份验证</h2><ul><li><p>从服务器在收到主服务器返回的”PONG”回复之后，</p><p>  <strong>下一步要做的就是决定是否进行身份验证：</strong></p><ul><li>如果从服务器设置了masterauth选项，那么进行身份验证</li><li>如果从服务器没有设置masterauth选项，那么不进行身份验证</li></ul></li><li><p>在需要进行身份验证的情况下，<strong>从服务器将向主服务器发送一条AUTH命令</strong>，命令的<strong>参数为从服务器masterauth选项的值</strong></p></li><li><p>举个例子，如果从服务器masterauth选项的值为10086，那么从服务器将向主服务器发送 命令AUTH 10086，如下图所示</p></li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201131632595.png" alt="img"></p><h2 id="步骤5-发送端口信息"><a href="#步骤5-发送端口信息" class="headerlink" title="步骤5:发送端口信息"></a>步骤5:发送端口信息</h2><ul><li>在身份验证步骤之后，从服务器将执行命令REPLCONF listening-port ， <strong>向主服务器发送从服务器的监听端口号</strong></li><li>例如在我们的例子中，从服务器的监听端口为12345，那么从服务器将<strong>向主服务器发送命令REPLCONF listening-port 12345</strong>，如下图所示：</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/2019120113200247.png" alt="img"></p><h2 id="步骤6-同步"><a href="#步骤6-同步" class="headerlink" title="步骤6:同步"></a>步骤6:同步</h2><ul><li><p>在这一步，从服务器将向主服务器发送PSYNC命令，*<strong>*执行同步操作**</strong>，并<strong>将自己的数据库更新至主服务器数据库当前所处的状态</strong></p></li><li><p>值得一提的是，在同步操作执行之前，只有从服务器是主服务器的客户端，但是</p><p>  <strong>在执行同步操作之后，主服务器也会成为从服务器的客户端：</strong></p><ul><li>如果PSYNC命令执行的是<strong>完整重同步操作</strong>，那么主服务器需要成为从服务器的客户 端，才能将保存在缓冲区里面的写命令发送给从服务器执行。</li><li>如果PSYNC命令执行的是<strong>部分重同步操作</strong>，那么主服务器需要成为从服务器的客户 端，才能向从服务器发送保存在复制积压缓冲区里面的写命令</li></ul></li><li><p>因此，在同步操作执行之后，<strong>主从服务器双方都是对方的客户端</strong>，它们可以互相向对方发送命令请求，或者互相向对方返回命令回复，如下图所示：</p></li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/2019120113224549.png" alt="img"></p><ul><li>正因为主服务器成为了从服务器的客户端，所以主服务器才可以通过发送写命令来改变从服务器的数据库状态，不仅同步操作需要用到这一点，这也是主服务器对从服务器执行命 令传播操作的基础</li></ul><h2 id="步骤7-命令传播"><a href="#步骤7-命令传播" class="headerlink" title="步骤7:命令传播"></a>步骤7:命令传播</h2><ul><li>当完成了同步之后，<strong>主从服务器就会进入命令传播阶段</strong>，这时主服务器只要一直将自己执行的写命令发送给从服务器，而从服务器只要一直接收并执行主服务器发来的写命令，就<strong>可以保证主从服务器一直保持一致了</strong></li></ul><h1 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a>心跳检测</h1><ul><li>在命令传播阶段，从服务器默认会<strong>以每秒一次的频率</strong>，向主服务器发送命令：</li></ul><pre class=" language-bash"><code class="language-bash">REPLCONF ACK <span class="token operator">&lt;</span>replication_offset<span class="token operator">></span>//其中replication_offset是从服务器当前的复制偏移量</code></pre><ul><li><strong>发送REPLCONF ACK命令对于主从服务器有三个作用：</strong><ul><li>①检测主从服务器的网络连接状态</li><li>②辅助实现min-slaves选项</li><li>③检测命令丢失</li></ul></li></ul><h2 id="检测主从服务器的网络连接状态（lag标志）"><a href="#检测主从服务器的网络连接状态（lag标志）" class="headerlink" title="检测主从服务器的网络连接状态（lag标志）"></a>检测主从服务器的网络连接状态（lag标志）</h2><ul><li>主从服务器可以通过发送和接收REPLCONF ACK命令<strong>来检查两者之间的网络连接是否正常：</strong>如果主服务器<strong>超过一秒钟没有收到</strong>从服务器发来的REPLCONF ACK命令，那么主服务器就知道主从服务器之间的连接出现问题了</li><li>通过向主服务器发送<strong>INFO replication命令</strong>，在列出的<strong>从服务器列表的lag一栏中</strong>，我们可以看到相应从服务器最后一次向主服务器发送REPLCONF ACK命令<strong>距离现在过了多少秒。</strong>在一般情况下，<strong>lag的值应该在0秒或者1秒之间跳动</strong>，如果超过1秒的话，那么说明主从 服务器之间的连接出现了故障。</li></ul><h2 id="辅助实现min-slaves配置选项"><a href="#辅助实现min-slaves配置选项" class="headerlink" title="辅助实现min-slaves配置选项"></a>辅助实现min-slaves配置选项</h2><ul><li>Redis的<strong>min-slaves-to-write和min-slaves-max-lag两个选项</strong>可以<strong>防止主服务器在不安全的情况下执行写命令</strong></li><li>举个例子，如果我们向主服务器提供以下设置：</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201132859439.png" alt="img"></p><ul><li>那么在<strong>从服务器的数量少于3个，或者三个从服务器的延迟（lag）值都大于或等于10秒时</strong>，主服务器将<strong>拒绝执行写命令</strong>，这里的延迟值就是上面提到的INFO replication命令的lag 值</li></ul><h2 id="检测命令丢失"><a href="#检测命令丢失" class="headerlink" title="检测命令丢失"></a>检测命令丢失</h2><p>如果因为网络故障，<strong>主服务器传播给从服务器的写命令在半路丢失</strong>，那么当从服务器向主服务器发送REPLCONF ACK命令时，主服务器将<strong>发觉</strong>从服务器当前的复制偏移量少于自己的复制偏移量，然后主服务器就会根据从服务器提交的复制偏移量，在复制积压缓冲区里 面找到从服务器缺少的数据，并<strong>将这些数据重新发送给从服务器</strong></p><h2 id="演示案例-1"><a href="#演示案例-1" class="headerlink" title="演示案例"></a>演示案例</h2><ul><li>举个例子，假设有两个处于一致状态的主从服务器，它们的复制偏移量都是200，如下图所示</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201133107682.png" alt="img"></p><ul><li>如果这时主服务器执行了命令SET key value（协议格式的长度为33字节），将自己的复 制偏移量更新到了233，并尝试向从服务器传播命令SET key value，但这条命令却因为网络 故障而在传播的途中丢失，那么主从服务器之间的复制偏移量就会出现不一致，主服务器的 复制偏移量会被更新为233，而从服务器的复制偏移量仍然为200，如下图所示</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201133127229.png" alt="img"></p><ul><li>在这之后，当从服务器向主服务器发送REPLCONF ACK命令的时候，主服务器会察觉 从服务器的复制偏移量依然为200，而自己的复制偏移量为233，这说明复制积压缓冲区里面 复制偏移量为201至233的数据（也即是命令SET key value）在传播过程中丢失了，于是主服 务器会再次向从服务器传播命令SET key value，从服务器通过接收并执行这个命令可以将自 己更新至主服务器当前所处的状态，如下图所示</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20191201133147307.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 主从复制 </tag>
            
            <tag> 心跳检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOF重写</title>
      <link href="posts/9e1bdda0.html"/>
      <url>posts/9e1bdda0.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>AOF（Append Only File)</li><li>通过保存<code>Redis</code>服务器所执行的写命令来记录数据库状态的</li><li>被写入AOF文件的所有命令都是以Redis的命令请求协议格式（纯文本）保存的。</li><li>服务器启动时，可以通过载入和执行<code>AOF文件</code>中保存的命令来还原服务器关闭之前的数据库状态</li></ul><h1 id="AOF持久化的实现"><a href="#AOF持久化的实现" class="headerlink" title="AOF持久化的实现"></a>AOF持久化的实现</h1><h2 id="命令追加"><a href="#命令追加" class="headerlink" title="命令追加"></a>命令追加</h2><p>服务器在执行完一个写命令后，会将被执行的写命令追加到服务器状态的<code>aof_buf</code>缓冲区的末尾:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> redisServer<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// AOF缓冲区</span>    sds aof_buf<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="AOF文件的写入与同步"><a href="#AOF文件的写入与同步" class="headerlink" title="AOF文件的写入与同步"></a>AOF文件的写入与同步</h2><p>服务器进程是一个事件循环，循环中的文件事件负责接收客户端的命令请求，以及向客户端发送命令回复。时间事件负责执行像serverCron函数这样需要定时运行的函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#处理文件事件，接收命令请求以及发送命令回复</span>        <span class="token comment" spellcheck="true">#处理命令请求时可能会有新内容加入到aof_buf缓冲区中</span>        processFileEvents<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#处理时间事件</span>        processTimeEvents<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#考虑是否要将aof_buf缓冲区中的内容写入和保存到AOF文件里面</span>        flushAppendOnlyFile<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>写入</strong>：在现代操作系统中，当数据写入到文件中时，会调用write函数。操作系统会将写入数据暂时保存在一个内存缓存区中，等到缓冲区空间满的时候，才真正将缓冲区中的数据写入到磁盘中。</p><p><strong>同步</strong>：同时系统也提供了同步函数（例如fsync)，它可以强制让操作系统立即将缓冲区中的数据写入到磁盘中。</p><p>在每个事件循环都会调用flushAppendOnlyFile函数，flushAppendOnlyFile函数的行为由<strong>appendfsync</strong>的值决定：</p><p><strong>always</strong>：服务器在每个事件循环都要将aof_buf缓冲区中的所有内容写入到AOF文件中，并同步AOF文件（把aof_buf数据写入并同步到AOF文件中）</p><p><strong>everysec</strong>：服务器在每个事件循环都要将aof_buf缓冲区中的所有内容写入到AOF文件中(先写入)，并且每隔一秒就在子线程中对AOF文件进行一次同步(每隔一秒同步)。</p><p><strong>no</strong>：服务器在每个事件循环都要将aof_buf缓冲区中的所有内容写入到AOF文件中(先写入)，至于什么时候同步，由操作系统控制（不知道啥时候同步）。在该模式下的flushAppendOnlyFile的调用不需要同步执行。</p><p>上述配置的值，直接决定服务器的效率与安全性，当always时，安全性最高，但是效率最低；no时效率最高，安全性最低；everysec居中：从效率上来讲，everysec模式足够快，并且就算出现了故障停机，数据库也只丢失一秒钟的命令数据。系统默认配置是everysec。</p><h1 id="AOF文件的载入与数据还原"><a href="#AOF文件的载入与数据还原" class="headerlink" title="AOF文件的载入与数据还原"></a>AOF文件的载入与数据还原</h1><p>只要读入并重新执行一遍<code>AOF文件</code>里面保存的写命令，就可以还原服务器关闭之前的数据库状态</p><ol><li>创建一个不带网络连接的伪客户端</li><li>从AOF文件中分析并读取出一条写命令</li><li>使用伪客户端执行被读出的写命令</li><li>一直执行2，3直到AOF文件中的所有写命令都被处理完毕</li></ol><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210207113554356.png" alt="image-20210207113554356"></p><h1 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h1><p>为了解决AOF文件体积膨胀的问题，Redis提供了AOF文件重写(rewrite)功能。</p><p>服务器创建一个新的AOF文件来<strong>替代</strong>现有的AOF文件，新旧两个AOF文件所保存的数据库状态相同，但是新的AOF文件不会包含任何浪费空间的冗余命令</p><h2 id="AOF文件重写的实现"><a href="#AOF文件重写的实现" class="headerlink" title="AOF文件重写的实现"></a>AOF文件重写的实现</h2><p>不需要对现有的AOF文件进行操作，是通过读取服务器当前的数据库状态来实现的</p><p>首先从数据库中读取键现在的值，然后用一条命令去记录键值对，代替之前记录这个键值对的多条命令，这就是AOF重写功能的实现原理。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">aof_rewrite</span><span class="token punctuation">(</span>new_aof_file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#创建新的aof文件</span>    f<span class="token operator">=</span>create_file<span class="token punctuation">(</span>new_aof_file_name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#遍历数据库</span>    <span class="token keyword">for</span> db <span class="token keyword">in</span> redisServer<span class="token punctuation">.</span>db<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#忽略空数据库</span>        <span class="token keyword">if</span> db<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">continue</span>        <span class="token comment" spellcheck="true">#写入SELECT命令，指定数据库号码</span>        f<span class="token punctuation">.</span>write_command<span class="token punctuation">(</span><span class="token string">"SELECT"</span><span class="token operator">+</span>db<span class="token punctuation">.</span>id<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#遍历数据库中所有键</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> db<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#忽略过期的键</span>            <span class="token keyword">if</span> key<span class="token punctuation">.</span>is_expired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">continue</span>            <span class="token comment" spellcheck="true">#根据键的类型对键进行重写</span>            <span class="token keyword">if</span> key<span class="token punctuation">.</span>type <span class="token operator">==</span> String<span class="token punctuation">:</span>                rewrite_string<span class="token punctuation">(</span>key<span class="token punctuation">)</span>            <span class="token keyword">elif</span> key<span class="token punctuation">.</span>type <span class="token operator">==</span> List<span class="token punctuation">:</span>                rewrite_list<span class="token punctuation">(</span>key<span class="token punctuation">)</span>            <span class="token keyword">elif</span> key<span class="token punctuation">.</span>type <span class="token operator">==</span> Hash<span class="token punctuation">:</span>                rewrite_hash<span class="token punctuation">(</span>key<span class="token punctuation">)</span>            <span class="token keyword">elif</span> key<span class="token punctuation">.</span>type <span class="token operator">==</span> Set<span class="token punctuation">:</span>                rewrite_set<span class="token punctuation">(</span>key<span class="token punctuation">)</span>            <span class="token keyword">elif</span> key<span class="token punctuation">.</span>type <span class="token operator">==</span> SortedSet<span class="token punctuation">:</span>                rewrite_sortedSet<span class="token punctuation">(</span>key<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 如果键带有过期时间，过期时间也要重写</span>            <span class="token keyword">if</span> key<span class="token punctuation">.</span>have_expired_time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                rewrite_expired_time<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#写入完毕，关闭文件            </span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rewrite_string</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#使用GET命令获取字符串的值</span>    value<span class="token operator">=</span>GET<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#使用SET命令重写字符串键</span>    f<span class="token punctuation">.</span>write_command<span class="token punctuation">(</span>SET，key，value<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rewrite_expired_time</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#获取毫秒精度的键过期时间戳</span>    timestamp<span class="token operator">=</span>get_expired_time_in_unixstamp<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#使用PEXPIREAT命令重写键的过期时间</span>    f<span class="token punctuation">.</span>write_command<span class="token punctuation">(</span>PEXPIREAT，key，timestamp<span class="token punctuation">)</span></code></pre><h2 id="AOF后台重写"><a href="#AOF后台重写" class="headerlink" title="AOF后台重写"></a>AOF后台重写</h2><p>因为aof_rewrite函数会进行大量的写入操作，所以调用这个函数的线程将被长时间阻塞</p><p>因为Redis服务器使用单个线程来处理命令请求，所以如果由服务器直接调用aof_rewrite函数的话，那么在重写AOF文件期间，服务器将无法处理客户端发来的命令请求。</p><p>所以决定将AOF重写程序放到<strong>子进程</strong>中执行</p><ul><li>子进程在进行AOF重写期间，服务器进程可以进行处理命令请求</li><li>子进程带有服务器进程的<strong>数据副本</strong>，使用子进程而不是线程，可以在避免使用锁的情况下，保证数据的安全性</li></ul><p>但是有可能导致当前数据库状态和重写后的AOF文件所保存的数据库<strong>状态不一致</strong></p><h3 id="AOF重写缓冲区"><a href="#AOF重写缓冲区" class="headerlink" title="AOF重写缓冲区"></a>AOF重写缓冲区</h3><p>为了解决数据不一致问题，Redis服务器设置了一个AOF重写缓冲区，这个缓冲区在服务器创建子进程之后开始使用，当Redis服务器执行完一个写命令之后，会同时将这个命令发送给<strong>AOF缓冲区和AOF重写缓冲区</strong></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210207114138147.png" alt="image-20210207114138147"></p><p>在子进程执行AOF重写期间，服务器进程执行:</p><ol><li>执行客户端发来的指令</li><li>将执行后的写命令追加到AOF缓冲区</li><li>将执行后的写命令追加到AOF重写缓冲区</li></ol><p>这样一来可以<strong>保证</strong></p><ul><li>AOF缓冲区的内容会定期被写入和同步到AOF文件，对现有AOF文件的处理工作会如常进行。</li><li>从创建子进程开始，服务器执行的所有写命都会被记录到AOF重写缓冲区里面。</li></ul><p>当子进程完成AOF重写工作之后，它会向父进程发送一个信号，父进程在接到该信号之后，会调用一个信号处理函数，并执行以下工作：</p><ul><li>将AOF重写缓冲区中的所有内容重写到新AOF文件中，这时新AOF文件保存的数据库状态将<strong>和服务器当前的数据库状态一致</strong>。</li><li>对新的AOF文件进行改名，原子地(atomic)覆盖现有地AOF文件，完成<strong>新旧两个AOF文件地替换</strong>。</li></ul><p>这个信号处理函数执行完毕后，父进程可以继续像往常一样接收命令请求了</p><p>在整个AOF后台重写过程中，只有<strong>信号处理函数执行时会对服务器进程（父进程）造成阻塞</strong>，在其他时候，AOF后台重写都不会阻塞父进程，这将AOF重写对服务器性能造成的影响降到了最低。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> AOF持久化 </tag>
            
            <tag> AOF重写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RDB持久化</title>
      <link href="posts/5f64b03b.html"/>
      <url>posts/5f64b03b.html</url>
      
        <content type="html"><![CDATA[<h1 id="RDB文件的创建与载入"><a href="#RDB文件的创建与载入" class="headerlink" title="RDB文件的创建与载入"></a>RDB文件的创建与载入</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p><strong>SAVE指令</strong>会阻塞Redis服务器进程，直到RDB文件创建完毕为止，在服务器进程阻塞期间，服务器不能处理任何命令请求，所以当Save命令正在执行时，客户端发送的所有命令请求都会被阻塞</p><p><strong>BGSAVE命令</strong>会派生出一个子进程，由它负责创建RDB文件，服务器进程(父进程)继续处理命令请求。</p><p>1、在BGSAVE命令执行期间，客户端发送的SAVE命令会被服务器拒绝。服务器禁止SAVE与BGSAVE同时执行是为了避免父进程和子进程同时指向两个rdbSave调用，防止产生竞争条件。</p><p>2、同样的道理，在BGSAVE执行期间，客户端的BGSAVE命令也会被服务器拒绝。</p><p>3、另外，对于AOF持久化命令BGREWRITEAOF与BGSAVE也同样是互斥关系，如果BGSAVE正在执行，则BGREWRITEAOF命令会被延迟到BGSAVE执行完毕之后；而BGREWRITEAOF命令执行时，服务器会拒绝BGSAVE命令的执行。</p><p>4、而事实上，因为BGREWRITEAOF命令与BGSAVE两个命令的实际工作都是由子进程执行，所以这两个命令在操作方面并没有冲突的地方，不能同时执行只是性能方面的考虑–并发处两个子进程，并且这两个子进程同时对磁盘进行大量读写。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">SAVE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#创建RDB文件</span>    rdbSave（）<span class="token keyword">def</span> <span class="token function">BGSAVE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建子进程</span>    pid<span class="token operator">=</span>fork<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 子进程负责创建RDB文件</span>        rdbSave（）        <span class="token comment" spellcheck="true"># 完成之后向父进程发送信号</span>        signal_parent<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> pid<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 父进程继续处理命令请求，并通过轮询等待子进程的信号</span>        handle_request_and_wait_signal<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 处理出错情况</span>        handle_fork_error<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="载入"><a href="#载入" class="headerlink" title="载入"></a>载入</h2><ul><li>RDB文件的载入工作是服务器启动时自动进行的，只要Redis服务器在启动时检测到RDB文件存在，就会自动载入RDB文件</li><li>如果服务器开启了AOF持久化功能，则优先使用AOF文件还原数据库状态</li><li>只有未开启AOF持久化功能，才会使用RDB文件还原数据库状态</li><li>服务器在载入RDB文件时会一直处于阻塞状态，直到载入工作完成</li></ul><h1 id="自动间隔性保存"><a href="#自动间隔性保存" class="headerlink" title="自动间隔性保存"></a>自动间隔性保存</h1><p>服务器每隔一段时间自动执行一次BGSAVE命令，可以设置多个保存条件，只要任意一个条件被满足，服务器就会执行BGSAVE指令</p><pre class=" language-c"><code class="language-c">save <span class="token number">900</span> <span class="token number">1</span>save <span class="token number">300</span> <span class="token number">10</span>save <span class="token number">60</span> <span class="token number">10000</span>服务器在<span class="token number">900</span>秒内进行了至少<span class="token number">1</span>次修改服务器在<span class="token number">300</span>秒内进行了至少<span class="token number">10</span>次修改服务器在<span class="token number">60</span>秒内进行了至少<span class="token number">10000</span>次修改</code></pre><h2 id="设置保存条件"><a href="#设置保存条件" class="headerlink" title="设置保存条件"></a>设置保存条件</h2><p>服务器程序根据save选项（可通过配置文件设置）所设置的保存条件，设置服务器状态的redisServer结构的saveparams属性</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> redisServer<span class="token punctuation">{</span>    <span class="token keyword">struct</span> saveparam <span class="token operator">*</span> saveparams<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> dirty<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//距离上一次成功执行BGSAVE之后，进行修改的次数</span>    time_t lastsave<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//上一次成功执行BGSAVE的时间</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> saveparam<span class="token punctuation">{</span>    time_t seconds<span class="token punctuation">;</span>    <span class="token keyword">int</span> changes<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="检查保存条件是否满足"><a href="#检查保存条件是否满足" class="headerlink" title="检查保存条件是否满足"></a>检查保存条件是否满足</h2><p>服务器周期性操作函数serverCron()默认每隔100ms执行一次</p><p>其中一项工作就是检查save选项所设置的保存条件是否已经满足</p><p>如果满足，则执行BGSAVE（）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">serverCron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 遍历所有保存条件</span>    <span class="token keyword">for</span> saveparam <span class="token keyword">in</span> server<span class="token punctuation">.</span>saveparams<span class="token punctuation">:</span>        save_interval<span class="token operator">=</span>unixtime_now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> server<span class="token punctuation">.</span>lastsave        <span class="token comment" spellcheck="true">#如果数据库状态的修改次数超过条件所设置的次数</span>        <span class="token comment" spellcheck="true">#并且距离上次保存的时间超过条件所设置的时间</span>        <span class="token comment" spellcheck="true">#那么执行保存操作</span>        <span class="token keyword">if</span> server<span class="token punctuation">.</span>dirty <span class="token operator">>=</span> saveparam<span class="token punctuation">.</span>changes <span class="token operator">and</span> save_interval<span class="token operator">></span>saveparam<span class="token punctuation">.</span>seconds<span class="token punctuation">:</span>            BGSAVE<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="RDB文件结构"><a href="#RDB文件结构" class="headerlink" title="RDB文件结构"></a>RDB文件结构</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ol><li>REDIS，通过这五个字符，程序可以在载入文件时，快速检查所载入的文件是否是RDB文件</li><li>db_version，记录了版本号</li><li>databases，包含任意个数据库以及他们的键值对数据。</li><li>EOF，标志着RDB文件正文内容的结束</li><li>check_sum，校验和，检查RDB文件是否有出错或损坏的情况。服务器在载入RDB文件时，会将载入数据所计算出的校验和与check_sum进行比对，已发行RDB文件是否损坏</li></ol><h2 id="databases"><a href="#databases" class="headerlink" title="databases"></a>databases</h2><p>每个非空数据库保存三部分：</p><ol><li>SELECTDB 常量，说明接下来会读取一个数据库号码</li><li>db_number，读入后，调用SELECT指令，进行数据库切换，使得之后读入的键值对可以载入到正确的数据库之中</li><li>key_value_pairs，保存了数据库中的所有键值对数据。包含过期时间。</li></ol><h2 id="key-value-pairs"><a href="#key-value-pairs" class="headerlink" title="key_value_pairs"></a>key_value_pairs</h2><ol><li>TYPE记录了value的类型，代表了一种对象类型或底层编码。程序根据TYPE的值决定如何读入和解释value的数据</li><li>key总是一个字符串对象</li><li>value根据TYPE的指令保存相应类型的内容</li><li>EXPIRETIME_MS常量，代表之后会读取一个以毫秒为单位的过期时间</li><li>ms，保存键值对的过期时间，以毫秒为单位的UNIX时间戳</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> RDB </tag>
            
            <tag> BGSAVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis数据库</title>
      <link href="posts/eb52a7b2.html"/>
      <url>posts/eb52a7b2.html</url>
      
        <content type="html"><![CDATA[<h1 id="服务器中的数据库"><a href="#服务器中的数据库" class="headerlink" title="服务器中的数据库"></a>服务器中的数据库</h1><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> redisServer<span class="token punctuation">{</span>    <span class="token keyword">int</span> dbnum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//服务器的数据库数量</span>    redisDb <span class="token operator">*</span>db<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一个数组，保存着服务器中的所有数据库 默认16</span><span class="token punctuation">}</span></code></pre><h1 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h1><p>每个Redis客户端都有个目标数据库，每当客户端执行数据库读写命令时，目标数据库就成为这些命令的操作对象.默认目标数据库为0号数据库</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> redisClient<span class="token punctuation">{</span>    redisDb <span class="token operator">*</span> db<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录客户端当前使用的数据库</span><span class="token punctuation">}</span>redisClient<span class="token punctuation">;</span></code></pre><h1 id="数据库键空间"><a href="#数据库键空间" class="headerlink" title="数据库键空间"></a>数据库键空间</h1><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> redisDb<span class="token punctuation">{</span>    dict <span class="token operator">*</span>dict<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据库键空间，保存着数据库中的所有键值对</span><span class="token punctuation">}</span> redisDb<span class="token punctuation">;</span></code></pre><p>键空间的键是一个字符串对象，值可以是字符串对象，列表对象，哈希表对象，集合对象，有序集合对象</p><p>所有针对数据库的操作，都是通过对键空间字典进行操作实现的</p><h2 id="添加新键"><a href="#添加新键" class="headerlink" title="添加新键"></a>添加新键</h2><p>就是将新键值对添加到键空间字典里面</p><h2 id="读写键空间时的维护操作"><a href="#读写键空间时的维护操作" class="headerlink" title="读写键空间时的维护操作"></a>读写键空间时的维护操作</h2><ul><li>在读取一个键后(读写操作都要对键进行读取)，服务器会根据键是否存在来更新服务器的键空间命中次数</li><li>在读取一个键后，会更新LRU时间，可以计算键的闲置时间</li><li>在读取一个键若发现该键已过期，则会先删除过期键</li><li>在对被监视的键进行修改后，会标记为脏，让事务程序注意该键已经被修改</li></ul><h1 id="设置键的生存时间或过期时间"><a href="#设置键的生存时间或过期时间" class="headerlink" title="设置键的生存时间或过期时间"></a>设置键的生存时间或过期时间</h1><h2 id="设置过期时间"><a href="#设置过期时间" class="headerlink" title="设置过期时间"></a>设置过期时间</h2><ol><li>EXPIRE 设置过期时间，单位为秒</li><li>PEXPIRE 设置过期时间，单位为毫秒</li><li>EXPIREAT 设置过期时间为秒数时间戳</li><li>PEXPIREAT 设置过期时间为毫秒数时间戳</li></ol><p>最后都是转换为PEXPIREAT来执行的</p><h2 id="保存过期时间"><a href="#保存过期时间" class="headerlink" title="保存过期时间"></a>保存过期时间</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> redisDb<span class="token punctuation">{</span>    dict <span class="token operator">*</span>dict<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据库键空间，保存着数据库中的所有键值对</span>    dict <span class="token operator">*</span>expires<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存了数据库中所有键的过期时间，过期字典</span>    <span class="token comment" spellcheck="true">//key是一个指针，指向键空间某个键</span>    <span class="token comment" spellcheck="true">//value为long long类型的过期时间，一个毫秒精度的UNIX时间戳</span><span class="token punctuation">}</span> redisDb<span class="token punctuation">;</span></code></pre><p>键空间的键和过期字典的键都指向同一个键对象，不会出现任何重复对象，也不会浪费任何空间</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">PEXPIREAT</span><span class="token punctuation">(</span>key，expire_time_in_ms<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">#如果给定的键不存在键空间，那么不能设置过期时间</span>    <span class="token keyword">if</span> key <span class="token operator">not</span> <span class="token keyword">in</span> redisDb<span class="token punctuation">.</span>dict<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">#在过期字典中关联键和过期时间</span>    redisDb<span class="token punctuation">.</span>expires<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> expire_time_in_ms    <span class="token comment" spellcheck="true"># 过期时间设置成功</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><h2 id="移除过期时间"><a href="#移除过期时间" class="headerlink" title="移除过期时间"></a>移除过期时间</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">PERSIST</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#如果给定的键不存在或没设置过期时间，那么直接返回</span>     <span class="token keyword">if</span> key <span class="token operator">not</span> <span class="token keyword">in</span> redisDb<span class="token punctuation">.</span>expires<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">#移除过期字典中给定键的键值对关联</span>    redisDb<span class="token punctuation">.</span>expires<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#移除成功</span>    <span class="token keyword">return</span> <span class="token number">1</span></code></pre><h2 id="计算并返回剩余生存时间"><a href="#计算并返回剩余生存时间" class="headerlink" title="计算并返回剩余生存时间"></a>计算并返回剩余生存时间</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">PTTL</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#如果给定的键不存在数据库</span>    <span class="token keyword">if</span> key <span class="token operator">not</span> <span class="token keyword">in</span> redisDb<span class="token punctuation">.</span>dict<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span>    <span class="token comment" spellcheck="true">#尝试获取过期时间</span>    <span class="token comment" spellcheck="true">#没有则为None</span>    expire_time_in_ms<span class="token operator">=</span>redisDb<span class="token punctuation">.</span>expires<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> expire_time_in_ms <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token comment" spellcheck="true"># 获取当前时间时间戳</span>    now_ms<span class="token operator">=</span>get_current_unix_timestamp_in_ms<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>expire_time_in_ms <span class="token operator">-</span> now_ms<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">TTL</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    ttl_in_ms <span class="token operator">=</span> PTTL<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> ttl_in_ms<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token operator">//</span>处理为<span class="token operator">-</span><span class="token number">2</span>，<span class="token operator">-</span><span class="token number">1</span>的异常情况        <span class="token keyword">return</span> ttl_in_ms    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#将毫秒转为秒</span>        <span class="token keyword">return</span> ms_to_sec<span class="token punctuation">(</span>ttl_in_ms<span class="token punctuation">)</span></code></pre><h2 id="过期键的判断"><a href="#过期键的判断" class="headerlink" title="过期键的判断"></a>过期键的判断</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_expired</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#尝试获取过期时间</span>    <span class="token comment" spellcheck="true">#没有则为None</span>    expire_time_in_ms<span class="token operator">=</span>redisDb<span class="token punctuation">.</span>expires<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> expire_time_in_ms <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true"># 获取当前时间时间戳</span>    now_ms<span class="token operator">=</span>get_current_unix_timestamp_in_ms<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span>  now_ms<span class="token operator">></span>expire_time_in_ms<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token comment" spellcheck="true"># 已过期</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><h1 id="过期键删除策略"><a href="#过期键删除策略" class="headerlink" title="过期键删除策略"></a>过期键删除策略</h1><h2 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a>定时删除</h2><ul><li><p>在设置键的过期时间的同时，创建一个定时器，让定时器在键的过期时间来临时，立即执行对键的删除操作</p></li><li><p>可以保证过期键会尽可能快地被删除，并释放过期键所占用的内存</p></li><li><p>对CPU时间最不友好，在内存不紧张而CPU非常紧张的情况下，将CPU时间用在删除和当前任务无关的过期键上，对服务器的响应时间和吞吐量造成影响</p></li><li><p>不太现实</p></li></ul><h2 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h2><ul><li><p>每次取出键都会检查是否过期，过期则删除</p></li><li><p>只有在取出键时才会对键进行过期检查，对CPU时间最友好</p></li><li><p>对内存最不友好：如果一个键已过期，而这个键又仍然保留在数据库中，那么只要这个过期键不被删除，他所占用的内存就不会释放。</p></li><li><p>会导致内存泄漏，无用的垃圾数据占用了大量内存。如日志，当不再使用时，会大量积压在数据库，用户以为自动删除了，其实还存在，则它们不会被删除，所占用的内存就不会释放。</p></li></ul><h2 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h2><ul><li>每隔一段时间进行检查，删除里面的过期键</li><li>通过限制删除操作执行的时长和频率来减少删除操作对CPU时间的影响；定期删除策略有效减少了因为过期键而带来的内存浪费。是前两种的整合与折中。</li><li>必须合理地设置删除操作的执行时间和执行效率：太频繁或执行时间太长会退化为定时删除策略，反之则出现浪费内存的情况</li></ul><h1 id="Redis过期键删除策略"><a href="#Redis过期键删除策略" class="headerlink" title="Redis过期键删除策略"></a>Redis过期键删除策略</h1><p>配合使用<strong>惰性删除</strong>和<strong>定期删除</strong>两种</p><h2 id="惰性删除策略的实现"><a href="#惰性删除策略的实现" class="headerlink" title="惰性删除策略的实现"></a>惰性删除策略的实现</h2><p>所有读写数据库的Redis命令在执行之前都会调用expireIfNeeded函数对输入键进行检查，如果输入键已过期，则将输入键从数据库中删除</p><p>采用expireIfNeeded函数，如果过期则将键删除。就像过滤器，在命令真正执行前，过滤掉过期的输入键，避免命令接触到过期键</p><p>所以每个命令的实现函数必须能同时处理键存在和不存在两种情况</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210207104150550.png" alt="image-20210207104150550"></p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210207104206293.png" alt="image-20210207104206293"></p><h2 id="定期删除策略实现"><a href="#定期删除策略实现" class="headerlink" title="定期删除策略实现"></a>定期删除策略实现</h2><p>每当Redis服务器周期性操作serverCron函数执行时，activeExpireCycle函数就会被调用，它在规定的时间内，分多次遍历服务器中的各个数据库，从数据库的expires字典中随机检查一部分键的过期时间，并删除其中的过期键</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># 默认每次检查的数据库数量</span>DEFAULT_DB_NUMBERS <span class="token operator">=</span> <span class="token number">16</span><span class="token comment" spellcheck="true"># 默认每个数据库检查的键数量</span>DEFAULT_KEY_NUMBERS <span class="token operator">=</span> <span class="token number">20</span><span class="token comment" spellcheck="true"># 全局变量，记录检查进度</span><span class="token comment" spellcheck="true"># 如果当前的activeExpireCycle函数在遍历10号数据库时返回了，那么下次activeExpireCycle函数时，将从11号数据库开始查找并删除过期键</span>current_db <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 函数每次运行时，都从一定数量的数据库中取出一定数量的随机键进行检查，并删除其中的过期键</span><span class="token keyword">def</span> <span class="token function">activeExpireCycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 初始化要检查的数据库数量</span>    <span class="token comment" spellcheck="true"># 以服务器的数据库数量为主</span>    <span class="token keyword">if</span> serer<span class="token punctuation">.</span>dbnum <span class="token operator">&lt;</span> DEFAULT_DB_NUMBERS<span class="token punctuation">:</span>        db_numbers <span class="token operator">=</span> serer<span class="token punctuation">.</span>dbnum    <span class="token keyword">else</span><span class="token punctuation">:</span>        db_numbers <span class="token operator">=</span> DEFAULT_DB_NUMBERS    <span class="token comment" spellcheck="true">#遍历每个数据库</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>db_numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#如果current_db=服务器的数据库数量</span>        <span class="token comment" spellcheck="true">#则表示已经遍历了服务器的所有数据库一次</span>        <span class="token comment" spellcheck="true">#将current_db=重置为0，开始新一轮</span>        <span class="token keyword">if</span> current_db<span class="token operator">==</span>server<span class="token punctuation">.</span>dbnum<span class="token punctuation">:</span>            current_db<span class="token operator">=</span><span class="token number">0</span>        <span class="token comment" spellcheck="true">#获取当前要处理的数据库</span>        redisDb<span class="token operator">=</span>server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>current_db<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#指向下一个要处理的数据库</span>        current_db<span class="token operator">+=</span><span class="token number">1</span>        <span class="token comment" spellcheck="true">#检查数据库的键</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>DEFAULT_KEY_NUMBERS<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#如果数据库中没有一个键带有过期时间，则跳过该数据库</span>            <span class="token keyword">if</span> redisDb<span class="token punctuation">.</span>expires<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token comment" spellcheck="true">#随机获取一个带过期时间的键</span>            key_with_ttl<span class="token operator">=</span>redisDb<span class="token punctuation">.</span>expires<span class="token punctuation">.</span>get_random_key<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> is_expired<span class="token punctuation">(</span>key_with_ttl<span class="token punctuation">)</span><span class="token punctuation">:</span>                delete_key<span class="token punctuation">(</span>key_with_ttl<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 已到达时间上限，停止处理</span>            <span class="token keyword">if</span> reach_time_limit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> </code></pre><h1 id="AOF、RDB和复制功能对过期键的处理"><a href="#AOF、RDB和复制功能对过期键的处理" class="headerlink" title="AOF、RDB和复制功能对过期键的处理"></a>AOF、RDB和复制功能对过期键的处理</h1><h2 id="生成RDB文件"><a href="#生成RDB文件" class="headerlink" title="生成RDB文件"></a>生成RDB文件</h2><p>在执行SAVE命令或者BGSAVE命令创建一个新的RDB文件时，程序会对数据库中的键进行检查，已过期的键不会被保存到新创建的RDB文件中</p><p>因此，数据库中包含过期键不会对生成新的RDB文件造成影响</p><h2 id="载入RDB文件"><a href="#载入RDB文件" class="headerlink" title="载入RDB文件"></a>载入RDB文件</h2><p>在启动Redis服务器时，如果服务器开启了RDB功能，那么服务器将对RDB文件进行载入：</p><ul><li>如果服务器以主服务器模式运行，那么在载入RDB文件时，程序会对文件中保存的键进行检查，未过期的键会被载入到数据库中，而过期键则会被忽略，所以过期键对载入RDB文件的主服务器不会造成影响；</li><li>如果服务器以从服务器模式运行，那么在载入RDB文件时，<strong>文件中保存的所有键，不论是否过期，都会被载入到数据库中</strong>。不过，因为主从服务器在进行数据同步的时候，从服务器的数据库就会被清空，所以一般来讲，过期键对载入RDB文件的从服务器也不会造成影响</li></ul><h2 id="AOF文件写入"><a href="#AOF文件写入" class="headerlink" title="AOF文件写入"></a>AOF文件写入</h2><p>当服务器以AOF持久化模式运行时，如果数据库中的某个键已经过期，但它还没有被惰性删除或者定期删除，那么AOF文件不会因为这个过期键而产生任何影响。</p><p><strong>当过期键被惰性删除或者定期删除之后，程序会向AOF文件追加（append）一条DEL命令，来显式地记录该键已被删除。</strong><br>举个例子，如果客户端使用GET message命令，试图访问过期的message键，那么服务器将执行以下三个动作：<br>1）从数据库中删除message键。<br>2）追加一条DEL message命令到AOF文件。（根据AOF文件增加的特点，AOF只有在客户端进行请求的时候才会有这个DEL操作）<br>3）向执行GET命令的客户端返回空回复。</p><h2 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h2><p>和生成RDB文件时类似，在执行AOF重写的过程中，程序会对数据库中的键进行检查，已过期的键不会被保存到重写后的AOF文件中。</p><p>举个例子，如果数据库中包含三个键k1、k2、k3，并且k2已经过期，那么在进行重写工作时，程序只会对k1和k3进行重写，而k2则会被忽略。</p><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>当服务器运行在复制模式下时，从服务器的过期键删除动作由主服务器控制：</p><ul><li>主服务器在删除一个过期键之后，<strong>会显式地向所有从服务器发送一个DEL命令，告知从服务器删除这个过期键</strong>；</li><li><strong>从服务器在执行客户端发送的读命令时，即使碰到过期键也不会将过期键删除</strong>，而是继续像处理未过期的键一样来处理过期键；</li><li><strong>从服务器只有在接到主服务器发来的DEL命令之后</strong>，才会删除过期键。</li></ul><p>举个例子，有一对主从服务器，它们的数据库中都保存着同样的三个键message、xxx和yyy，其中message为过期键，如图所示</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210207105328925.png" alt="image-20210207105328925"></p><p>如果这时有客户端向从服务器发送命令GET message，那么从服务器将发现message键已经过期，但从服务器并不会删除message键，而是继续将message键的值返回给客户端，就好像message键并没有过期一样。</p><p>假设在此之后，有客户端向主服务器发送命令GET message，那么主服务器将发现键message已经过期：主服务器会删除message键，向客户端返回空回复，并向从服务器发送DEL message命令，如图所示：</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210207105343364.png" alt="image-20210207105343364"></p><p>从服务器在接收到主服务器发来的DEL message命令之后，也会从数据库中删除message键，在这之后，主从服务器都不再保存过期键message了，如图所示：</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210207105359103.png" alt="image-20210207105359103"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 删除过期键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis分布式锁</title>
      <link href="posts/cc4d73b2.html"/>
      <url>posts/cc4d73b2.html</url>
      
        <content type="html"><![CDATA[<h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在单机环境中，应用是在同一进程下的，只需要保证单进程多线程环境中的线程安全性，通过 JAVA 提供的 volatile、ReentrantLock、synchronized 以及 concurrent 并发包下一些线程安全的类等就可以做到。</p><p>一个应用往往会部署在多台机器上（多节点），在某些场景中，多个进程必须以互斥的方式独占共享资源。因此需要使用分布式锁</p><h2 id="setnx（set-if-not-exists"><a href="#setnx（set-if-not-exists" class="headerlink" title="setnx（set if not exists)"></a>setnx（set if not exists)</h2><pre><code>SETNX key value</code></pre><p>SET if Not eXists(如果不存在，则 SET)</p><p>命令在设置成功时返回 1 ，设置失败时返回 0 。</p><p>用来实现Redis锁机制，一个进程进来占坑，用完后再调用del指令释放坑</p><p>只在键 key 不存在的情况下，将键 key 的值设置为 value 。若键 key 已经存在， 则 SETNX 命令不做任何动作。</p><p><strong>中间代码异常</strong></p><p>如果逻辑执行到中间出现异常，可能导致del指令没有被调用，就会陷入死锁，锁永远得不到释放</p><p>可以再拿到锁以后再给锁加上一个过期时间，比如5s，这样即使中间出现异常也可以保证5s后锁会自动释放</p><pre class=" language-redis"><code class="language-redis">setnx tongji4m3 trueexpire tongji4m3 5del tongji4m3</code></pre><p><strong>expire异常</strong></p><p>如果在setnx和expire之间服务器出现问题，导致expire得不到执行，也会死锁</p><p>根源在于setnx和expire不是一条原子指令，但又不能用事务解决，因为expire依赖与setnx的执行结果，如果setnx没抢到锁，expire是不应该执行的，而事务没有if-else分支逻辑</p><p>Redis支持set指令的扩展参数，使得setnx和expire指令可以一起执行，形成原子指令</p><pre><code>SETEX key seconds valueSET key value [EX seconds] [PX milliseconds] [NX|XX]set tongji4m3 true ex 5 nxNX:只在键不存在时， 才对键进行设置操作。XX:只在键已经存在时， 才对键进行设置操作。</code></pre><p>将值 <code>value</code> 关联到 <code>key</code> ，并将 <code>key</code> 的生存时间设为 <code>seconds</code> (以秒为单位)。</p><p>如果 <code>key</code> 已经存在，<code>setex</code>命令将覆写旧值。</p><p>有小伙伴肯定会疑惑万一set value 成功 set time失败，那不就傻了么，这啊Redis官网想到了。</p><p><code>setex</code>是一个原子性(atomic)操作，关联值和设置生存时间两个动作会在同一时间内完成。</p><p>单机加锁或synchronized就够了</p><p>但如果线程挂了,那锁就一直在那无法得到释放，后面的线程也永远得不到锁，又死锁了。</p><p>setex设置一个过期时间，就算线程1挂了，也会在失效时间到了，自动释放。</p><p><strong>超时问题</strong></p><p>如果在加锁和释放锁之间的逻辑执行得太长，以至于超出了锁的超时限制，会导致第一个线程持有的锁过期了而临界区的逻辑还没执行完</p><p>Redis分布式锁不能用于较长时间的任务</p><p>将set指令的value参数设置为随机数，释放锁时先匹配随机数是否一致，然后再删除key，确保当前线程持有的锁不会被其他线程释放，除非这个锁是因为过期了而被服务器自己释放的</p><p>但是匹配value和删除key不是一个原子操作，需要要Lua脚本处理，他保证多个指令的原子性执行</p><p><strong>可重入性</strong></p><p>线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，就是可重入锁</p><p>分布式锁要支持可重入，则要使用线程的Threadlocal变量存储当前持有锁的计数</p><h2 id="redisson"><a href="#redisson" class="headerlink" title="redisson"></a>redisson</h2><p>redisson的锁，就实现了可重入</p><pre class=" language-java"><code class="language-java">ThreadPoolExecutor threadPoolExecutor <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>inventory<span class="token punctuation">,</span> inventory<span class="token punctuation">,</span> 10L<span class="token punctuation">,</span> SECONDS<span class="token punctuation">,</span> linkedBlockingQueue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Config config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"redis://127.0.0.1:6379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> RedissonClient client <span class="token operator">=</span> Redisson<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> RLock lock <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"lock1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    threadPoolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            inventory<span class="token operator">--</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inventory<span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行线程数:"</span> <span class="token operator">+</span> NUM <span class="token operator">+</span> <span class="token string">"   总耗时:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  库存数为:"</span> <span class="token operator">+</span> inventory<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> RLock <span class="token function">getLock</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedissonLock</span><span class="token punctuation">(</span>connectionManager<span class="token punctuation">.</span><span class="token function">getCommandExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">RedissonLock</span><span class="token punctuation">(</span>CommandAsyncExecutor commandExecutor<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>commandExecutor<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//命令执行器</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>commandExecutor <span class="token operator">=</span> commandExecutor<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//UUID字符串</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> commandExecutor<span class="token punctuation">.</span><span class="token function">getConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//内部锁过期时间</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>internalLockLeaseTime <span class="token operator">=</span> commandExecutor<span class="token punctuation">.</span>                <span class="token function">getConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLockWatchdogTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>entryName <span class="token operator">=</span> id <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> name<span class="token punctuation">;</span></code></pre><h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当前线程ID</span>    <span class="token keyword">long</span> threadId <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//尝试获取锁</span>    Long ttl <span class="token operator">=</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果ttl为空，则证明获取锁成功</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ttl <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果获取锁失败，则订阅到对应这个锁的channel</span>    RFuture<span class="token operator">&lt;</span>RedissonLockEntry<span class="token operator">></span> future <span class="token operator">=</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    commandExecutor<span class="token punctuation">.</span><span class="token function">syncSubscription</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//再次尝试获取锁</span>            ttl <span class="token operator">=</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//ttl为空，说明成功获取锁，返回</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ttl <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//ttl大于0 则等待ttl时间后继续尝试获取</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ttl <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">getEntry</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>ttl<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">getEntry</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//取消对channel的订阅</span>        <span class="token function">unsubscribe</span><span class="token punctuation">(</span>future<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//get(lockAsync(leaseTime, unit));</span><span class="token punctuation">}</span></code></pre><h3 id="获取锁"><a href="#获取锁" class="headerlink" title="获取锁"></a>获取锁</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> RFuture<span class="token operator">&lt;</span>Long<span class="token operator">></span> <span class="token function">tryAcquireAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果带有过期时间，则按照普通方式获取锁</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">tryLockInnerAsync</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">,</span> RedisCommands<span class="token punctuation">.</span>EVAL_LONG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//先按照30秒的过期时间来执行获取锁的方法</span>    RFuture<span class="token operator">&lt;</span>Long<span class="token operator">></span> ttlRemainingFuture <span class="token operator">=</span> <span class="token function">tryLockInnerAsync</span><span class="token punctuation">(</span>        commandExecutor<span class="token punctuation">.</span><span class="token function">getConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLockWatchdogTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span> threadId<span class="token punctuation">,</span> RedisCommands<span class="token punctuation">.</span>EVAL_LONG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果还持有这个锁，则开启定时任务不断刷新该锁的过期时间</span>    ttlRemainingFuture<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FutureListener</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span>Future<span class="token operator">&lt;</span>Long<span class="token operator">></span> future<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>future<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Long ttlRemaining <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// lock acquired</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ttlRemaining <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ttlRemainingFuture<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="底层加锁逻辑"><a href="#底层加锁逻辑" class="headerlink" title="底层加锁逻辑"></a>底层加锁逻辑</h3><p>你可能会想这么多操作，在一起不是原子性不还是有问题么？</p><p>大佬们肯定想得到呀，所以还是LUA，他使用了Hash的数据结构。</p><p>主要是判断锁是否存在，存在就设置过期时间，如果锁已经存在了，那对比一下线程，线程是一个那就证明可以重入，锁在了，但是不是当前线程，证明别人还没释放，那就把剩余时间返回，加锁失败。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>T<span class="token operator">></span> RFuture<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">tryLockInnerAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">,</span>                                 <span class="token keyword">long</span> threadId<span class="token punctuation">,</span> RedisStrictCommand<span class="token operator">&lt;</span>T<span class="token operator">></span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//过期时间</span>        internalLockLeaseTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> commandExecutor<span class="token punctuation">.</span><span class="token function">evalWriteAsync</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LongCodec<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">,</span> command<span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true">//如果锁不存在，则通过hset设置它的值，并设置过期时间</span>                  <span class="token string">"if (redis.call('exists', KEYS[1]) == 0) then "</span> <span class="token operator">+</span>                      <span class="token string">"redis.call('hset', KEYS[1], ARGV[2], 1); "</span> <span class="token operator">+</span>                      <span class="token string">"redis.call('pexpire', KEYS[1], ARGV[1]); "</span> <span class="token operator">+</span>                      <span class="token string">"return nil; "</span> <span class="token operator">+</span>                  <span class="token string">"end; "</span> <span class="token operator">+</span>                  <span class="token comment" spellcheck="true">//如果锁已存在，并且锁的是当前线程，则通过hincrby给数值递增1</span>                  <span class="token string">"if (redis.call('hexists', KEYS[1], ARGV[2]) == 1) then "</span> <span class="token operator">+</span>                      <span class="token string">"redis.call('hincrby', KEYS[1], ARGV[2], 1); "</span> <span class="token operator">+</span>                      <span class="token string">"redis.call('pexpire', KEYS[1], ARGV[1]); "</span> <span class="token operator">+</span>                      <span class="token string">"return nil; "</span> <span class="token operator">+</span>                  <span class="token string">"end; "</span> <span class="token operator">+</span>                  <span class="token comment" spellcheck="true">//如果锁已存在，但并非本线程，则返回过期时间ttl</span>                  <span class="token string">"return redis.call('pttl', KEYS[1]);"</span><span class="token punctuation">,</span>        Collections<span class="token punctuation">.</span>&lt;Object<span class="token operator">></span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 internalLockLeaseTime<span class="token punctuation">,</span> <span class="token function">getLockName</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h3><p>锁的释放主要是publish释放锁的信息，然后做校验，一样会判断是否当前线程，成功就释放锁，还有个<strong>hincrby</strong>递减的操作，锁的值大于0说明是可重入锁，那就刷新过期时间。</p><p>如果值小于0了，那删掉Key释放锁。</p><p>是不是又和AQS很像了？</p><p>AQS就是通过一个volatile修饰status去看锁的状态，也会看数值判断是否是可重入的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> RFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">unlockAsync</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> RPromise<span class="token operator">&lt;</span>Void<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedissonPromise</span><span class="token operator">&lt;</span>Void<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//解锁方法</span>    RFuture<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> future <span class="token operator">=</span> <span class="token function">unlockInnerAsync</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    future<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FutureListener</span><span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span>Future<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> future<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>future<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">tryFailure</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//获取返回值</span>            Boolean opStatus <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果返回空，则证明解锁的线程和当前锁不是同一个线程，抛出异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>opStatus <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                IllegalMonitorStateException cause <span class="token operator">=</span>                     <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span>"                        attempt to unlock lock<span class="token punctuation">,</span> not locked by current thread by node id<span class="token operator">:</span> "                        <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" thread-id: "</span> <span class="token operator">+</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">tryFailure</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//解锁成功，取消刷新过期时间的那个定时任务</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>opStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            result<span class="token punctuation">.</span><span class="token function">trySuccess</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> RFuture<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> <span class="token function">unlockInnerAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> commandExecutor<span class="token punctuation">.</span><span class="token function">evalWriteAsync</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LongCodec<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">,</span> EVAL<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//如果锁已经不存在， 发布锁释放的消息</span>            <span class="token string">"if (redis.call('exists', KEYS[1]) == 0) then "</span> <span class="token operator">+</span>                <span class="token string">"redis.call('publish', KEYS[2], ARGV[1]); "</span> <span class="token operator">+</span>                <span class="token string">"return 1; "</span> <span class="token operator">+</span>            <span class="token string">"end;"</span> <span class="token operator">+</span>            <span class="token comment" spellcheck="true">//如果释放锁的线程和已存在锁的线程不是同一个线程，返回null</span>            <span class="token string">"if (redis.call('hexists', KEYS[1], ARGV[3]) == 0) then "</span> <span class="token operator">+</span>                <span class="token string">"return nil;"</span> <span class="token operator">+</span>            <span class="token string">"end; "</span> <span class="token operator">+</span>            <span class="token comment" spellcheck="true">//通过hincrby递减1的方式，释放一次锁</span>            <span class="token comment" spellcheck="true">//若剩余次数大于0 ，则刷新过期时间</span>            <span class="token string">"local counter = redis.call('hincrby', KEYS[1], ARGV[3], -1); "</span> <span class="token operator">+</span>            <span class="token string">"if (counter > 0) then "</span> <span class="token operator">+</span>                <span class="token string">"redis.call('pexpire', KEYS[1], ARGV[2]); "</span> <span class="token operator">+</span>                <span class="token string">"return 0; "</span> <span class="token operator">+</span>            <span class="token comment" spellcheck="true">//否则证明锁已经释放，删除key并发布锁释放的消息</span>            <span class="token string">"else "</span> <span class="token operator">+</span>                <span class="token string">"redis.call('del', KEYS[1]); "</span> <span class="token operator">+</span>                <span class="token string">"redis.call('publish', KEYS[2], ARGV[1]); "</span> <span class="token operator">+</span>                <span class="token string">"return 1; "</span><span class="token operator">+</span>            <span class="token string">"end; "</span> <span class="token operator">+</span>            <span class="token string">"return nil;"</span><span class="token punctuation">,</span>    Arrays<span class="token punctuation">.</span>&lt;Object<span class="token operator">></span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getChannelName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         LockPubSub<span class="token punctuation">.</span>unlockMessage<span class="token punctuation">,</span> internalLockLeaseTime<span class="token punctuation">,</span> <span class="token function">getLockName</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><p>要在分布式系统中实现事务，它其实是由多个本地事务组合⽽成。</p><h2 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h2><p>(Two-phase commit protocol),⼆阶段提交,是⼀种强⼀致性设计</p><p>2PC 引 ⼊⼀个事务协调者的⻆⾊来协调管理各参与者（也可称之为各本地资源）的提交和回滚，⼆阶段分别指 的是准备（投票）和提交两个阶段。</p><p>准备阶段协调者会给各参与者发送准备命令，你可以把准备命令理解成除了提交事务之外啥事都做完 了。</p><p>同步等待所有资源的响应之后就进⼊第⼆阶段即提交阶段（注意提交阶段不⼀定是提交事务，也可能是 回滚事务）。</p><p>假如在第⼀阶段所有参与者都返回准备成功，那么协调者则向所有参与者发送提交事务命令，然后等待 所有事务都提交成功之后，返回事务执⾏成功。</p><p>假如在第⼀阶段有⼀个参与者返回失败，那么协调者就会向所有参与者发送回滚事务的请求，即分布式 事务执⾏失败。</p><p>，那第⼆阶段提交失败,是不断重试，直到所有参与者都回滚/提交成功了，因为有可能⼀些参与者的事务已经 提交成功,</p><p> 2PC 是⼀个同步阻塞协议，像第⼀阶段协调者会等待所有参与者响应才会进⾏下⼀步操作，当然 第⼀阶段的协调者有超时机制，假设因为⽹络原因没有收到某参与者的响应或某参与者挂了，那么超时 后就会判断事务失败，向所有参与者发送回滚命令。</p><p>在第⼆阶段协调者的没法超时，因为按照我们上⾯分析只能不断重试！</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>2PC 是⼀种尽量保证强⼀致性的分布式事务，因此它是同步阻塞的，⽽同步阻塞就导致⻓久的资源锁定 问题，总体⽽⾔效率低，并且存在单点故障问题，在极端条件下存在数据不⼀致的⻛险。</p><p>2PC 适⽤于数据库层⾯的分布式事务场景，⽽我们业务需求有时候不仅 仅关乎数据库，也有可能是上传⼀张图⽚或者发送⼀条短信。</p><h2 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h2><p>3PC 的出现是为了解决 2PC 的⼀些问题，相⽐于 2PC 它在参与者中也引⼊了超时机制，并且新增了⼀ 个阶段使得参与者可以利⽤这⼀个阶段统⼀各⾃的状态。</p><p>3PC 包含了三个阶段，分别是准备阶段、预提交阶段和提交阶段，对应的英⽂就是： CanCommit、 PreCommit 和 DoCommit 。</p><p>是把 2PC 的提交阶段变成了预提交阶段和提交阶段</p><h2 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h2><p>2PC 和 3PC 都是数据库层⾯的，⽽ TCC 是业务层⾯的分布式事务</p><p>Try - Confirm - Cancel 。</p><p>Try 指的是预留，即资源的预留和锁定，注意是预留。 </p><p>Confirm 指的是确认操作，这⼀步其实就是真正的执⾏了。 </p><p>Cancel 指的是撤销操作，可以理解为把预留阶段的动作撤销了。</p><p>先试探性的执⾏，如果都可以那就真正的执⾏，如果不⾏就回 滚。</p><p>⽐如说⼀个事务要执⾏A、B、C三个操作，那么先对三个操作执⾏预留动作。如果都预留成功了那么就 执⾏确认操作，如果有⼀个预留失败那就都执⾏撤销动作。</p><p>TCC 对业务的侵⼊较⼤和业务紧耦合，需要根据特定的场景和业务逻辑来设计相应的操作</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> setnx </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis应用场景</title>
      <link href="posts/b695f16b.html"/>
      <url>posts/b695f16b.html</url>
      
        <content type="html"><![CDATA[<h1 id="大量的key需要设置同一时间过期"><a href="#大量的key需要设置同一时间过期" class="headerlink" title="大量的key需要设置同一时间过期"></a>大量的key需要设置同一时间过期</h1><p>如果⼤量的key过期时间设置的过于集中，到过期的那个时间点，redis可能会出现短暂的卡顿现象。严重的话会出现缓存雪崩，我们⼀般需要在时间上加⼀个随机值，使得过期时间分散⼀些。</p><p>电商⾸⻚经常会使⽤定时任务刷新缓存，可能⼤量的数据失效时间都⼗分集中，如果失效时间⼀样，⼜刚好在失效的时间点⼤量⽤户涌⼊，就有可能造成缓存雪崩</p><p>集中过期，由于清除大量的key很耗时，会出现暂时的卡顿现象</p><p>解决方案：在设置key的过期时间时，给每个key加上随即值</p><h1 id="scan"><a href="#scan" class="headerlink" title="scan"></a>scan</h1><h2 id="背景：海量数据筛选固定前缀的key"><a href="#背景：海量数据筛选固定前缀的key" class="headerlink" title="背景：海量数据筛选固定前缀的key"></a>背景：海量数据筛选固定前缀的key</h2><p>使⽤keys指令可以扫出指定模式的key列表。</p><p>缺点：</p><p>没有limit参数，会一次性吐出所有满足条件的key</p><p>复杂度O(N)，而且Redis是单线程，顺序执行所有指令，如果实例中有千万条指令会导致Redis服务卡顿</p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><ul><li>复杂度也是O(N)，但通过游标分步进行，不会阻塞线程</li><li>基于游标的迭代器，需要基于上一次的游标延续之前的迭代过程</li><li>以0作为游标开始一次新的迭代，直到命令返回游标0完成一次遍历</li><li>不保证每次执行都返回某个给定数量的元素，支持模糊查询</li><li>一次返回的count的数量不可控，只能是大概率符合count参数</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>不会阻塞线程</li><li>提供count参数，但是count不是限定返回结果的数量，而是限定服务器单次遍历的字典槽位数量。</li><li>提供模式匹配功能</li><li>服务器不需要为游标保存状态，游标唯一状态是scan返回给客户端的游标整数</li><li>返回结果有重复，需要客户端去重</li><li>改动后的数据不确定能否遍历到</li><li>返回的游标为0才代表遍历结束</li></ul><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li>scan 0 match key99* count 1000</li><li>第一个参数是cursor整数值</li><li>第二个是key的正则模式</li><li>第三个是限制数量，限定的只是单次遍历的字典槽位数量，不是返回的结果数量 </li><li>第一次遍历时，cursor为0，然后可以将返回结果中的第一个整数作为下一个遍历的cursor，一直遍历到返回的cursor值为0</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>遍历的是hash的槽位，count表示需要遍历的槽位数。因为不是所有的槽位都会挂接链表，有些槽位也可能是空的，有些槽位可能挂接链表的元素有多个，所以返回结果数量不定</li><li>遍历顺序<ul><li>高位进位加法，从左边开始加，进位往右边移动，采用此方法，rehash后槽位在遍历顺序上是相邻的</li><li>避免字典扩容、缩容时遍历重复和遗漏</li></ul></li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>如果在Redis中形成了很大的对象（例如hash），会对集群数据的迁移带来卡顿，扩容空间、回收内存都可能卡顿，所以在平时业务开发，要尽量避免大key的产生。</li><li>如果Redis内存变化大，则很可能是由于大Key引起的，需要定位大key。而为了避免给线上Redis卡顿，使用scan命令</li><li>过程<ul><li>对于扫描出来的key，使用type获取类型</li><li>针对每种数据结构，使用对应的size或len获取大小</li><li>将大小排名的前若干名作为扫描结果展示</li><li>redis-cli -h 127.0.0.1 -p 7001 –bigkeys -i 0.1 每隔100条scan指令就休眠0.1s，不会大幅抬升Redis的ops</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Redis应用 </tag>
            
            <tag> scan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis缓存</title>
      <link href="posts/54e7f04f.html"/>
      <url>posts/54e7f04f.html</url>
      
        <content type="html"><![CDATA[<h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><p>查询某个Key对应的数据，Redis缓存中没有相应的数据，则直接到数据库中查询。数据库中也不存在要查询的数据，则数据库会返回空，而Redis也不会缓存这个空结果。这就造成每次通过这样的Key去查询数据都会直接到数据库中查询，Redis不会缓存空结果。这就造成了缓存穿透的问题。</p><p>一些恶意的请求会故意查询不存在的 key，请求量很大，就会对后端系统造成很大的压力。这就叫做缓存穿透。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ol><li>采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。</li><li>如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。</li><li>根据明显错误的key在逻辑层就就行验证。</li><li>分析用户行为，是否为故意请求或者爬虫、攻击者。针对用户访问做限制。</li></ol><h1 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h1><p>缓存在某个时间点过期的时候，恰好在这个时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p>缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，好像蛮力击穿一样。</p><p>击穿和穿透不同，穿透的意思是想法绕过redis去使得数据库崩掉。而击穿你可以理解为<code>正面刚</code>击穿，这种通常为大量并发对一个key进行大规模的读写操作。这个key在缓存失效期间大量请求数据库，对数据库造成太大压力使得数据库崩掉。就比如在秒杀场景下10000块钱的mac和100块的mac这个100块的那个订单肯定会被抢到爆，不断的请求(当然具体秒杀有自己处理方式这里只是举个例子)。所以缓存击穿就是针对某个常用key大量请求导致数据库崩溃。</p><h2 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h2><h3 id="使用互斥锁"><a href="#使用互斥锁" class="headerlink" title="使用互斥锁"></a>使用互斥锁</h3><p>在缓存失效的时候（判断拿出来的值为空），不是立即去load db，而是先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。</p><p>在访问key之前，采用SETNX（set if not exists）来设置另一个短期key来锁住当前key的访问，访问结束再删除该短期key。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>      String value <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span>       <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//代表缓存值过期</span>          <span class="token comment" spellcheck="true">//设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span>key_mutex， <span class="token number">1</span>， <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//代表设置成功</span>              value <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>              redis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key， value， expire_secs<span class="token punctuation">)</span><span class="token punctuation">;</span>              redis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>key_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>           <span class="token keyword">else</span>           <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可</span>              <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//重试</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>     <span class="token keyword">else</span>     <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3 id="热点key永不过期"><a href="#热点key永不过期" class="headerlink" title="热点key永不过期"></a>热点key永不过期</h3><h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><p>大量的key设置了相同的过期时间，导致在缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩。</p><h2 id="应对"><a href="#应对" class="headerlink" title="应对"></a>应对</h2><ul><li>在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个 key 只允许一个线程查询数据和写缓存，其他线程等待。</li><li>做二级缓存，A1 为原始缓存，A2 为拷贝缓存，A1 失效时，可以访问 A2，A1 缓存失效时间设置为短期，A2 设置为长期</li><li>可以给缓存设置过期时间时加上一个随机值时间，使得每个key的过期时间分布开来，不会集中在同一时刻失效。</li><li>热点数据可以考虑不失效</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 缓存雪崩 </tag>
            
            <tag> 缓存击穿 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis设计机制</title>
      <link href="posts/83265645.html"/>
      <url>posts/83265645.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本认识"><a href="#基本认识" class="headerlink" title="基本认识"></a>基本认识</h1><p>Remote Dictionary Service(远程词典服务)</p><p>存储中间件</p><p><strong>Redis</strong>采用的是基于内存的采用的是单进程单线程模型的 KV 数据库，由C语言编写，官方提供的数据是可以达到100000+的<strong>QPS（每秒内查询次数）</strong>。</p><ul><li>完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。它的，数据存在内存中，类似于<strong>HashMap</strong>，<strong>HashMap</strong>的优势就是查找和操作的时间复杂度都是O(1)；</li><li>数据结构简单，对数据操作也简单，<strong>Redis</strong>中的数据结构是专门进行设计的；</li><li>采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 <strong>CPU</strong>，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</li><li>使用多路I/O复用模型，非阻塞IO；</li><li>使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，<strong>Redis</strong>直接自己构建了VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；</li></ul><h1 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h1><p>服务器都是多核的，可以通过在单机开多个<strong>Redis实例</strong>解决浪费</p><h1 id="单机瓶颈"><a href="#单机瓶颈" class="headerlink" title="单机瓶颈"></a>单机瓶颈</h1><p>用到了集群的部署方式也就是<strong>Redis cluster</strong>，并且是主从同步读写分离，类似<strong>Mysql</strong>的主从同步，<strong>Redis cluster</strong> 支撑 N 个 <strong>Redis master node</strong>，每个<strong>master node</strong>都可以挂载多个 <strong>slave node</strong>。</p><p>这样整个 <strong>Redis</strong> 就可以横向扩容了。如果你要支撑更大数据量的缓存，那就横向扩容更多的 <strong>master</strong> 节点，每个 <strong>master</strong> 节点就能存放更多的数据了。</p><h1 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h1><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210207165051430.png" alt="image-20210207165051430"></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>同步阻塞IO（Blocking IO）：即传统的IO模型。</li><li>同步非阻塞IO（Non-blocking IO）：默认创建的socket都是阻塞的，非阻塞IO要求socket被设置为NONBLOCK。注意这里所说的NIO并非Java的NIO（New IO）库。</li><li>IO多路复用（IO Multiplexing）：即经典的Reactor设计模式，有时也称为异步阻塞IO，Java中的Selector和Linux中的epoll都是这种模型。</li><li>异步IO（Asynchronous IO）：即经典的Proactor设计模式，也称为异步非阻塞IO。</li></ul><p><strong>同步和异步</strong>的概念描述的是用户线程与内核的交互方式：同步是指用户线程发起IO请求后需要等待或者轮询内核IO操作完成后才能继续执行；而异步是指用户线程发起IO请求后仍继续执行，当内核IO操作完成后会通知用户线程，或者调用用户线程注册的回调函数。</p><p><strong>阻塞和非阻塞</strong>的概念描述的是用户线程调用内核IO操作的方式：阻塞是指IO操作需要彻底完成后才返回到用户空间；而非阻塞是指IO操作被调用后立即返回给用户一个状态值，无需等到IO操作彻底完成。</p><p>同步异步强调结果的返回形式，例如问别人借钱，可能当场给100块钱，也可能犹豫了很久才给100块钱</p><p><strong>I/0 操作主要分成两部分</strong><br>① 数据准备，将数据加载到内核缓存（数据加载到操作系统）<br>② 将内核缓存中的数据加载到用户缓存（从操作系统复制到应用中）</p><h2 id="传统同步阻塞IO模型"><a href="#传统同步阻塞IO模型" class="headerlink" title="传统同步阻塞IO模型"></a>传统同步阻塞IO模型</h2><ul><li><p>同步阻塞IO模型是最简单的IO模型，用户线程在内核进行IO操作时被阻塞。</p></li><li><p>用户线程通过系统调用read发起IO读操作，由用户空间转到内核空间。内核等到数据包到达后，然后将接收的数据拷贝到用户空间，完成read操作。</p></li><li><p>服务端采用单线程，当 accept 一个请求后，在read调用阻塞时，将无法 accept 其他请求（必须等上一个请求处理完 ）（无法处理并发）</p></li><li><p>套接字的读写方法，默认是阻塞的。例如read方法要传递进去一个参数n，代表最多读取n个字节后再返回，如果一个字节都没有，则线程卡顿直到新的数据到来或连接关闭，read方法才能返回。</p></li><li><p>write方法一般不会阻塞，除非内核为套接字分配的写缓冲区满了，write方法才会阻塞，直到缓冲区中有空间空闲出来</p></li><li><p>即用户需要等待read将socket中的数据读取到buffer后，才继续处理接收的数据。整个IO请求的过程中，用户线程是被阻塞的，这导致用户在发起IO请求时，不能做任何事情，对CPU的资源利用率不够。</p><pre><code>{    read(socket， buffer);    process(buffer);}</code></pre></li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210207152811758.png" alt="image-20210207152811758"></p><h2 id="同步非阻塞IO模型"><a href="#同步非阻塞IO模型" class="headerlink" title="同步非阻塞IO模型"></a>同步非阻塞IO模型</h2><ul><li>同步非阻塞IO是在同步阻塞IO的基础上，将socket设置为NONBLOCK。这样做用户线程可以在发起IO请求后可以立即返回。</li><li>读写方法不会阻塞，而是能读多少读多少，能写多少写多少。</li><li><strong>能读多少</strong>取决于内核为套接字分配的<strong>读缓冲区</strong>内部的<strong>数据字节数</strong>。</li><li><strong>能写多少</strong>取决于内核为套接字分配的<strong>写缓冲区</strong>的空闲空间<strong>字节数</strong>。<br>  有了非阻塞IO意味着线程在读写IO时可以不考虑阻塞了，读写可以瞬间完成，之后线程可以继续其他工作。</li><li>由于socket是非阻塞的方式，因此用户线程发起IO请求时立即返回。但并未读取到任何数据，用户线程需要不断地发起IO请求，直到数据到达后，才真正读取到数据，继续执行。</li></ul><p>用户线程使用同步非阻塞IO模型的伪代码描述为：</p><pre><code>{    while(read(socket， buffer) != SUCCESS);    process(buffer);}</code></pre><p>即用户需要不断地调用read，尝试读取socket中的数据，直到读取成功后，才继续处理接收的数据。整个IO请求的过程中，虽然用户线程每次发起IO请求后可以立即返回，但是为了等到数据，仍需要不断地轮询、重复请求，消耗了大量的CPU的资源。一般很少直接使用这种模型，而是在其他IO模型中使用非阻塞IO这一特性。</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210207153315652.png" alt="image-20210207153315652"></p><h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>IO多路复用模型是建立在内核提供的多路分离函数select基础之上的，使用select函数可以避免同步非阻塞IO模型中轮询等待的问题。</li><li>IO 多路复用实现一个线程可以监视多个文件句柄；</li><li>一旦某个文件句柄就绪，就能够通知应用程序进行相应的读写操作；</li><li>没有文件句柄就绪就会阻塞应用程序，交出CPU。</li><li>多路是指网络连接，复用指的是同一个线程</li><li>服务器端采用单线程通过 select/poll/epoll 等系统调用获取 fd 列表，遍历有事件的 fd 进行 accept/recv/send ，使其能支持更多的并发连接请求。</li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210207153611203.png" alt="image-20210207153611203"></p><p>用户首先将需要进行IO操作的socket添加到select中，然后阻塞等待select系统调用返回。当数据到达时，socket被激活，select函数返回。用户线程正式发起read请求，读取数据并继续执行。</p><p>从流程上来看，使用select函数进行IO请求和同步阻塞模型没有太大的区别，甚至还多了添加监视socket，以及调用select函数的额外操作，效率更差。但是，使用select以后最大的优势是用户可以在一个线程内同时处理多个socket的IO请求。用户可以注册多个socket，然后不断地调用select读取被激活的socket，即可达到在<strong>同一个线程内同时处理多个IO请求的目的</strong>。而在同步阻塞模型中，必须通过多线程的方式才能达到这个目的。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//将socket添加到select监视中</span><span class="token function">select</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sockets <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//一直调用select获取被激活的socket，一旦socket可读，便调用read函数将socket中的数据读取出来。</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>socket in sockets<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">can_read</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">read</span><span class="token punctuation">(</span>socket， buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">process</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>虽然上述方式允许单线程内处理多个IO请求，但是每个IO请求的过程还是阻塞的（在select函数上阻塞），平均时间甚至比同步阻塞IO模型还要长。如果用户线程只注册自己感兴趣的socket或者IO请求，然后去做自己的事情，等到数据到来时再进行处理，则可以提高CPU的利用率。</p><p>IO多路复用模型使用了Reactor设计模式实现了这一机制。</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210207154330581.png" alt="image-20210207154330581"></p><p><strong>Reactor设计模式</strong></p><p>EventHandler抽象类表示IO事件处理器，它拥有IO文件句柄Handle（通过get_handle获取），以及对Handle的操作handle_event（读/写等）。继承于EventHandler的子类可以对事件处理器的行为进行定制。Reactor类用于管理EventHandler（注册、删除等），并使用handle_events实现事件循环，不断调用同步事件多路分离器（一般是内核）的多路分离函数select，只要某个文件句柄被激活（可读/写等），select就返回（阻塞），handle_events就会调用与文件句柄关联的事件处理器的handle_event进行相关操作。</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210207154426634.png" alt="image-20210207154426634"></p><p>通过Reactor的方式，可以将用户线程轮询IO操作状态的工作统一交给handle_events事件循环进行处理。用户线程注册事件处理器之后可以继续执行做其他的工作（异步），而Reactor线程负责调用内核的select函数检查socket状态。当有socket被激活时，则通知相应的用户线程（或执行用户线程的回调函数），执行handle_event进行数据读取、处理的工作。由于select函数是阻塞的，因此多路IO复用模型也被称为异步阻塞IO模型。注意，这里的所说的阻塞是指select函数执行时线程被阻塞，而不是指socket。一般在使用IO多路复用模型时，socket都是设置为NONBLOCK的，不过这并不会产生影响，因为用户发起IO请求时，数据已经到达了，用户线程一定不会被阻塞。</p><p>用户线程使用IO多路复用模型的伪代码描述为：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> UserEventHandler<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">handle_event</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">can_read</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">read</span><span class="token punctuation">(</span>socket， buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">process</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//用户需要重写EventHandler的handle_event函数进行读取数据、处理数据的工作，用户线程只需要将自己的EventHandler注册到Reactor即可。</span><span class="token punctuation">{</span>    Reactor<span class="token punctuation">.</span><span class="token keyword">register</span><span class="token punctuation">(</span>new <span class="token function">UserEventHandler</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Reactor中handle_events事件循环的伪代码大致如下。</p><p>事件循环不断地调用select获取被激活的socket，然后根据获取socket对应的EventHandler，执行器handle_event函数即可。</p><pre class=" language-c"><code class="language-c">Reactor<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">handle_events</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sockets <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>socket in sockets<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">get_event_handler</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handle_event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>它仅仅知道了，有I/O事件发生了，却并不知道是哪那几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。所以select具有O(n)的无差别轮询复杂度，同时处理的流越多，无差别轮询时间就越长。</p><ul><li>使用事件轮询API的select函数，输入是read_fds &amp; write_fds；输出是与之对应的可读可写事件，同时还提供了timeout参数。</li><li>如果期间<strong>没有任何事件</strong>到来，那么最多<strong>等待timeout的值</strong>的时间，线程处于<strong>阻塞状态</strong>。</li><li>一旦其间<strong>有任何事件</strong>到来，就<strong>立即返回</strong>。时间过了之后还是<strong>没有任何事件</strong>，就<strong>立即返回</strong>。</li><li><strong>拿到事件后，线程可以继续挨个处理相应事件，处理完了继续轮询，于是线程就进入了一个死循环</strong>，我们称循环为<strong>时间循环</strong>，<strong>一个循环为一个周期</strong>。</li></ul><p><strong>select缺点</strong><br>select本质上是通过设置或者检查存放fd标志位的数据结构来进行下一步处理。这样所带来的缺点是：</p><ul><li><p>单个进程所打开的FD是有限制的，通过 FD_SETSIZE 设置，默认1024 ;</p></li><li><p>每次调用 select，都需要把 fd 集合从用户态拷贝到内核态，这个开销在 fd 很多时会很大；需要维护一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大</p></li><li><p>对 socket 扫描时是线性扫描，采用轮询的方法，效率较低（高并发)。当套接字比较多的时候，每次select()都要通过遍历FD_SETSIZE个Socket来完成调度，不管哪个Socket是活跃的，都遍历一遍。这会浪费很多CPU时间。如果能给套接字注册某个回调函数，当他们活跃时，自动完成相关操作，那就避免了轮询，这正是epoll与kqueue做的。</p></li></ul><h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><p>poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态， 但是它没有最大连接数的限制，原因是它是基于链表来存储的。</p><p><strong>poll缺点</strong><br>它没有最大连接数的限制，原因是它是基于链表来存储的，但是同样有缺点：</p><ul><li>每次调用 poll ，都需要把 fd 集合从用户态拷贝到内核态，这个开销在 fd 很多时会很大；</li><li>对 socket 扫描是线性扫描，采用轮询的方法，效率较低（高并发时）</li></ul><h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3><p>epoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll会把哪个流发生了怎样的I/O事件通知我们。所以我们说epoll实际上是<strong>事件驱动（每个事件关联上fd）</strong>的，此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)）</p><p><strong>epoll的优点</strong></p><ul><li>没有最大并发连接的限制，能打开的FD的上限远大于1024（1G的内存上能监听约10万个端口）；</li><li>效率提升，不是轮询的方式，不会随着FD数目的增加效率下降。只有活跃可用的FD才会调用callback函数；即Epoll最大的优点就在于它只管你“活跃”的连接，而跟连接总数无关，因此在实际的网络环境中，Epoll的效率就会远远高于select和poll；</li><li>内存拷贝，利用mmap()文件映射内存加速与内核空间的消息传递；即epoll使用mmap减少复制开销。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>IO多路复用是最常使用的IO模型，但是其异步程度还不够“彻底”，因为它使用了会阻塞线程的select系统调用。因此IO多路复用只能称为异步阻塞IO，而非真正的异步IO。</p><p>select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。</p><p>select，poll实现需要自己不断轮询所有fd集合，直到设备就绪，期间可能要睡眠和唤醒多次交替。而epoll其实也需要调用epoll_wait不断轮询就绪链表，期间也可能多次睡眠和唤醒交替，但是它是设备就绪时，调用回调函数，把就绪fd放入就绪链表中，并唤醒在epoll_wait中进入睡眠的进程。虽然都要睡眠和交替，但是select和poll在“醒着”的时候要遍历整个fd集合，而epoll在“醒着”的时候只要判断一下就绪链表是否为空就行了，这节省了大量的CPU时间。这就是回调机制带来的性能提升。</p><p>select，poll每次调用都要把fd集合从用户态往内核态拷贝一次，并且要把current往设备等待队列中挂一次，而epoll只要一次拷贝，而且把current往等待队列上挂也只挂一次（在epoll_wait的开始，注意这里的等待队列并不是设备等待队列，只是一个epoll内部定义的等待队列）。这也能节省不少的开销。</p><h2 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h2><p>“真正”的异步IO需要操作系统更强的支持。在IO多路复用模型中，事件循环将文件句柄的状态事件通知给用户线程，由用户线程自行读取数据、处理数据。而在异步IO模型中，当用户线程收到通知时，数据已经被内核读取完毕，并放在了用户线程指定的缓冲区内，内核在IO完成后通知用户线程直接使用即可。</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210207154623278.png" alt="image-20210207154623278"></p><p>异步IO模型中，用户线程直接使用内核提供的异步IO API发起read请求，且发起后立即返回，继续执行用户线程代码。</p><p>目前操作系统对异步IO的支持并非特别完善，更多的是采用IO多路复用模型模拟异步IO的方式（IO事件触发时不直接通知用户线程，而是将数据读写完毕后放到用户指定的缓冲区中）。</p><h1 id="Redis多路IO复用模型"><a href="#Redis多路IO复用模型" class="headerlink" title="Redis多路IO复用模型"></a>Redis多路IO复用模型</h1><p>Redis 是跑在单线程中的，所有的操作都是按照顺序线性执行的，但是由于读写操作等待用户输入或输出都是阻塞的，所以 I/O 操作在一般情况下往往不能直接返回，这会导致某一文件的 I/O 阻塞导致整个进程无法对其它客户提供服务，而  <strong>I/O 多路复用</strong> 就是为了解决这个问题而出现的。</p><p>redis的io模型主要是基于epoll实现的，不过它也提供了 select和kqueue的实现，默认采用epoll。</p><ul><li>优先选择时间复杂度为O(1)的IO复用函数作为底层实现，例如eopll</li><li>以select系统调用为保底，时间复杂度O(N)</li><li>基于react设计模式监听IO事件</li></ul><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><p>文件描述符是一个用于表述指向文件的引用的抽象化概念。 文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。</p><h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>是对 <strong>Redis</strong> 中的数据执行<strong>周期性</strong>的持久化。</p><h3 id="BGSAVE"><a href="#BGSAVE" class="headerlink" title="BGSAVE"></a>BGSAVE</h3><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>他会生成多个数据文件，每个数据文件分别都代表了某一时刻<strong>Redis</strong>里面的数据，这种方式，有没有觉得很适合做<strong>冷备</strong>，完整的数据运维设置定时任务，定时同步到远端的服务器，比如阿里的云服务，这样一旦线上挂了，你想恢复多少分钟之前的数据，就去远端拷贝一份之前的数据就好了。</p><p><strong>RDB</strong>对<strong>Redis</strong>的性能影响非常小，是因为在同步数据的时候他只是<strong>fork</strong>了一个子进程去做持久化的，而且他在数据恢复的时候速度比<strong>AOF</strong>来的快。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p><strong>RDB</strong>都是快照文件，都是默认五分钟甚至更久的时间才会生成一次，这意味着你这次同步到下次同步这中间五分钟的数据都很可能全部丢失掉。<strong>AOF</strong>则最多丢一秒的数据，<strong>数据完整性</strong>上高下立判。</p><p>还有就是<strong>RDB</strong>在生成数据快照的时候，如果文件很大，客户端可能会暂停几毫秒甚至几秒，你公司在做秒杀的时候他刚好在这个时候<strong>fork</strong>了一个子进程去生成一个大快照，哦豁，出大问题。</p><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p><strong>AOF</strong> 机制对每条写入命令作为日志，以 <strong>append-only</strong> 的模式写入一个日志文件中，因为这个模式是只追加的方式，所以没有任何磁盘寻址的开销，所以很快，有点像Mysql中的<strong>binlog</strong>。</p><h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><p>上面提到了，<strong>RDB</strong>五分钟一次生成快照，但是<strong>AOF</strong>是一秒一次去通过一个后台的线程<code>fsync</code>操作，那最多丢这一秒的数据。</p><p><strong>AOF</strong>在对日志文件进行操作的时候是以<code>append-only</code>的方式去写的，他只是追加的方式写数据，自然就少了很多磁盘寻址的开销了，写入性能惊人，文件也不容易破损。</p><p><strong>AOF</strong>的日志是通过一个叫<strong>非常可读</strong>的方式记录的，这样的特性就适合做<strong>灾难性数据误删除</strong>的紧急恢复了，比如公司的实习生通过<strong>flushall</strong>清空了所有的数据，只要这个时候后台重写还没发生，你马上拷贝一份<strong>AOF</strong>日志文件，把最后一条<strong>flushall</strong>命令删了就完事了。</p><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>一样的数据，<strong>AOF</strong>文件比<strong>RDB</strong>还要大。</p><p><strong>AOF</strong>开启后，<strong>Redis</strong>支持写的<strong>QPS</strong>会比<strong>RDB</strong>支持写的要低，他不是每秒都要去异步刷新一次日志嘛<strong>fsync</strong>，当然即使这样性能还是很高，我记得<strong>ElasticSearch</strong>也是这样的，异步刷新缓存区的数据去持久化，为啥这么做呢，不直接来一条怼一条呢，那我会告诉你这样性能可能低到没办法用的，大家可以思考下为啥哟。</p><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>你单独用<strong>RDB</strong>你会丢失很多数据，你单独用<strong>AOF</strong>，你数据恢复没<strong>RDB</strong>来的快，真出什么时候第一时间用<strong>RDB</strong>恢复，然后<strong>AOF</strong>做数据补全，真香！冷备热备一起上，才是互联网时代一个高健壮性系统的王道。</p><p>两种方式都可以把<strong>Redis</strong>内存中的数据持久化到磁盘上，然后再将这些数据备份到别的地方去，<strong>RDB</strong>更适合做<strong>冷备</strong>，<strong>AOF</strong>更适合做<strong>热备</strong>，比如我杭州的某电商公司有这两个数据，我备份一份到我杭州的节点，再备份一个到上海的，就算发生无法避免的自然灾害，也不会两个地方都一起挂吧，这<strong>灾备</strong>也就是<strong>异地容灾</strong>，地球毁灭他没办法。<br><strong>两种机制全部开启的时候，Redis在重启的时候会默认使用AOF去重新构建数据，因为AOF的数据是比RDB更完整的。</strong></p><h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><p>RDB做镜像全量持久化，AOF做增量持久化。因为RDB会耗费较⻓时间，不够实时，在停机的时候会导致⼤量丢失数据，所以需要AOF来配合使⽤。在redis实例重启时，会使⽤RDB持久化⽂件重新构建内存，再使⽤AOF重放近期的操作指令来实现完整恢复重启之前的状态。</p><p>把RDB理解为⼀整个表全量的数据，AOF理解为每次操作的⽇志就好了，服务器重启的时候先把表的数据全部搞进去，但是他可能不完整，你再回放⼀下⽇志，数据不就完整了嘛。不过Redis本身的机制是 AOF持久化开启且存在AOF⽂件时，优先加载AOF⽂件；AOF关闭或者AOF⽂件不存在时，加载RDB⽂件；加载AOF/RDB⽂件城后，Redis启动成功； AOF/RDB⽂件存在错误时，Redis启动失败并打印错误信息</p><p>对⽅追问那如果突然机器掉电会怎样？</p><p>取决于AOF⽇志sync属性的配置，如果不要求性能，在每条写指令时都sync⼀下磁盘，就不会丢失数据。但是在⾼性能的要求下每次都sync是不现实的，⼀般都使⽤定时sync，⽐如1s1次，这个时候最多就会丢失1s的数据。</p><p>对⽅追问RDB的原理是什么？</p><p>你给出两个词汇就可以了，fork和cow。fork是指redis通过创建⼦进程来进⾏RDB操作，cow指的是copy on write，⼦进程创建后，⽗⼦进程共享数据段，⽗进程继续提供读写服务，写脏的⻚⾯数据会逐渐和⼦进程分离开来。</p><h1 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h1><p>最近最少使用缓存机制</p><p>算法核心是哈希+链表</p><p>本质就是HashMap+DoubleLinkedList</p><p>时间复杂度<code>O(1)</code></p><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedHashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token operator">&lt;</span>K，V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>K，V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>capacity，<span class="token number">0.75F</span>，<span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K， V<span class="token operator">></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> capacity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Main main <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        main<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span>， <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        main<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span>， <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        main<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span>， <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        main<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        main<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span>， <span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//[3， 1， 4]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="只用HashMap"><a href="#只用HashMap" class="headerlink" title="只用HashMap"></a>只用HashMap</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token operator">&lt;</span>K， V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K， V<span class="token operator">></span> <span class="token punctuation">{</span>        K key<span class="token punctuation">;</span>        V value<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> prev<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>K key， V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">DoubleLinkedList</span><span class="token operator">&lt;</span>K， V<span class="token operator">></span><span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> head<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> tail<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">DoubleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>            tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addHead</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> null<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Node<span class="token operator">&lt;</span>K， V<span class="token operator">></span>  <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> tail<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> cacheSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer， Node<span class="token operator">&lt;</span>Integer， Integer<span class="token operator">>></span> map<span class="token punctuation">;</span>    DoubleLinkedList<span class="token operator">&lt;</span>Integer， Integer<span class="token operator">></span> doubleLinkedList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">int</span> cacheSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cacheSize <span class="token operator">=</span> cacheSize<span class="token punctuation">;</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleLinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node<span class="token operator">&lt;</span>Integer， Integer<span class="token operator">></span> node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkedList<span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkedList<span class="token punctuation">.</span><span class="token function">addHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key， <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>Integer， Integer<span class="token operator">></span> node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key， node<span class="token punctuation">)</span><span class="token punctuation">;</span>            doubleLinkedList<span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            doubleLinkedList<span class="token punctuation">.</span><span class="token function">addHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> cacheSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Node<span class="token operator">&lt;</span>Integer， Integer<span class="token operator">></span> last <span class="token operator">=</span> doubleLinkedList<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>last<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                doubleLinkedList<span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Node<span class="token operator">&lt;</span>Integer， Integer<span class="token operator">></span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>key， value<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key， node<span class="token punctuation">)</span><span class="token punctuation">;</span>            doubleLinkedList<span class="token punctuation">.</span><span class="token function">addHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Main main <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        main<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span>， <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        main<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span>， <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        main<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span>， <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        main<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        main<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span>， <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//[3， 1， 4]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>main<span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> IO多路复用 </tag>
            
            <tag> LRU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis对象</title>
      <link href="posts/404ab54a.html"/>
      <url>posts/404ab54a.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ol start="2"><li><p>基于之前的数据结构创建一个对象系统。包括字符串对象，列表对象，哈希对象，集合对象，有序集合对象五种</p></li><li><p>可以在执行命令之前，根据对象类型判断一个对象能否执行给定的命令</p></li><li><p>可以针对不同的使用场景，为对象设置多种不同的数据结构实现，从而优化对象在不同场景下的使用效率</p></li><li><p>实现基于引用计数的内存回收机制，实现内存共享机制，让多个数据库键共享同一个对象节约内存</p></li><li><p>对象带有访问时间记录信息，记录数据库键的空转时间</p></li></ol><h1 id="对象的类型和编码"><a href="#对象的类型和编码" class="headerlink" title="对象的类型和编码"></a>对象的类型和编码</h1><p>使用对象来表示数据库的键和值，新创建一个键值对时，会创建两个对象分别代表键和值</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> redisObject<span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> type<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类型</span>    <span class="token keyword">unsigned</span> encoding<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编码</span>    <span class="token keyword">void</span> <span class="token operator">*</span> ptr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指向底层实现数据结构的指针</span><span class="token punctuation">}</span></code></pre><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p><code>type</code>属性记录了对象的类型，即五种对象类型之一<br>对于一个键值对，键总是字符串对象，值可以是五种对象类型之一</p><h2 id="编码和底层实现"><a href="#编码和底层实现" class="headerlink" title="编码和底层实现"></a>编码和底层实现</h2><ol><li>对象的ptr指针指向对象的底层实现数据结构，而这些数据结构由对象的encoding属性决定，即之前学习的几种数据结构</li><li>每种类型的对象都至少使用了两种不同的编码</li><li>通过<code>encoding</code>属性来设定使用的编码，极大地提升了灵活性和效率，可以根据不同的使用场景来为一个对象设置不同的编码，从而优化对象在某一场景下的效率</li></ol><h1 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h1><ol><li>字符串对象的编码可以是int，raw，embstr</li><li>如果字符串对象保存整数值，且可以用long表示，则会将整数值保存在ptr中，enconding设为int</li><li>如果保存字符串值，并且长度大于39字节，就用<code>SDS</code>保存，并且设为raw</li><li>如果保存字符串值，并且长度小于39字节，就用<code>embstr</code>编码保存，并且设为embstr</li></ol><h2 id="embstr"><a href="#embstr" class="headerlink" title="embstr"></a>embstr</h2><p>专门用来保存短字符串的一种优化编码方式，和SDS差不多<br>不同的是，只调用一次内存分配函数来分配一块连续的空间，空间依次包含redisObject，sdshdr两个结构<br>优点：内存分配与释放次数由两次变为一次；字符串所有的数据保存在一块连续的内存中，更好利用缓存</p><h2 id="编码的转换"><a href="#编码的转换" class="headerlink" title="编码的转换"></a>编码的转换</h2><ol><li>int编码的字符串对象如果操作后保存的不再是整数值，而是字符串值，则编码变为raw</li><li>embstr编码的字符串对象只是可读的，对它执行任何修改命令，都会编程raw</li></ol><h1 id="列表对象"><a href="#列表对象" class="headerlink" title="列表对象"></a>列表对象</h1><p>编码可以是<code>ziplist</code>,<code>linkedlist</code>。ziplist使用压缩列表作为底层实现，linkedlist采用双端链表作为底层实现。每个双端链表节点都保持一个字符串对象</p><p>字符串对象是Redis 5种类型的对象中唯一一种会被其他四种对象嵌套的对象</p><h2 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h2><p>使用ziplist编码的情况：</p><ol><li>列表对象保存的所有字符串元素都小于64字节</li><li>列表保存的元素数量小于512</li></ol><h1 id="哈希对象"><a href="#哈希对象" class="headerlink" title="哈希对象"></a>哈希对象</h1><p>编码可以是ziplist、hashtable。</p><p>用ziplist则将键值对压入列表表尾，键值对紧挨一起，键在前，值在后。类似队列</p><p>hashtable编码用字典作为底层实现，字典的每个键与值都是一个字符串对象</p><h2 id="编码转换-1"><a href="#编码转换-1" class="headerlink" title="编码转换"></a>编码转换</h2><p>使用ziplist编码的情况：</p><ol><li>列表对象保存的所有字符串元素都小于64字节</li><li>列表保存的元素数量小于512</li></ol><h1 id="集合对象"><a href="#集合对象" class="headerlink" title="集合对象"></a>集合对象</h1><p>编码可以是intset、hashtable。</p><p>用intset编码的集合使用整数集合作为底层实现</p><p>用hashtable编码的集合使用字典作为底层实现，每个键是一个字符串对象，而值设为NULL</p><h2 id="编码转换-2"><a href="#编码转换-2" class="headerlink" title="编码转换"></a>编码转换</h2><p>使用intset编码的情况：</p><ol><li>列表对象保存的都是整数值</li><li>列表保存的元素数量小于512</li></ol><h1 id="有序集合对象"><a href="#有序集合对象" class="headerlink" title="有序集合对象"></a>有序集合对象</h1><p>有序集合的编码可以是ziplist、skiplist（后续版本变为了quickList)</p><p>用ziplist编码则每个集合元素使用两个紧挨的压缩列表节点来保存，第一个节点保存元素的成员，第二个保存元素的分值</p><h2 id="用skiplist编码实现"><a href="#用skiplist编码实现" class="headerlink" title="用skiplist编码实现"></a>用skiplist编码实现</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> zset<span class="token punctuation">{</span>    zskiplist <span class="token operator">*</span>zsl<span class="token punctuation">;</span>    dict <span class="token operator">*</span> dict<span class="token punctuation">;</span><span class="token punctuation">}</span> zset<span class="token punctuation">;</span></code></pre><p>zset中的zsl跳跃表按分值从小到大保存了所有集合元素</p><p>每个跳跃表节点中：object属性保存元素的成员，score属性保存元素的分值</p><p>此外，dict中，字典的键保存元素的成员，值保存元素的分值，这样，通过字典可以用O(1)的复杂度查找给定成员的分值</p><p>这两种数据结构都会通过指针来共享相同元素的成员和分值，所以使用跳跃表和字典来保存集合元素不会产生任何重复成员或者分值，不会浪费额外内存</p><h2 id="编码转换-3"><a href="#编码转换-3" class="headerlink" title="编码转换"></a>编码转换</h2><p>使用ziplist编码的情况：</p><ol><li>有序集合保存的所有元素长度都小于64字节</li><li>有序集合保存的元素数量小于128个</li></ol><h1 id="类型检查和命令多态"><a href="#类型检查和命令多态" class="headerlink" title="类型检查和命令多态"></a>类型检查和命令多态</h1><p>在执行一个类型的特定命令之前，服务器会检查输入数据库键的值对象是否为执行命令所需的指令，如果是，服务器就会对键执行指定的命令。否则将拒绝执行命令，并向客户端返回一个类型错误。</p><p>类型检查是通过<code>redisObject</code>结构的type属性来实现的 </p><h2 id="多态命令的实现"><a href="#多态命令的实现" class="headerlink" title="多态命令的实现"></a>多态命令的实现</h2><p>Redis除了会根据值对象的类型来判断键是否能够执行指定指令之外，还会根据值对象的编码方式，选择正确的命令实现代码来执行命令</p><p>例如，<code>LLEN命令</code>是多态的，只要执行LLEN命令的是列表键，那么无论值对象使用的是ziplist编码还是linkedlist编码，命令都可以正常执行</p><p>DEL，TYPE等命令也是多态命令，无论输入的键是什么类型，这些命令都可以正常执行。区别在于，DEL，TYPE等命令是基于类型的多态，一个命令可以处理多种不同的类型的键，LLen命令是基于编码的多态，一个命令可以同时用于处理多种不同编码</p><h1 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h1><p>基于引用计数法实现内存回收机制，通过跟踪对象的引用计数信息，在适当的时候自动释放对象并进行内存回收</p><ol><li>创建对象，引用计数值为1</li><li>对象被新程序使用，引用计数值+1</li><li>对象不被一个程序使用，引用计数值-1</li><li>引用计数值为0时，释放对象占用的内存</li></ol><h1 id="对象共享"><a href="#对象共享" class="headerlink" title="对象共享"></a>对象共享</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>让多个键共享同一个值对象步骤：</p><ol><li>将数据库键的值指向一个现有的值对象</li><li>将被共享的值对象引用计数值+1</li></ol><h2 id="内置整数"><a href="#内置整数" class="headerlink" title="内置整数"></a>内置整数</h2><p>Redis在初始化服务器时，会创建一万个字符串对象，存储[0,9999]的整数值。如果需要用到这些字符串对象，服务器则会使用这些共享对象，而不会新创建对象。</p><p>这些共享对象不仅仅只有字符串键可以使用，那些在数据结构中嵌套了字符串对象的对象都可以使用这些共享对象</p><h2 id="为什么不共享包含字符串的对象"><a href="#为什么不共享包含字符串的对象" class="headerlink" title="为什么不共享包含字符串的对象"></a>为什么不共享包含字符串的对象</h2><p>只有在共享对象和目标对象完全相同的情况下，程序才会将共享对象用作键的值对象</p><p>一个共享对象保存的值越复杂，则验证共享对象和目标对象是否相同所需的复杂度越高：</p><ol><li>共享对象是整数值的字符串对象，验证操作为<code>O(1)</code></li><li>共享对象是保存字符串值的字符串对象，验证操作为<code>O(N)</code></li><li>共享对象是包含多个值的对象（如列表），验证操作为<code>O(N^2)</code></li></ol><h1 id="对象的空转时间"><a href="#对象的空转时间" class="headerlink" title="对象的空转时间"></a>对象的空转时间</h1><p><code>redisObject</code>结构包含属性lru,记录了对象最后一次被命令程序访问的时间。可用当前时间-键的值对象的lru时间求得空转时间</p><p>可通过设置，使得当服务器占用的内存数超过了，<code>maxmemory</code>的上限时，空转时间较高的那部分键会优先被服务器释放，从而回收内存</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis数据结构</title>
      <link href="posts/85682d75.html"/>
      <url>posts/85682d75.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h1><p>它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。</p><p>命令不区分大小写，而key区分大小写</p><p>Redis所有的数据结构都以唯一的key字符串作为名称，不同类型的数据结构的差异就在于value的结构不一样</p><p>所有数据结构都可以设置过期时间</p><h1 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h1><h2 id="简单动态字符串"><a href="#简单动态字符串" class="headerlink" title="简单动态字符串"></a>简单动态字符串</h2><h3 id="SDS简介"><a href="#SDS简介" class="headerlink" title="SDS简介"></a>SDS简介</h3><ul><li>使用<strong>简单动态字符串</strong>(simple dynamic string SDS)作为默认字符串</li><li>c字符串只作为字符串字面量，用在无需对字符串值进行修改的地方</li><li>包含字符串值的键值对在底层都是用SDS实现的</li></ul><h3 id="SDS的定义"><a href="#SDS的定义" class="headerlink" title="SDS的定义"></a>SDS的定义</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> sdshdr<span class="token punctuation">{</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录buf数组中已使用字节的数量 为字符串长度</span>    <span class="token keyword">int</span> free<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//未使用的数量</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字节数组，用来保存字符串</span><span class="token punctuation">}</span></code></pre><ol><li>buf数组以空字符结尾，且最后的空字符不算在len里面</li><li>该空字符由SDS函数自动完成，对SDS用户透明</li></ol><h3 id="SDS与C字符串的区别"><a href="#SDS与C字符串的区别" class="headerlink" title="SDS与C字符串的区别"></a>SDS与C字符串的区别</h3><h4 id="获取字符串长度所需复杂度从O-N-降低到​O-1-​"><a href="#获取字符串长度所需复杂度从O-N-降低到​O-1-​" class="headerlink" title="获取字符串长度所需复杂度从O(N)降低到​O(1)​"></a>获取字符串长度所需复杂度从O(N)降低到​O(1)​</h4><h4 id="杜绝了缓冲区溢出"><a href="#杜绝了缓冲区溢出" class="headerlink" title="杜绝了缓冲区溢出"></a>杜绝了缓冲区溢出</h4><p>例如c进行字符串拼接，需要假设已经为字符串分配了足够的内存以容纳要拼接的字符串，否则就会溢出。<br><strong>SDS空间分配策略</strong>完全杜绝了发生缓冲区溢出的可能性。当要对SDS进行修改时，会先检查空间是否满足修改所需的要求，如果不满足，则会自动将<strong>SDS的空间扩展</strong>，然后再执行实际的修改操作</p><h4 id="减少修改字符串时带来的内存重分配次数"><a href="#减少修改字符串时带来的内存重分配次数" class="headerlink" title="减少修改字符串时带来的内存重分配次数"></a>减少修改字符串时带来的内存重分配次数</h4><p>C字符串底层实现总是一个N+1个字符长的数组，每次对该数组进行增加或缩短，总要进行一次<strong>内存重分配</strong>操作。如果是增长，则要内存重分配扩展底层数组的空间大小。如果是缩短，则执行操作后，需要内存重分配来释放空间，避免内存泄漏。</p><p>Redis通过<strong>未使用空间</strong>解除了字符串长度和底层数组长度之间的关联</p><h5 id="空间预分配"><a href="#空间预分配" class="headerlink" title="空间预分配"></a>空间预分配</h5><p>用于优化SDS的字符串增长操作，在扩展SDS空间之前，会先检查未使用的空间是否足够，如果足够，则直接使用未使用空间，无需进行内存重分配。</p><p>在对一个SDS进行修改，并且需要对SDS进行空间扩展时，不仅为SDS分配修改所需要的空间，还会分配额外的未使用空间。</p><p>如果修改后 SDS.len &lt; 1MB，程序会分配给和len一样的长度给free</p><p>如果修改后 SDS.len &gt;= 1MB，程序会分配1MB给free</p><h5 id="惰性空间释放"><a href="#惰性空间释放" class="headerlink" title="惰性空间释放"></a>惰性空间释放</h5><p>用于优化SDS字符串缩短操作：不立即回收缩短后多出来的字节，而是用free记录。避免了缩短字符串时所需的内存重分配操作，并且为将来可能的增长提供了优化</p><p>API也让我们在需要时，真正释放SDS的未使用空间，不用担心惰性空间释放策略会造成内存浪费</p><h4 id="二进制安全"><a href="#二进制安全" class="headerlink" title="二进制安全"></a>二进制安全</h4><ol><li>C字符串并且符合特定的编码，并且除字符串的末尾外，不能包含空字符，使得他只能保存文本数据</li><li>Redis以处理二进制的方式处理SDS存放在buf数组的数据，使用len而不是空字符判断字符串是否结束。所以他可以保存<strong>任意格式</strong>的二进制数据。</li></ol><h4 id="兼容部分C字符串函数"><a href="#兼容部分C字符串函数" class="headerlink" title="兼容部分C字符串函数"></a>兼容部分C字符串函数</h4><p>SDS保存数据的末尾总是为空字符，所以让那些保存文本数据的SDS可以重用一部分&lt;string.h&gt;库’定义的函数</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>被广泛用于实现Redis的各种功能，如列表键，发布与订阅，慢查询，监视器等等</p><h3 id="链表和链表节点的实现"><a href="#链表和链表节点的实现" class="headerlink" title="链表和链表节点的实现"></a>链表和链表节点的实现</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> listNode<span class="token punctuation">{</span>    <span class="token keyword">struct</span> listNode <span class="token operator">*</span> prev<span class="token punctuation">;</span>    <span class="token keyword">struct</span> listNode <span class="token operator">*</span> next<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span>listNode<span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> list<span class="token punctuation">{</span>    listNode <span class="token operator">*</span>head<span class="token punctuation">;</span>    listNode <span class="token operator">*</span>tail<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>dup<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//节点值的复制函数</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//节点值的释放函数</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>match<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> ptr，<span class="token keyword">void</span> <span class="token operator">*</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//节点值的对比函数</span><span class="token punctuation">}</span></code></pre><h3 id="特性总结"><a href="#特性总结" class="headerlink" title="特性总结"></a>特性总结</h3><ul><li>双端、无环、带表头和表尾指针、带链表长度计数器</li><li>多态：可以保存各种不同类型的值</li></ul><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>Redis的数据库底层就是用字典实现的</p><p>字典也是<strong>哈希键</strong>的底层实现之一</p><h3 id="字典的实现"><a href="#字典的实现" class="headerlink" title="字典的实现"></a>字典的实现</h3><p>字典采用哈希表作为底层实现，一个哈希表可以有多个哈希表节点，每个节点保存了一个键值对</p><p>每个字典带有<strong>两个哈希表</strong>，一个平时使用，一个仅仅在rehash时使用</p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> dictht<span class="token punctuation">{</span>    dictEntry <span class="token operator">*</span><span class="token operator">*</span> table<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//哈希表数组</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sizemask<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//哈希表大小掩码，用于计算索引值 总=size-1</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> used<span class="token punctuation">;</span><span class="token punctuation">}</span>dictht<span class="token punctuation">;</span></code></pre><p>sizemask和哈希值一起决定一个键应该放到table数组里面的哪个索引上</p><h3 id="哈希表节点"><a href="#哈希表节点" class="headerlink" title="哈希表节点"></a>哈希表节点</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> dictEntry<span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>    <span class="token keyword">union</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">;</span>        uint64_t u64<span class="token punctuation">;</span>        int64_t s64<span class="token punctuation">;</span>    <span class="token punctuation">}</span> v<span class="token punctuation">;</span>    <span class="token keyword">struct</span> dictEntry <span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token punctuation">}</span>dictEntry<span class="token punctuation">;</span></code></pre><p>值可以是应该指针，或者是应该uint64_t类型的整数，或是一个int64_t整数</p><p>next属性指向另一个哈希表节点的指针，可以将多个哈希值相同的键值对连接在一起，以解决键冲突</p><h3 id="字典-1"><a href="#字典-1" class="headerlink" title="字典"></a>字典</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> dict<span class="token punctuation">{</span>    dicType <span class="token operator">*</span> type<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类型特定函数</span>    <span class="token keyword">void</span> <span class="token operator">*</span> privdata<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//私有数据</span>    ditcht ht<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//哈希表</span>    <span class="token keyword">int</span> rehashidx<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//rehash索引，当rehash不再进行时，值为-1</span><span class="token punctuation">}</span>dict<span class="token punctuation">;</span></code></pre><ol><li>type，privdata属性是针对不同类型的键值对，为创建多态字典而设置的</li><li>每个dicType结构保存了一簇用于操作特定类型键值对的函数</li><li>privdata属性保存了需要传给那些类型特定函数的可选参数</li><li>ht数组中，每个项都是<strong>ditcht哈希表</strong>，一般只使用ht[0]，ht[1]只会在ht[0]进行rehash时使用</li><li>rehashidx记录rehash目前的进度</li></ol><h3 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h3><p>程序先通过键计算哈希值hash，在计算索引(hash &amp; sizemask)，再根据索引将包含新键值对的哈希表节点放到哈希表数组的指定索引上</p><h3 id="解决键冲突"><a href="#解决键冲突" class="headerlink" title="解决键冲突"></a>解决键冲突</h3><p>用链地址法，多个分配到同一个索引的节点用单向链表连接起来。且用<strong>头插法</strong>，将新节点添加到链表的表头位置 </p><h3 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h3><h4 id="时机"><a href="#时机" class="headerlink" title="时机"></a>时机</h4><ol><li>若没有在执行BGSAVE或BGREWRITEAOF命令，则哈希表负载因子大于等于1时rehash</li><li>若在执行BGSAVE或BGREWRITEAOF命令，则哈希表负载因子大于等于5时rehash</li><li>load_factor=ht[0].used / ht[0].size</li><li>以上的不同是因为，执行那两个命令时，Redis需要创建当前服务器进程的<strong>子进程</strong>，在子进程存在期间，服务器会提高执行扩展操作所需的负载因子，从而京可能避免在子进程存在期间进行哈希表的扩展操作，可以避免不必要的内存写入操作，最大限度地节约内存</li><li>当负载因子小于0.1，则自动进行收缩操作</li></ol><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>为字典的ht[1]哈希表分配空间<ul><li>如果是扩展，则ht[1]大小为第一个大于等于 ht[0].used * 2 的2^n​。</li><li>如果是收缩，则是第一个大于等于 ht[0].used 的2^n​。</li></ul></li><li>将保存在ht[0]的所有键值对rehash到ht[1]上面，即重新计算哈希值和索引值，然后放到ht[1]的指定位置上</li><li>当ht[0]所有的键值对都迁移到了ht[1]，则将ht[1]设置为ht[0]，并且在ht[1]新建一个空哈希表</li></ol><h3 id="渐进式rehash"><a href="#渐进式rehash" class="headerlink" title="渐进式rehash"></a>渐进式rehash</h3><ol><li>rehash时，服务器不是一次就将ht[0]里面的所有键值对全部rehash到ht[1]。而是分多次，<strong>渐进式</strong>地将ht[0]里面的键值对慢慢地rehash到ht[1]</li><li>在执行操作之外，顺带将键值对rehash到ht[1]中，把rehash键值对所需的计算工作均摊到每次对字典的增删改查操作之中。当rehash工作完成后，将rehashidx属性的值加一。所有的键rehash完毕后，rehashidx设置为-1</li><li>在进行渐进式rehash时，字典<strong>同时</strong>使用ht[0]，ht[1]。所以操作同时在两个哈希表中进行，即如果要查找一个键，会先在ht[0]找，没找到就继续到ht[1]中找</li><li>新添加的键值对直接保存到ht[1]中</li></ol><h2 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h2><ul><li>通过在每个节点中维持多个指向其他节点的指针，从而快速访问节点</li><li>查找速度:平均O(log N)，最坏O(N)</li><li>支持顺序性操作</li><li>使用跳跃表作为有序集合键的底层实现之一</li></ul><ul><li><p>因为要进行随机的插入和删除，不便用数组</p></li><li><p>要定位插入位置一般用二分查找</p></li><li><p>层级制，最下面所有元素串起来，每隔几个元素挑选一个代表，再将这几个代表用另外一级指针串起来，然后继续选出二级代表，最后形成金字塔结构</p></li><li><p>插入，先在顶层定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插入进去</p></li><li><p>随机策略，位于L0层概率为1，兼职L1层概率0.5，到L2层0.25，概率逐层降低</p></li></ul><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ol><li>每一层都是一个有序的链表，最底层(L1)的链表包含<strong>所有元素</strong></li><li>如果一个元素出现在第 n 层的链表中，则它也出现在第 n-1 层</li><li>搜索先从上层搜索，当前面的元素比target大时，则向下一级搜索(即向着更密集的数据找)</li><li>总体来看从左上往右下寻找</li></ol><h3 id="查找代码"><a href="#查找代码" class="headerlink" title="查找代码"></a>查找代码</h3><p>从每个节点的最高层开始寻找，如果该层forward不为null，并且分值小于score，则跳到下一个节点，即x = x-&gt;level[i].forward，然后如果相等，则返回。如果该层的forward不满足，则遍历自己的下一个层级(level[i-1])的位置。综上就是从左往右，从上往下。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 通过分值和对象值获取排位信息，以1为起始值</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">zslGetRank</span><span class="token punctuation">(</span>zskiplist <span class="token operator">*</span>zsl， <span class="token keyword">double</span> score， robj <span class="token operator">*</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    zskiplistNode <span class="token operator">*</span>x<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rank <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    x <span class="token operator">=</span> zsl<span class="token operator">-></span>header<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从最高层依次往下</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> zsl<span class="token operator">-></span>level<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token operator">-></span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>x<span class="token operator">-></span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token operator">-></span>score <span class="token operator">&lt;</span> score <span class="token operator">||</span>                <span class="token punctuation">(</span>x<span class="token operator">-></span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token operator">-></span>score <span class="token operator">==</span> score <span class="token operator">&amp;&amp;</span>                <span class="token function">compareStringObjects</span><span class="token punctuation">(</span>x<span class="token operator">-></span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token operator">-></span>obj，o<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 排位增加</span>            rank <span class="token operator">+</span><span class="token operator">=</span> x<span class="token operator">-></span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>span<span class="token punctuation">;</span>            x <span class="token operator">=</span> x<span class="token operator">-></span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* x might be equal to zsl->header， so test if obj is non-NULL */</span>        <span class="token comment" spellcheck="true">// 对象和分数值都相等</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">-></span>obj <span class="token operator">&amp;&amp;</span> <span class="token function">equalStringObjects</span><span class="token punctuation">(</span>x<span class="token operator">-></span>obj，o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> rank<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/IMG_20200818_102630.jpg" alt="IMG_20200818_102630"></p><p>level:表中层数最大的节点的层数</p><p>length:节点数量</p><h3 id="跳跃表节点"><a href="#跳跃表节点" class="headerlink" title="跳跃表节点"></a>跳跃表节点</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> zskiplistNode<span class="token punctuation">{</span>    <span class="token keyword">struct</span> zskiplistNode <span class="token operator">*</span> backward<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后退指针</span>    <span class="token keyword">double</span> score<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分值</span>    robj <span class="token operator">*</span> obj<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成员对象</span>    <span class="token keyword">struct</span> zskiplistLevel <span class="token comment" spellcheck="true">//层</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> zskiplistNode <span class="token operator">*</span> forward<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//前进指针</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> span<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跨度</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="层"><a href="#层" class="headerlink" title="层"></a>层</h4><p>level数组可以包含多个元素，每个元素都包含一个指向其他节点的指针，来加快访问其他节点的速度</p><p>感觉幂次规律，随机生成一个[1，32]的值作为level数组的大小，即层的高度</p><h4 id="前进指针"><a href="#前进指针" class="headerlink" title="前进指针"></a>前进指针</h4><p>每个层都有一个指向表尾方向的前进指针(level[i].forward)</p><h4 id="跨度"><a href="#跨度" class="headerlink" title="跨度"></a>跨度</h4><p>记录两个节点之间的距离</p><p>指向NULL的所有前进指针的跨度都为0</p><p>跨度实际是用来计算排位的:在查找某个节点过程中，将沿途访问的所有层的跨度累积起来，得到的结果就是目标节点在跳跃表中的排位(即该节点是第几个节点)</p><h4 id="后退指针"><a href="#后退指针" class="headerlink" title="后退指针"></a>后退指针</h4><p>可以先通过跳跃表的tail指针访问表尾节点，然后通过后退指针访问倒数第二个节点…，直到遇到指向NULL的后退指针</p><h4 id="分值和成员"><a href="#分值和成员" class="headerlink" title="分值和成员"></a>分值和成员</h4><ol><li>分值:跳跃表中所有节点都按分值从小到大排序</li><li>成员对象:指向<strong>SDS字符串</strong>对象的指针</li><li>跳跃表中成员对象必须唯一，但是分值可以相同</li><li>分值相同的节点按照成员变量的字典序排序</li></ol><h3 id="跳跃表结构"><a href="#跳跃表结构" class="headerlink" title="跳跃表结构"></a>跳跃表结构</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> zskiplist<span class="token punctuation">{</span>    <span class="token keyword">struct</span> zskiplistNode <span class="token operator">*</span> header，<span class="token operator">*</span>tial<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表中节点的数量</span>    <span class="token keyword">int</span> level<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表中层数最大的节点的层数</span><span class="token punctuation">}</span> zskiplist<span class="token punctuation">;</span></code></pre><p>使得能O(1)访问表头表尾节点，访问跳跃表长度，获取表中层数最大的节点的层数</p><h2 id="整数集合"><a href="#整数集合" class="headerlink" title="整数集合"></a>整数集合</h2><p>当一个集合只包含整数值元素，并且数量不多时，redis就会采用整数集合作为集合键的底层实现</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> strcut intset<span class="token punctuation">{</span>    uint32_t encoding<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编码方式</span>    uint32_t length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//元素数量</span>    int8_t contents<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存元素的数组</span><span class="token punctuation">}</span></code></pre><p>可以保存类型为 int16_t，int32_t，int64_t的<strong>非重复</strong>整数值，且元素在contents数组中<strong>有序排列</strong></p><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>每当添加一个新元素到整数集合里面，并且新元素的类型比<strong>现有所有元素类型</strong>都长，需要先对整数集合进行升级，再加入该元素</p><ol><li>根据新元素类型，扩展整数集合底层数组的空间大小，并为新元素分配空间</li><li>将底层数组现有的<strong>所有元素转换</strong>成与新元素相同的类型，并且放置到正确位置上，仍需<strong>保证有序性</strong></li><li>将新元素添加到底层数组里</li></ol><p>每次添加新元素都有可能引起升级，而每次升级都需要对底层数组所有元素进行类型转换，所以添加新元素时间复杂度为O(N)</p><h3 id="升级的好处"><a href="#升级的好处" class="headerlink" title="升级的好处"></a>升级的好处</h3><h4 id="提升灵活性"><a href="#提升灵活性" class="headerlink" title="提升灵活性"></a>提升灵活性</h4><p>整数集合可以通过自动升级底层数组来适应新元素，所以可以将 int16_t、int32_t、int64_t随意地添加到集合中，不必担心类型错误</p><h4 id="节约内存"><a href="#节约内存" class="headerlink" title="节约内存"></a>节约内存</h4><p>既可以让集合能<strong>同时保存三种不同类型</strong>的值，又可以确保升级只在必要时进行</p><h3 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h3><p><strong>不支持</strong>降级操作，即使把之前因为他而升级的元素删除，底层数组还仍然是加入那个元素后的类型</p><h2 id="压缩列表"><a href="#压缩列表" class="headerlink" title="压缩列表"></a>压缩列表</h2><ul><li>压缩列表是列表键和哈希键的底层实现之一</li><li>当一个列表键只包含<strong>少量列表项</strong>，并且每个列表项都是<strong>小整数或较短字符串</strong>，则用压缩列表作为底层实现</li><li>压缩列表是为了<strong>节约内存</strong>而开发的，是由一系列特殊编码的连续内存块组成的<strong>顺序型数据结构</strong><ul><li>zlbytes：记录整个压缩列表所占用的内存字节数，在内存重分配或zlend位置时使用</li><li>zltail：记录压缩列表表尾节点距压缩列表的起始地址有多少字节，通过该偏移量，可无须遍历整个压缩列表就可以确定表尾节点的地址</li><li>zllen：记录了压缩列表包含的节点数量</li><li>entryX：压缩列表包含的各个节点，节点长度由节点包含的内容决定</li><li>zlend：特殊值0xFF，用于标记压缩列表的末端</li></ul></li></ul><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210207091430874.png" alt="image-20210207091430874"></p><h3 id="压缩列表节点的构成"><a href="#压缩列表节点的构成" class="headerlink" title="压缩列表节点的构成"></a>压缩列表节点的构成</h3><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210207091652786.png" alt="image-20210207091652786"></p><h4 id="previous-entry-length"><a href="#previous-entry-length" class="headerlink" title="previous_entry_length"></a>previous_entry_length</h4><ul><li>记录压缩列表<strong>前一个节点</strong>的长度</li><li>通过指针运算，根据当前节点的起始地址得到前一个节点的起始地址</li><li>用于从表尾到表头的遍历：指向表尾节点的指针可以通过压缩列表的起始地址的指针加上zltail得到</li></ul><h4 id="encoding"><a href="#encoding" class="headerlink" title="encoding"></a>encoding</h4><p>记录节点的content属性所保存数据的类型及长度</p><h4 id="content"><a href="#content" class="headerlink" title="content"></a>content</h4><p>负责保存节点的值，值的类型和属性由encoding决定</p><h3 id="连锁更新"><a href="#连锁更新" class="headerlink" title="连锁更新"></a>连锁更新</h3><ul><li><p>每个节点的previous_entry_length属性都记录了前一个节点的长度，如果前一节点长度小于254字节，则previous_entry_length属性用1字节空间保存该长度值，否则需要用5字节空间。</p></li><li><p>如果在压缩列表中，有多个介于[250，153]字节的节点[e1，eN]，记录这些节点的长度只需要1字节长的<strong>previous_entry_length</strong>，所以[e1，eN]所有节点的<strong>previous_entry_length</strong>都是1字节长</p></li><li><p>但如果将一个大于254字节的新节点new加入压缩列表的头节点，则new成为e1的前置节点。而这样e1的<strong>previous_entry_length</strong>属性不足以保存new的长度，所以进行空间重分配，变成5字节大小</p></li><li><p>这样e1的长度大于254字节了，e2的<strong>previous_entry_length</strong>也不足以保存e1的长度，也扩展成5字节大小。这样就进行连续多次空间扩展，即连锁更新</p></li><li><p>删除节点也会引发连锁更新</p></li><li><p>连锁更新在最坏情况下需要对压缩列表进行N次空间重分配操作，每次操作最坏O(N)，所以连锁更新最坏时间复杂度为O(N^2)​.</p></li><li><p>但是发生的机率比较低：</p><ul><li>恰好有多个连续的，长度介于250-153字节的节点的情况并不多见 </li><li>即使出现连锁更新，只要被更新的节点数量不多，就不会对性能有影响</li></ul></li><li><p>所以平均复杂度为O(N)</p></li></ul><h1 id="基础数据结构"><a href="#基础数据结构" class="headerlink" title="基础数据结构"></a>基础数据结构</h1><p>每个键值对都是由对象组成，键总是一个字符串对象，值可以是五种对象中的一种</p><p>如果容器不存在，则先创建一个再进行操作</p><p>如果容器里元素为空，则立刻删除容器，释放内存</p><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><ul><li>点赞数量:  incr likes 每操作一  次，就+1，最后可以通过get likes得到最终结果</li><li>将用户信息使用JSON序列化为字符串，将字符串塞进Redis来缓存</li><li>如果value是整数，则可以进行自增操作。用于计数器：可以快速实现计数和查询的功能。</li></ul><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><ul><li>相当于LinkedList，是链表不是数组，插入删除快，索引定位慢</li><li>元素较少时会使用一块连续内存存储，即ziplist（压缩列表），所有元素彼此紧挨着一起存储</li><li>元素较多时采用快速链表（quicklist），将多个ziplist使用双向指针串起来使用，既满足快速插入删除，又不会出现太大空间冗余</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><p>粉丝列表、文章的评论列表</p></li><li><p>通过 lrange 命令，读取某个闭区间内的元素，可以基于 List 实现分页查询，这个是很棒的一个功能，基于 Redis 实现简单的高性能分页，可以做类似微博那种下拉不断分页的东西，性能高，就一页一页走。</p></li><li><p>消息队列（异步队列）：数据的生产者可以通过Lpush命令从左边插入数据，多个数据消费者，可以使用BRpop命令阻塞的“抢”列表尾部的数据。</p></li></ul><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><ul><li><p>类似与Map&lt;String，Map&lt;String，String&gt;</p></li><li><p>和HashMap一样采用数组+链表</p></li><li><p>Redis字典的值只能是字符串</p></li><li><p>渐进式rehash策略：在rehash时保留新旧两个hash结构，查询时会同时查询两个hash结构，循序渐进的将旧hash的内容一点点地迁移到新的hash结构中</p></li><li><p>记录帖子的点赞数、评论数、点击数</p></li></ul><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><ul><li><p>相当于HashSet，键值对是无序的、唯一的。相当于所有value都是NULL的hash</p></li><li><p>统计中奖的用户ID，可以去重</p></li></ul><ul><li>交集运算:微博共同关注 SINTER key1 key2</li><li>朋友圈点赞</li><li>抽奖活动<ul><li>SADD key 添加参与</li><li>SCARD key 查看有几个人参与了抽奖</li><li>SRANDMEMBER key 2 随机抽两个人，不删除</li><li>SPOP key 随机抽取并删除1个人</li></ul></li></ul><h2 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h2><ul><li><p>类似于SortedSet和HashMap的结合体，保证了value的唯一性，每个value有score（排序权重）</p></li><li><p>热搜</p></li><li><p>游戏排名</p></li><li><p>排行榜：榜单维护可能是多方面：按照时间、按照播放量、按照获得的赞数等。</p></li><li><p>微博热搜榜，value是名称，score是热度值</p></li><li><p>粉丝列表，value是粉丝用户ID，score是关注时间</p></li><li><p>学生成绩，value是学生ID，score是考试成绩</p></li></ul><h1 id="位图bitmap"><a href="#位图bitmap" class="headerlink" title="位图bitmap"></a>位图bitmap</h1><p>位图不是特殊的数据结构，它的内容其实就是普通的字符串，也就是 byte 数组</p><p>可以使用get/set 直接获取和设置整个位图的内容，也可以使⽤位图操作 getbit/setbit 等将 byte 数组看成「位数组」来处理。</p><p>位数组会自动扩展，如果设置了某个偏移位置超出了现有的内容范围，就会自动进行零扩充</p><h2 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h2><p>用户签到</p><ul><li>有些bool 型数据需要存取，例如用户⼀年的签到记录，签了是 1，没签是0，要记录 365 天</li><li>位图数据结构让每天的签到记录只占据⼀个位，365 天就是 365个位，46 个字节 (⼀个稍长⼀点的字符串) 就可以完全容纳下</li><li>统计和查找<ul><li>bitcount：统计指定范围内1的个数，可以统计用户一共签到多少天 </li><li>bitpos：用于查找指定范围内出现的第一个0或1，从哪天开始第一次签到</li></ul></li></ul><h1 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h1><ul><li><p>提供不精确的去重统计方案，标准误差是0.81%</p></li><li><p>不能知道一个值是否在结构中，即不提供 pfcontains功能</p></li><li><p>pfadd 和 pfcount，⼀个是增加计数，⼀个是获取计数。pfadd codehole user1（将用户ID塞进去）；pfcount codehole</p></li><li><p>pfmerge：用于将多个pf计数值累加在一起形成一个新的pf值，例如两个差不多的页面进行合并，需要将页面的UV访问量也合并</p></li><li><p>场景：UV（Unique Visitor） 需要去重，同⼀个用户⼀天之内的多次访问请求只能计数⼀次。</p></li><li><p>实现：计数较小时使用稀疏矩阵存储，占用空间超过阈值，则转成稠密矩阵</p></li></ul><h1 id="Bloom-Filter"><a href="#Bloom-Filter" class="headerlink" title="Bloom Filter"></a>Bloom Filter</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>布隆过滤器是一个很长的二进制向量和一系列随机映射函数。</p><p>优点是空间效率和查询时间都远远超过⼀般的算法</p><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>当⼀个元素被加⼊集合时，通过K个散列函数将这个元素映射成⼀个位数组中的K 个点，把它们置为1。检索时，我们只要看看这些点是不是都是1就（⼤约）知道集合中有没有它了：如 果这些点有任何⼀个0，则被检元素⼀定不在；如果都是1，则被检元素很可能在。这就是布隆过滤器的基本思想。</p><p>Bloom Filter跟单哈希函数Bit-Map不同之处在于：Bloom Filter使⽤了k个哈希函数，每个字符串跟k个 bit对应。从⽽降低了冲突的概率。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>是一个很长的二进制向量和一系列随机映射函数</li><li>当⼀个元素被加⼊集合时，通过K个散列函数将这个元素映射成⼀个位数组中的K 个点，把它们置为1</li><li>exists：把hash的几个位置都算出来，看看位数组在几个位置是否都为1<ul><li>如果这些点有任何⼀个0，则被检元素⼀定不在</li><li>如果都是1，则被检元素很可能在</li></ul></li><li>空间效率和查询时间都远远超过⼀般的算法</li><li>存在误判，可能要查到的元素并没有在容器中，但是hash之后得到的k个位置上值都是1</li><li>删除困难。⼀个放⼊容器的元素映射到bit数组的k个位置上是1，删除的时候不能简单的直接置为 0，可能会影响其他元素的判断。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>缺点是有⼀定的误识别率和删除困难，bloom filter之所以能做到在时间和空间上的效率⽐较⾼，是因为牺牲了判断的准确率、删除的便利性</p><ul><li>存在误判，可能要查到的元素并没有在容器中，但是hash之后得到的k个位置上值都是1。如果 bloom filter中存储的是⿊名单，那么可以通过建⽴⼀个⽩名单来存储可能会误判的元素。</li><li>删除困难。⼀个放⼊容器的元素映射到bit数组的k个位置上是1，删除的时候不能简单的直接置为 0，可能会影响其他元素的判断。</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li>在使⽤bloom filter时，绕不过的两点是预估数据量n以及期望的误判率fpp</li><li>在实现bloom filter时，绕不过的两点就是hash函数的选取以及bit数组的⼤⼩。</li><li>对于⼀个确定的场景，我们预估要存的数据量为n，期望的误判率为fpp，然后需要计算我们需要的Bit数 组的⼤⼩m，以及hash函数的个数k，并选择hash函数</li><li>一个好的哈希函数要能近似等概率的将字符串映射到各个 Bit。选择k个不同的哈希函数⽐较麻烦，⼀种简单的⽅法是选择⼀个哈希函数，然后送⼊k个不同的参数。 </li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//项目要导入guava的maven依赖</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>tongji<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>hash<span class="token punctuation">.</span>BloomFilter<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>hash<span class="token punctuation">.</span>Funnels<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 测试布隆过滤器(可用于redis缓存穿透) * @author tongji4m3 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBloomFilter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    static &lt;T> BloomFilter&lt;T> create(Funnel&lt;? super T> funnel， long expectedInsertions， double fpp， BloomFilter.Strategy strategy)    funnel：数据类型(⼀般是调⽤Funnels⼯具类中的)    expectedInsertions：期望插⼊的值的个数    fpp 错误率(默认值为0.03)    strategy 哈希算法    numBits，表示存⼀百万个int类型数字，需要的位数为7298440，700多万位。理论上存⼀百万个    数，⼀个int是4字节32位，需要481000000=3200万位。如果使⽤HashMap去存，按HashMap50%的    存储效率，需要6400万位。可以看出BloomFilter的存储空间很⼩，只有HashMap的1/10左右    错误率越⼤，所需空间和时间越⼩，错误率越⼩，所需空间和时间越⼤     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> BloomFilter<span class="token operator">&lt;</span>Integer<span class="token operator">></span> bloomFilter <span class="token operator">=</span> BloomFilter<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Funnels<span class="token punctuation">.</span><span class="token function">integerFunnel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>， total<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//初始化total条数据到过滤器里</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bloomFilter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//匹配已经再过滤器中的值，看是否有匹配不上的</span>        <span class="token comment" spellcheck="true">//没有输出，说明只要放进去的，都能匹配上</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bloomFilter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有坏人逃脱啦~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//匹配不在过滤器中的10000个值，有多少匹配出来</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> total<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total <span class="token operator">+</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token operator">++</span>count<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//误伤数量: 320 错误率是0.03左右</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"误伤数量: "</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>数据库的id都是1开始然后⾃增的，那我知道你接⼝是通过id查询的，我就拿负数去查询，这个时候，会发现缓存⾥⾯没这个数据，我⼜去数据库查也没有，⼀个请求这样，100个，1000 个，10000个呢？你的DB基本上就扛不住了，如果在缓存⾥⾯加上这个，是不是就不存在了，你判断没这个数据就不去查了，直接return⼀个数据为空不就好了嘛。</p><ul><li>海量数据去重</li><li>用于检索一个元素是否在一个集合中</li><li>爬⾍过滤已抓到的url就不再抓，可⽤bloom filter过滤，只会使得爬虫系统错过少量的新页面</li><li>垃圾邮件过滤。Bloom Filter只需要哈希表 1/8到 1/4 的大小</li><li>海量数据去重：不断放入元素到集合中，检索一个元素是否在一个集合中，在则说明重复、推荐去重，即APP会把用户已经看过的内容去掉、能准确过滤掉用户已经看过的内容，那些用户没有看过的新内容，也会过滤掉极小一部分（误判）</li></ul><h1 id="地理位置Geo模块"><a href="#地理位置Geo模块" class="headerlink" title="地理位置Geo模块"></a>地理位置Geo模块</h1><ul><li>可以用于“附近的人”</li><li>使用Geo，则所有都会放在一个zset集合中，可能很大</li><li>如果单个key过大，会对集群的迁移造成较大影响</li><li>所以建议Geo的数据使用单独的Redis实例部署，不使用集群</li></ul><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><ul><li>地理位置距离排序算法：GeoHash</li><li>将二维的经纬度数据映射到一维的整数，再在这个一维的线上获取附近的点即可</li><li>映射算法类似于切蛋糕法，将地图元素坐标放置于唯一的方格中，并得到一个编号</li><li>进行Geo查询时，内部结构是zset，通过zset的score排序就可以得到坐标附近的其他元素，通过将score还原成坐标值可以得到元素的原始坐标</li></ul><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li><p>geoadd 集合名称 {经度 纬度 名称}</p></li><li><p>geodist 集合名称 名称1 名称2 km（单位），计算两个元素之间的距离</p></li><li><p>geopos 集合名称 名称，获取元素经纬度坐标</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 布隆过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章--运输层</title>
      <link href="posts/9ec9055a.html"/>
      <url>posts/9ec9055a.html</url>
      
        <content type="html"><![CDATA[<h1 id="运输层服务"><a href="#运输层服务" class="headerlink" title="运输层服务"></a>运输层服务</h1><ul><li><p>运输层未应用进程提供逻辑通信功能</p></li><li><p>运输层协议是在端系统中而不是路由器中实现的</p></li><li><p>在发送端,运输层讲从发送应用程序进程接收到的报文转换成运输层分组,即<strong>报文段</strong></p></li><li><p>即将报文分为较小的块,每块假设一个运输层首部,将他们传递给网络层</p></li><li><p>网络层封装成数据报发送</p></li><li><p>网络路由器仅作用于该数据报的网络层字段,不检查运输层报文段的字段</p></li><li><p>有复用和分用两个过程,写信后一切发(复用),收到的回信分发给具体的每个人(分用)</p></li></ul><h2 id="运输层和网络层的关系"><a href="#运输层和网络层的关系" class="headerlink" title="运输层和网络层的关系"></a>运输层和网络层的关系</h2><ul><li>网络层提供了主机之间的逻辑通信,而运输层提供进程之间的逻辑通信</li><li>类似于两个家庭之间依靠邮政(网络层)发送邮件,依靠孩子(运输层)分发给家庭中的每个人</li><li>运输层协议只工作在端系统中,运输层只负责将来自应用进程的报文移动到网络边缘(网络层),对他在网络核心如何移动并不关心</li><li>中间路由器也不识别运输层报文段的任何信息</li><li>运输层能够提供的服务常常受限于底层网络层协议的服务模型</li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><code>IP</code>称为不可靠服务</li><li>每台主机至少有一个网络层地址,即<code>IP</code>地址</li><li>运输层的基本职责就是把两个端系统之间的<code>IP</code>的交互服务扩展为运行在端系统上的两个进程之间的交互服务,称为<strong>运输层的多路复用与多路分解</strong></li><li><code>UDP</code>只提供进程到进程之间的数据交互和差错检查,是不可靠的服务</li><li><code>TCP</code>额外提供<strong>可靠数据传输</strong>,<strong>拥塞控制</strong></li></ul><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><ul><li><code>16bit</code>,一共<code>65536</code>个</li><li>服务端端口号:熟知端口号 <code>0-1023</code>,登记端口号<code>1024-49151</code></li><li>客户端端口号:仅在客户进程运行时才动态选择的端口号,<code>49151-65536</code></li></ul><h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>只提供复用分用,差错检测功能</li><li>无连接</li><li>不保证可靠交付</li><li>面向报文的,适合一次性传输少量数据的网络应用(就是一次发送一个完整的报文,不分成报文段)</li><li>无拥塞控制,适合实时应用</li><li>首部开销小(<code>8B</code>)</li></ol><h2 id="首部格式"><a href="#首部格式" class="headerlink" title="首部格式"></a>首部格式</h2><ul><li>16位源端口号(如果不需要回应则可以全零)</li><li>16位目的端口号</li><li>16位<code>UDP</code>长度,<code>UDP</code>报文的整个长度</li><li>16位<code>UDP</code>校验和,检验整个<code>UDP</code>数据报是否有错,错则丢弃</li></ul><h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><ul><li>面向连接</li><li>只能有两个端点,点对点的</li><li>可靠有序,不丢不重</li><li>提供全双工通信. 有发送缓存(准备发送的数据和已发送但尚未收到确认的数据)和接收缓存</li><li>面向字节流.看成无结构的字节流</li></ul><h2 id="报文段首部格式"><a href="#报文段首部格式" class="headerlink" title="报文段首部格式"></a>报文段首部格式</h2><h3 id="20B的固定首部"><a href="#20B的固定首部" class="headerlink" title="20B的固定首部"></a>20B的固定首部</h3><ul><li><p>源端口,目的端口</p></li><li><p>序号:在一个TCP连接中传送的字节流中每一个字节都按顺序编号,本字段表示本报文段所发送数据的第一个字节的序号</p></li><li><p>确认号:期望收到对方下一个报文段的第一个数据字节的序号.如果确认号为N,代表到序号N-1为止的所有数据都已正确收到</p></li><li><p>数据偏移(首部长度):TCP报文段的数据起始处距离TCP报文段的起始处有多远,以4B为单位.控制位:<code>URG</code>(紧急位,标识优先级),<code>ACK</code>(连接建立后所有传送报文段应把他置为1),<code>PSH</code>(接收方进行的紧急处理),<code>RST</code>(复位,说明出现了严重差错,必须释放连接),<code>SYN</code>(同步位,表明是一个连接请求/连接接收报文),<code>FIN</code>(此报文段发送方数据已发完,要求释放连接).窗口字段:指发送本报文段的一方的接收窗口,即现在允许对方发送的数据量</p></li><li><p>校验和:校验首部+数据 紧急指针:<code>URG=1</code>时才有意义,指出本报文段中紧急数据的字节数</p></li><li><p>选项(最大报文段长度MSS,时间戳等) 和 填充字段(为了对齐)</p></li></ul><h2 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h2><p>主动发起连接建立的应用进程叫做客户,被动等待连接建立的应用进程叫做服务器</p><h2 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h2><ol><li>校验,与<code>UDP</code>校验一样,增加伪首部</li><li>序号,按字节为单位编上序号,根据序号来保证</li><li>确认,接收方确定后发一个确认报文段.采用累计确认机制,即前面的必须都收到,不能留空</li><li>重传,超时重传,重传时间 自适应算法,动态改变重传时间<code>RTTs</code>(加权平均往返时间) ,每当比期望序号大的失序报文段到达时,会发送冗余<code>ACK</code>,指明下一个期待字节的序号</li></ol><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><ul><li>利用<strong>滑动窗口</strong>机制实现流量控制</li><li>接收方根据自己接收缓存的大小,动态调整窗口字段<code>rwnd</code>给发送方</li><li>发送方的发送窗口取决于窗口字段<code>rwnd</code>和拥塞窗口<code>cwnd</code>的最小值</li></ul><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><h3 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h3><ol><li>假定数据单方向传送,而另一个方向只传送确认</li><li>接收方总是有足够大的缓存空间,因此发送窗口大小取决于拥塞程度,拥塞窗口是发送方设置的,反映的是自己估算的网络拥塞程度</li></ol><h3 id="慢开始和拥塞避免"><a href="#慢开始和拥塞避免" class="headerlink" title="慢开始和拥塞避免"></a>慢开始和拥塞避免</h3><h3 id="快重传和快恢复"><a href="#快重传和快恢复" class="headerlink" title="快重传和快恢复"></a>快重传和快恢复</h3>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运输层 </tag>
            
            <tag> TCP </tag>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章--应用层</title>
      <link href="posts/3a03a942.html"/>
      <url>posts/3a03a942.html</url>
      
        <content type="html"><![CDATA[<h1 id="应用层协议原理"><a href="#应用层协议原理" class="headerlink" title="应用层协议原理"></a>应用层协议原理</h1><ul><li>研发网络应用程序的核心是写出能够运行在不同的端系统和通过网络彼此通信的程序</li></ul><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><ul><li>在一对进程之间的通信会话场景中,发起通信(即在该会话开始时发起与其他进程的联系)的进程被标识为客户,在会话开始时等待联系的进程是服务器</li><li>套接字是同一台主机内应用层和运输层之间的接口。</li><li>由于套接字是建立在网络应用程序的可编程接口，也称为应用程序和网络之间的应用程序编程接口（API）</li><li>开发者对运输层的控制仅限于：1.选择运输层协议 2.设定几个运输层参数，例如最大缓存等</li><li>指定<strong>IP地址，端口号</strong></li></ul><h2 id="运输服务选择"><a href="#运输服务选择" class="headerlink" title="运输服务选择"></a>运输服务选择</h2><h3 id="可靠数据传输"><a href="#可靠数据传输" class="headerlink" title="可靠数据传输"></a>可靠数据传输</h3><p>当一个运输协议提供这样的服务时，发送进程只要将其数据传递进套接字，就可以完全相信该数据将能无差错地到达接收进程</p><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p>可用吞吐量就是发送进程能够向接收进程交付比特的速率</p><p>运输层协议能够以某种特定的速率提供确保的可用吞吐量</p><p>具有吞吐量要求的应用程序被称为带宽敏感的应用</p><h3 id="定时"><a href="#定时" class="headerlink" title="定时"></a>定时</h3><p>发送方注入进套接字中的每个比特到达接收方的套接字不迟于<code>100ms</code></p><p>对交互式实时应用程序有用</p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>运输协议能加密由发送进程传输的所有数据，并且在发送和接收进程之间提供机密性，防止被其他方式观测到，并且在交付给接收进程之前解密数据</p><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><h4 id="面向连接服务"><a href="#面向连接服务" class="headerlink" title="面向连接服务"></a>面向连接服务</h4><p>在数据报文流动之前，让客户和服务器互相交换运输层控制信息，提醒客户和服务器做好准备。在握手阶段，一个<strong>TCP连接</strong>就在两个进程的套接字之间建立了</p><p>是全双工的，双方可以同时进行报文收发，结束后，必须拆除连接</p><h4 id="可靠的数据传送服务"><a href="#可靠的数据传送服务" class="headerlink" title="可靠的数据传送服务"></a>可靠的数据传送服务</h4><p>可以无差错，按适当顺序交付所有发送的数据，没有字节的丢失和冗余</p><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><ul><li>轻量级运输协议，只提供最小服务、</li><li>无连接的，通信前没有握手过程</li><li>提供不可靠的数据传送服务，并不保证报文到达接收进程，且可能是乱序到达的</li></ul><h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h2><ul><li><p>定义了运行在不同端系统上的应用程序如何相互传递报文</p></li><li><p><code>HTTP</code>超文本传输协议</p></li><li><p><code>SMTP</code>简单邮件传输协议</p></li></ul><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>服务器向客户发送被请求的文件,而不存储任何关于该客户的状态信息,无状态协议</p><h2 id="持续连接的HTTP"><a href="#持续连接的HTTP" class="headerlink" title="持续连接的HTTP"></a>持续连接的HTTP</h2><p><code>HTTP 1.1</code>持续连接:服务器在发送响应后保存该<code>TCP</code>连接打开,在相同的客户和服务器之间,后续的请求和响应报文能够通过相同的连接进行传送</p><p>如果一条连接经过一定时间间隔仍未被使用,<code>HTTP</code>服务器就会关闭该连接</p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p><code>cookie</code>用于标识一个用户.用户首次访问一个站点时,可能需要提供一个用户标识.在后续会话中,浏览器向服务器传递一个<code>cookie</code>首部,从而向该服务器标识了用户.因此<code>cookie</code>可以在无状态的<code>HTTP</code>之上建立一个用户会话层</p><h2 id="Web缓存"><a href="#Web缓存" class="headerlink" title="Web缓存"></a>Web缓存</h2><ul><li>Web缓存器也叫做代理服务器,能够代表初始的<code>Web</code>服务器来满足<code>HTTP</code>请求的网络实体</li><li>它有自己的磁盘存储空间,并在存储空间中保存最近请求过的对象的副本.</li><li>可以配置用户的浏览器,使得用户所有的<code>HTTP</code>请求首先指向<code>Web</code>缓冲器,每个对某对象的浏览器请求首先会把定向到该<code>Web</code>缓冲器</li><li><code>Web</code>缓冲器通常由<code>ISP</code>购买并安装,一所大学可能在他的校园网上安装一台缓冲器,并且将所有校园网上的用户浏览器配置为指向他</li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>浏览器创建一个到<code>Web</code>缓冲器的<code>TCP</code>连接</li><li><code>Web</code>缓冲器进行检查,有副本直接返回</li><li>没有则自己打开一个与该对象的初始服务器的<code>TCP</code>连接</li><li><code>Web</code>缓冲器在本地存储副本,并通过现有的<code>TCP</code>连接返回给浏览器</li></ol><h3 id="条件GET方法"><a href="#条件GET方法" class="headerlink" title="条件GET方法"></a>条件GET方法</h3><p>用于判断缓存是否修改</p><ol><li>代理服务器向Web服务器发送请求,得到对象以及对象的最后修改时间</li><li>一个星期后,另一个用户访问该缓存,缓冲区通过条件<code>GET</code>执行最新检查</li><li>即发送了自己存储的最后修改时间,如果Web服务器发现该对象在指定日期后对该对象修改过,才重新发送该对象,否则只会发送空对象</li><li>即<code>304 Not Modified</code>,告诉缓冲器,可以使用该对象</li></ol><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><p>域名系统,能进行主机名到<code>IP</code>地址转换的目录服务</p><ol><li>一个由分层的<code>DNS</code>服务器实现的分布式数据库</li><li>一个使得主机能够查询分布式数据库的应用层协议</li><li><code>DNS</code>运行在<code>UDP</code>上,端口号为53</li><li><code>DNS</code>是为因特网上的用户应用程序以及其他软件提供一种核心功能,即将主机名转换为其背后的<code>IP</code>地址</li><li><code>DNS</code>通常是由其他应用层协议所使用的,将用户提供的主机名解析为<code>IP</code>地址</li><li>想获得的<code>IP</code>地址通常就缓存在一个附近的<code>DNS</code>服务器,有助于减少<code>DNS</code>的网络流量和<code>DNS</code>的平均时延</li></ol><h2 id="DNS是应用层协议"><a href="#DNS是应用层协议" class="headerlink" title="DNS是应用层协议"></a>DNS是应用层协议</h2><ol><li>它使用客户-服务器模式运行在通信的端系统之间</li><li>在通信的端系统之间通过下面的端到端运输协议来传送DNS报文</li></ol><h2 id="请求URL过程"><a href="#请求URL过程" class="headerlink" title="请求URL过程"></a>请求URL过程</h2><p>假设一个用户访问<code>tongji4m3.club/index.html</code></p><ol><li>同一台用户主机上运行着<code>DNS</code>应用的客户端</li><li>浏览器从上述<code>URL</code>中抽取处主机名<code>tongji4m3.club</code>,并将该主机名传给DNS客户端</li><li><code>DNS</code>客户端会向<code>DNS</code>服务器发送一个包含主机名的请求</li><li><code>DNS</code>客户端会收到一份回答报文,包含对应主机名的<code>IP</code>地址</li><li>浏览器接收该<code>IP</code>地址,向该<code>IP</code>地址的80端口的<code>HTTP</code>服务器进程发送一个<code>TCP</code>连接</li></ol><h2 id="DNS其他服务"><a href="#DNS其他服务" class="headerlink" title="DNS其他服务"></a>DNS其他服务</h2><ul><li>主机别名,应用程序可以通过主机别名获得对应的规范主机名和<code>IP</code>地址</li><li>邮件服务器别名</li><li>负载分配:繁忙的站点被冗余分配在多台服务器上,每台服务器都有不同的IP地址,一个<code>IP</code>地址集合因此与同一个规范主机名相联系.当客户对映射到某地址集合的名字发出一个<code>DNS</code>请求时,该服务器用<code>IP</code>地址的整个集合进行响应,但在每个回答中循环这些地址次序</li></ul><h2 id="DNS工作机理概述"><a href="#DNS工作机理概述" class="headerlink" title="DNS工作机理概述"></a>DNS工作机理概述</h2><h3 id="分布式-层次数据库"><a href="#分布式-层次数据库" class="headerlink" title="分布式,层次数据库"></a>分布式,层次数据库</h3><ul><li>没有一台<code>DNS</code>服务器拥有因特网上所有主机的映射,这些映射分布在所有的<code>DNS</code>服务器上</li><li>根<code>DNS</code>服务器,根名字服务器提供<code>TLD</code>服务器的<code>IP</code>地址</li><li>顶级域服务器,对应每个顶级域(com,edu,gov等)和所有国家的顶级域(如uk,fr),都有<code>TLD</code>服务器</li><li>权威DNS服务器,具有公共可访问主机的每个组织机构都必须提供公共可访问的<code>DNS</code>记录,将主机名称映射为<code>IP</code>地址</li><li>本地<code>DNS</code>服务器.每个<code>ISP</code>都有一台本地<code>DNS</code>服务器,起着代理的作用</li></ul><h3 id="DNS记录和报文"><a href="#DNS记录和报文" class="headerlink" title="DNS记录和报文"></a>DNS记录和报文</h3><p><code>DNS</code>服务器存储了资源记录(RR),提供了主机名到<code>IP</code>地址的映射</p><p>资源记录:<code>(Name,Value,Type,TTL)</code></p><ul><li>TTL是该记录的生存时间,决定RR应当从缓存中删除的时间</li><li><code>Type=A</code>,则是主机名,IP地址</li><li><code>Type=NS</code>,则<code>Name</code>是一个域,如<code>foo.com</code>,而<code>Value</code>是知道如何获得该域中主机<code>IP</code>地址的权威<code>DNS</code>服务器的主机名,用于沿着查询链来路由<code>DNS</code>查询</li><li>如果<code>Type=CNAME</code>,则<code>Value</code>是别名为<code>Name</code>的主机对应的规范主机名</li><li>如果<code>Type=MX</code>则<code>Value</code>是别名为<code>Name</code>的邮件服务器的规范主机名</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
            <tag> 应用层 </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十五章--泛型</title>
      <link href="posts/d2c6f132.html"/>
      <url>posts/d2c6f132.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>&lt;&lt;Java编程思想&gt;&gt;读书笔记</p></blockquote><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TwoTuple</span><span class="token operator">&lt;</span>A<span class="token punctuation">,</span>B<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> A first<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> A second<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TwoTuple</span><span class="token punctuation">(</span>A first<span class="token punctuation">,</span> A second<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"TwoTuple{"</span> <span class="token operator">+</span>                <span class="token string">"first="</span> <span class="token operator">+</span> first <span class="token operator">+</span>                <span class="token string">", second="</span> <span class="token operator">+</span> second <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h1><ul><li>尽量使用泛型方法</li><li><code>static</code>方法无法访问泛型类的类型信息,要使用泛型能力,则必须成为泛型方法</li><li>泛型方法会使用类型参数推断</li><li>如果传入基本类型,则会自动装箱</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        MainTest mainTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MainTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mainTest<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mainTest<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//java.lang.Integer</span>        <span class="token comment" spellcheck="true">//java.lang.String</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="擦除"><a href="#擦除" class="headerlink" title="擦除"></a>擦除</h1><ul><li>在泛型代码内部,无法获得任何有关泛型参数类型的信息</li><li><code>List&lt;String&gt;</code>与<code>List&lt;Integer&gt; </code>都被擦除成他们原生的类型,即<code>List</code></li><li>泛型类型参数将擦除到他的第一个边界</li><li>泛型类型只有在静态类型检查期间才出现,之后会擦除替换为他们的非泛型上界</li><li>如<code>List&lt;T&gt;</code>擦除为<code>List</code>,未指定边界的将擦除为<code>Object</code></li><li>任何在运行时需要知道确切类型信息的操作都无法继续工作</li></ul><h2 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h2><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Ljava.util.List</span></code></pre><ul><li>数组将跟踪他们的实际类型,而这个类型是数组在创建时确定的,因此,尽管<code>array</code>被转型成了<code>List&lt;String&gt;[]</code>,这个信息也只存在于编译期,在运行时,它仍然是一个<code>Object</code>数组</li><li>唯一方式是创建一个被擦除类型的新数组,然后对他转型</li><li>因为有了擦除,数组的运行时类型只能是<code>Object[]</code>,如果立即转型为<code>T[]</code>,那么编译期数组的实际类型就丢失,所以最好在集合内部使用<code>Object[]</code>,使用数组类型时,才转型为<code>T[]</code></li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>不能创建类似<code>ArrayList&lt;int&gt;</code>等,只能改成包装类<code>ArrayList&lt;Integer&gt;</code></li><li>一个类不能实现同一个泛型接口的两种变体</li><li>使用带有泛型类型参数的转型不会有任何其他效果,还是会警告</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">public</span> T <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不抑制就有警告</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>不能使用泛型来区分重载方法</li><li><code>catch</code>不能捕获泛型类型的异常,因为在编译期和运行时都必须知道异常的确切类型</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 多态 </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十四章--类型信息</title>
      <link href="posts/9deeb220.html"/>
      <url>posts/9deeb220.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>&lt;&lt;Java编程思想&gt;&gt;读书笔记</p></blockquote><h1 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用全限定名</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.tongji.Wrapping"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Wrapping wrapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wrapping</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        clazz<span class="token operator">=</span>wrapping<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用.class创建对Class对象的引用时,不会自动地初始化该Clas对象</span>        clazz <span class="token operator">=</span> Wrapping<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//clazz = int.class; 也可用于基本数据类型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用newInstance()则必须具有默认构造器</span>        <span class="token comment" spellcheck="true">//newInstance()返回的只是Object类型</span>        Object object <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> IllegalAccessException <span class="token operator">|</span> InstantiationException e<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><code>Class</code>对象包含了与类有关的信息,用来创建类的所有常规对象的</li><li>每个类都有有个<code>Class</code>对象,保存在同名的<code>.class</code>文件中</li><li>想要在运行时获得类型信息,就必须首先获取对<code>Class</code>对象的引用</li><li>访问的<code>static</code>域不是<code>final</code>时,总是要链接和初始化</li><li>这个类型必须在编译时已知,才能用<code>RTTI</code>来识别</li><li><code>RTTI</code>与反射的区别是,<code>RTTI</code>在编译时打开和检查<code>.class</code>文件,而对于反射机制,<code>.class</code>在编译时不可获取,所以是在运行时打开和检查<code>.class</code>文件</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>加载:查找字节码,创建Class对象</li><li>链接:为静态域分配存储空间</li><li>初始化:对超类初始化,执行静态初始化块.(延迟到了对静态方法的首次引用时)</li></ul><h2 id="泛化的Class"><a href="#泛化的Class" class="headerlink" title="泛化的Class"></a>泛化的Class</h2><ul><li><code>Class&lt;?&gt;</code>优于平凡的<code>Class</code>,虽然是等价的</li><li><code>Class&lt;? extend Number&gt;</code>限定了Class引用为某种类型或他的任何子类型</li></ul><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><ul><li>能够创建有个编译时完全未知的对象,并调用此对象的方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Class </tag>
            
            <tag> Java基础 </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章--计算机网络和因特网</title>
      <link href="posts/4411b5fd.html"/>
      <url>posts/4411b5fd.html</url>
      
        <content type="html"><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><ul><li>某层向他的上一层提供服务,每层通过在该层中执行某些动作或直接使用下层的服务来提供服务。</li><li>一个协议层能够使用软件，硬件或两者的结合来实现。</li><li>五层因特网协议栈包括：应用层，运输层，网络层，链路层，物理层</li><li>7层ISO OSI参考模型包括：应用层，表示层，会话层，运输层，网络层，链路层，物理层</li></ul><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><ul><li>包括<code>HTTP</code>,<code>SMTP</code>,<code>FTP</code>协议</li><li>域名系统<code>DNS</code></li><li>应用层协议分布在多个端系统上，而一个端系统中的应用程序使用协议与另一个端系统中的应用程序交换信息分组。把这种位于应用层的信息分组称为报文</li></ul><h1 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h1><ul><li>两种运输协议<code>TCP</code>,<code>IP</code>,利用其中任何一个都能传输应用层报文</li><li><code>TCP</code>提供了面向连接的服务，包括确保传递和流量控制</li><li><code>UDP</code>提供无连接服务，不提供不必要的服务，没有可靠性，没有流量控制，没有拥塞控制</li><li>运输层的分组叫做报文段</li></ul><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><ul><li>负责将称为数据报的网络层分组从一台主机移动到另一台主机</li><li>网际协议<code>IP</code>，<code>IP</code>仅有一个</li><li>还包括了路由选择协议，根据该路由将数据报从源传输到目的地</li><li>通过源和目的地之间的一系列路由器路由数据报</li></ul><h1 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h1><ul><li>在每个节点，网络层将数据报下传给链路层，链路层沿着路径将数据报传递给下一个节点，在下一个节点，链路层将数据报上传给网络层</li><li>链路层分组称为帧</li><li>链路层任务是将整个帧从一个网络元素移动到邻近的网络元素</li></ul><h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><ul><li>负责将帧中的一个个比特从一个节点移动到下一个节点</li></ul><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><ul><li>路由器实现了物理层，链路层，网络层，而链路层交换机只实现了物理层，链路层</li><li>应用层报文传送到运输层，加上了运输层首部信息构成了运输层报文段</li><li>运输层向网络层传递该报文段，又增加了网络层首部信息，形成网络层数据报</li><li>之后传递给链路层，增加链路层首部信息生成链路层帧</li><li>在每层，都有首部字段和有效载荷字段（来自上一层的分组）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> OSI参考模型 </tag>
            
            <tag> TCP/IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十三章--字符串</title>
      <link href="posts/6c3751ad.html"/>
      <url>posts/6c3751ad.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>&lt;&lt;Java编程思想&gt;&gt;读书笔记</p></blockquote><h1 id="不可变String"><a href="#不可变String" class="headerlink" title="不可变String"></a>不可变String</h1><ul><li><code>String</code>对象是不可变的,任何一个操纵都是创建了一个全新的<code>String</code>对象以包含修改后的字符串内容</li><li>每当把<code>String</code>对象作为方法的参数时,都会复制一份引用,而该引用所指的对象其实一直待在单一的物理位置上</li><li>所有指向<code>String</code>的任何引用都不可能改变他的值</li><li>如果字符串操作比较简单,直接相信编译器会合理的构造,否则还是自己创建一个<code>StringBuilder</code></li><li>在<code>toString</code>方法中,如果要打印出对象的内存地址,应该调用<code>Object.toString()</code>,所以应该调用的是<code>super.toString()</code>,而不能调用<code>this.toString()</code>(会递归)</li><li><code>String</code>的操作中,如果需要改变字符串的内容,则会返回一个新的<code>String</code>对象.如果内容没有改变,则返回原对象的引用</li></ul><h1 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h1><p><code>String.format</code>效果一样</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">double</span> price <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String description <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQ"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-15.15s,%5.2f\n"</span><span class="token punctuation">,</span>description<span class="token punctuation">,</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*GHIJKLMNOPQ    , 0.73BCDEFGHIJKLMNOP, 0.22GHIJKLMNOPQ    , 0.94CDEFGHIJKLMNOPQ, 0.93FGHIJKLMNOPQ   , 0.33BCDEFGHIJKLMNOP, 0.84ABCDEFGHIJKLMNO, 0.89HIJKLMNOPQ     , 0.53HIJKLMNOPQ     , 0.92HIJKLMNOPQ     , 0.36*/</span></code></pre><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"12-"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d+-?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String s <span class="token operator">=</span> <span class="token string">"test a hello world test"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//me a hello world me</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"me"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><ul><li><code>.</code>匹配任意字符</li><li><code>[abc]</code>三个字符之间</li><li><code>[^abc]</code>除了abc</li><li><code>\s</code>空白符</li><li><code>\d</code>数字</li><li><code>\w</code>单词字符<code>[a-zA-Z0-9]</code></li><li><code>XY</code>X跟在Y后面</li><li><code>X|Y</code>X或Y</li><li><code>^$</code>开始和结束</li><li><code>?</code>一个或零个</li><li><code>*</code>零个或多个</li><li><code>+</code>一个或多个</li><li><code>X{n}</code>,恰好n次</li></ul><h1 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h1><pre class=" language-java"><code class="language-java">Pattern compile <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Matcher matcher <span class="token operator">=</span> compile<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"12,3A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//matches()判断整个输入字符串是否匹配</span><span class="token comment" spellcheck="true">//lookingAt()判断字符串的开始部分是否匹配</span><span class="token comment" spellcheck="true">//find()可以查找多个匹配,也能接收一个整数作为字符串搜索的起点位置</span><span class="token keyword">if</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>matcher<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3,5</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Pattern.CASE_INSENSITIVE忽略大小写</span><span class="token comment" spellcheck="true">//Pattern.MULTILINE 正则表达式中出现了^或者$, 默认只会匹配第一行. 设置了Pattern.MULTILINE模式,会匹配所有行。</span>Pattern compile <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^java"</span><span class="token punctuation">,</span> Pattern<span class="token punctuation">.</span>CASE_INSENSITIVE <span class="token operator">|</span> Pattern<span class="token punctuation">.</span>MULTILINE<span class="token punctuation">)</span><span class="token punctuation">;</span>Matcher matcher <span class="token operator">=</span> compile<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"java has regex \nJava has regex \nJAVA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    java    Java    JAVA     */</span><span class="token punctuation">}</span></code></pre><h1 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h1><ul><li><code>Scanner</code>构造器接收任何类型的输入对象</li><li>普通的<code>next()</code>方法返回下一个<code>String</code></li><li>所有<code>next()</code>方法只有找到一个完整的分词后才会返回</li><li><code>Scanner</code>假设在输入结束时抛出<code>IOException</code></li><li>默认以空白字符对输入进行分词</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十二章--通过异常处理错误</title>
      <link href="posts/bf34118e.html"/>
      <url>posts/bf34118e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>&lt;&lt;Java编程思想&gt;&gt;读书笔记</p></blockquote><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li>异常通过编译器强制执行的</li><li>它往往能够降低错误处理代码的复杂度</li></ul><h2 id="基本异常"><a href="#基本异常" class="headerlink" title="基本异常"></a>基本异常</h2><p>使用<code>new</code>在堆上创建异常对象,然后当前的执行路径被终止,并且从当前环境中弹出对异常对象的引用,此时异常处理机制接管程序,将程序从错误状态中恢复,使程序继续运行下去</p><p>异常运行我们强制程序停止运行,并告诉我们出现了什么问题,或者强制程序处理问题,并返回到稳定状态</p><p><code>Throwable</code>对象是异常类型的跟类</p><h1 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h1><ul><li>如果在方法内部抛出异常,它将在抛出异常的过程中结束</li><li>异常可以写入标准错误流<code>System.err</code>,他不会被重定向</li><li><code>e.printStackTrace()</code>打印从方法调用处直到异常抛出处的方法调用序列,默认是被输出到标准错误流</li><li><code>printStackTrace</code>返回一个由栈轨迹中的元素构成的数组,栈顶是调用序列中的最后一个方法调用</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable    <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Throwable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    java.lang.Throwable    at com.tongji.MainTest.test(MainTest.java:22)    at com.tongji.MainTest.main(MainTest.java:12)     */</span></code></pre><h1 id="异常声明"><a href="#异常声明" class="headerlink" title="异常声明"></a>异常声明</h1><ul><li>如果方法里的代码产生了异常却没有进行处理,编译器会发现这个问题并提醒你:要么处理,要么在异常说明中表明该方法将产生异常</li><li>可以声明方法将抛出异常,而实际上不抛出</li><li>可以定义接口时预先声明异常,这样接口实现就可以抛出这些预先声明的异常</li><li>在编译器被强制检查的异常称为被检查的异常</li></ul><h1 id="Java标准异常"><a href="#Java标准异常" class="headerlink" title="Java标准异常"></a>Java标准异常</h1><p><code>Throwable</code>用来表示任何可以作为异常抛出的类,<code>Error</code>用来表示编译时和系统错误,<code>Exception</code>是可以被抛出的基本类型</p><h2 id="RuntimeException"><a href="#RuntimeException" class="headerlink" title="RuntimeException"></a>RuntimeException</h2><ul><li>是Java标准运行时检测的一部分,会自动被虚拟机抛出,不必要声明方法将抛出<code>RuntimeException</code>类型的异常</li><li>它称为不受检查异常,属于错误,将被自动捕获</li><li>该异常通常会穿越所有执行路径直达<code>main</code>方法,并在程序退出前调用异常的<code>printStackTrace</code>方法</li><li><code>RuntimeException</code>代表的其实是编程错误,要么是无法预料的错误(如传入<code>null</code>引用),程序员应该在代码中检查的错误(数组越界)</li></ul><h1 id="异常的限制"><a href="#异常的限制" class="headerlink" title="异常的限制"></a>异常的限制</h1><ul><li>当覆盖方法时,子类只能抛出在基类方法的异常说明中列出的那些异常,保证了对象的可替换性</li><li>异常限制对构造器不起作用,然而因为基类构造器必须被调用,所有派生类构造器的异常说明必须包含基类构造器的异常说明</li><li>派生类可以不抛出任何异常,即使它是基类定义的异常</li><li>不能基于异常说明来重载方法</li><li>一个出现在基类方法的异常说明中的异常,不一定会出现在派生类的异常说明里,即某个特定方法的异常说明的接口变小了,和继承相反</li></ul><h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><ul><li>构造器会把对象置为安全的初始状态,但是构造器内部抛出异常,就难受了</li><li>对于在构造阶段可能会抛出的异常,并且要求清理的类,最安全的使用方式是嵌套<code>try</code>语句</li><li>基本规则是,在创建需要清理的对象后,立即进入一个<code>try-finally</code>语句块</li></ul><h1 id="异常匹配"><a href="#异常匹配" class="headerlink" title="异常匹配"></a>异常匹配</h1><ul><li>异常在找到匹配的处理程序后,就认为异常得到处理,不再继续查找</li><li>只有在你知道如何处理的情况下才捕获异常</li><li><code>main</code>方法也可以有异常说明,如果使用<code>Exception</code>,就传递给了控制台,不需要写<code>try-catch</code>语句了</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 异常 </tag>
            
            <tag> Exception </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十一章--持有对象</title>
      <link href="posts/49e32910.html"/>
      <url>posts/49e32910.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>&lt;&lt;Java编程思想&gt;&gt;读书笔记</p></blockquote><h1 id="Collections与Arrays"><a href="#Collections与Arrays" class="headerlink" title="Collections与Arrays"></a>Collections与Arrays</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//集合构造器可以接收另一个集合来将自己初始化</span><span class="token comment" spellcheck="true">//Arrays.asList()产生的是第一个元素的类型,可能不匹配</span><span class="token comment" spellcheck="true">//使用Collections.addAll就不会产生这样的问题</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> integers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="各个集合对比"><a href="#各个集合对比" class="headerlink" title="各个集合对比"></a>各个集合对比</h1><ul><li><code>ArrayList</code>,<code>LinkedList</code>按照被插入的顺序保存元素,使用<code>LinkedList</code>来实现<code>queue</code>,<code>stack</code></li><li><code>HashSet</code>快,<code>TreeSet</code>按比较结果升序排列,<code>LinkedHashSet</code>按照被添加顺序保存对象</li><li><code>HashMap</code>快,<code>TreeMap</code>按照比较结果的升序保存键,<code>LinkedHashMap</code>按照插入顺序保存键,还保留了<code>HashMap</code>的查询速度</li></ul><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><ul><li>用迭代器来表示容器之间的共性,实现<code>Collection</code>就意味着需要提供<code>iterator()</code>方法,因为<code>Collection</code>继承了<code>Iterable</code>接口</li><li>创建了任何实现<code>Iterable</code>接口的类,都可以用于<code>foreach</code>语句中</li><li>数组也能使用<code>foreach</code>,但是不存在任何从数组到<code>Iterable</code>的自动转换</li></ul><h1 id="集合总览"><a href="#集合总览" class="headerlink" title="集合总览"></a>集合总览</h1><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/2243690-9cd9c896e0d512ed.gif" alt="2243690-9cd9c896e0d512ed"></p>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> Map </tag>
            
            <tag> Collection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十章--内部类</title>
      <link href="posts/eaca0a57.html"/>
      <url>posts/eaca0a57.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>&lt;&lt;Java编程思想&gt;&gt;读书笔记</p></blockquote><h1 id="创建内部类"><a href="#创建内部类" class="headerlink" title="创建内部类"></a>创建内部类</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parcel</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Contents</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> Parcel <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> Parcel<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Contents <span class="token function">contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Parcel parcel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parcel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Parcel<span class="token punctuation">.</span>Contents contents <span class="token operator">=</span> parcel<span class="token punctuation">.</span><span class="token function">contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//引用外部类对象</span>        Parcel outer <span class="token operator">=</span> contents<span class="token punctuation">.</span><span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用外部类的对象来创建内部类对象</span>        Parcel<span class="token punctuation">.</span>Contents contents1 <span class="token operator">=</span> parcel<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="链接到外部类"><a href="#链接到外部类" class="headerlink" title="链接到外部类"></a>链接到外部类</h1><ol><li>内部类能访问其外部对象的所有成员,而不需要任何特殊条件</li><li>它秘密捕获一个指向外部类对象的引用</li><li>在拥有外部类对象之前是不可能创建内部类对象的,因为内部类有指向外部类对象的引用</li><li>创建静态内部类则不需要先创建外部类对象</li></ol><h1 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h1><h2 id="使用带参数构造器"><a href="#使用带参数构造器" class="headerlink" title="使用带参数构造器"></a>使用带参数构造器</h2><p><code>i</code>被传递给匿名类的基类的构造器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wrapping</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Wrapping</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Wrapping wrapping <span class="token operator">=</span> <span class="token function">wrapping</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>wrapping<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//94</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Wrapping <span class="token function">wrapping</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Wrapping</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">47</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>在JDK8中如果我们在匿名内部类中需要访问局部变量，那么这个局部变量不需要用final修饰符修饰。</strong>看似是一种编译机制的改变，实际上就是一个语法糖（底层还是帮你加了final）。但通过反编译没有看到底层为我们加上final，但我们无法改变这个局部变量的引用值，如果改变就会编译报错。</p><h1 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h1><ol><li>如果不需要内部类对象与其外围类对象之间有联系,那么可以将内部类声明为<code>static</code>,称为嵌套类</li><li>要创建嵌套类的对象,不需要其外围类的对象</li><li>不能从嵌套类的对象中访问其非静态的外围类对象</li><li>普通类不能有<code>static</code>数据和字段</li></ol><h1 id="为什么需要内部类"><a href="#为什么需要内部类" class="headerlink" title="为什么需要内部类"></a>为什么需要内部类</h1><ul><li>每个内部类都能独立地继承自一个接口的实现,所以无论外围类是否已经继承了某个接口的实现,对于内部类都没有影响</li><li>内部类可以有多个实例,每个实例都有自己的状态信息,并且与其外部类对象的信息相互独立</li><li>在单个外围类中,可以让多个内部类以不同的方法实现同一个接口</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 内部类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第八章--多态</title>
      <link href="posts/1ae46459.html"/>
      <url>posts/1ae46459.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>&lt;&lt;Java编程思想&gt;&gt;读书笔记</p></blockquote><h2 id="后期绑定"><a href="#后期绑定" class="headerlink" title="后期绑定"></a>后期绑定</h2><p>在运行时根据对象的类型进行绑定,也叫做动态绑定,运行时绑定</p><p>编译器一直不知道对象的类型,但是方法调用机制能找到正确的方法体</p><p>除了<code>static</code>和<code>final</code>方法,其他都是后期绑定的方法</p><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>基类的构造器总是在导出类的构造过程中被调用,导出类只能访问它自己的成员,不能访问基类的成员(因为通常是<code>private</code>),只有基类构造器才比较恰当的对自己元素进行初始化,因此必须令所有构造器得到调用</p><p>如果没有明确指定调用某个基类构造器,他就会默默调用默认构造器</p><h2 id="构造器内部的多态方法行为"><a href="#构造器内部的多态方法行为" class="headerlink" title="构造器内部的多态方法行为"></a>构造器内部的多态方法行为</h2><ul><li>在任何构造器内部,整个对象可能只是部分形成的,只知道基类对象已经初始化</li><li>如果调用一个动态绑定方法,则可能调用到了导出类的方法,该方法操纵的成员可能未初始化</li><li>所以在构造器内唯一能够安全调用的那些方法是基类中的<code>private</code>和<code>final</code>方法,因为他们不能被覆盖</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Graph</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----before----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----after----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Graph.draw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">RoundGlyph</span> <span class="token keyword">extends</span> <span class="token class-name">Graph</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RoundGlyph</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RoundGlyph.draw:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RoundGlyph.draw:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">RoundGlyph</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*----before----RoundGlyph.draw:0----after----RoundGlyph.draw:5 */</span></code></pre><ul><li>在最开始,分配给对象的存储空间初始化未二进制的零</li><li>调用基类构造器,此时会调用覆盖后的<code>draw()</code>方法,由于第一步,此时<code>i=0</code></li><li>初始化成员变量调用导出类的构造器主体</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 继承 </tag>
            
            <tag> 多态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第七章--复用类</title>
      <link href="posts/2edde9de.html"/>
      <url>posts/2edde9de.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>&lt;&lt;Java编程思想&gt;&gt;读书笔记</p></blockquote><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ul><li>子类会自动得到基类中所有的域和方法</li><li>一般为了继承,会将所有的数据成员指定为<code>private</code>,所有方法指定为<code>public</code></li><li>当创建了一个导出类的对象时,该对象包含了一个基类的子对象</li><li><code>Java</code>会自动在导出类的构造器中插入对基类构造器的调用</li><li>如果没有默认的基类构造器,或者想要调用一个带参数的基类构造器,则必须用关键词<code>super</code></li></ul><h2 id="名称屏蔽"><a href="#名称屏蔽" class="headerlink" title="名称屏蔽"></a>名称屏蔽</h2><ul><li>子类可以进行重载或重写,而且重载不会屏蔽父类的重载方法</li><li><code>@Override</code>注解可以防止你在不想重载时而意外地进行了重载</li></ul><h2 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h2><p>就类用户而言,他是<code>private</code>的,但是对于任何继承于此类的导出类或者同一个包的类,他是可访问的(也提供包访问权限)</p><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p>导出类是基类的一个超集,他可能比基类含有更多的方法,但他必须至少具备基类中所含有的方法</p><p>向上转型唯一可能发生的事情就是丢失方法</p><p>如果必须向上转型,则继承是必须的</p><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><p>当编译器需要一个<code>String</code>而只有一个对象时,该方法就会被调用</p><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><ul><li><p>常量代表了永不改变的编译时常量或运行时被初始化后不希望他改变的值,这类常量必须是基本数据类型,并且以关键字<code>final</code>标识,定义时必须赋值</p></li><li><p>一个既是<code>static</code>,又是<code>final</code>的域只占据一段不能改变的存储空间</p></li><li><p>对应对象引用,<code>final</code>使引用恒定不变,一旦引用被初始化指向一个对象,就无法再把它改为指向另一个对象.但是对象自身是可以修改的</p></li></ul><h2 id="空白final"><a href="#空白final" class="headerlink" title="空白final"></a>空白final</h2><p>指被声明为<code>final</code>但又未给定初值的域</p><p>必须在域的定义处或者每个构造器中对<code>final</code>赋值</p><h2 id="final参数"><a href="#final参数" class="headerlink" title="final参数"></a>final参数</h2><p>类似<code>void test(final Date g)</code>,无法在方法中更改参数引用所指向的对象</p><h2 id="final方法"><a href="#final方法" class="headerlink" title="final方法"></a>final方法</h2><p>把方法锁定,防止任何继承类修改他的含义</p><p>类中所有<code>private</code>方法都是<code>final</code>的</p><h2 id="final类"><a href="#final类" class="headerlink" title="final类"></a>final类</h2><p>禁止继承该类,所有方法隐式指定为<code>final</code></p><h1 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h1><p>类的代码在初次使用时才加载</p><p>通常指加载发生于创建类的第一个对象时,或者访问<code>static</code>域或方法时</p><ul><li><p>访问<code>Beetle.main()</code></p></li><li><p>开始找到<code>Beetle</code>类的编译代码,发现他有基类,于是他继续加载<code>Beetle</code>的基类</p></li><li><p>根基类的<code>static</code>初始化</p></li><li><p>所有类加载完毕后,即可以创建对象了</p></li><li><p>创建一个对象时,所有基本对象设为默认值,对象引用设为<code>null</code></p></li><li><p>基类构造器被调用</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 继承 </tag>
            
            <tag> 类加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六章--访问权限控制</title>
      <link href="posts/73458eba.html"/>
      <url>posts/73458eba.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>&lt;&lt;Java编程思想&gt;&gt;读书笔记</p></blockquote><p>如何把变动的事物与保持不变的事物区分开</p><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><h2 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h2><ul><li>当编写一个<code>Java</code>源代码文件时,此文件称为编译单元,他们必须有一个后缀名<code>.java</code></li><li>编译单元内只能有一个<code>public</code>类,而且必须与文件名一致</li><li>如果有其他类,则包外是看不见的, 他们只是为主<code>public</code>类提供支持</li><li>当编译一个<code>.java</code>文件时,文件中每个类都会有一个输出文件</li><li><code>Java</code>可运行程序是一组可以打包并压缩为一个<code>java</code>文档文件的<code>.class</code>文件(<strong>JAR</strong>)</li></ul><h2 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h2><p>把<code>package</code>名称分解为你机器上的一个目录,当<code>Java</code>程序运行并需要加载<code>.class</code>文件的时候,他就可以确定<code>.class</code>文件在目录所处的位置</p><h3 id="Java解释器的运行过程"><a href="#Java解释器的运行过程" class="headerlink" title="Java解释器的运行过程"></a>Java解释器的运行过程</h3><ul><li>找出环境变量<code>CLASSPATH</code>,它包括了多个可供选择的查询路径</li><li>将包的名称由.换成/ 例如:<code>com.tongji.test</code>换成<code>com/tongji/test</code></li><li>把<code>CLASSPATH</code>的路径当作根目录寻找相关的<code>.class</code>文件</li></ul><h3 id="忠告"><a href="#忠告" class="headerlink" title="忠告"></a>忠告</h3><ul><li>无论何时创建包,都已经在给定包名称时隐含的指定了目录结构</li><li>这个包必须位于其名称所指定的目录之中,而该命令必须是以<code>CLASSPATH</code>开始的目录中可以查询到的</li><li>如果<code>CLASSPATH</code>中缺乏<code>.</code>作为路径之一,则当前目录就不是查找行为的起点之一</li><li>创建类可以把<code>public</code>成员置于开头,后面跟着<code>protected</code>,包访问权限,<code>private</code>成员</li></ul><h1 id="访问权限修饰符"><a href="#访问权限修饰符" class="headerlink" title="访问权限修饰符"></a>访问权限修饰符</h1><p>默认是包访问权限,意味着当前的包中所有其他类对那个成员都有访问权限,但对应这个包之外的所有类,这个成员是<code>private</code>的</p><p><code>protected</code>也提供包访问权限</p><h2 id="其他包访问"><a href="#其他包访问" class="headerlink" title="其他包访问"></a>其他包访问</h2><ol><li>使要访问的成员变为<code>public</code></li><li>置于同一个包中</li><li>继承可以访问<code>public</code>和<code>protected</code>的,但只有同一个包内,才能访问包访问权限的</li><li><code>get/set</code>方法</li></ol><h2 id="类访问权限"><a href="#类访问权限" class="headerlink" title="类访问权限"></a>类访问权限</h2><p>类只能是包访问权限或<code>public</code>的</p>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 修饰符 </tag>
            
            <tag> 访问权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五章--初始化与清理</title>
      <link href="posts/4f7140bc.html"/>
      <url>posts/4f7140bc.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>&lt;&lt;Java编程思想&gt;&gt;读书笔记</p></blockquote><h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><ul><li>不能以返回值重载方法是因为有时不关心方法的返回值,只是要他的执行效果.就会这样调用方法:<code>f()</code>.</li><li>如果没有写构造器,编译器会自动创建默认构造器;如果已经定义了构造器,则不会默认自动创建</li><li>执行类似<code>x.f(1)</code>方法时,编译器把所操作对象的引用作为第一个参数传递给了<code>f()</code>,实际上就形如<code>X.f(x,1)</code>.</li><li>所以在方法内部,如果想获得对调用方法的那个对象的引用,则用<code>this</code></li><li>在方法内部调用同一个类的另一个方法,不必用<code>this</code>,因为当前方法的<code>this</code>引用会自动应用于同一类中的所有方法</li><li>构造器中可以用<code>this</code>来调用另一个构造器,但是只能置于最起始处,而且只能调用一次</li></ul><h1 id="成员初始化"><a href="#成员初始化" class="headerlink" title="成员初始化"></a>成员初始化</h1><ul><li>方法中的局部变量,<code>Java</code>以编译错误的形式来保证所有变量在使用前都能得到恰当的初始化</li><li>在类中定义一个对象引用,若没有初始化,则会获得特殊值–<code>null</code></li><li>无法阻止自动初始化的进行,他将会在构造器被调用前发生</li><li>变量定义会在任何方法(包括构造器)被调用之前得到初始化</li><li>静态初始化只在必要时刻才会进行,且不会再次被初始化</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">MainTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    i <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//i首先会置为0,然后变成7</span></code></pre><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><ul><li>当静态方法/静态域首次被访问时，<code>java</code>解释器必须查找类路径,单位<code>Dog.class</code></li><li>载入<code>Dog.class</code>,执行且只执行静态初始化操作一次</li><li>当使用<code>new Dog()</code>创建对象时,在堆上为该对象分配足够的存储空间</li><li>存储空间清零,就自动的把所有基本类型数据设为默认值,引用设置为<code>null</code></li><li>执行字段定义处的初始化动作</li><li>执行构造器</li></ul><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Spiciness<span class="token punctuation">{</span>    NOT<span class="token punctuation">,</span>MILD<span class="token punctuation">,</span>MEDIUM<span class="token punctuation">,</span>HOT<span class="token punctuation">,</span>FLAMING<span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">Spiciness hot <span class="token operator">=</span> Spiciness<span class="token punctuation">.</span>HOT<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HOT</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Spiciness s <span class="token operator">:</span> Spiciness<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">" ordinal "</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//NOT ordinal 0</span><span class="token comment" spellcheck="true">//MILD ordinal 1</span><span class="token comment" spellcheck="true">//MEDIUM ordinal 2</span><span class="token comment" spellcheck="true">//HOT ordinal 3</span><span class="token comment" spellcheck="true">//FLAMING ordinal 4</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 构造函数 </tag>
            
            <tag> 初始化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章--一切皆是对象</title>
      <link href="posts/256ce7dc.html"/>
      <url>posts/256ce7dc.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>&lt;&lt;Java编程思想&gt;&gt;读书笔记</p></blockquote><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>创建一个并非是引用的自动变量,直接存储值,并放在堆栈中</p><p>所有数值类型都有正负号</p><blockquote><p>int 4字节 (-2的31次方)~(2的31次方-1) 超过20亿</p><p>short 2字节</p><p>long 8字节</p><p>byte 1字节 [-128,127]</p><p>float 四字节</p><p>double 8字节</p><p>char 2字节     因为Java采用16位的Unicode字符集 [0,65535]</p><p>boolean 只有两个值,但是大小没精确定义，一般一字节</p></blockquote><h3 id="高精度数字"><a href="#高精度数字" class="headerlink" title="高精度数字"></a>高精度数字</h3><ul><li><code>BigInteger</code>支持任意精度的整数</li><li><code>BigDecimal</code>支持任意精度的定点数</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>当创建一个数组对象时,实际上就是创建了一个引用数组,并且每个引用都会自动被初始化为一个特定值,该值拥有自己的关键字<code>null</code>,说明没有指向某个对象。</p><p>在使用任何引用前，必须为其指定一个对象，如果试图使用一个还是<code>null</code>的引用，在运行时将会报错。</p><p>创建用来存放基本数据类型的数组时，会将这种数组所占内存全部置为零</p><p>Java确保数组会被初始化，而且不能在它的范围之外被访问（null与零都代表是初始化后的，不会像C++一样得到一个很奇怪的东西）</p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><p>若类的某个成员是基本数据类型，即使没有进行初始化，Java也会确保他获得一个默认值（对于<code>boolean</code>是<code>false</code>,其他是0）。但是不适用与局部变量，他们可能会是任意值，而不会被自动初始化为0。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法名和参数列表唯一标识出某个方法</p><p>方法传递参数实际上是传递参数的引用</p><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p><code>java.lang</code>包会自动导入到每一个<code>java</code>文件中</p><p>其他要导包,即加入一个类库,例如:<code>import java.util.*</code></p><h2 id="javadoc"><a href="#javadoc" class="headerlink" title="javadoc"></a>javadoc</h2><ul><li>@see 引用其他类</li><li>@author 作者</li><li>@param paramname 描述信息</li><li>@return 描述信息</li><li>@throws Exception 异常说明</li><li>@deprecated 声明该方法不建议使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 类 </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章--操作符</title>
      <link href="posts/5631a281.html"/>
      <url>posts/5631a281.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>&lt;&lt;Java编程思想&gt;&gt;读书笔记</p></blockquote><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ul><li>操作符作用于操作数,生成一个新值.有些操作符可能会改变操作数自身的值,称为副作用.</li><li><code>String</code>后面跟着<code>+</code>与非<code>String</code>对象,则会把后面对象转为<code>String</code></li><li>基本数据类型存储了实际的数值,是直接把一个地方的内容复制到了另一个地方</li><li>在为对象赋值时,实际上是将引用从一个地方复制到另一个地方,他们都会指向原先引用所指向的对象,指向相同的对象</li><li>方法中对象传递的是引用,因此可以改变<code>f()</code>范围之外的对象</li><li><code>==</code>与<code>!=</code>比较的是对象的引用,要比较内容,则应该使用<code>equals()</code>方法,但是基本类型使用<code>==</code>即可</li><li><code>equals()</code>方法底层默认用<code>==</code>比较,自定义的类如果要比较值,则要自己实现<code>equals()</code>方法</li></ul><h1 id="直接常量"><a href="#直接常量" class="headerlink" title="直接常量"></a>直接常量</h1><p>后缀标识标志了他们的类型</p><ul><li>大写的<code>L</code>代表<code>long</code></li><li>大写的<code>F</code>代表<code>float</code></li></ul><p>前缀标识</p><ul><li><code>0X</code>标识十六进制</li><li><code>0b</code>标识二进制</li></ul><p>如果编译器能正确识别类型,则不必在数值后附加字符,例如<code>long n=200</code></p><p>而对于指数标记法,例如<code>1e-43</code>,通常作为双精度数处理.如果没有<code>f</code>,则会有错误提示.<code>float x = 1e-43f;</code></p><h1 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h1><ul><li>左移位操作符:<code>&lt;&lt;</code>,右边补0</li><li>有符号右移位操作符:<code>&gt;&gt;</code>,使用符号扩展,若符号为正,则在高位插入0,否则插入1</li><li>无符号右移位操作符:<code>&gt;&gt;&gt;</code>,无论正负,都在高位插入0</li></ul><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><ul><li>窄化转换:将能容纳更多信息的数据类型转换成无法容纳那么多信息的类型.面临信息丢失的危险.编译器此时就会强制要求我们进行类型转换</li><li>扩展转换:不必显式进行类型转换,因为新类型肯定能容纳原来类型的信息</li><li>如果对基本数据类型执行算术运算或移位运算,<code>char</code>,<code>byte</code>,<code>short</code>在运算前自动转换成<code>int</code>,最终生成的类型就是<code>int</code>类型</li><li>表达式中出现的最大数据类型决定了表达式最终结果的数据类型</li><li>不能对布尔值进行其他任何运算</li></ul><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><ul><li>带标签的<code>continue</code>会到达标签的位置,并重新进入紧接在那个标签后面的循环</li><li>带标签的<code>break</code>会中断并跳出标签所指的循环</li><li>在<code>Java</code>中使用标签的唯一理由是因为有嵌套循环存在,而且想从多层嵌套中<code>break</code>或<code>continue</code></li></ul><pre class=" language-java"><code class="language-java">TEST<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span><span class="token string">"ABC"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">break</span> TEST<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//AAAAAAAAAAA</span></code></pre><pre class=" language-java"><code class="language-java">TEST<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span><span class="token string">"ABC"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">continue</span> TEST<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//AAAAAAAAAAABBBBBBBBBBBCCCCCCCCCCC</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作符 </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式--模板方法模式</title>
      <link href="posts/3c67b570.html"/>
      <url>posts/3c67b570.html</url>
      
        <content type="html"><![CDATA[<h1 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h1><h2 id="模板方法模式定义"><a href="#模板方法模式定义" class="headerlink" title="模板方法模式定义"></a>模板方法模式定义</h2><p>模板方法模式在一个方法中定义一个算法的骨架,而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><ul><li>模板就是一个方法，将算法定义成一组步骤，其中任何步骤都可以是抽象的，由子类负责实现。这可以确保算法的结构保持不变，同时由子类提供部分实现。</li><li>钩子是一种被声明在抽象类中的方法，只有空或者默认的实现，他可以让子类有能力对算法的不同点进行挂钩。如果算法的某部分是可选的，就用钩子</li><li>与策略模式的区别是策略模式组合的类中实现了整个算法，而模板方法模式可能只实现了算法中的部分步骤。</li><li>为了防止子类改变模板方法中的算法，可以将模板方法声明为final</li></ul><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ul><li>好莱坞原则：别调用我们，我们会调用你。即低层组件将自己挂钩到系统上，但是高层组件会决定什么时候和怎样使用这些低层组件。例如模板方法中<code>CaffeineBeverageWithHook</code>为高层组件，只有在需要子类实现某个方法时，才调用子类。</li></ul><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ul><li>Java排序，需要实现<code>Comparable接口</code>，实现<code>compareTo()</code>方法进行两个元素大小的比较。</li><li>Swing窗口中，通过继承<code>JFrame</code>，再覆盖父类中不做事的<code>paint()</code>方法来在窗口绘制。</li><li>Applet是能在网页上运行的小程序，它提供了很多个钩子方法。通过继承<code>Applet</code>，再覆盖他的几个接口可以方便进行开发,例如：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplet</span> <span class="token keyword">extends</span> <span class="token class-name">Applet</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//init钩子用来进行applet初始化动作,他会在applet一开始被调用一次</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        message <span class="token operator">=</span> <span class="token string">"init"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通知上层组件重绘该applet</span>        <span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//stop钩子在用户跳转到别的网页时调用</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        message <span class="token operator">=</span> <span class="token string">"stop"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通知上层组件重绘该applet</span>        <span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span>Graphics graphics<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        graphics<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><p> <img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/1603594324(1).jpg" alt="1603594324(https://tongji4m3.oss-cn-beijing.aliyuncs.com/1603594324(1).jpg)"></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="CaffeineBeverageWithHook"><a href="#CaffeineBeverageWithHook" class="headerlink" title="CaffeineBeverageWithHook"></a>CaffeineBeverageWithHook</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CaffeineBeverageWithHook</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">prepareRecipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//钩子方法改变的行为</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">customerWantsCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"boilWater"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pourInCup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//一个钩子方法,子类可以通过他改变模板的行为</span>    <span class="token keyword">boolean</span> <span class="token function">customerWantsCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="CoffeeWithHook"><a href="#CoffeeWithHook" class="headerlink" title="CoffeeWithHook"></a>CoffeeWithHook</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> TemplatePattern<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeWithHook</span> <span class="token keyword">extends</span> <span class="token class-name">CaffeineBeverageWithHook</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CoffeeWithHook brew"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CoffeeWithHook addCondiments"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">boolean</span> <span class="token function">customerWantsCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里可以用一些逻辑来控制该钩子,此处省略</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="MainTest"><a href="#MainTest" class="headerlink" title="MainTest"></a>MainTest</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> TemplatePattern<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        CoffeeWithHook coffeeWithHook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoffeeWithHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coffeeWithHook<span class="token punctuation">.</span><span class="token function">prepareRecipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//boilWater</span>        <span class="token comment" spellcheck="true">//CoffeeWithHook brew</span>        <span class="token comment" spellcheck="true">//pourInCup</span>        <span class="token comment" spellcheck="true">//CoffeeWithHook addCondiments</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式--外观模式</title>
      <link href="posts/6bd9c708.html"/>
      <url>posts/6bd9c708.html</url>
      
        <content type="html"><![CDATA[<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>外观模式提供了一个统一的接口,用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>最少知识原则：只和你的密友谈话。不要让太多的类耦合在一起</p><p>就任何对象而言，在该对象的方法内，我们只应该调用属于以下范围的方法：</p><ul><li>该对象本身</li><li>被当作方法参数而传递进来的对象</li><li>此方法所创建或实例化的任何对象</li><li>被实例变量所引用的任何对象</li></ul><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><ul><li>通过实现一个提供更合理的接口的外观类,你可以将一个复杂的子系统变得容易使用</li><li>外观模式没有封装子系统的类,只是提供了简化的接口</li><li>外观模式将客户从组件的子系统中解耦</li><li>外观的意图是提供子系统的一个简化接口</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="component"><a href="#component" class="headerlink" title="component"></a>component</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CdPlayer</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CdPlayer on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CdPlayer off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DvdPlayer</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DvdPlayer on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DvdPlayer off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="HomeTheaterFacade"><a href="#HomeTheaterFacade" class="headerlink" title="HomeTheaterFacade"></a>HomeTheaterFacade</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeTheaterFacade</span><span class="token punctuation">{</span>    CdPlayer cdPlayer<span class="token punctuation">;</span>    DvdPlayer dvdPlayer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HomeTheaterFacade</span><span class="token punctuation">(</span>CdPlayer cdPlayer<span class="token punctuation">,</span> DvdPlayer dvdPlayer<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cdPlayer <span class="token operator">=</span> cdPlayer<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dvdPlayer <span class="token operator">=</span> dvdPlayer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">watchMovie</span><span class="token punctuation">(</span>String movie<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Ready to play "</span><span class="token operator">+</span>movie<span class="token punctuation">)</span><span class="token punctuation">;</span>        cdPlayer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dvdPlayer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">closeMovie</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Ready to close "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cdPlayer<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dvdPlayer<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="MainTest"><a href="#MainTest" class="headerlink" title="MainTest"></a>MainTest</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一般来说,外观是直接委派,不需要用户自己创建</span>        HomeTheaterFacade theaterFacade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HomeTheaterFacade</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CdPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DvdPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        theaterFacade<span class="token punctuation">.</span><span class="token function">watchMovie</span><span class="token punctuation">(</span><span class="token string">"I am"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        theaterFacade<span class="token punctuation">.</span><span class="token function">closeMovie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式--适配器模式</title>
      <link href="posts/f70eccfd.html"/>
      <url>posts/f70eccfd.html</url>
      
        <content type="html"><![CDATA[<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>适配器模式将一个类的接口，转换成客户期望的另一个接口。适配器让原本不兼容的类可以合作无间。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><ul><li>作用是将一个接口转换成另一个接口,以符合用户的期望。</li></ul><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/image-20201005103843452.png" alt="image-20201005103843452"></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="animal"><a href="#animal" class="headerlink" title="animal"></a>animal</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Duck</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MallardDuck</span> <span class="token keyword">implements</span> <span class="token class-name">Duck</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Quack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Turkey</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">gobble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WildTurkey</span> <span class="token keyword">implements</span> <span class="token class-name">Turkey</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gobble</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Gobble"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fly short"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将火鸡适配成鸭子</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TurkeyAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Duck</span><span class="token punctuation">{</span>    Turkey turkey<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TurkeyAdapter</span><span class="token punctuation">(</span>Turkey turkey<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>turkey <span class="token operator">=</span> turkey<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        turkey<span class="token punctuation">.</span><span class="token function">gobble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            turkey<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DuckTestDrive</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        WildTurkey wildTurkey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WildTurkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TurkeyAdapter turkeyAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TurkeyAdapter</span><span class="token punctuation">(</span>wildTurkey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testDuck</span><span class="token punctuation">(</span>turkeyAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testDuck</span><span class="token punctuation">(</span>Duck duck<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        duck<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        duck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="迭代器适配器"><a href="#迭代器适配器" class="headerlink" title="迭代器适配器"></a>迭代器适配器</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumeratorIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token punctuation">{</span>    Enumeration enumeration<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">EnumeratorIterator</span><span class="token punctuation">(</span>Enumeration enumeration<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>enumeration <span class="token operator">=</span> enumeration<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> enumeration<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> enumeration<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式--命令模式</title>
      <link href="posts/e41403a7.html"/>
      <url>posts/e41403a7.html</url>
      
        <content type="html"><![CDATA[<h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>命令模式将请求封装成对象,以便使用不同的请求,队列或者日志来参数化其他对象。命令模式也支持可撤销的操作</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><ul><li>可将动作的请求者和动作的执行者对象中解耦</li><li>一个命令对象通过在特定接收者上绑定一组对象来封装一个请求，它将动作和接收者包进对象中。</li><li>使用栈存储操作过程的每一个命令，即可不断地实现撤销功能</li><li>可支持宏命令，即将一系列命令封装到一个命令对象中执行</li></ul><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/image-20201004105520644.png" alt="命令模式类图"></p><h1 id="简单遥控器实现"><a href="#简单遥控器实现" class="headerlink" title="简单遥控器实现"></a>简单遥控器实现</h1><h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOnCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    Light light<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LightOnCommand</span><span class="token punctuation">(</span>Light light<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Light"><a href="#Light" class="headerlink" title="Light"></a>Light</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Light</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"light on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"light off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="SimpleRemoteControl"><a href="#SimpleRemoteControl" class="headerlink" title="SimpleRemoteControl"></a>SimpleRemoteControl</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleRemoteControl</span><span class="token punctuation">{</span>    Command slot<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SimpleRemoteControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommand</span><span class="token punctuation">(</span>Command command<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        slot <span class="token operator">=</span> command<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buttonWasPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        slot<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="RemoteControlTest"><a href="#RemoteControlTest" class="headerlink" title="RemoteControlTest"></a>RemoteControlTest</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteControlTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        SimpleRemoteControl remote <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleRemoteControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Light light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LightOnCommand lightOnCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOnCommand</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>        remote<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span>lightOnCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        remote<span class="token punctuation">.</span><span class="token function">buttonWasPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="真正的遥控器"><a href="#真正的遥控器" class="headerlink" title="真正的遥控器"></a>真正的遥控器</h1><h2 id="Light-1"><a href="#Light-1" class="headerlink" title="Light"></a>Light</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Light</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Light</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"light on "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"light off "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOnCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    Light light<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LightOnCommand</span><span class="token punctuation">(</span>Light light<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOffCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    Light light<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LightOffCommand</span><span class="token punctuation">(</span>Light light<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No Command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No Command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="RemoteControl"><a href="#RemoteControl" class="headerlink" title="RemoteControl"></a>RemoteControl</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteControl</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Command<span class="token punctuation">[</span><span class="token punctuation">]</span> onCommands<span class="token punctuation">;</span>    <span class="token keyword">private</span> Command<span class="token punctuation">[</span><span class="token punctuation">]</span> offCommands<span class="token punctuation">;</span>    <span class="token keyword">private</span> Command undoCommand<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于实现撤销操作</span>    <span class="token keyword">public</span> <span class="token function">RemoteControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        onCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        offCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Command noCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            onCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> noCommand<span class="token punctuation">;</span>            offCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> noCommand<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        undoCommand <span class="token operator">=</span> noCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//留待以后扩展指令</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token keyword">int</span> slot<span class="token punctuation">,</span>Command onCommand<span class="token punctuation">,</span>Command offCommand<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        onCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> onCommand<span class="token punctuation">;</span>        offCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> offCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token keyword">int</span> slot<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        onCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        undoCommand <span class="token operator">=</span> onCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token keyword">int</span> slot<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        offCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        undoCommand <span class="token operator">=</span> offCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        undoCommand<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"RemoteControl{"</span> <span class="token operator">+</span>                <span class="token string">"onCommands="</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>onCommands<span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">", offCommands="</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>offCommands<span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="RemoteLoader"><a href="#RemoteLoader" class="headerlink" title="RemoteLoader"></a>RemoteLoader</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteLoader</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        RemoteControl remoteControl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Light livingRoomLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token string">"Living Room"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Light kitchenLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token string">"Kitchen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LightOnCommand livingOnCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOnCommand</span><span class="token punctuation">(</span>livingRoomLight<span class="token punctuation">)</span><span class="token punctuation">;</span>        LightOffCommand livingOffCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOffCommand</span><span class="token punctuation">(</span>livingRoomLight<span class="token punctuation">)</span><span class="token punctuation">;</span>        LightOnCommand kitchenOnCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOnCommand</span><span class="token punctuation">(</span>kitchenLight<span class="token punctuation">)</span><span class="token punctuation">;</span>        LightOffCommand kitchenOffCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOffCommand</span><span class="token punctuation">(</span>kitchenLight<span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> livingOnCommand<span class="token punctuation">,</span> livingOffCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> kitchenOnCommand<span class="token punctuation">,</span> kitchenOffCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        light on Living Room        light off Living Room        light on Living Room        ------------------------        light on Kitchen        light off Kitchen        light on Kitchen         */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式--单件模式</title>
      <link href="posts/ec339b68.html"/>
      <url>posts/ec339b68.html</url>
      
        <content type="html"><![CDATA[<h1 id="单件模式"><a href="#单件模式" class="headerlink" title="单件模式"></a>单件模式</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>可用于线程池,缓存,日志对象等只能有一个实例的地方</li><li>单件模式可以确保只有一个实例被创建</li><li>利用单件模式,我们可以确保只有<strong>在需要的时候</strong>才会创建对象</li></ul><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>单件模式确保一个类只有一个实例,并提供一个全局访问点</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h2><ul><li>实现了延迟初始化</li><li>多线程不安全</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton uniqueInstance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>uniqueInstance<span class="token operator">==</span>null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第二版"><a href="#第二版" class="headerlink" title="第二版"></a>第二版</h2><ul><li>保证了线程安全</li><li>效率低下,只有第一次执行此方法才需要同步。一旦设置好了<code>uniqueInstance</code>变量，就不需要同步该方法了，<code>synchronized</code>就变成了累赘</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton uniqueInstance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>uniqueInstance<span class="token operator">==</span>null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第三版"><a href="#第三版" class="headerlink" title="第三版"></a>第三版</h2><ul><li><p>饿汉式</p></li><li><p><code>JVM</code>在加载这个类时马上创建此唯一的单价实例</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    </code></pre><h2 id="第四版"><a href="#第四版" class="headerlink" title="第四版"></a>第四版</h2><ul><li>双重检查加锁</li><li>在<code>getInstance()</code>中减少使用同步，只有第一次会同步</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//保证线程的可见性</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton uniqueInstance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>uniqueInstance<span class="token operator">==</span>null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//估计只有几个线程会进到这里</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//这些线程逐个进来,但是只有第一个线程会进入到下面的if</span>                <span class="token comment" spellcheck="true">//其他的线程进来时,已经初始化完毕了,就不好初始化多个实例</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>uniqueInstance<span class="token operator">==</span>null<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//第一个线程进来,初始化</span>                    uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试题</title>
      <link href="posts/a7ef9c4d.html"/>
      <url>posts/a7ef9c4d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java和C-的区别"><a href="#Java和C-的区别" class="headerlink" title="Java和C++的区别"></a>Java和C++的区别</h1><ul><li>都是面向对象的语⾔，都⽀持封装、继承和多态</li><li>Java 不提供指针来直接访问内存，程序内存更加安全</li><li>Java 的类是单继承的，C+⽀持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</li><li>Java 有自动内存管理机制，不需要程序员手动释放无用内存</li></ul><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><ul><li>int 4字节[ -2^31 ， 2^31 - 1]  超过20亿</li><li>short 2字节</li><li>long 8字节</li><li>byte 1字节[-128，127]</li><li>float 四字节</li><li>double 8字节</li><li>char  2字节 因为Java采用16位的Unicode字符集 [0，65535]</li><li>boolean 只有两个值，但是大小没精确定义</li></ul><h1 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h1><ul><li>拥有一些方法并且想让它们中的一些有默认实现，那么使用抽象类。抽象类是被用来创建继承层级里子类的模板。</li><li>接口是抽象方法的集合。如果一个类实现了某个接口，那么它就继承了这个接口的抽象方法。这就像契约模式，如果实现了这个接口，那么就必须确保使用这些方法。如AbstractMap提供了Map的默认实现，Iterable接口让我知道可以对该类进行for-each遍历</li><li>想实现多重继承，那么你必须使用接口。Java不支持多继承，子类不能够继承多个类，但可以实现多个接口</li><li>接口方法默认修饰符是 public，抽象方法可以有 public、protected 和 default 这些修饰符</li><li>从设计层面来说，抽象是对类的抽象，是⼀种模板设计，用于代码复用。而接口是对行为的抽象，是⼀种行为的规范，用于抽象事物的特性。</li></ul><h1 id="内部类和静态内部类的区别"><a href="#内部类和静态内部类的区别" class="headerlink" title="内部类和静态内部类的区别"></a>内部类和静态内部类的区别</h1><h2 id="为什么需要内部类"><a href="#为什么需要内部类" class="headerlink" title="为什么需要内部类"></a>为什么需要内部类</h2><ul><li>每个内部类都能独立地继承自一个接口的实现，所以无论外围类是否已经继承了某个接口的实现，对于内部类都没有影响</li><li>内部类可以有多个实例，每个实例都有自己的状态信息，并且与其外部类对象的信息相互独立</li><li>在单个外围类中，可以让多个内部类以不同的方法实现同一个接口</li></ul><p><strong>内部类</strong></p><ul><li>内部类中的变量和方法不能声明为静态的。</li><li>内部类实例化：B是A的内部类，实例化B：A.B b = new A().new B()。</li><li>内部类秘密捕获一个指向外部类对象的引用，所以可以引用外部类的静态或者非静态属性及方法。</li><li>在拥有外部类对象之前是不可能创建内部类对象的，因为内部类有指向外部类对象的引用</li></ul><p><strong>静态内部类</strong></p><ul><li><p>静态内部类属性和方法可以声明为静态的或者非静态的。</p></li><li><p>实例化静态内部类：B是A的静态内部类，A.B b = new A.B()。</p></li><li><p>静态内部类只能引用外部类的静态的属性及方法。 创建静态内部类则不需要先创建外部类对象</p></li></ul><h1 id="装箱拆箱"><a href="#装箱拆箱" class="headerlink" title="装箱拆箱"></a>装箱拆箱</h1><p>包装类对象池是池化技术的应用，是 Java 在类封装里实现的。Integer 对象池在底层实际上就是一个变量名为 cache 的数组，里面包含了 -128 ～ 127 的 Integer 对象实例。</p><p>使用对象池的方法就是通过 Integer.valueOf() 返回 cache 中的对象，像 Integer i = 10 这种自动装箱实际上也是调用 Integer.valueOf() 完成的。</p><p>如果使用的是 new 构造器，则会跳过 valueOf()，所以不会使用对象池中的实例。</p><p>缓存池的初始化在第一次使用的时候已经全部完成，初始化时它已经包含了所有需要缓存的对象。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Integer i = 100;会自动执行Integer i = Integer.valueOf(100) 操作</span><span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> IntegerCache<span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> IntegerCache<span class="token punctuation">.</span>high<span class="token punctuation">)</span>        <span class="token keyword">return</span> IntegerCache<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>IntegerCache<span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">两个 <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 变量比较 ，永远是 <span class="token boolean">false</span>。因为<span class="token keyword">new</span>生成的是两个对象，其内存地址不同Integer a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Integer b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>Integer变量 和 <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 变量比较 ，永远为 <span class="token boolean">false</span>因为 Integer变量 指向的是 java 常量池 中的对象，而 <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 的变量指向 堆中 新建的对象，两者在内存中的地址不同。Integer i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Integer j <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>自动装箱，自动拆箱Integer类加载时会初始化整数型常量池：<span class="token number">256</span>个对象在<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">128</span>，<span class="token number">127</span><span class="token punctuation">]</span>之间会被包装到固定的对象，放在整数型常量池里此区间的数据直接从内存中取出，内存地址相同如果不在这个范围，则会<span class="token keyword">new</span>出来，<span class="token punctuation">(</span>看最上面<span class="token punctuation">)</span>会导致<span class="token operator">:</span>两个Integer 变量比较，如果两个变量的值在区间<span class="token operator">-</span><span class="token number">128</span>到<span class="token number">127</span> 之间，则比较结果为<span class="token boolean">true</span>，如果两个变量的值不在此区间，则比较结果为 <span class="token boolean">false</span> 。Integer a<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>Integer b<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//结果为true</span><span class="token keyword">int</span> 变量 与 Integer、 <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 比较时，只要两个的值是相等，则为<span class="token boolean">true</span>因为包装类Integer 和 基本数据类型<span class="token keyword">int</span> 比较时，java会自动拆包装为<span class="token keyword">int</span> ，然后进行比较，实际上就变为两个<span class="token keyword">int</span>变量的比较。Integer i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//自动拆箱为 int 2=100; 此时，相当于两个int的比较</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">200</span>；System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre><h1 id="重写重载"><a href="#重写重载" class="headerlink" title="重写重载"></a>重写重载</h1><p><strong>方法重写</strong></p><ul><li>重写就是当子类继承自父类的相同方法，输入数据⼀样，但要做出有别于父类的响应时，你就要覆盖父类方法</li><li>重写发生在运行期，构造方法不能被继承，所以也不能被重写。如果父类方法访问修饰符为 private/final/static 则子类就不能重写该方法，但是被 static修饰的方法能够被再次声明</li><li>返回值类型、方法名、参数列表必须相同，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。</li></ul><p><strong>方法重载</strong></p><ul><li>重载就是同样的⼀个方法能够根据输⼊数据的不同，做出不同的处理</li><li>同一个类中，方法名相同，参数列表不同。只有返回值不同不能算方法重载</li></ul><h1 id="与equals-与hashcode"><a href="#与equals-与hashcode" class="headerlink" title="==与equals()与hashcode"></a>==与equals()与hashcode</h1><p>在未重写equals方法我们是继承了Object的equals方法，默认比较两个对象的内存地址</p><ul><li>对于值对象，==比较的是两个对象的值</li><li>对于引用对象，==比较的是两个对象的地址</li></ul><pre class=" language-java"><code class="language-java">默认情况是<span class="token operator">:</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>一般会重写equals方法以比较两个对象的内容<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">==</span>obj<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>         <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name， person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>age， person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>所以基本数据类型用<span class="token operator">==</span>判断相等，引用数据类型都用<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>进行判断<span class="token punctuation">(</span>String也是引用类型<span class="token punctuation">)</span>即<span class="token operator">==</span>是判断两个变量或实例是不是指向同一个内存空间 equals是判断两个变量或实例所指向的内存空间的值是不是相同<span class="token operator">==</span>指引用是否相同 <span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>指的是值是否相同</code></pre><h2 id="重写hashcode"><a href="#重写hashcode" class="headerlink" title="重写hashcode"></a>重写hashcode</h2><pre class=" language-java"><code class="language-java">因为HashSet或HashMap等集合中判断元素是否相等用到了hashcode是否相等，所以为避免我们认为相等但是逻辑判断却不相等的情况出现，自定义类重写equals必须重写hashcode方法<span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>无论何时覆盖该方法，通常需要覆盖`hashCode`方法，以便维护`hashCode`方法的通用合同，该方法规定相等的对象必须具有相等的哈希码。<span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>username， age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>如果两个对象相等，则hashcode一定也是相同的</p></li><li><p>两个对象相等，对两个equals方法返回true</p></li><li><p>两个对象有相同的hashcode值，它们也不一定是相等的</p></li><li><p>综上，equals方法被覆盖过，则hashCode方法也必须被覆盖</p></li><li><p>hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。</p></li><li><p>重写hashCode()是因为需要计算存储数据的存储位置，需要注意不要试图从散列码计算中排除掉一个对象的关键部分来提高性能，这样虽然能更快但可能会导致更多的Hash碰撞；</p></li></ul><h1 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h1><ul><li>浅拷贝是对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝</li><li>深拷贝是对基本数据类型进行值传递，对引用数据类型，创建⼀个新的对象，并复制其内容</li></ul><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>字符串是常量，不可修改</p><p>不仅类定义使用 final 修饰，关键的字符数组同样声明为 private final。</p><p>final修饰类定义只能使类不被继承，字符数组被 final 修饰只能保证 value 不能指向其他内存，但我们仍然可以通过 value[0] = ‘V’ 的方式直接修改 value 的内容。这不能保证字符串的不可修改性</p><p>String 是不可变，关键是因为 SUN 公司的工程师，在后面所有 String 的方法里很小心的没有去动数组里的元素，没有暴露内部成员字段。private final char value[] 这一句里，private的私有访问权限的作用都比 final 大。而且设计师还很小心地把整个 String 设成 final 禁止继承，避免被其他人继承后破坏。所以 String 是不可变的关键都在底层的实现，而不是一个 final。</p><h2 id="String-a-”abc”"><a href="#String-a-”abc”" class="headerlink" title="String a=”abc”"></a>String a=”abc”</h2><ul><li><p>判断这个常量是否存在于常量池，如果存在，则直接将该”abc”在常量池中的地址指向s，这个时候，系统没有创建新对象。</p></li><li><p>如果不存在，则在常量池中新建一个”abc”并放入常量池里面，然后再返回该地址，这个时候，系统创建了一个对象。</p></li></ul><h2 id="String-str-new-String-“abc”"><a href="#String-str-new-String-“abc”" class="headerlink" title="String str = new String(“abc”)"></a>String str = new String(“abc”)</h2><ul><li>把它拆分成”abc”和new String()</li><li>首先在字符串常量池去寻找有没有”abc”这个字符串<ul><li>没有就创建一个“abc”字符串对象在字符串池中，然后new String把这个字符串对象拷贝一份到堆中，返回这个对象的引用。所以一共产生两个对象（一个驻留在字符串池，一个分配在 Java 堆，str 指向堆上的实例）</li><li>如果有的话，则在堆中复制一个该字符串，并且将堆中的引用指向s。（只创建了一个对象，即堆中的对象）</li></ul></li></ul><h2 id="String-a-”ab”-”cd”"><a href="#String-a-”ab”-”cd”" class="headerlink" title="String a=”ab”+”cd”"></a>String a=”ab”+”cd”</h2><p>“ab”和”cd”分别创建了一个对象，它们经过“+”连接后又创建了一个对象”abcd”，因此一共三个，并且它们都被保存在字符串池里了。</p><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span> <span class="token string">"b"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">//此处虚拟机会做优化，会在常量池里面寻找"a" + "b" 结果后的字符串即"ab"</span><span class="token comment" spellcheck="true">//所以两者都是对映常量池中"ab"的地址</span></code></pre><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>String str <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">//虽然s1和s2各自指的是常量池里面"a"，"b"的引用，但是string在做加法或者subString、replace等方法的时候</span><span class="token comment" spellcheck="true">//实际上返回的是new String()的结果，因此str指向的是堆中的地址，所以不相等。</span></code></pre><p>常量优化机制：判断这两个常量、相加后的常量在常量池是否存在</p><ul><li>如果不存在则在常量池上创建相应的常量（并将常量地址值返回）</li><li>如果存在，则直接返回地址值</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*首先第一句话 String  s1 = new String("123") 以上分析过创建了两个对象（一个堆中，一个常量池 中）此时s1指向堆中当s1调用.intern()方法之后，发现常量池中已经有了字面量是123的常量，则直接把常量池的地址返回给s1在执行s2等于123时候，去常量池查看，同上常量池已经存在了，则此时s2不创建对象，直接拿常量池123的地址值使用所以此时s1 和 s2 都代表是常量池的地址值，则输出为true */</span>String  s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String  s2 <span class="token operator">=</span> <span class="token string">"1"</span><span class="token operator">+</span><span class="token string">"23"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><h2 id="String-s1-new-String-“1”-new-String-“23”"><a href="#String-s1-new-String-“1”-new-String-“23”" class="headerlink" title="String s1 = new String(“1”)+new String(“23”);"></a>String s1 = new String(“1”)+new String(“23”);</h2><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*首先堆中会有 1 ，23 ，以及相加之后的123 这三个对象。如果 1，23 这两个对象在常量池中没有相等的字面量那么还会在常量池中创建2个对象 最大创建了5个对象。最小创建了3个对象，都在堆中。*/</span>s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span></code></pre><ul><li>首先会创建这两个对象（堆中）以及相加后的对象（堆中）</li><li>然后判断常量池中是否存在这两个对象的字面量常量</li><li>如果存在则不做任何操作</li><li>如果不存在则在常量池上创建对应常量</li></ul><h1 id="String-intern"><a href="#String-intern" class="headerlink" title="String::intern()"></a>String::intern()</h1><p>String::intern()是本地方法，如果字符串常量池中已经包含了一个等于此String对象的字符串，则返回代表池中这个字符串对象的引用，否则会将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用</p><p>直接使用双引号声明出来的String对象会直接存储在常量池中。</p><p>如果存在堆中的对象，会直接保存对象的引用，而不会重新创建对象。</p><p>判断这个常量是否存在于常量池。</p><ul><li>如果存在，则直接返回地址值<ul><li>如果是引用，返回引用地址指向的堆空间对象地址值</li><li>如果是常量，则直接返回常量池常量的地址值</li></ul></li><li>如果不存在，将当前对象引用复制到常量池，并且返回的是当前对象的引用</li></ul><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">/*首先看第一行是两个new String类型的字符串相加，这里创建了堆中有3个对象 一个是1， 一个是23，还有一个是结果 123由于程序刚启动常量池也没有1，23所以会在常量池创建2个对象（1，23）当s1执行intern()方法之后，首先去常量池判断有没有123，此时发现没有，所以会把对象加入到常量池，并且返回当前对象的引用（堆中的地址）当创建s2时候，并且找到常量池中123，并且把常量池的地址值返回给s2由于常量池的地址值就是s1调用intern（）方法之后得到的堆中的引用，所以此时s1和s2的地址值一样，输出true。*/</span></code></pre><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt="img"></p><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token comment" spellcheck="true">/*在执行到第二行的时候String s2 = "123"时，发现常量池没有123，所以会先创建一个常量在当s1调用intern()方法时，会发现常量池已经有了123对象，就会直接把123的常量给返回出去，但是由于返回值并没有接收，所以此时s1还是堆中地址，则输入false；如果代码换成 s1 = s1.intern();那s1就会重新指向常量池了，那输出就为true；*/</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"58"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"tongcheng"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token operator">==</span>str1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">/*既然字符串常量池已经移到了Java堆中，那只需要在常量池中记录一下首次出现的实例引用即可*/</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"ja"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"va"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化的字符串java，在加载sum.misc.Version这个类时旧加载进了常量池</span>    <span class="token comment" spellcheck="true">//引导类加载器加载了rt.jar</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token operator">==</span>str2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token punctuation">}</span></code></pre><h1 id="String、StringBuilder与StringBuffer"><a href="#String、StringBuilder与StringBuffer" class="headerlink" title="String、StringBuilder与StringBuffer"></a>String、StringBuilder与StringBuffer</h1><h2 id="不可变String"><a href="#不可变String" class="headerlink" title="不可变String"></a>不可变String</h2><ul><li>String 类中使用 final 关键字修饰字符数组来保存字符串<code>private final char value[];</code></li><li>String对象是不可变的，任何一个操纵都是创建了一个全新的String对象以包含修改后的字符串内容</li><li>由于存放字符的数组被声明为 final 的，因此只能赋值一次，不可再更改。</li><li>每当把String对象作为方法的参数时，都会复制一份引用，而该引用所指的对象其实一直待在单一的物理位置上</li><li>所有指向String的任何引用都不可能改变他的值</li><li>如果字符串操作比较简单，直接相信编译器会合理的构造，否则还是自己创建一个StringBuilder</li><li>在toString方法中，如果要打印出对象的内存地址，应该调用Object.toString()，所以应该调用的是super.toString()，而不能调用this.toString()(会递归)</li><li>String的操作中，如果需要改变字符串的内容，则会返回一个新的String对象。如果内容没有改变，则返回原对象的引用</li></ul><h2 id="StringBuilder与StringBuffer"><a href="#StringBuilder与StringBuffer" class="headerlink" title="StringBuilder与StringBuffer"></a>StringBuilder与StringBuffer</h2><ul><li>他们都继承自AbstractStringBuilder，用了char[] value; 没加final修饰</li><li>StringBuffer使用synchronized修饰，是线程安全的可变字符序列。在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。可将字符串缓冲区安全地用于多个线程。</li><li>在内部，StringBuilder 对象被当作是一个包含字符序列的变长数组，是非线程安全的</li></ul><h2 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h2><p>String 类型和 StringBuffer 的主要性能区别：String 是不可变的对象, 因此在每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用 String ，因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后， JVM 的 GC 就会开始工作，性能就会降低。</p><p>使用 StringBuffer 类时，每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。所以多数情况下推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。</p><p>在某些特别情况下， String 对象的字符串拼接其实是被 Java Compiler 编译成了 StringBuffer 对象的拼接，所以这些时候 String 对象的速度并不会比 StringBuffer 对象慢，例如：</p><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> “This is only a” <span class="token operator">+</span> “ simple” <span class="token operator">+</span> “ test”<span class="token punctuation">;</span>StringBuffer Sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>“This is only a”<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>“ simple”<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>“ test”<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>基本原则：如果要操作少量的数据，用String ；单线程操作大量数据，用StringBuilder ；多线程操作大量数据，用StringBuffer。</li><li>不要使用String类的”+”来进行频繁的拼接，因为那样的性能极差的，应该使用StringBuffer或StringBuilder类。</li></ul><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><ul><li>提供用来完整描述程序所需的信息</li><li>注解一旦构造出来，就享有编译期的类型检查保护，是在实际的源代码级别保存所有的信息</li><li>@SuppressWarnings(“checked”)关闭不当的编译器警告信息</li><li>@Deprecated标识已弃用</li><li>@Override:覆盖超类的方法</li></ul><h2 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h2><ul><li>注解会被编译成class文件</li><li>需要一些源注解来实现，而且有注解还需要处理注解，即提取出注解的信息</li><li>@Target(ElementType.METHOD)表明是用于方法</li><li>@Retention(RetentionPolicy.RUNTIME)表明在运行时可用(共有源代码级别，类文件级别，运行时级别)</li></ul><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="擦除"><a href="#擦除" class="headerlink" title="擦除"></a>擦除</h2><ul><li>在泛型代码内部，无法获得任何有关泛型参数类型的信息</li><li>List<String>与List<Integer> 都被擦除成他们原生的类型，即List</li><li>泛型类型参数将擦除到他的第一个边界</li><li>泛型类型只有在静态类型检查期间才出现，之后会擦除替换为他们的非泛型上界</li><li>如List<T>擦除为List，未指定边界的将擦除为Object</li><li>任何在运行时需要知道确切类型信息的操作都无法继续工作</li></ul><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><ul><li>尽量使用泛型方法</li><li>static方法无法访问泛型类的类型信息，要使用泛型能力，则必须成为泛型方法</li><li>泛型方法会使用类型参数推断</li><li>如果传入基本类型，则会自动装箱</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        MainTest mainTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MainTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mainTest<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mainTest<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//java.lang.Integer</span>        <span class="token comment" spellcheck="true">//java.lang.String</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h2><ul><li>数组将跟踪他们的实际类型，而这个类型是数组在创建时确定的，因此，尽管array被转型成了List<String>[]，这个信息也只存在于编译期，在运行时，它仍然是一个Object数组</li><li>唯一方式是创建一个被擦除类型的新数组，然后对他转型</li><li>因为有了擦除，数组的运行时类型只能是Object[]，如果立即转型为T[]，那么编译期数组的实际类型就丢失，所以最好在集合内部使用Object[]，使用数组类型时，才转型为T[]</li></ul><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Ljava.util.List</span></code></pre><h2 id="泛型带来的问题"><a href="#泛型带来的问题" class="headerlink" title="泛型带来的问题"></a>泛型带来的问题</h2><ul><li>不能创建类似ArrayList<int>等，只能改成包装类ArrayList<Integer></li><li>不能使用泛型来区分重载方法</li><li>catch不能捕获泛型类型的异常，因为在编译期和运行时都必须知道异常的确切类型</li></ul><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><ul><li>Class对象包含了与类有关的信息，用来创建类的所有常规对象的</li><li>每个类都有有个Class对象，保存在同名的.class文件中</li><li>想要在运行时获得类型信息，就必须首先获取对Class对象的引用</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用全限定名</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.tongji.Wrapping"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用getClass()方法</span>        Wrapping wrapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wrapping</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        clazz<span class="token operator">=</span>wrapping<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用.class创建对Class对象的引用时，不会自动地初始化该Clas对象</span>        clazz <span class="token operator">=</span> Wrapping<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//clazz = int.class; 也可用于基本数据类型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用newInstance()则必须具有默认构造器</span>        <span class="token comment" spellcheck="true">//newInstance()返回的只是Object类型</span>        Object object <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> IllegalAccessException <span class="token operator">|</span> InstantiationException e<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="i-、-i"><a href="#i-、-i" class="headerlink" title="i++、++i"></a>i++、++i</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>    i <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token operator">++</span>j<span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token operator">*</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3*5</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m: "</span> <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//15</span><span class="token punctuation">}</span></code></pre><h1 id="交换引用"><a href="#交换引用" class="headerlink" title="交换引用"></a>交换引用</h1><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210218104459116.png" alt="image-20210218104459116"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Integer i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    Integer j <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i:"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" j:"</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10 5</span>    test<span class="token punctuation">.</span><span class="token function">doSwap</span><span class="token punctuation">(</span>i， j<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i:"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" j:"</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10 5</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSwap</span><span class="token punctuation">(</span>Integer a， Integer b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Integer temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> equals </tag>
            
            <tag> 重写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式--抽象工厂模式</title>
      <link href="posts/4bdc9a59.html"/>
      <url>posts/4bdc9a59.html</url>
      
        <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>抽象工厂模式提供一个接口,用于创建相关或依赖对象的家族,而不需要明确指定具体类。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><ol><li>工厂方法模式使用继承,抽象工厂模式使用组合</li><li>依赖抽象,不要依赖具体类</li><li>对象的创建被实现再工厂接口所暴露出来的方法中</li></ol><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/image-20201001162740771.png" alt="image-20201001163131160"></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="Dough"><a href="#Dough" class="headerlink" title="Dough"></a>Dough</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Dough</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThickCrustDough</span> <span class="token keyword">implements</span> <span class="token class-name">Dough</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThinCrustDough</span> <span class="token keyword">implements</span> <span class="token class-name">Dough</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="Sauce"><a href="#Sauce" class="headerlink" title="Sauce"></a>Sauce</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Sauce</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlumTomatoSauce</span> <span class="token keyword">implements</span> <span class="token class-name">Sauce</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MarinaraSauce</span> <span class="token keyword">implements</span> <span class="token class-name">Sauce</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PizzaIngredientFactory</span><span class="token punctuation">{</span>    Dough <span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Sauce <span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChicagoPizzaIngredientFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PizzaIngredientFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Dough <span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThickCrustDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Sauce <span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PlumTomatoSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NYPizzaIngredientFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PizzaIngredientFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Dough <span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThickCrustDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Sauce <span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MarinaraSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Pizza"><a href="#Pizza" class="headerlink" title="Pizza"></a>Pizza</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    Dough dough<span class="token punctuation">;</span>    Sauce sauce<span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bake"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>    PizzaIngredientFactory ingredientFactory<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CheesePizza</span><span class="token punctuation">(</span>PizzaIngredientFactory ingredientFactory<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ingredientFactory <span class="token operator">=</span> ingredientFactory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Prepare---"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        dough <span class="token operator">=</span> ingredientFactory<span class="token punctuation">.</span><span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sauce <span class="token operator">=</span> ingredientFactory<span class="token punctuation">.</span><span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="store"><a href="#store" class="headerlink" title="store"></a>store</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Pizza <span class="token function">orderPizza</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Pizza pizza<span class="token punctuation">;</span>        pizza <span class="token operator">=</span> <span class="token function">createPizza</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> Pizza <span class="token function">createPizza</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NYPizzaStore</span> <span class="token keyword">extends</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Pizza <span class="token function">createPizza</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Pizza pizza <span class="token operator">=</span> null<span class="token punctuation">;</span>        PizzaIngredientFactory ingredientFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NYPizzaIngredientFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheesePizza</span><span class="token punctuation">(</span>ingredientFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="MainTest"><a href="#MainTest" class="headerlink" title="MainTest"></a>MainTest</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        PizzaStore nyPizzaStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NYPizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nyPizzaStore<span class="token punctuation">.</span><span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Redis设计与实现》------Sentinel</title>
      <link href="posts/b89933c6.html"/>
      <url>posts/b89933c6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Sentinel简介"><a href="#Sentinel简介" class="headerlink" title="Sentinel简介"></a>Sentinel简介</h1><p><code>Sentinel</code>(哨兵)是Redis的高可用性解决方案:由一个或多个<code>Sentinel</code>实例组成的Sentinel系统可以监视任意多个主服务器,以及这些主服务器属下的所有从服务器,并在被监视的主服务器进入下线状态时,自动将下线主服务器属下的某个从服务器升级为新的主服务器,然后由新的主服务器代替已下线的主服务器继续处理命令请求。</p><h1 id="启动并初始化Sentinel"><a href="#启动并初始化Sentinel" class="headerlink" title="启动并初始化Sentinel"></a>启动并初始化Sentinel</h1><p>启动<code>Sentinel</code>会执行以下操作：</p><ol><li>初始化服务器</li><li>将普通Redis服务器使用的代码替换成<code>Sentinel</code>专用代码</li><li>初始化<code>Sentinel</code>状态</li><li>根据给定的配置文件,初始化<code>Sentinel</code>的监视主服务器列表</li><li>创建连向主服务器的网络连接</li></ol><h2 id="初始化Sentinel状态的masters属性"><a href="#初始化Sentinel状态的masters属性" class="headerlink" title="初始化Sentinel状态的masters属性"></a>初始化Sentinel状态的masters属性</h2><p><code>dict * masters;</code>保存了所有被这个Sentinel监视的主服务器</p><p><code>masters</code>字典键是监视主服务器的名字,值是被监视主服务器对应的<code>sentinelRedisInstance</code>结构</p><p>每个<code>sentinelRedisInstance</code>结构代表了一个被sentinel监视的Redis服务器实例,这个实例可以是主服务器,从服务器或者另外一个<code>Sentinel</code></p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> sentinelRedisInstance<span class="token punctuation">{</span>    <span class="token keyword">int</span> flags<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标识值,记录了实例的类型,以及该实例的当前状态</span>    <span class="token comment" spellcheck="true">//实例的名字</span>    <span class="token comment" spellcheck="true">//主服务器的名字由用户在配置文件中设置</span>    <span class="token comment" spellcheck="true">//从服务器以及Sentinel的名字由Sentinel自动设置</span>    <span class="token comment" spellcheck="true">//格式为ip:port,例如"127.0.0.1:26379"</span>    <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实例的运行ID</span>    <span class="token keyword">char</span> <span class="token operator">*</span> runid<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//配置纪元,用于实现故障转移</span>    uint64_t config_epoch<span class="token punctuation">;</span>    sentinelAddr <span class="token operator">*</span> addr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//实例的地址</span>    mstime_t down_after_period<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例无响应多少毫秒后才会被认为是主观下线</span>    <span class="token keyword">int</span> quorum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断这个实例为客观下线所需的支持投票数量</span>    <span class="token keyword">int</span> parallel_syncs<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在执行故障转移操作时,可以同时对新的主服务器进行同步的从服务器数量</span>    mstime_t failover_timeout<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//刷新故障迁移状态的最大时限</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> sentinelAddr<span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span> ip<span class="token punctuation">;</span>    <span class="token keyword">int</span> port<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="获取主服务器的信息"><a href="#获取主服务器的信息" class="headerlink" title="获取主服务器的信息"></a>获取主服务器的信息</h2><p><code>Sentinel</code>默认会以每10秒一次的频率,通过命令连接向被监视的主服务器发送INFO命令</p><p>对于主服务器返回的从服务器信息,会被用于更新主服务器实例结构的<code>slavers</code>字典,该字典记录了主服务器属下从服务器的名单</p><h1 id="获取从服务器信息"><a href="#获取从服务器信息" class="headerlink" title="获取从服务器信息"></a>获取从服务器信息</h1><p>当<code>Sentinel</code>发现主服务器有新的从服务器出现时,除了会为这个新的从服务器创建相应的实例结构外,还会创建连接到从服务器的命令连接和订阅连接</p><h1 id="检测主观下线状态"><a href="#检测主观下线状态" class="headerlink" title="检测主观下线状态"></a>检测主观下线状态</h1><p>默认情况下,<code>Sentinel</code>会以每秒一次的频率向所有与它创建了命令连接的实例(包括主服务器,从服务器,其他<code>Sentinel</code>在内)发送PING命令,并通过实例返回的<code>PING</code>命令来判断实例是否在线</p><h2 id="检测客观下线状态"><a href="#检测客观下线状态" class="headerlink" title="检测客观下线状态"></a>检测客观下线状态</h2><p>当<code>Sentinel</code>将一个主服务器判断为主观下线后,它会向同样监视这一主服务器的其他<code>Sentinel</code>进行询问,如果接收到了足够数量的已下线判断之后,<code>Sentinel</code>就会将主服务器判断为客观下线,并对主服务器执行故障转移操作</p>]]></content>
      
      
      <categories>
          
          <category> Redis学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Sentinel </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式--工厂方法模式</title>
      <link href="posts/98f870a2.html"/>
      <url>posts/98f870a2.html</url>
      
        <content type="html"><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>工厂方法模式定义了一个创建对象的接口,但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>要依赖抽象，不要依赖具体类。</p><p>即不能让高级组件依赖低层组件。</p><h2 id="指导方针"><a href="#指导方针" class="headerlink" title="指导方针"></a>指导方针</h2><ol><li>变量不可以持有具体类的引用（改用工厂模式）</li><li>不要让类派生自具体类（用接口创建）</li><li>不要覆盖基类中已实现方法</li></ol><h2 id="工厂方法模式类图"><a href="#工厂方法模式类图" class="headerlink" title="工厂方法模式类图"></a>工厂方法模式类图</h2><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/image-20200928104712021.png" alt="image-20200928104712021"></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="creator相关"><a href="#creator相关" class="headerlink" title="creator相关"></a>creator相关</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Pizza <span class="token function">orderPizza</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Pizza pizza<span class="token punctuation">;</span>        pizza <span class="token operator">=</span> <span class="token function">createPizza</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> Pizza <span class="token function">createPizza</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NYPizzaStore</span> <span class="token keyword">extends</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Pizza <span class="token function">createPizza</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NYStyleCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChicagoPizzaStore</span> <span class="token keyword">extends</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Pizza <span class="token function">createPizza</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChicagoStyleCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="product相关"><a href="#product相关" class="headerlink" title="product相关"></a>product相关</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    String dough<span class="token punctuation">;</span>    String sauce<span class="token punctuation">;</span>    ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> toppings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Preparing--"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dough--"</span><span class="token operator">+</span>dough<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sauce--"</span><span class="token operator">+</span>sauce<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String topping <span class="token operator">:</span> toppings<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>topping<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bake"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NYStyleCheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">NYStyleCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        name <span class="token operator">=</span> <span class="token string">"NYStyleCheesePizza"</span><span class="token punctuation">;</span>        dough <span class="token operator">=</span> <span class="token string">"NYStyleCheesePizza"</span><span class="token punctuation">;</span>        sauce <span class="token operator">=</span> <span class="token string">"NYStyleCheesePizza"</span><span class="token punctuation">;</span>        toppings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"NYStyleCheesePizza"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChicagoStyleCheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ChicagoStyleCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        name <span class="token operator">=</span> <span class="token string">"ChicagoStyleCheesePizza"</span><span class="token punctuation">;</span>        dough <span class="token operator">=</span> <span class="token string">"ChicagoStyleCheesePizza"</span><span class="token punctuation">;</span>        sauce <span class="token operator">=</span> <span class="token string">"ChicagoStyleCheesePizza"</span><span class="token punctuation">;</span>        toppings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ChicagoStyleCheesePizza"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="MainTest"><a href="#MainTest" class="headerlink" title="MainTest"></a>MainTest</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        PizzaStore nyStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NYPizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PizzaStore chicagoStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChicagoPizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Pizza pizza <span class="token operator">=</span> nyStore<span class="token punctuation">.</span><span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Pizza pizza2 <span class="token operator">=</span> chicagoStore<span class="token punctuation">.</span><span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Redis设计与实现》-------复制</title>
      <link href="posts/2e019a64.html"/>
      <url>posts/2e019a64.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>被复制的服务器称为主服务器,对主服务器进行复制的服务器称为从服务器</p><p>进行复制中的主从服务器双方的数据库将保存相同的数据</p><h1 id="旧版复制功能的实现"><a href="#旧版复制功能的实现" class="headerlink" title="旧版复制功能的实现"></a>旧版复制功能的实现</h1><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>用于将从服务器的数据库状态更新至当前所处的数据库状态</p><h2 id="命令传播"><a href="#命令传播" class="headerlink" title="命令传播"></a>命令传播</h2><p>用于在主服务器的数据库状态被修改,导致主从服务器的数据库状态出现不一致时,让主从服务器的数据库重新回到一致状态</p><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><p>旧版复制功能在处理断线重复制情况时低效</p><h1 id="新版复制功能的实现"><a href="#新版复制功能的实现" class="headerlink" title="新版复制功能的实现"></a>新版复制功能的实现</h1><ol><li>完整重同步:用于处理初次复制的情况,通过让主服务器创建并发送<code>RDB文件</code>,以及向从服务器发送保存在缓冲区里面的写命令进行同步</li><li>部分重同步:用于处理<strong>断线后重复制</strong>情况,当从服务器在断线后重新连接主服务器时,如果条件允许,主服务器可以将主从服务器断开期间执行的写命令发送给从服务器,从服务器只要接收并执行这些写命令,就可以将数据库更新至主服务器当前所处的状态</li></ol><h1 id="部分重同步的实现"><a href="#部分重同步的实现" class="headerlink" title="部分重同步的实现"></a>部分重同步的实现</h1><ol><li>复制偏移量</li><li>复制积压缓冲区</li><li>服务器运行ID</li></ol><h1 id="复制的实现"><a href="#复制的实现" class="headerlink" title="复制的实现"></a>复制的实现</h1><h2 id="步骤1-设置主服务器的地址和端口"><a href="#步骤1-设置主服务器的地址和端口" class="headerlink" title="步骤1:设置主服务器的地址和端口"></a>步骤1:设置主服务器的地址和端口</h2><p>执行:<code>SLAVEOF 127.0.0.1 6379</code></p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> redisServer<span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span> masterhost<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//主服务器的地址</span>    <span class="token keyword">int</span> masterport<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//主服务器的端口号</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="步骤2-建立套接字连接"><a href="#步骤2-建立套接字连接" class="headerlink" title="步骤2:建立套接字连接"></a>步骤2:建立套接字连接</h2><p>如果从服务器创建的套接字能成功连接到主服务器,从服务器是主服务器的客户端,以从服务器向主服务器发送命令请求的形式来进行.</p><h2 id="步骤3-发送PING命令"><a href="#步骤3-发送PING命令" class="headerlink" title="步骤3:发送PING命令"></a>步骤3:发送PING命令</h2><ol><li>检查套接字的读写状态是否正常</li><li>检查主服务器能否正常处理命令请求</li></ol><h2 id="步骤4-身份验证"><a href="#步骤4-身份验证" class="headerlink" title="步骤4:身份验证"></a>步骤4:身份验证</h2><h2 id="步骤5-发送端口信息"><a href="#步骤5-发送端口信息" class="headerlink" title="步骤5:发送端口信息"></a>步骤5:发送端口信息</h2><h2 id="步骤6-同步"><a href="#步骤6-同步" class="headerlink" title="步骤6:同步"></a>步骤6:同步</h2><p>从服务器将向主服务器发送<code>PSYNC命令</code>,执行同步操作,并将自己的数据库更新至主服务器数据库当前所处的状态</p><h2 id="步骤7-命令传播"><a href="#步骤7-命令传播" class="headerlink" title="步骤7:命令传播"></a>步骤7:命令传播</h2><p>主服务器只要一直将自己执行的写命令发送给从服务器,而从服务器只要一直接收并执行主服务器发来的写命令,就可以保证主从服务器保持一致了</p><h1 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a>心跳检测</h1><p>在命令传播阶段,从服务器默认以每秒一次的频率,向主服务器发送从服务器当前的复制偏移量,有三个作用:</p><h2 id="检测主从服务器的网络连接状态"><a href="#检测主从服务器的网络连接状态" class="headerlink" title="检测主从服务器的网络连接状态"></a>检测主从服务器的网络连接状态</h2><h2 id="辅助实现min-slaves配置选项"><a href="#辅助实现min-slaves配置选项" class="headerlink" title="辅助实现min-slaves配置选项"></a>辅助实现min-slaves配置选项</h2><p>防止主服务器在不安全的情况下执行写命令</p><h2 id="检测命令丢失"><a href="#检测命令丢失" class="headerlink" title="检测命令丢失"></a>检测命令丢失</h2><p>如果命令丢失,主服务器会发觉从服务器当前的复制偏移量少于自己的<strong>复制偏移量</strong>,然后主服务器就会通过从服务器提交的复制偏移量,在复制积压缓冲区里找到从服务器缺少的数据,并将这些数据重新发送给从服务器.</p>]]></content>
      
      
      <categories>
          
          <category> Redis学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM常见问题</title>
      <link href="posts/c31889ef.html"/>
      <url>posts/c31889ef.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java的类加载机制"><a href="#Java的类加载机制" class="headerlink" title="Java的类加载机制"></a>Java的类加载机制</h1><ul><li>java文件——&gt;javac命令——&gt;class文件——&gt;java命令</li><li>当调用java命令执行class文件就会加载类</li><li>类加载主要分为如下三个过程</li><li>加载     通过“全限定类名”来获取定义此类的二进制字节流、将字节流所代表的静态存储结构转换为方法区的运行时数据结构、在java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。加载阶段可以使用系统提供的类加载器(ClassLoader)来完成，也可以由用户自定义的类加载器完成，开发人员可以通过定义自己的类加载器去控制字节流的获取方式。</li><li>连接  <ul><li>验证 校验字节码文件的正确性</li><li>准备 为类的静态变量分配内存，初始化为默认值</li><li>解析 将类中的符号引用转换为直接引用</li></ul></li><li>初始化 初始化阶段是执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块(static块)中的语句合并产生的</li></ul><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>JVM设计者把类加载阶段中的“通过’类全名’来获取定义此类的二进制字节流”这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。实现这个动作的代码模块称为“类加载器”。</p><p>从虚拟机的角度来说，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader），该类加载器使用C++语言实现，属于虚拟机自身的一部分。另外一种就是所有其它的类加载器，这些类加载器是由Java语言实现，独立于JVM外部，并且全部继承自抽象类java.lang.ClassLoader。</p><p>从Java开发人员的角度来看，大部分Java程序一般会使用到以下三种系统提供的类加载器：</p><ul><li>启动类加载器（Bootstrap ClassLoader）：负责加载JAVA_HOME\lib目录中并且能被虚拟机识别的类库到JVM内存中，如果名称不符合的类库即使放在lib目录中也不会被加载。该类加载器无法被Java程序直接引用。</li><li>扩展类加载器（Extension ClassLoader）：该加载器主要是负责加载JAVA_HOME\lib\，该加载器可以被开发者直接使用。</li><li>应用程序类加载器（Application ClassLoader）：该类加载器也称为系统类加载器，它负责加载用户类路径（Classpath）上所指定的类库，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li></ul><p>我们的应用程序都是由这三类加载器互相配合进行加载的，我们也可以加入自己定义的类加载器。这些类加载器之间的关系如下图所示：</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/20150825150524034" alt="img"></p><p>如上图所示的类加载器之间的这种层次关系，就称为类加载器的双亲委派模型（Parent Delegation Model）。该模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。子类加载器和父类加载器不是以继承（Inheritance）的关系来实现，而是通过组合（Composition）关系来复用父加载器的代码。</p><p><strong>双亲委派模型的工作过程为：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载。</strong></p><p>使用这种模型来组织类加载器之间的关系的好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系。例如java.lang.Object类，无论哪个类加载器去加载该类，最终都是由启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。否则的话，如果不使用该模型的话，如果用户自定义一个java.lang.Object类且存放在classpath中，那么系统中将会出现多个Object类，应用程序也会变得很混乱。如果我们自定义一个rt.jar中已有类的同名Java类，会发现JVM可以正常编译，但该类永远无法被加载运行。</p>]]></content>
      
      
      <categories>
          
          <category> JVM学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 问题 </tag>
            
            <tag> 类加载器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式--装饰者模式</title>
      <link href="posts/a5c35f1a.html"/>
      <url>posts/a5c35f1a.html</url>
      
        <content type="html"><![CDATA[<h1 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h1><h2 id="装饰者模式定义"><a href="#装饰者模式定义" class="headerlink" title="装饰者模式定义"></a>装饰者模式定义</h2><p>动态地将责任附加到对象上。若要扩展功能，装饰者提供比继承更有弹性的替代方案</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>类应该对扩展开放,对修改关闭.</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><ol><li>利用继承设计子类的行为,是在编译时静态决定的,而且所有子类都会继承到相同的行为.如果利用组合扩展对象的行为,就能在运行时动态地进行扩展.</li><li>装饰者和被装饰者有相同的超类型</li><li>可以用一个或多个装饰者包装一个对象</li><li>在任何需要原始对象的地方,都可以用装饰过的对象代替它</li><li>Java.io类就用到了装饰者模式，倒是用来包装InputStream的</li><li>装饰者模式意味着一群装饰者类，用来包装具体的组件</li><li>可以用无数的装饰者包装一个组件</li></ol><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/image-20200926170529749.png" alt="image-20200926170529749"></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="Beverage"><a href="#Beverage" class="headerlink" title="Beverage"></a>Beverage</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Beverage</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> String description <span class="token operator">=</span> <span class="token string">"Unknown Beverage"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="咖啡组件"><a href="#咖啡组件" class="headerlink" title="咖啡组件"></a>咖啡组件</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DarkRoast</span> <span class="token keyword">extends</span> <span class="token class-name">Beverage</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">DarkRoast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        description <span class="token operator">=</span> <span class="token string">"DarkRoast"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1.59</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Espresso</span> <span class="token keyword">extends</span> <span class="token class-name">Beverage</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Espresso</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        description <span class="token operator">=</span> <span class="token string">"Espresso"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1.99</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HouseBlend</span> <span class="token keyword">extends</span> <span class="token class-name">Beverage</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">HouseBlend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        description <span class="token operator">=</span> <span class="token string">"HouseBlend"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0.99</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="装饰者相关组件"><a href="#装饰者相关组件" class="headerlink" title="装饰者相关组件"></a>装饰者相关组件</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//调料装饰者</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CondimentDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">Beverage</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//所有调料装饰者必须重新实现该方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这样得到的是装饰者,即被Milk这个配料装饰后得到的一杯新咖啡</span><span class="token comment" spellcheck="true">//它不管之前的咖啡是什么种类,也不管之前之后是否被装饰过</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Milk</span> <span class="token keyword">extends</span> <span class="token class-name">CondimentDecorator</span><span class="token punctuation">{</span>    Beverage beverage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Milk</span><span class="token punctuation">(</span>Beverage beverage<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beverage <span class="token operator">=</span> beverage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> beverage<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",Milk"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0.50</span><span class="token operator">+</span>beverage<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mocha</span> <span class="token keyword">extends</span> <span class="token class-name">CondimentDecorator</span><span class="token punctuation">{</span>    Beverage beverage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Mocha</span><span class="token punctuation">(</span>Beverage beverage<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beverage <span class="token operator">=</span> beverage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> beverage<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",Mocha"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0.20</span><span class="token operator">+</span>beverage<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Soy</span> <span class="token keyword">extends</span> <span class="token class-name">CondimentDecorator</span><span class="token punctuation">{</span>    Beverage beverage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Soy</span><span class="token punctuation">(</span>Beverage beverage<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beverage <span class="token operator">=</span> beverage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> beverage<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",Soy"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0.80</span><span class="token operator">+</span>beverage<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Whip</span> <span class="token keyword">extends</span> <span class="token class-name">CondimentDecorator</span><span class="token punctuation">{</span>    Beverage beverage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Whip</span><span class="token punctuation">(</span>Beverage beverage<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beverage <span class="token operator">=</span> beverage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> beverage<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",Whip"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0.10</span><span class="token operator">+</span>beverage<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="MainTest"><a href="#MainTest" class="headerlink" title="MainTest"></a>MainTest</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Beverage beverage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Espresso</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beverage<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" $"</span><span class="token operator">+</span>beverage<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Beverage beverage1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DarkRoast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beverage1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mocha</span><span class="token punctuation">(</span>beverage1<span class="token punctuation">)</span><span class="token punctuation">;</span>        beverage1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mocha</span><span class="token punctuation">(</span>beverage1<span class="token punctuation">)</span><span class="token punctuation">;</span>        beverage1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Whip</span><span class="token punctuation">(</span>beverage1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beverage1<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" $"</span><span class="token operator">+</span>beverage1<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Redis设计与实现》-------AOF持久化</title>
      <link href="posts/7730ae65.html"/>
      <url>posts/7730ae65.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>通过保存<code>Redis</code>服务器所执行的写命令来记录数据库状态的</p><p>服务器启动时,可以通过载入和执行<code>AOF文件</code>中保存的命令来还原服务器关闭之前的数据库状态</p><h1 id="AOF持久化的实现"><a href="#AOF持久化的实现" class="headerlink" title="AOF持久化的实现"></a>AOF持久化的实现</h1><h2 id="命令追加"><a href="#命令追加" class="headerlink" title="命令追加"></a>命令追加</h2><p>服务器在执行完一个写命令后,会将被执行的写命令追加到服务器状态的<code>aof_buf</code>缓冲区的末尾:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> redisServer<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// AOF缓冲区</span>    sds aof_buf<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="AOF文件的写入与同步"><a href="#AOF文件的写入与同步" class="headerlink" title="AOF文件的写入与同步"></a>AOF文件的写入与同步</h2><p>服务器进程是一个事件循环,循环中的文件事件负责接收客户端的命令请求,以及向客户端发送命令回复.时间事件负责执行像serverCron函数这样需要定时运行的函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#处理文件事件,接收命令请求以及发送命令回复</span>        <span class="token comment" spellcheck="true">#处理命令请求时可能会有新内容加入到aof_buf缓冲区中</span>        processFileEvents<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#处理时间事件</span>        processTimeEvents<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#考虑是否要将aof_buf缓冲区中的内容写入和保存到AOF文件里面</span>        flushAppendOnlyFile<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h1 id="AOF文件的载入与数据还原"><a href="#AOF文件的载入与数据还原" class="headerlink" title="AOF文件的载入与数据还原"></a>AOF文件的载入与数据还原</h1><p>只要读入并重新执行一遍<code>AOF文件</code>里面保存的写命令,就可以还原服务器关闭之前的数据库状态</p><ol><li>创建一个不带网络连接的伪客户端</li><li>从AOF文件中分析并读取出一条写命令</li><li>使用伪客户端执行被读出的写命令</li><li>一直执行2,3直到AOF文件中的所有写命令都被处理完毕</li></ol><h1 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h1><p>服务器创建一个新的AOF文件来<strong>替代</strong>现有的AOF文件,新旧两个AOF文件所保存的数据库状态相同,但是新的AOF文件不会包含任何浪费空间的冗余命令</p><h2 id="AOF文件重写的实现"><a href="#AOF文件重写的实现" class="headerlink" title="AOF文件重写的实现"></a>AOF文件重写的实现</h2><p>不需要对现有的AOF文件进行操作,是通过读取服务器当前的数据库状态来实现的</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">aof_rewrite</span><span class="token punctuation">(</span>new_aof_file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#创建新的aof文件</span>    f<span class="token operator">=</span>create_file<span class="token punctuation">(</span>new_aof_file_name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#遍历数据库</span>    <span class="token keyword">for</span> db <span class="token keyword">in</span> redisServer<span class="token punctuation">.</span>db<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#忽略空数据库</span>        <span class="token keyword">if</span> db<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">continue</span>        <span class="token comment" spellcheck="true">#写入SELECT命令,指定数据库号码</span>        f<span class="token punctuation">.</span>write_command<span class="token punctuation">(</span><span class="token string">"SELECT"</span><span class="token operator">+</span>db<span class="token punctuation">.</span>id<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#遍历数据库中所有键</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> db<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#忽略过期的键</span>            <span class="token keyword">if</span> key<span class="token punctuation">.</span>is_expired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">continue</span>            <span class="token comment" spellcheck="true">#根据键的类型对键进行重写</span>            <span class="token keyword">if</span> key<span class="token punctuation">.</span>type <span class="token operator">==</span> String<span class="token punctuation">:</span>                rewrite_string<span class="token punctuation">(</span>key<span class="token punctuation">)</span>            <span class="token keyword">elif</span> key<span class="token punctuation">.</span>type <span class="token operator">==</span> List<span class="token punctuation">:</span>                rewrite_list<span class="token punctuation">(</span>key<span class="token punctuation">)</span>            <span class="token keyword">elif</span> key<span class="token punctuation">.</span>type <span class="token operator">==</span> Hash<span class="token punctuation">:</span>                rewrite_hash<span class="token punctuation">(</span>key<span class="token punctuation">)</span>            <span class="token keyword">elif</span> key<span class="token punctuation">.</span>type <span class="token operator">==</span> Set<span class="token punctuation">:</span>                rewrite_set<span class="token punctuation">(</span>key<span class="token punctuation">)</span>            <span class="token keyword">elif</span> key<span class="token punctuation">.</span>type <span class="token operator">==</span> SortedSet<span class="token punctuation">:</span>                rewrite_sortedSet<span class="token punctuation">(</span>key<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 如果键带有过期时间,过期时间也要重写</span>            <span class="token keyword">if</span> key<span class="token punctuation">.</span>have_expired_time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                rewrite_expired_time<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#写入完毕,关闭文件            </span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rewrite_string</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#使用GET命令获取字符串的值</span>    value<span class="token operator">=</span>GET<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#使用SET命令重写字符串键</span>    f<span class="token punctuation">.</span>write_command<span class="token punctuation">(</span>SET<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rewrite_expired_time</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#获取毫秒精度的键过期时间戳</span>    timestamp<span class="token operator">=</span>get_expired_time_in_unixstamp<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#使用PEXPIREAT命令重写键的过期时间</span>    f<span class="token punctuation">.</span>write_command<span class="token punctuation">(</span>PEXPIREAT<span class="token punctuation">,</span>key<span class="token punctuation">,</span>timestamp<span class="token punctuation">)</span></code></pre><h2 id="AOF后台重写"><a href="#AOF后台重写" class="headerlink" title="AOF后台重写"></a>AOF后台重写</h2><p>Redis服务器使用单个线程来处理命令请求,决定将AOF重写程序放到子进程中执行</p><ul><li>子进程在进行AOF重写期间,服务器进程可以进行处理命令请求</li><li>子进程带有服务器进程的数据副本,使用子进程而不是线程,可以在避免使用锁的情况下,保证数据的安全性</li></ul><p>但是有可能导致当前数据库状态和重写后的AOF文件所保存的数据库状态不一致</p><p>在子进程执行AOF重写期间,服务器进程执行:</p><ol><li>执行客户端发来的指令</li><li>将执行后的写命令追加到AOF缓冲区</li><li>将执行后的写命令追加到AOF重写缓冲区</li></ol><p>当子进程完成AOF重写工作后,他会向父进程发送一个信号,父进程将执行:</p><ol><li>将AOF重写缓冲区中所有内容写入到新的AOF文件中,这时新的AOF文件所保存的内容就与当前的数据库状态一致</li><li>对新的AOF文件进行改名,原子地覆盖现有的AOF文件,完成新旧AOF文件的替换</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据库 </tag>
            
            <tag> AOF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式--观察者模式</title>
      <link href="posts/98ef9b01.html"/>
      <url>posts/98ef9b01.html</url>
      
        <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>观察者模式定义了对象之间的一对多依赖,这样一来,当一个对象改变状态时,他的所有依赖者都会收到通知并自动更新。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>主题只知道观察者实现了Observer接口。在任何时候我们都可以增加新的观察者，因为主题唯一依赖的东西是一个实现了Observer接口的对象列表。</p><p>有新类型观察者出现时，只需要实现观察者接口，再注册成为观察者即可。</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>为了交互对象之间的松耦合设计而努力</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/image-20200924112457998.png" alt="image-20200924112457998"></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="Subject接口相关"><a href="#Subject接口相关" class="headerlink" title="Subject接口相关"></a>Subject接口相关</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherData</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Observer<span class="token operator">></span> observers<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">WeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Observer observer <span class="token operator">:</span> observers<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>temperature<span class="token punctuation">,</span>humidity<span class="token punctuation">,</span>pressure<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">measurementsChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMeasurements</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span><span class="token keyword">float</span> humidity<span class="token punctuation">,</span><span class="token keyword">float</span> pressure<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token function">measurementsChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Observer接口相关"><a href="#Observer接口相关" class="headerlink" title="Observer接口相关"></a>Observer接口相关</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temp<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DisplayElement</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentConditionsDisplay</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token punctuation">,</span> DisplayElement<span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> Subject weatherData<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CurrentConditionsDisplay</span><span class="token punctuation">(</span>Subject weatherData<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weatherData <span class="token operator">=</span> weatherData<span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CurrentConditionsDisplay:"</span><span class="token operator">+</span>temperature<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>humidity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForecastDisplay</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token punctuation">,</span> DisplayElement<span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">private</span> Subject weatherData<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ForecastDisplay</span><span class="token punctuation">(</span>Subject weatherData<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weatherData <span class="token operator">=</span> weatherData<span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ForecastDisplay:"</span><span class="token operator">+</span>temperature<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>humidity<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>pressure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatisticsDisplay</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token punctuation">,</span> DisplayElement<span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">private</span> Subject weatherData<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">StatisticsDisplay</span><span class="token punctuation">(</span>Subject weatherData<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weatherData <span class="token operator">=</span> weatherData<span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StatisticsDisplay:"</span><span class="token operator">+</span>temperature<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>humidity<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>pressure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="MainTest"><a href="#MainTest" class="headerlink" title="MainTest"></a>MainTest</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        WeatherData weatherData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CurrentConditionsDisplay currentConditionsDisplay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CurrentConditionsDisplay</span><span class="token punctuation">(</span>weatherData<span class="token punctuation">)</span><span class="token punctuation">;</span>        ForecastDisplay forecastDisplay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForecastDisplay</span><span class="token punctuation">(</span>weatherData<span class="token punctuation">)</span><span class="token punctuation">;</span>        StatisticsDisplay statisticsDisplay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatisticsDisplay</span><span class="token punctuation">(</span>weatherData<span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">setMeasurements</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">30.4f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        输出:        CurrentConditionsDisplay:80.0,65.0        ForecastDisplay:80.0,65.0,30.4        StatisticsDisplay:80.0,65.0,30.4         */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Redis设计与实现》-------RDB持久化</title>
      <link href="posts/267cb657.html"/>
      <url>posts/267cb657.html</url>
      
        <content type="html"><![CDATA[<h1 id="RDB文件的创建与载入"><a href="#RDB文件的创建与载入" class="headerlink" title="RDB文件的创建与载入"></a>RDB文件的创建与载入</h1><p><code>SAVE指令</code>会阻塞Redis服务器进程,直到RDB文件创建完毕为止,在服务器进程阻塞期间,服务器不能处理任何命令请求</p><p><code>BGSAVE命令</code>会派生出一个子进程,由它负责创建RDB文件,服务器进程(父进程)继续处理命令请求。</p><pre class=" language-c"><code class="language-c">def <span class="token function">SAVE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    #创建RDB文件    rdbSave（）def <span class="token function">BGSAVE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    # 创建子进程    pid<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        # 子进程负责创建RDB文件        rdbSave（）        # 完成之后向父进程发送信号        <span class="token function">signal_parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    elif pid<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>        # 父进程继续处理命令请求，并通过轮询等待子进程的信号        <span class="token function">handle_request_and_wait_signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        # 处理出错情况        <span class="token function">handle_fork_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="自动间隔性保存"><a href="#自动间隔性保存" class="headerlink" title="自动间隔性保存"></a>自动间隔性保存</h1><p>服务器每隔一段时间自动执行一次<code>BGSAVE</code>命令，可以设置多个保存条件，只要任意一个条件被满足，服务器就会执行<code>BGSAVE</code>指令</p><pre class=" language-c"><code class="language-c">save <span class="token number">900</span> <span class="token number">1</span>save <span class="token number">300</span> <span class="token number">10</span>save <span class="token number">60</span> <span class="token number">10000</span>服务器在<span class="token number">900</span>秒内进行了至少<span class="token number">1</span>次修改服务器在<span class="token number">300</span>秒内进行了至少<span class="token number">10</span>次修改服务器在<span class="token number">60</span>秒内进行了至少<span class="token number">10000</span>次修改</code></pre><h2 id="设置保存条件"><a href="#设置保存条件" class="headerlink" title="设置保存条件"></a>设置保存条件</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> redisServer<span class="token punctuation">{</span>    <span class="token keyword">struct</span> saveparam <span class="token operator">*</span> saveparams<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> dirty<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//距离上一次成功执行BGSAVE之后,进行修改的次数</span>    time_t lastsave<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//上一次成功执行BGSAVE的时间</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> saveparam<span class="token punctuation">{</span>    time_t seconds<span class="token punctuation">;</span>    <span class="token keyword">int</span> changes<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="检查保存条件是否满足"><a href="#检查保存条件是否满足" class="headerlink" title="检查保存条件是否满足"></a>检查保存条件是否满足</h2><p>默认每隔100ms执行一次<code>serverCron()</code></p><pre class=" language-c"><code class="language-c">def <span class="token function">serverCron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    # 遍历所有保存条件    <span class="token keyword">for</span> saveparam in server<span class="token punctuation">.</span>saveparams<span class="token punctuation">:</span>        save_interval<span class="token operator">=</span><span class="token function">unixtime_now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>server<span class="token punctuation">.</span>lastsave        #如果数据库状态的修改次数超过条件所设置的次数        #并且距离上次保存的时间超过条件所设置的时间        #那么执行保存操作        <span class="token keyword">if</span> server<span class="token punctuation">.</span>dirty <span class="token operator">>=</span> saveparam<span class="token punctuation">.</span>changes and save_interval<span class="token operator">></span>saveparam<span class="token punctuation">.</span>seconds<span class="token punctuation">:</span>            <span class="token function">BGSAVE</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="RDB文件结构"><a href="#RDB文件结构" class="headerlink" title="RDB文件结构"></a>RDB文件结构</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ol><li>REDIS,通过这五个字符,程序可以在载入文件时,快速检查所载入的文件是否是RDB文件</li><li>db_version,记录了版本号</li><li>databases,包含任意个数据库以及他们的键值对数据。</li><li>EOF，标志着RDB文件正文内容的结束</li><li>check_sum,校验和，检查RDB文件是否有出错或损坏的情况</li></ol><h2 id="databases"><a href="#databases" class="headerlink" title="databases"></a>databases</h2><p>每个非空数据库保存三部分：</p><ol><li>SELECTDB 常量，说明接下来会读取一个数据库号码</li><li>db_number，读入后，调用SELECT指令，进行数据库切换，使得之后读入的键值对可以载入到正确的数据库之中</li><li>key_value_pairs，保存了数据库中的所有键值对数据。包含过期时间。</li></ol><h2 id="key-value-pairs"><a href="#key-value-pairs" class="headerlink" title="key_value_pairs"></a>key_value_pairs</h2><ol><li>TYPE记录了value的类型，代表了一种对象类型或底层编码。</li><li>key总是一个字符串对象</li><li>value根据TYPE的指令保存相应类型的内容</li><li>EXPIRETIME_MS常量，代表之后会读取一个以毫秒为单位的过期时间</li><li>ms，保存键值对的过期时间</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> RDB </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式--策略模式</title>
      <link href="posts/eee4fbd1.html"/>
      <url>posts/eee4fbd1.html</url>
      
        <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><h2 id="策略模式定义"><a href="#策略模式定义" class="headerlink" title="策略模式定义"></a>策略模式定义</h2><p>定义了算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化<strong>独立</strong>于使用算法的客户。</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ol><li>找出应用可能需要变化之处,把他们独立出来,不要和那些不需要变化的代码混在一起。封装变化。</li><li>针对接口编程，而不是针对实现编程。</li><li>多用组合，少用继承。</li></ol><h2 id="针对接口编程"><a href="#针对接口编程" class="headerlink" title="针对接口编程"></a>针对接口编程</h2><p>利用多态，程序可以针对超类型编程，执行时会根据实际状况执行到真正的行为。更明确的说是变量的声明类型应该是超类型</p><h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><p>用接口代表每个行为，而行为的每个实现都将实现其中一个接口</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/image-20200923193518271.png" alt="image-20200923193518271"></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="FlyBehavior接口相关"><a href="#FlyBehavior接口相关" class="headerlink" title="FlyBehavior接口相关"></a>FlyBehavior接口相关</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FlyBehavior</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyWithWings</span> <span class="token keyword">implements</span> <span class="token class-name">FlyBehavior</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am flying!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyNoWay</span> <span class="token keyword">implements</span> <span class="token class-name">FlyBehavior</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I can't flying!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyRocketPowered</span> <span class="token keyword">implements</span> <span class="token class-name">FlyBehavior</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I FlyRocketPowered!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="QuackBehavior接口相关"><a href="#QuackBehavior接口相关" class="headerlink" title="QuackBehavior接口相关"></a>QuackBehavior接口相关</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">QuackBehavior</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Quack</span> <span class="token keyword">implements</span> <span class="token class-name">QuackBehavior</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Quack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MuteQuack</span> <span class="token keyword">implements</span> <span class="token class-name">QuackBehavior</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Silence"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Duck相关"><a href="#Duck相关" class="headerlink" title="Duck相关"></a>Duck相关</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Duck</span><span class="token punctuation">{</span>    FlyBehavior flyBehavior<span class="token punctuation">;</span>    QuackBehavior quackBehavior<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFlyBehavior</span><span class="token punctuation">(</span>FlyBehavior flyBehavior<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flyBehavior <span class="token operator">=</span> flyBehavior<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setQuackBehavior</span><span class="token punctuation">(</span>QuackBehavior quackBehavior<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>quackBehavior <span class="token operator">=</span> quackBehavior<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performFly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        flyBehavior<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performQuack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        quackBehavior<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All ducks float"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"display duck"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ModelDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        flyBehavior <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlyNoWay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quackBehavior <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am model Duck"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="MainTest"><a href="#MainTest" class="headerlink" title="MainTest"></a>MainTest</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Duck model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">performFly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">setFlyBehavior</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlyRocketPowered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">performFly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        输出:        I can't flying!        I FlyRocketPowered!         */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop搭建及使用文档</title>
      <link href="posts/80a83e6.html"/>
      <url>posts/80a83e6.html</url>
      
        <content type="html"><![CDATA[<h1 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h1><ol><li>Windows10安装Vmware,并在VMware配置Centos7 linux系统,分配4核CPU,10G内存</li><li>在Centos7中下载docker,配置SSH连接,网络连接</li><li>下载Hadoop镜像（使用的是Github开源的Hadoop镜像<strong>kiwenlau/hadoop-cluster-docker</strong> </li><li>对Hadoop镜像进行配置,启动3个容器，1个master+2个slave,搭建小型分布式集群</li><li>通过SSH连接在idea操纵虚拟机命令行,Xftp操作虚拟机文件系统</li><li>修改start-container.sh,配置docker容器启动方式。通过docker的目录映射,将虚拟机的文件与docker的Hadoop镜像中的文件相互关联,可以方便的在虚拟机中操纵Hadoop的文件。如下图所示，在windows上通过Xftp操作虚拟机的文件，又因为docker的目录映射，可以直接操作Hadoop内的容器。如<strong>run-wordcount.sh</strong>则是配置启动选项的Shell脚本，<strong>input,output</strong>文件夹存放输入输出的相关数据。jar包内存放<strong>WordCount</strong>程序代码<br><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/image-20201106143611228.png" alt="image-20201106143611228"></li><li>寻找网上demo，在本地windows环境用idea写好测试用例，打成jar包放入虚拟机中</li><li>下载的hadoop镜像基于JDK7的，所以进行相应更改</li><li>在run-wordcount.sh中修改输入输出文件位置，需要运行的jar包位置</li><li>对WordCount示例代码进行精读，并进行相关的代码注释</li><li>先对文本进行一些预处理，以及在windows本地测试处理效果</li><li>加入本次数据存储练习需要的词频计算程序逻辑代码</li><li>在Hadoop集群中运行得到根据单词词频降序排列的文件</li><li>对文本结果进行进一步分析与相应处理优化</li></ol><h1 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h1><ol><li>对给的文本通过<strong>StandardProcessing</strong>程序进行预处理:设置好分隔符,即通过非字符进行分隔,然后取字符串长度大于1,且不包含数字的即可认为是单词,用空格分隔,重新写入一个文件standard_review中</li><li>对文本进行简单的词性还原，同样以空格分割，放入文件中</li><li>通过运行Hadoop集群实现词频统计，输出得到文件output.txt</li><li>对得到的output.txt再次使用Hadoop集群进行处理,得到按频率降序排序的结果，输出到文件result.txt中</li><li>对结果进行进一步处理,如去掉count为1的（对应大文本来说，只出现一次一般就是某些id）、去掉一些不合法的html元素（例如br等标签）。</li></ol><h1 id="词性还原判断规则"><a href="#词性还原判断规则" class="headerlink" title="词性还原判断规则"></a>词性还原判断规则</h1><blockquote><p>即要求中的（请考虑什么是不同的单词，例如单复数等均为同一个单词，不同时态也为同一个单词）</p></blockquote><h1 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h1><ol><li>开启虚拟机,用ip addr得到动态ip地址</li><li>用idea ssh连接centos7命令行,xftp连接centos7文件系统</li><li>通过idea的maven插件将WordCount程序打成jar包</li><li>放入容器内的jar文件夹内</li><li><code>cd hadoop-cluster-docker</code></li><li><code>./start-container.sh</code></li><li><code>./start-hadoop.sh</code></li><li><code>./run-wordcount.sh</code></li></ol><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><pre><code>vmware查看动态路由:    ip addrhadoop查看内部的输入输出文件:    hdfs dfs -cat output/part-r-00000    hdfs dfs -ls inputhadoop将输出文件拷贝到docker容器卷:    hdfs dfs -cat output/part-r-00000 &gt; output/output.txthadoop控制执行对应的jar:    hadoop far +jar包名称 +mainClass + 输入路径 + 输出路径hadoop内部日志位置:    cd /usr/local/hadoop/logs查看日志：    config/mapred-site.xml下配置程序日志输出位置</code></pre><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="云服务器运行Demo失败"><a href="#云服务器运行Demo失败" class="headerlink" title="云服务器运行Demo失败"></a>云服务器运行Demo失败</h2><pre><code>Caused by: org.apache.spark.SparkException: Job aborted due to stage failure: Task 2 in stage 3.0 failed 4 times, most recent failure: Lost task 2.3 in stage 3.0 (TID 23, ip-xxx-xxx-xx-xxx.compute.internal, executor 4): ExecutorLostFailure (executor 4 exited caused by one of the running tasks) Reason: Container marked as failed: container_1516900607498_6585_01_000008 on host: ip-xxx-xxx-xx-xxx.compute.internal. Exit status: 137. Diagnostics: Container killed on request. Exit code is 137</code></pre><p>在阿里云轻量级应用服务器上，跑集群的小demo异常退出，后来发现是内存不够的原因（云服务器只有2g的内存），于是换到windows的虚拟机上</p><h2 id="Hadoop集群连接失败"><a href="#Hadoop集群连接失败" class="headerlink" title="Hadoop集群连接失败"></a>Hadoop集群连接失败</h2><pre><code>java.net.ConnectException: Call From xxx to localhost:8020 failed on connection exception: java.net.ConnectException: Connection refused</code></pre><p>关闭Centos7防火墙</p><h2 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h2><pre><code>Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: GC overhead limit exceeded</code></pre><p>在执行NLP进行单词词性还原时,遇到堆空间溢出的情况。我们通过减少训练量（每次只训练500个单词），增大给虚拟机内存（最后是11.3GB）的方式解决</p><h2 id="Jar包运行失败"><a href="#Jar包运行失败" class="headerlink" title="Jar包运行失败"></a>Jar包运行失败</h2><p>使用NLP进行单词词性还原的代码打成jar包后放入Hadoop集群中跑不了，查阅后知道打的jar包必须用含有依赖的。于是把含有依赖的继续放入，报错<code>java.util.zip.ZipException:invalid distance distance too far back</code>，需要检查jar包下载相关jar包时未下载完全，导致服务器进行加载解压时出错。</p><h2 id="NLP处理问题"><a href="#NLP处理问题" class="headerlink" title="NLP处理问题"></a>NLP处理问题</h2><p>NLP处理单词词性还原效果很好，但是运行速度极慢，一晚上只能跑出34MB的结果。于是我们弃用了NLP，通过英语本身的规则进行了粗略的词性还原，速度很快，但是效果一般。</p><p>所以我们将跑出来的部分NLP结果也列出来，进行一个对比。</p>]]></content>
      
      
      <categories>
          
          <category> 常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Redis设计与实现》-------数据库</title>
      <link href="posts/f6b4575b.html"/>
      <url>posts/f6b4575b.html</url>
      
        <content type="html"><![CDATA[<h1 id="服务器中的数据库"><a href="#服务器中的数据库" class="headerlink" title="服务器中的数据库"></a>服务器中的数据库</h1><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> redisServer<span class="token punctuation">{</span>    <span class="token keyword">int</span> dbnum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//服务器的数据库数量</span>    redisDb <span class="token operator">*</span>db<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一个数组,保存着服务器中的所有数据库 默认16</span><span class="token punctuation">}</span></code></pre><h1 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h1><p>每个Redis客户端都有个目标数据库,每当客户端执行数据库读写命令时,目标数据库就成为这些命令的操作对象.默认目标数据库为0号数据库</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> redisClient<span class="token punctuation">{</span>    redisDb <span class="token operator">*</span> db<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录客户端当前使用的数据库</span><span class="token punctuation">}</span>redisClient<span class="token punctuation">;</span></code></pre><h1 id="数据库键空间"><a href="#数据库键空间" class="headerlink" title="数据库键空间"></a>数据库键空间</h1><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> redisDb<span class="token punctuation">{</span>    dict <span class="token operator">*</span>dict<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据库键空间,保存着数据库中的所有键值对</span><span class="token punctuation">}</span> redisDb<span class="token punctuation">;</span></code></pre><p>键空间的键是一个字符串对象,值可以是字符串对象,列表对象,哈希表对象,集合对象,有序集合对象</p><p>所有针对数据库的操作,都是通过对键空间字典进行操作实现的</p><h2 id="添加新键"><a href="#添加新键" class="headerlink" title="添加新键"></a>添加新键</h2><p>就是将新键值对添加到键空间字典里面</p><h2 id="读写键空间时的维护操作"><a href="#读写键空间时的维护操作" class="headerlink" title="读写键空间时的维护操作"></a>读写键空间时的维护操作</h2><ul><li>在读取一个键后(读写操作都要对键进行读取),服务器会根据键是否存在来更新服务器的键空间命中次数</li><li>在读取一个键后,会更新LRU时间,可以计算键的闲置时间</li><li>在读取一个键若发现该键已过期,则会先删除过期键</li><li>在对被监视的键进行修改后,会标记为脏,让事务程序注意该键已经被修改</li></ul><h1 id="设置键的生存时间或过期时间"><a href="#设置键的生存时间或过期时间" class="headerlink" title="设置键的生存时间或过期时间"></a>设置键的生存时间或过期时间</h1><h2 id="设置过期时间"><a href="#设置过期时间" class="headerlink" title="设置过期时间"></a>设置过期时间</h2><ol><li>EXPIRE 设置过期时间,单位为秒</li><li>PEXPIRE 设置过期时间,单位为毫秒</li><li>EXPIREAT 设置过期时间为秒数时间戳</li><li>PEXPIREAT 设置过期时间为毫秒数时间戳</li></ol><p>最后都是转换为PEXPIREAT来执行的</p><h2 id="保存过期时间"><a href="#保存过期时间" class="headerlink" title="保存过期时间"></a>保存过期时间</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> redisDb<span class="token punctuation">{</span>    dict <span class="token operator">*</span>dict<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据库键空间,保存着数据库中的所有键值对</span>    dict <span class="token operator">*</span>expires<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存了数据库中所有键的过期时间,过期字典</span>    <span class="token comment" spellcheck="true">//指向的键就是键空间某个键</span>    <span class="token comment" spellcheck="true">//指向的值为long long类型的过期时间,一个毫秒精度的UNIX时间戳</span><span class="token punctuation">}</span> redisDb<span class="token punctuation">;</span></code></pre><p>键空间的键和过期字典的键都指向同一个键对象,不会出现任何重复对象,也不会浪费任何空间</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">PEXPIREAT</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>expire_time_in_ms<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">#如果给定的键不存在键空间,那么不能设置过期时间</span>    <span class="token keyword">if</span> key <span class="token operator">not</span> <span class="token keyword">in</span> redisDb<span class="token punctuation">.</span>dict<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">#在过期字典中关联键和过期时间</span>    redisDb<span class="token punctuation">.</span>expires<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span>expire_time_in_ms    <span class="token comment" spellcheck="true"># 过期时间设置成功</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><h2 id="移除过期时间"><a href="#移除过期时间" class="headerlink" title="移除过期时间"></a>移除过期时间</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">PERSIST</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#如果给定的键不存在或没设置过期时间,那么直接返回</span>     <span class="token keyword">if</span> key <span class="token operator">not</span> <span class="token keyword">in</span> redisDb<span class="token punctuation">.</span>expires<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">#移除过期字典中给定键的键值对关联</span>    redisDb<span class="token punctuation">.</span>expires<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#移除成功</span>    <span class="token keyword">return</span> <span class="token number">1</span></code></pre><h2 id="计算并返回剩余生存时间"><a href="#计算并返回剩余生存时间" class="headerlink" title="计算并返回剩余生存时间"></a>计算并返回剩余生存时间</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">PTTL</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#如果给定的键不存在数据库</span>    <span class="token keyword">if</span> key <span class="token operator">not</span> <span class="token keyword">in</span> redisDb<span class="token punctuation">.</span>dict<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span>    <span class="token comment" spellcheck="true">#尝试获取过期时间</span>    <span class="token comment" spellcheck="true">#没有则为None</span>    expire_time_in_ms<span class="token operator">=</span>redisDb<span class="token punctuation">.</span>expires<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> expire_time_in_ms <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token comment" spellcheck="true"># 获取当前时间时间戳</span>    now_ms<span class="token operator">=</span>get_current_unix_timestamp_in_ms<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>expire_time_in_ms <span class="token operator">-</span> now_ms<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">TTL</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    ttl_in_ms <span class="token operator">=</span> PTTL<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> ttl_in_ms<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token operator">//</span>处理为<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span>的异常情况        <span class="token keyword">return</span> ttl_in_ms    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#将毫秒转为秒</span>        <span class="token keyword">return</span> ms_to_sec<span class="token punctuation">(</span>ttl_in_ms<span class="token punctuation">)</span></code></pre><h2 id="过期键的判断"><a href="#过期键的判断" class="headerlink" title="过期键的判断"></a>过期键的判断</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_expired</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#尝试获取过期时间</span>    <span class="token comment" spellcheck="true">#没有则为None</span>    expire_time_in_ms<span class="token operator">=</span>redisDb<span class="token punctuation">.</span>expires<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> expire_time_in_ms <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true"># 获取当前时间时间戳</span>    now_ms<span class="token operator">=</span>get_current_unix_timestamp_in_ms<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span>  now_ms<span class="token operator">></span>expire_time_in_ms<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token comment" spellcheck="true"># 已过期</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><h1 id="过期键删除策略"><a href="#过期键删除策略" class="headerlink" title="过期键删除策略"></a>过期键删除策略</h1><h2 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a>定时删除</h2><p>在设置键的过期时间的同时,创建一个定时器,让定时器在键的过期时间来临时,立即执行对键的删除操作</p><p>可以保证过期键会尽可能快地被删除,并释放过期键所占用的内存</p><p>对CPU时间最不友好</p><p>不太现实</p><h2 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h2><p>每次取出键都会检查是否过期,过期则删除</p><p>只有在取出键时才会对键进行过期检查,对CPU时间最友好</p><p>对内存最不友好,会导致内存泄漏:无用的垃圾数据占用了大量内存</p><p>如日志,当不再使用时,会大量积压在数据库,用户以为自动删除了,其实还存在</p><h2 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h2><p>每隔一段时间进行检查,删除里面的过期键</p><p>是前两种的整合与折中</p><p>必须合理地设置删除操作的执行时间和执行效率</p><h1 id="Redis过期键删除策略"><a href="#Redis过期键删除策略" class="headerlink" title="Redis过期键删除策略"></a>Redis过期键删除策略</h1><p>配合使用惰性删除和定期删除两种</p><h2 id="惰性删除策略的实现"><a href="#惰性删除策略的实现" class="headerlink" title="惰性删除策略的实现"></a>惰性删除策略的实现</h2><p>采用expireIfNeeded函数,如果过期则将键删除。就像过滤器，在命令真正执行前，过滤掉过期的输入键，避免命令接触到过期键</p><p>所以每个命令的实现函数必须能同时处理键存在和不存在两种情况</p><h2 id="定期删除策略实现"><a href="#定期删除策略实现" class="headerlink" title="定期删除策略实现"></a>定期删除策略实现</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># 默认每次检查的数据库数量</span>DEFAULT_DB_NUMBERS <span class="token operator">=</span> <span class="token number">16</span><span class="token comment" spellcheck="true"># 默认每个数据库检查的键数量</span>DEFAULT_KEY_NUMBERS <span class="token operator">=</span> <span class="token number">20</span><span class="token comment" spellcheck="true"># 全局变量,记录检查进度</span>current_db <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">activeExpireCycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 初始化要检查的数据库数量</span>    <span class="token comment" spellcheck="true"># 以服务器的数据库数量为主</span>    <span class="token keyword">if</span> serer<span class="token punctuation">.</span>dbnum <span class="token operator">&lt;</span> DEFAULT_DB_NUMBERS<span class="token punctuation">:</span>        db_numbers <span class="token operator">=</span> serer<span class="token punctuation">.</span>dbnum    <span class="token keyword">else</span><span class="token punctuation">:</span>        db_numbers <span class="token operator">=</span> DEFAULT_DB_NUMBERS    <span class="token comment" spellcheck="true">#遍历每个数据库</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>db_numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#如果current_db=服务器的数据库数量</span>        <span class="token comment" spellcheck="true">#则表示已经遍历了服务器的所有数据库一次</span>        <span class="token comment" spellcheck="true">#将current_db=重置为0,开始新一轮</span>        <span class="token keyword">if</span> current_db<span class="token operator">==</span>server<span class="token punctuation">.</span>dbnum<span class="token punctuation">:</span>            current_db<span class="token operator">=</span><span class="token number">0</span>        <span class="token comment" spellcheck="true">#获取当前要处理的数据库</span>        redisDb<span class="token operator">=</span>server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>current_db<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#指向下一个要处理的数据库</span>        current_db<span class="token operator">+=</span><span class="token number">1</span>        <span class="token comment" spellcheck="true">#检查数据库的键</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>DEFAULT_KEY_NUMBERS<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#如果数据库中没有一个键带有过期时间,则跳过该数据库</span>            <span class="token keyword">if</span> redisDb<span class="token punctuation">.</span>expires<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token comment" spellcheck="true">#随机获取一个带过期时间的键</span>            key_with_ttl<span class="token operator">=</span>redisDb<span class="token punctuation">.</span>expires<span class="token punctuation">.</span>get_random_key<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> is_expired<span class="token punctuation">(</span>key_with_ttl<span class="token punctuation">)</span><span class="token punctuation">:</span>                delete_key<span class="token punctuation">(</span>key_with_ttl<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 已到达时间上限,停止处理</span>            <span class="token keyword">if</span> reach_time_limit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合中的常见问题</title>
      <link href="posts/9921f27f.html"/>
      <url>posts/9921f27f.html</url>
      
        <content type="html"><![CDATA[<h1 id="ArrayList和Linkedlist的区别"><a href="#ArrayList和Linkedlist的区别" class="headerlink" title="ArrayList和Linkedlist的区别"></a>ArrayList和Linkedlist的区别</h1><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ul><li>ArrayList基于动态数组实现的非线程安全的集合；LinkedList基于链表实现的非线程安全的集合。</li><li>对于随机index访问的get和set方法，一般ArrayList的速度要优于LinkedList。因为ArrayList直接通过数组下标直接找到元素；LinkedList要移动指针遍历每个元素直到找到为止。LinkedList集合不支持高效的随机访问（RandomAccess）</li><li>新增和删除元素，一般LinkedList的速度要优于ArrayList。因为ArrayList在新增和删除元素时，要移动数据来填补被删除的对象的空间，甚至可能扩容和复制数组；LinkedList实例化对象需要时间外，只需要修改指针即可。</li><li>ArrayList的空间浪费主要体现在在list列表的结尾预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗相当的空间。LinkedList需要更多的内存，因为ArrayList的每个索引的位置是实际的数据，而LinkedList中的每个节点中存储的是实际的数据和前后节点的位置。</li></ul><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>如果应用程序对数据有较多的随机访问，ArrayList对象要优于LinkedList对象；</li><li>如果应用程序有更多的插入或者删除操作，较少的随机访问，LinkedList对象要优于ArrayList对象；</li><li>不过ArrayList的插入，删除操作也不一定比LinkedList慢，如果在List靠近末尾的地方插入，那么ArrayList只需要移动较少的数据，而LinkedList则需要一直查找到列表尾部，反而耗费较多时间，这时ArrayList就比LinkedList要快。</li><li>LinkedList还实现了Deque接口，Deque接口是Queue接口的子接口，它代表一个双向队列，因此LinkedList可以作为双向队列 ，栈</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> ArrayList </tag>
            
            <tag> Linkedlist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="posts/a2c3ad19.html"/>
      <url>posts/a2c3ad19.html</url>
      
        <content type="html"><![CDATA[<h1 id="两个线程交替打印12345和ABCDE"><a href="#两个线程交替打印12345和ABCDE" class="headerlink" title="两个线程交替打印12345和ABCDE"></a>两个线程交替打印12345和ABCDE</h1><h2 id="使用wait、notify"><a href="#使用wait、notify" class="headerlink" title="使用wait、notify"></a>使用wait、notify</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"numThread"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//打印数字</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//唤醒其他等待的线程</span>                        lock<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 让当前线程释放锁资源，进入wait状态</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"charThread"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ch<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//唤醒其他等待的线程</span>                        lock<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 让当前线程释放锁资源，进入wait状态</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                lock<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span><span class="token string">"numThread"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span><span class="token string">"charThread"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="使用condition条件唤醒"><a href="#使用condition条件唤醒" class="headerlink" title="使用condition条件唤醒"></a>使用condition条件唤醒</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Condition condition1 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Condition condition2 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> times<span class="token punctuation">,</span> <span class="token keyword">int</span> currentState<span class="token punctuation">,</span> Condition cur<span class="token punctuation">,</span> Condition next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> currentState<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cur<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>currentState <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ch<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                state<span class="token operator">++</span><span class="token punctuation">;</span>                next<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> condition1<span class="token punctuation">,</span> condition2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"numThread"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> condition2<span class="token punctuation">,</span> condition1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"charThread"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="两个线程交替打印奇数和偶数"><a href="#两个线程交替打印奇数和偶数" class="headerlink" title="两个线程交替打印奇数和偶数"></a>两个线程交替打印奇数和偶数</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        lock<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//防止有子线程被阻塞未被唤醒，导致主线程不退出</span>                lock<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"evenThread"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"oddThread"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="三个线程分别打印-A，B，C"><a href="#三个线程分别打印-A，B，C" class="headerlink" title="三个线程分别打印 A，B，C"></a>三个线程分别打印 A，B，C</h1><h2 id="使用condition条件唤醒-1"><a href="#使用condition条件唤醒-1" class="headerlink" title="使用condition条件唤醒"></a>使用condition条件唤醒</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Condition condition1 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Condition condition2 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Condition condition3 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> targetState<span class="token punctuation">,</span> Condition current<span class="token punctuation">,</span> Condition next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>state <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">!=</span> targetState<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    current<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                state<span class="token operator">++</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                next<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> condition1<span class="token punctuation">,</span> condition2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> condition2<span class="token punctuation">,</span> condition3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> condition3<span class="token punctuation">,</span> condition1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> wait </tag>
            
            <tag> condition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Redis设计与实现》-------对象</title>
      <link href="posts/a3175fad.html"/>
      <url>posts/a3175fad.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ol start="2"><li><p>基于之前的数据结构创建一个对象系统。包括字符串对象，列表对象，哈希对象，集合对象，有序集合对象五种</p></li><li><p>可以在执行命令之前，根据对象类型判断一个对象能否执行给定的命令</p></li><li><p>可以针对不同的使用场景，为对象设置多种不同的数据结构实现，从而优化对象在不同场景下的使用效率</p></li><li><p>实现基于引用计数的内存回收机制，实现内存共享机制，让多个数据库键共享同一个对象节约内存</p></li><li><p>对象带有访问时间记录信息，记录数据库键的空转时间</p></li></ol><h1 id="对象的类型和编码"><a href="#对象的类型和编码" class="headerlink" title="对象的类型和编码"></a>对象的类型和编码</h1><p>使用对象来表示数据库的键和值，新创建一个键值对时，会创建两个对象分别代表键和值</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> redisObject<span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> type<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类型</span>    <span class="token keyword">unsigned</span> encoding<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编码</span>    <span class="token keyword">void</span> <span class="token operator">*</span> ptr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指向底层实现数据结构的指针</span><span class="token punctuation">}</span></code></pre><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p><code>type</code>属性记录了对象的类型，即五种对象类型之一<br>对于一个键值对，键总是字符串对象，值可以是五种对象类型之一</p><h2 id="编码和底层实现"><a href="#编码和底层实现" class="headerlink" title="编码和底层实现"></a>编码和底层实现</h2><ol><li>对象的ptr指针指向对象的底层实现数据结构，而这些数据结构由对象的encoding属性决定，即之前学习的几种数据结构</li><li>每种类型的对象都至少使用了两种不同的编码</li><li>通过<code>encoding</code>属性来设定使用的编码，极大地提升了灵活性和效率，可以根据不同的使用场景来为一个对象设置不同的编码，从而优化对象在某一场景下的效率</li></ol><h1 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h1><ol><li>字符串对象的编码可以是int，raw，embstr</li><li>如果字符串对象保存整数值，且可以用long表示，则会将整数值保存在ptr中，enconding设为int</li><li>如果保存字符串值，并且长度大于39字节，就用<code>SDS</code>保存，并且设为raw</li><li>如果保存字符串值，并且长度小于39字节，就用<code>embstr</code>编码保存，并且设为embstr</li></ol><h2 id="embstr"><a href="#embstr" class="headerlink" title="embstr"></a>embstr</h2><p>专门用来保存短字符串的一种优化编码方式，和SDS差不多<br>不同的是，只调用一次内存分配函数来分配一块连续的空间，空间依次包含redisObject，sdshdr两个结构<br>优点：内存分配与释放次数由两次变为一次；字符串所有的数据保存在一块连续的内存中，更好利用缓存</p><h2 id="编码的转换"><a href="#编码的转换" class="headerlink" title="编码的转换"></a>编码的转换</h2><ol><li>int编码的字符串对象如果操作后保存的不再是整数值，而是字符串值，则编码变为raw</li><li>embstr编码的字符串对象只是可读的，对它执行任何修改命令，都会编程raw</li></ol><h1 id="列表对象"><a href="#列表对象" class="headerlink" title="列表对象"></a>列表对象</h1><p>编码可以是<code>ziplist</code>,<code>linkedlist</code>。ziplist使用压缩列表作为底层实现，linkedlist采用双端链表作为底层实现。每个双端链表节点都保持一个字符串对象</p><p>字符串对象是Redis 5种类型的对象中唯一一种会被其他四种对象嵌套的对象</p><h2 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h2><p>使用ziplist编码的情况：</p><ol><li>列表对象保存的所有字符串元素都小于64字节</li><li>列表保存的元素数量小于512</li></ol><h1 id="哈希对象"><a href="#哈希对象" class="headerlink" title="哈希对象"></a>哈希对象</h1><p>编码可以是ziplist,hashtable。</p><p>用ziplist则将键值对压入列表表尾，键值对紧挨一起，键在前，值在后。类似队列</p><p>hashtable编码用字典作为底层实现，字典的每个键与值都是一个字符串对象</p><h2 id="编码转换-1"><a href="#编码转换-1" class="headerlink" title="编码转换"></a>编码转换</h2><p>使用ziplist编码的情况：</p><ol><li>列表对象保存的所有字符串元素都小于64字节</li><li>列表保存的元素数量小于512</li></ol><h1 id="集合对象"><a href="#集合对象" class="headerlink" title="集合对象"></a>集合对象</h1><p>编码可以是intset,hashtable。</p><p>用intset编码的集合使用整数集合作为底层实现</p><p>用hashtable编码的集合使用字典作为底层实现，每个键是一个字符串对象，而值设为NULL</p><h2 id="编码转换-2"><a href="#编码转换-2" class="headerlink" title="编码转换"></a>编码转换</h2><p>使用intset编码的情况：</p><ol><li>列表对象保存的都是整数值</li><li>列表保存的元素数量小于512</li></ol><h1 id="有序集合对象"><a href="#有序集合对象" class="headerlink" title="有序集合对象"></a>有序集合对象</h1><p>有序集合的编码可以是ziplist或者skiplist</p><p>用ziplist编码则每个集合元素使用两个紧挨的压缩列表节点来保存，第一个节点保存元素的成员，第二个保存元素的分值</p><h2 id="用skiplist编码实现"><a href="#用skiplist编码实现" class="headerlink" title="用skiplist编码实现"></a>用skiplist编码实现</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> zset<span class="token punctuation">{</span>    zskiplist <span class="token operator">*</span>zsl<span class="token punctuation">;</span>    dict <span class="token operator">*</span> dict<span class="token punctuation">;</span><span class="token punctuation">}</span> zset<span class="token punctuation">;</span></code></pre><p>zset中的zsl跳跃表按分值从小到大保存了所有集合元素</p><p>每个跳跃表节点中：object属性保存元素的成员，score属性保存元素的分值</p><p>此外，dict中，字典的键保存元素的成员，值保存元素的分值，这样，通过字典可以用O(1)的复杂度查找给定成员的分值</p><p>这两种数据结构都会通过指针来共享相同元素的成员和分值，所以使用跳跃表和字典来保存集合元素不会产生任何重复成员或者分值，不会浪费额外内存</p><h2 id="编码转换-3"><a href="#编码转换-3" class="headerlink" title="编码转换"></a>编码转换</h2><p>使用ziplist编码的情况：</p><ol><li>有序集合保存的所有元素长度都小于64字节</li><li>有序集合保存的元素数量小于128个</li></ol><h1 id="类型检查和命令多态"><a href="#类型检查和命令多态" class="headerlink" title="类型检查和命令多态"></a>类型检查和命令多态</h1><p>在执行一个类型的特定命令之前，服务器会检查输入数据库键的值对象是否为执行命令所需的指令，如果是，服务器就会对键执行指定的命令。否则将拒绝执行命令，并向客户端返回一个类型错误。</p><p>类型检查是通过<code>redisObject</code>结构的type属性来实现的 </p><h2 id="多态命令的实现"><a href="#多态命令的实现" class="headerlink" title="多态命令的实现"></a>多态命令的实现</h2><p>Redis除了会根据值对象的类型来判断键是否能够执行指定指令之外，还会根据值对象的编码方式，选择正确的命令实现代码来执行命令</p><p>例如，<code>LLEN命令</code>是多态的，只要执行LLEN命令的是列表键，那么无论值对象使用的是ziplist编码还是linkedlist编码，命令都可以正常执行</p><p>DEL，TYPE等命令也是多态命令，无论输入的键是什么类型，这些命令都可以正常执行。区别在于，DEL，TYPE等命令是基于类型的多态，一个命令可以处理多种不同的类型的键，LLen命令是基于编码的多态，一个命令可以同时用于处理多种不同编码</p><h1 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h1><p>基于引用计数法实现内存回收机制，通过跟踪对象的引用计数信息，在适当的时候自动释放对象并进行内存回收</p><ol><li>创建对象，引用计数值为1</li><li>对象被新程序使用，引用计数值+1</li><li>对象不被一个程序使用，引用计数值-1</li><li>引用计数值为0时，释放对象占用的内存</li></ol><h1 id="对象共享"><a href="#对象共享" class="headerlink" title="对象共享"></a>对象共享</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>让多个键共享同一个值对象步骤：</p><ol><li>将数据库键的值指向一个现有的值对象</li><li>将被共享的值对象引用计数值+1</li></ol><h2 id="内置整数"><a href="#内置整数" class="headerlink" title="内置整数"></a>内置整数</h2><p>Redis在初始化服务器时，会创建一万个字符串对象，存储[0,9999]的整数值。如果需要用到这些字符串对象，服务器则会使用这些共享对象，而不会新创建对象。</p><p>这些共享对象不仅仅只有字符串键可以使用，那些在数据结构中嵌套了字符串对象的对象都可以使用这些共享对象</p><h2 id="为什么不共享包含字符串的对象"><a href="#为什么不共享包含字符串的对象" class="headerlink" title="为什么不共享包含字符串的对象"></a>为什么不共享包含字符串的对象</h2><p>只有在共享对象和目标对象完全相同的情况下，程序才会将共享对象用作键的值对象</p><p>一个共享对象保存的值越复杂，则验证共享对象和目标对象是否相同所需的复杂度越高：</p><ol><li>共享对象是整数值的字符串对象，验证操作为<code>O(1)</code></li><li>共享对象是保存字符串值的字符串对象，验证操作为<code>O(N)</code></li><li>共享对象是包含多个值的对象（如列表），验证操作为<code>O(N^2)</code></li></ol><h1 id="对象的空转时间"><a href="#对象的空转时间" class="headerlink" title="对象的空转时间"></a>对象的空转时间</h1><p><code>redisObject</code>结构包含属性lru,记录了对象最后一次被命令程序访问的时间。可用当前时间-键的值对象的lru时间求得空转时间</p><p>可通过设置，使得当服务器占用的内存数超过了，<code>maxmemory</code>的上限时，空转时间较高的那部分键会优先被服务器释放，从而回收内存</p>]]></content>
      
      
      <categories>
          
          <category> Redis学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Redis设计与实现》-------压缩列表</title>
      <link href="posts/cbdc6ef6.html"/>
      <url>posts/cbdc6ef6.html</url>
      
        <content type="html"><![CDATA[<h1 id="压缩列表的构成"><a href="#压缩列表的构成" class="headerlink" title="压缩列表的构成"></a>压缩列表的构成</h1><p>压缩列表是列表键和哈希键的底层实现之一,当一个列表键只包含少量列表项,并且每个列表项都是<strong>小整数或较短字符串</strong>，则用压缩列表作为底层实现</p><p>压缩列表是为了<strong>节约内存</strong>而开发的，是由一系列特殊编码的连续内存块组成的顺序型数据结构</p><ul><li><code>zlbytes</code>:记录整个压缩列表所占用的内存字节数，在内存重分配或zlend位置时使用</li><li><code>zltail</code>：记录压缩列表表尾节点距压缩列表的起始地址有多少字节，通过该偏移量，可无须遍历整个压缩列表就可以确定表尾节点的地址</li><li><code>zllen</code>：记录了压缩列表包含的节点数量</li><li><code>entryX</code>：压缩列表包含的各个节点，节点长度由节点包含的内容决定</li><li><code>zlend</code>：特殊值oxFF,用于标记压缩列表的末端</li></ul><h1 id="压缩列表节点的构成"><a href="#压缩列表节点的构成" class="headerlink" title="压缩列表节点的构成"></a>压缩列表节点的构成</h1><h2 id="previous-entry-length"><a href="#previous-entry-length" class="headerlink" title="previous_entry_length"></a>previous_entry_length</h2><p>以字节为单位，记录压缩列表<strong>前一个节点</strong>的长度。所以可以通过指针运算，根据当前节点的起始地址得到前一个节点的起始地址，用于从表尾到表头的遍历</p><p>指向表尾节点的指针 可以通过压缩列表的起始地址的指针加上<code>zltail</code></p><h2 id="encoding"><a href="#encoding" class="headerlink" title="encoding"></a>encoding</h2><p>记录节点的<code>content</code>属性所保存数据的类型及长度</p><h2 id="content"><a href="#content" class="headerlink" title="content"></a>content</h2><p>负责保存节点的值，值的类型和属性由<code>encoding</code>决定</p><h1 id="连锁更新"><a href="#连锁更新" class="headerlink" title="连锁更新"></a>连锁更新</h1><p>如果在压缩列表中，有多个介于250-153字节的节点e1-eN,记录这些节点的长度只需要1字节长的<strong>previous_entry_length</strong>，所以e1-eN所有节点的<strong>previous_entry_length</strong>都是1字节长</p><p>但如果将一个大于254字节的新节点new加入压缩列表的头节点，则new成为e1的前置节点。而这样e1的<strong>previous_entry_length</strong>属性不足以保存new的长度，所以进行空间重分配，变成5字节大小</p><p>这样e1的长度大于254字节了，e2的<strong>previous_entry_length</strong>也不足以保存e1的长度，也扩展成5字节大小。这样就进行连续多次空间扩展，即连锁更新</p><p>删除节点也会引发连锁更新</p><p>连锁更新在最坏情况下需要对压缩列表进行N次空间重分配操作，每次操作最坏<code>O(N)</code>,所以连锁更新最坏时间复杂度为<code>O(N^2)​</code>.</p><p>但是发生的机率比较低：1. 恰好有多个连续的，长度介于250-153字节的节点的情况并不多见 2. 即使出现连锁更新，只要被更新的节点数量不多，就不会对性能有影响所以平均复杂度为O(N)</p>]]></content>
      
      
      <categories>
          
          <category> Redis学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 压缩列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Redis设计与实现》-------整数集合</title>
      <link href="posts/e6a53be5.html"/>
      <url>posts/e6a53be5.html</url>
      
        <content type="html"><![CDATA[<h1 id="整数集合的实现"><a href="#整数集合的实现" class="headerlink" title="整数集合的实现"></a>整数集合的实现</h1><p>当一个集合只包含整数值元素,并且数量不多时,<code>redis</code>就会采用整数集合作为集合键的底层实现</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> strcut intset<span class="token punctuation">{</span>    uint32_t encoding<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编码方式</span>    uint32_t length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//元素数量</span>    int8_t contents<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存元素的数组</span><span class="token punctuation">}</span></code></pre><p>可以保存类型为 int16_t,int32_t,int64_t的非重复整数值,且元素在<code>contents数组</code>中有序排列</p><h1 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h1><p>每当添加一个新元素到整数集合里面,并且新元素的类型比<strong>现有所有元素类型</strong>都长,需要先对整数集合进行升级,再加入该元素</p><ol><li>根据新元素类型,扩展整数集合底层数组的空间大小,并为新元素分配空间</li><li>将底层数组现有的所有元素转换成与新元素相同的类型,并且放置到正确位置上,仍需<strong>保证有序性</strong></li><li>将新元素添加到底层数组里</li></ol><p>每次添加新元素都有可能引起升级,而每次升级都需要对底层数组所有元素进行类型转换,所以添加新元素时间复杂度为<code>O(N)</code></p><p>新元素要么小于现有所有元素,则放在底层数组的索引0的位置;要么大于所有元素,放在底层数组索引 <code>length-1</code>的位置</p><h1 id="升级的好处"><a href="#升级的好处" class="headerlink" title="升级的好处"></a>升级的好处</h1><h2 id="提升灵活性"><a href="#提升灵活性" class="headerlink" title="提升灵活性"></a>提升灵活性</h2><p>整数集合可以通过自动升级底层数组来适应新元素,所以可以将 int16_t,int32_t,<code>int64_t</code>随意地添加到集合中,不必担心类型错误</p><h2 id="节约内存"><a href="#节约内存" class="headerlink" title="节约内存"></a>节约内存</h2><p>既可以让集合能<strong>同时保存三种不同类型</strong>的值,又可以确保升级只在必要时进行</p><h1 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h1><p><strong>不支持</strong>降级操作,即使把之前因为他而升级的元素删除,底层数组还仍然是加入那个元素后的类型</p>]]></content>
      
      
      <categories>
          
          <category> Redis学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 整数集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Redis设计与实现》-------跳跃表</title>
      <link href="posts/27ebf426.html"/>
      <url>posts/27ebf426.html</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>通过在每个节点中维持多个指向其他节点的指针,从而快速访问节点</li><li>查找速度:平均<code>O(log N)</code>,最坏<code>O(N)</code></li><li>支持顺序性操作</li><li>使用跳跃表作为有序集合键的底层实现之一</li></ul><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ol><li>每一层都是一个有序的链表,最底层(L1)的链表包含<strong>所有元素</strong></li><li>如果一个元素出现在第 n 层的链表中，则它也出现在第<code>n+1</code>层</li><li>搜索先从上层搜索,当前面的元素比<code>target</code>大时,则向下一级搜索(即向着更密集的数据找)</li><li>总体来看从左上往右下寻找</li></ol><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/IMG_20200818_102630.jpg" alt="IMG_20200818_102630"></p><p>level:表中层数最大的节点的层数</p><p>length:节点数量</p><h2 id="跳跃表节点"><a href="#跳跃表节点" class="headerlink" title="跳跃表节点"></a>跳跃表节点</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> zskiplistNode<span class="token punctuation">{</span>    <span class="token keyword">struct</span> zskiplistNode <span class="token operator">*</span> backward<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后退指针</span>    <span class="token keyword">double</span> score<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分值</span>    robj <span class="token operator">*</span> obj<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成员对象</span>    <span class="token keyword">struct</span> zskiplistLevel <span class="token comment" spellcheck="true">//层</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> zskiplistNode <span class="token operator">*</span> forward<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//前进指针</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> span<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跨度</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="层"><a href="#层" class="headerlink" title="层"></a>层</h3><p><code>level数组</code>可以包含多个元素,每个元素都包含一个指向其他节点的指针,来加快访问其他节点的速度</p><p>感觉幂次规律,随机生成一个<code>[1,32]</code>的值作为level数组的大小,即层的高度</p><h3 id="前进指针"><a href="#前进指针" class="headerlink" title="前进指针"></a>前进指针</h3><p>每个层都有一个指向表尾方向的前进指针(<code>level[i].forward</code>)</p><h3 id="跨度"><a href="#跨度" class="headerlink" title="跨度"></a>跨度</h3><p>记录两个节点之间的距离</p><p>指向NULL的所有前进指针的跨度都为0</p><p>跨度实际是用来计算排位的:在查找某个节点过程中,将沿途访问的所有层的跨度累积起来,得到的结果就是目标节点在跳跃表中的排位(即该节点是第几个节点)</p><h3 id="后退指针"><a href="#后退指针" class="headerlink" title="后退指针"></a>后退指针</h3><p>可以先通过跳跃表的tail指针访问表尾节点,然后通过后退指针访问倒数第二个节点…,直到遇到指向NULL的后退指针</p><h3 id="分值和成员"><a href="#分值和成员" class="headerlink" title="分值和成员"></a>分值和成员</h3><ol><li>分值:跳跃表中所有节点都按分值从小到大排序</li><li>成员对象:指向<strong>SDS字符串</strong>对象的指针</li><li>跳跃表中成员对象必须唯一,但是分值可以相同</li><li>分值相同的节点按照成员变量的字典序排序</li></ol><h2 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> zskiplist<span class="token punctuation">{</span>    <span class="token keyword">struct</span> zskiplistNode <span class="token operator">*</span> header<span class="token punctuation">,</span><span class="token operator">*</span>tial<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表中节点的数量</span>    <span class="token keyword">int</span> level<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表中层数最大的节点的层数</span><span class="token punctuation">}</span> zskiplist<span class="token punctuation">;</span></code></pre><p>使得能<code>O(1)</code>访问表头表尾节点,访问跳跃表长度,获取表中层数最大的节点的层数</p>]]></content>
      
      
      <categories>
          
          <category> Redis学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 跳跃表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Redis设计与实现》-------字典</title>
      <link href="posts/4ea31ca4.html"/>
      <url>posts/4ea31ca4.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>Redis</code>的数据库底层就是用字典实现的</p><p>字典也是<strong>哈希键</strong>的底层实现之一</p><h1 id="字典的实现"><a href="#字典的实现" class="headerlink" title="字典的实现"></a>字典的实现</h1><p>字典采用哈希表作为底层实现,一个哈希表可以有多个哈希表节点,每个节点保存了一个键值对</p><p>每个字典带有<strong>两个哈希表</strong>,一个平时使用,一个仅仅在rehash时使用</p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> dictht<span class="token punctuation">{</span>    dictEntry <span class="token operator">*</span><span class="token operator">*</span> table<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//哈希表数组</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sizemask<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//哈希表大小掩码,用于计算索引值 总=size-1</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> used<span class="token punctuation">;</span><span class="token punctuation">}</span>dictht<span class="token punctuation">;</span></code></pre><p><code>sizemask</code>和哈希值一起决定一个键应该放到table数组里面的哪个索引上</p><h2 id="哈希表节点"><a href="#哈希表节点" class="headerlink" title="哈希表节点"></a>哈希表节点</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> dictEntry<span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>    <span class="token keyword">union</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">;</span>        uint64_t u64<span class="token punctuation">;</span>        int64_t s64<span class="token punctuation">;</span>    <span class="token punctuation">}</span> v<span class="token punctuation">;</span>    <span class="token keyword">struct</span> dictEntry <span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token punctuation">}</span>dictEntry<span class="token punctuation">;</span></code></pre><p>值可以是应该指针,或者是应该uint64_t类型的整数,或是一个int64_t整数</p><p>next属性指向另一个哈希表节点的指针,可以将多个哈希值相同的键值对连接在一起,以解决键冲突</p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> dict<span class="token punctuation">{</span>    dicType <span class="token operator">*</span> type<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类型特定函数</span>    <span class="token keyword">void</span> <span class="token operator">*</span> privdata<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//私有数据</span>    ditcht ht<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//哈希表</span>    <span class="token keyword">int</span> rehashidx<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//rehash索引,当rehash不再进行时,值为-1</span><span class="token punctuation">}</span>dict<span class="token punctuation">;</span></code></pre><ol><li><code>type</code>,<code>privdata</code>属性是针对不同类型的键值对,为创建多态字典而设置的</li><li>每个<code>dicType</code>结构保存了一簇用于操作特定类型键值对的函数</li><li><code>privdata</code>属性保存了需要传给那些类型特定函数的可选参数</li><li>ht数组中,每个项都是<strong>ditcht哈希表</strong>,一般只使用<code>ht[0]</code>,ht[1]只会在ht[0]进行rehash时使用</li><li><code>rehashidx</code>记录rehash目前的进度</li></ol><h1 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h1><p>程序先通过键计算哈希值hash,在计算索引值(<code>index=hash &amp; sizemask</code>),再根据索引将包含新键值对的哈希表节点放到哈希表数组的指定索引上</p><h1 id="解决键冲突"><a href="#解决键冲突" class="headerlink" title="解决键冲突"></a>解决键冲突</h1><p>用链地址法,多个分配到同一个索引的节点用单向链表连接起来。且用头插法，将新节点添加到链表的表头位置 </p><h1 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h1><h2 id="时机"><a href="#时机" class="headerlink" title="时机"></a>时机</h2><ol><li>若没有在执行<code>BGSAVE</code>或<code>BGREWRITEAOF</code>命令,则哈希表负载因子&gt;=1时rehash</li><li>若在执行BGSAVE或BGREWRITEAOF命令,则哈希表负载因子&gt;=5时rehash</li><li><code>load_factor=ht[0].used / ht[0].size</code></li><li>以上的不同是因为,执行那两个命令时,Redis需要创建当前服务器进程的<strong>子进程</strong>,在子进程存在期间,服务器会提高执行扩展操作所需的负载因子,从而京可能避免在子进程存在期间进行哈希表的扩展操作,可以避免不必要的内存写入操作,最大限度地节约内存</li><li>当负载因子&lt;0.1,则自动进行收缩操作</li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>为字典的ht[1]哈希表分配空间:如果是扩展,则ht[1]大小为第一个&gt;= <code>ht[0].used*2</code> 的2^n​。如果是收缩，则是第一个&gt;= <code>ht[0].used</code> 的2^n​。</li><li>将保存在ht[0]的所有键值对rehash到ht[1]上面，即重新计算哈希值和索引值，然后放到ht[1]的指定位置上</li><li>当ht[0]所有的键值对都迁移到了ht[1]，则将ht[1]设置为ht[0]，并且在ht[1]新建一个空哈希表</li></ol><h1 id="渐进式rehash"><a href="#渐进式rehash" class="headerlink" title="渐进式rehash"></a>渐进式rehash</h1><ol><li>rehash时，服务器不是一次就将ht[0]里面的所有键值对全部rehash到ht[1]。而是分多次，<strong>渐进式</strong>地将ht[0]里面的键值对慢慢地<code>rehash</code>到ht[1]</li><li>在执行操作之外，顺带将键值对rehash到ht[1]中，把rehash键值对所需的计算工作均摊到每次对字典的增删改查操作之中</li><li>在进行渐进式rehash时，字典<strong>同时</strong>使用ht[0]，ht[1]。所以操作同时在两个哈希表中进行，即如果要查找一个键，会先在ht[0]找，没找到就继续到ht[1]中找</li><li>新添加的键值对直接保存到ht[1]中</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 字典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Redis设计与实现》-------链表</title>
      <link href="posts/1ecd581d.html"/>
      <url>posts/1ecd581d.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>被广泛用于实现<code>Redis</code>的各种功能,如列表键,发布与订阅,慢查询,监视器等等</p><h2 id="链表和链表节点的实现"><a href="#链表和链表节点的实现" class="headerlink" title="链表和链表节点的实现"></a>链表和链表节点的实现</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> listNode<span class="token punctuation">{</span>    <span class="token keyword">struct</span> listNode <span class="token operator">*</span> prev<span class="token punctuation">;</span>    <span class="token keyword">struct</span> listNode <span class="token operator">*</span> next<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span>listNode<span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> list<span class="token punctuation">{</span>    listNode <span class="token operator">*</span>head<span class="token punctuation">;</span>    listNode <span class="token operator">*</span>tail<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>dup<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//节点值的复制函数</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//节点值的释放函数</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>match<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> ptr<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//节点值的对比函数</span><span class="token punctuation">}</span></code></pre><h2 id="特性总结"><a href="#特性总结" class="headerlink" title="特性总结"></a>特性总结</h2><ul><li>双端,无环,带表头和表尾指针,带链表长度计数器</li><li>多态:可以保存各种不同类型的值</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> Redis </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Redis设计与实现》-------简单字符串</title>
      <link href="posts/303ff37b.html"/>
      <url>posts/303ff37b.html</url>
      
        <content type="html"><![CDATA[<h1 id="SDS简介"><a href="#SDS简介" class="headerlink" title="SDS简介"></a>SDS简介</h1><ul><li>使用<strong>简单动态字符串</strong>(simple dynamic string SDS)作为默认字符串</li><li>c字符串只作为字符串字面量,用在无需对字符串值进行修改的地方</li><li>包含字符串值的键值对在底层都是用<code>SDS</code>实现的</li></ul><h1 id="SDS的定义"><a href="#SDS的定义" class="headerlink" title="SDS的定义"></a>SDS的定义</h1><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> sdshdr<span class="token punctuation">{</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录buf数组中已使用字节的数量 为字符串长度</span>    <span class="token keyword">int</span> free<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//未使用的数量</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字节数组,用来保存字符串</span><span class="token punctuation">}</span></code></pre><ol><li><code>buf数组</code>以空字符结尾,且最后的空字符不算在len里面</li><li>该空字符由<code>SDS</code>函数自动完成,对<code>SDS</code>用户透明</li></ol><h1 id="SDS与C字符串的区别"><a href="#SDS与C字符串的区别" class="headerlink" title="SDS与C字符串的区别"></a>SDS与C字符串的区别</h1><h2 id="1-获取字符串长度所需复杂度从O-N-降低到​O-1-​"><a href="#1-获取字符串长度所需复杂度从O-N-降低到​O-1-​" class="headerlink" title="1.获取字符串长度所需复杂度从O(N)降低到​O(1)​"></a>1.获取字符串长度所需复杂度从O(N)降低到​O(1)​</h2><h2 id="2-杜绝了缓冲区溢出"><a href="#2-杜绝了缓冲区溢出" class="headerlink" title="2.杜绝了缓冲区溢出"></a>2.杜绝了缓冲区溢出</h2><p>例如c进行字符串拼接,需要假设已经为字符串分配了足够的内存以容纳要拼接的字符串,否则就会溢出。<br><strong>SDS空间分配策略</strong>完全杜绝了发生缓冲区溢出的可能性.当要对SDS进行修改时,会先检查空间是否满足修改所需的要求,如果不满足,则会自动将<strong>SDS的空间扩展</strong>,然后再执行实际的修改操作</p><h2 id="减少修改字符串时带来的内存重分配次数"><a href="#减少修改字符串时带来的内存重分配次数" class="headerlink" title="减少修改字符串时带来的内存重分配次数"></a>减少修改字符串时带来的内存重分配次数</h2><p>C字符串底层实现总是一个<code>N+1</code>个字符长的数组,每次对该数组进行增加或缩短,总要进行一次<strong>内存重分配</strong>操作。如果是增长,则要内存重分配扩展底层数组的空间大小。如果是缩短，则执行操作后，需要内存重分配来释放空间，避免内存泄漏.</p><p>Redis通过<strong>未使用空间</strong>解除了字符串长度和底层数组长度之间的关联</p><h3 id="空间预分配"><a href="#空间预分配" class="headerlink" title="空间预分配"></a>空间预分配</h3><p>用于优化<code>SDS</code>的字符串增长操作，在扩展SDS空间之前，会先检查未使用的空间是否足够，如果足够，则直接使用未使用空间，无需进行内存重分配。</p><p>在对一个SDS进行修改，并且需要对SDS进行空间扩展时，不仅为SDS分配修改所需要的空间，还会分配额外的未使用空间。</p><p>如果修改后 <code>SDS.len &lt; 1MB</code>,程序会分配给和len一样的长度给free</p><p>如果修改后 <code>SDS.len &gt;= 1MB</code>,程序会分配1MB给free</p><h3 id="惰性空间释放"><a href="#惰性空间释放" class="headerlink" title="惰性空间释放"></a>惰性空间释放</h3><p>用于优化<code>SDS字符串</code>缩短操作：不立即回收缩短后多出来的字节，而是用<code>free</code>记录。避免了缩短字符串时所需的内存重分配操作，并且为将来可能的增长提供了优化</p><p>API也让我们在需要时，真正释放SDS的未使用空间，不用担心惰性空间释放策略会造成内存浪费</p><h2 id="二进制安全"><a href="#二进制安全" class="headerlink" title="二进制安全"></a>二进制安全</h2><ol><li>C字符串并且符合特定的编码，并且除字符串的末尾外，不能包含空字符，使得他只能保存文本数据</li><li>Redis以处理二进制的方式处理SDS存放在<code>buf数组</code>的数据，使用<code>len</code>而不是空字符判断字符串是否结束。所以他可以保存<strong>任意格式</strong>的二进制数据。</li></ol><h2 id="兼容部分C字符串函数"><a href="#兼容部分C字符串函数" class="headerlink" title="兼容部分C字符串函数"></a>兼容部分C字符串函数</h2><p>SDS保存数据的末尾总是为空字符，所以让那些保存文本数据的SDS可以重用一部分<code>&lt;string.h&gt;库</code>定义的函数</p>]]></content>
      
      
      <categories>
          
          <category> Redis学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP学习笔记</title>
      <link href="posts/ca1ec03d.html"/>
      <url>posts/ca1ec03d.html</url>
      
        <content type="html"><![CDATA[<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>(Aspect Oriented Programming)面向切面编程，不修改源代码进行功能增强</li><li>能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</li><li>Spring AOP就是基于动态代理的，如果要代理的对象，实现了某个接口，那么Spring AOP会使用JDK Proxy，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候Spring AOP会使用Cglib ，这时候Spring AOP会使用 Cglib 生成一个被代理对象的子类来作为代理</li></ul><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li>JoinPoint：被代理接口中的所有方法都是连接点</li><li>PointCut：真正被加上代理(被增强)的方法</li><li>通知（Advice）<ul><li>前置通知（Before）在目标方法调用前调用通知功能</li><li>后置通知（After）在目标方法调用之后调用通知功能，不关心方法的返回结果</li><li>返回通知（AfterReturning）在目标方法成功执行之后调用通知功能</li><li>异常通知（AfterThrowing）在目标方法抛出异常后调用通知功能</li><li>环绕通知（Around）通知包裹了目标方法，在目标方法调用之前和之后执行自定义的行为</li></ul></li></ul><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><h2 id="基于接口的动态代理"><a href="#基于接口的动态代理" class="headerlink" title="基于接口的动态代理"></a>基于接口的动态代理</h2><p>最少实现了一个接口，JDK官方提供</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//要被代理的对象</span>        <span class="token keyword">final</span> Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//args:被代理对象的类加载器，被代理对象的类的接口，用于提供增强代码的InvocationHandler</span>        <span class="token comment" spellcheck="true">//得到代理对象(Object)类型</span>        Test proxyTest<span class="token operator">=</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span>Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，test<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ， <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             *执行被代理对象的任何接口方法都会经过该方法             *             * @param proxy 代理对象的引用             * @param method 当前执行的方法             * @param args  当前执行方法所需要的参数             * @return 和被代理对象方法有相同的返回值             * @throws Throwable             */</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy， Method method， Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//传入的是被代理对象</span>                Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>test， args<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> proxyTest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span>， <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h2><p>适用没有接口的情况，被代理类不能是最终类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//要被代理的对象</span><span class="token keyword">final</span> Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//args 被代理对象的字节码，用于提供增强代码的Callback(使用其子类MethodInterceptor)</span>Test cglibTest<span class="token operator">=</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span>Enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>， <span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                     <span class="token punctuation">{</span>                                         <span class="token comment" spellcheck="true">//前三个参数和Proxy的作用一样</span>                                         <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object proxy， Method method， Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args， MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable                                         <span class="token punctuation">{</span>                                             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//传入的是被代理对象</span>                                             Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>test， args<span class="token punctuation">)</span><span class="token punctuation">;</span>                                             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token keyword">return</span> result<span class="token punctuation">;</span>                                         <span class="token punctuation">}</span>                                     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> cglibTest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span>， <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring AOP学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring IOC学习笔记</title>
      <link href="posts/c5ac6ae.html"/>
      <url>posts/c5ac6ae.html</url>
      
        <content type="html"><![CDATA[<h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>(Inversion Of Control)控制反转，把创建对象过程交给Spring管理，降低耦合度</li><li>最常见的方式叫做依赖注入（Dependency Injection，简称DI）</li><li>核心在于反射，通过反射创建对象，操作对象</li><li>创建对象时，默认调用无参数构造方法完成对象创建</li><li>IoC 容器实际上就是个Map（key，value），Map 中存放的是各种对象。</li><li>将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。</li></ul><h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><p><strong>（Dependency Inversion Principle ）</strong>是软件设计的一种思想。它把原本的高层建筑依赖底层建筑”倒置”过来，变成底层建筑依赖高层建筑。高层建筑决定需要什么，底层去实现这样的需求，但是高层并不用管底层是怎么实现的。这样就不会出现前面的“牵一发动全身”的情况。</p><p>假设我们设计一辆汽车：先设计轮子，然后根据轮子大小设计底盘，接着根据底盘设计车身，最后根据车身设计好整个汽车。这里就出现了一个“依赖”关系：汽车依赖车身，车身依赖底盘，底盘依赖轮子。</p><p><img src="https://pic1.zhimg.com/50/v2-c68248bb5d9b4d64d22600571e996446_hd.jpg?source=1940ef5c" alt="img"></p><p>这样设计的可维护性很低。假设设计完工之后，上司却突然说根据市场需求的变动，要我们把车子的轮子设计都改大一码。这下我们就蛋疼了：因为我们是根据轮子的尺寸设计的底盘，轮子的尺寸一改，底盘的设计就得修改；同样因为我们是根据底盘设计的车身，那么车身也得改，同理汽车设计也得改——整个设计几乎都得改！</p><p>换一种思路。我们先设计汽车的大概样子，然后根据汽车的样子来设计车身，根据车身来设计底盘，最后根据底盘来设计轮子。这时候，依赖关系就倒置过来了：轮子依赖底盘， 底盘依赖车身， 车身依赖汽车。</p><h2 id="控制反转"><a href="#控制反转" class="headerlink" title="控制反转"></a>控制反转</h2><p>将原本在程序中手动创建对象的控制权，交由Spring框架来管理。</p><p><strong>控制反转（Inversion of Control）</strong> 就是依赖倒置原则的一种代码设计的思路。具体采用的方法就是所谓的<strong>依赖注入（Dependency Injection）</strong>。</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/v2-ee924f8693cff51785ad6637ac5b21c1_hd.jpg" alt="img"></p><h3 id="第一个例子"><a href="#第一个例子" class="headerlink" title="第一个例子"></a>第一个例子</h3><p>上层建筑依赖下层建筑——每一个类的构造函数都直接调用了底层代码的构造函数。</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/v2-8ec294de7d0f9013788e3fb5c76069ef_720w.jpg"></p><h3 id="第一个例子业务更改"><a href="#第一个例子业务更改" class="headerlink" title="第一个例子业务更改"></a>第一个例子业务更改</h3><p>假设我们需要改动一下轮胎（Tire）类，把它的尺寸变成动态的，而不是一直都是30。我们需要这样改:</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/v2-82e0c12a1b26f7979ed9241e169affda_720w.jpg"></p><p>仅仅是为了修改轮胎的构造函数，这种设计却需要<strong>修改整个上层所有类的构造函数</strong>！在软件工程中，<strong>这样的设计几乎是不可维护的</strong>——在实际工程项目中，有的类可能会是几千个类的底层，如果每次修改这个类，我们都要修改所有以它作为依赖的类，那软件的维护成本就太高了。</p><p>所以我们需要进行控制反转（IoC），即上层控制下层，而不是下层控制着上层。我们用依赖注入（Dependency Injection）这种方式来实现控制反转。<strong>所谓依赖注入，就是把底层类作为参数传入上层类，实现上层类对下层类的“控制</strong>”。这里我们用<strong>构造方法传递的依赖注入方式</strong>重新写车类的定义：</p><h3 id="第二个例子"><a href="#第二个例子" class="headerlink" title="第二个例子"></a>第二个例子</h3><p><img src="https://pic4.zhimg.com/50/v2-c920a0540ce0651003a5326f6ef9891d_hd.jpg?source=1940ef5c" alt="img"></p><h3 id="第二个例子业务更改"><a href="#第二个例子业务更改" class="headerlink" title="第二个例子业务更改"></a>第二个例子业务更改</h3><p>这里我们再把轮胎尺寸变成动态的，同样为了让整个系统顺利运行，我们需要做如下修改：</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/v2-99ad2cd809fcb86dd791ff7f65fb1779_hd.jpg" alt="img"></p><p><strong>我只需要修改轮胎类就行了，不用修改其他任何上层类。</strong>这显然是更容易维护的代码。</p><h2 id="控制反转容器-IoC-Container"><a href="#控制反转容器-IoC-Container" class="headerlink" title="控制反转容器(IoC Container)"></a>控制反转容器(IoC Container)</h2><p>IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个Map（key，value）,Map 中存放的是各种对象。</p><p>对车类进行初始化的那段代码发生的地方，就是控制反转容器。</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/v2-c845802f9187953ed576e0555f76da42_720w.jpg"></p><p>因为采用了依赖注入，在初始化的过程中就不可避免的会写大量的new。这里IoC容器就解决了这个问题。<strong>这个容器可以自动对你的代码进行初始化，你只需要维护一个Configuration（可以是xml可以是一段代码），而不用每次初始化一辆车都要亲手去写那一大段初始化的代码</strong>。这是引入IoC Container的第一个好处。</p><p>IoC Container的第二个好处是：<strong>我们在创建实例的时候不需要了解其中的细节。</strong>在上面的例子中，我们自己手动创建一个车instance时候，是从底层往上层new的</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/v2-555b2be7d76e78511a6d6fed3304927f_720w.jpg"></p><p>这个过程中，我们需要了解整个Car/Framework/Bottom/Tire类构造函数是怎么定义的，才能一步一步new/注入。</p><p>而IoC Container在进行这个工作的时候是反过来的，它先从最上层开始往下找依赖关系，到达最底层之后再往上一步一步new（有点像深度优先遍历）：</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/v2-24a96669241e81439c636e83976ba152_hd.jpg" alt="img"></p><p>这里IoC Container可以直接隐藏具体的创建实例的细节，在我们来看它就像一个工厂：</p><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/v2-5ca61395f37cef73c7bbe7808f9ea219_720w.jpg"></p><p>我们就像是工厂的客户。我们只需要向工厂请求一个Car实例，然后它就给我们按照Config创建了一个Car实例。我们完全不用管这个Car实例是怎么一步一步被创建出来。</p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><ul><li>用于把当前类对象存入spring容器中</li><li>默认key是类名首字母改小写</li><li>需要先告知spring在创建容器时要扫描的包</li><li>@Controller：表现层</li><li>@Service：业务层</li><li>@Repository：用于数据访问层(Dao层)，Mapper中</li></ul><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><ul><li>自动按照类型注入，只要容器中有唯一一个bean对象类型和要注入的类型匹配，则注入成功</li><li>是直接和Map中的value(对象)进行匹配的</li><li>有多个匹配则先按照类型圈定匹配对象，再通过引用名称和Map中的key比较</li></ul><h2 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h2><ul><li>和@Component搭配使用</li><li>指定bean的作用范围</li><li>默认是单例，可以配置为多例</li><li>@Scope(“prototype”)</li></ul><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><ul><li>指定该类是一个配置类</li><li>@ComponentScan：指定Spring在创建时要扫描的包</li><li>@Bean：用在配置类中把当前方法返回值作为bean对象存入容器中，默认值是当前方法的名称，使用注解配置方法时，如果方法有参数，spring会去容器中查找相应对象，和@Autowired方式一样</li></ul><h1 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h1><h2 id="实例化（Instantiation）"><a href="#实例化（Instantiation）" class="headerlink" title="实例化（Instantiation）"></a>实例化（Instantiation）</h2><p>Spring 容器根据配置中的 bean 定义通过无参构造器创建bean实例</p><h2 id="属性填充（Populate）"><a href="#属性填充（Populate）" class="headerlink" title="属性填充（Populate）"></a>属性填充（Populate）</h2><ul><li>调用set方法为bean的属性赋值</li><li>Spring 使用依赖注入调用set方法为bean的属性赋值，如 bean 中所定义的配置。</li><li>如果 bean 实现BeanNameAware 接口，则工厂通过传递 bean 的 ID 来调用setBeanName()</li><li>如果 bean 实现 BeanFactoryAware 接口，工厂通过传递自身的实例来调用 setBeanFactory()。</li><li>如果 Bean 实现了 BeanClassLoaderAware 接口，调用 setBeanClassLoader()方法，传入 ClassLoader对象的实例。</li><li>与上面的类似，如果实现了其他 *.Aware接口，就调用相应的方法。</li></ul><h2 id="初始化（Initialization）"><a href="#初始化（Initialization）" class="headerlink" title="初始化（Initialization）"></a>初始化（Initialization）</h2><ul><li>如果有和加载这个 Bean 的 Spring 容器相关的 BeanPostProcessor 对象，执行postProcessBeforeInitialization() 方法</li><li>如果Bean实现了InitializingBean接口，执行afterPropertiesSet()方法。</li><li>如果 Bean 在配置文件中的定义包含 init-method 属性，执行指定的方法。</li><li>如果有和加载这个 Bean的 Spring 容器相关的 BeanPostProcessor 对象，执行postProcessAfterInitialization() 方法</li></ul><h2 id="销毁（Destruction）"><a href="#销毁（Destruction）" class="headerlink" title="销毁（Destruction）"></a>销毁（Destruction）</h2><ul><li>如果 bean 实现DisposableBean 接口，当 spring 容器关闭时，会调用 destory()。</li><li>当要销毁 Bean 的时候，如果 Bean 在配置文件中的定义包含 destroy-method 属性，执行指定的方法。</li></ul><h1 id="Bean作用域"><a href="#Bean作用域" class="headerlink" title="Bean作用域"></a>Bean作用域</h1><p>在Spring中，那些组成应用程序的主体及由Spring IoC容器所管理的对象，被称之为bean。简单地讲，bean就是由IoC容器初始化、装配及管理的对象</p><ul><li>singleton    在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，bean作用域范围的默认值。</li><li>prototype    每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()。</li><li>request    每次HTTP请求都会创建一个新的Bean，该作用域仅适用于web的Spring WebApplicationContext环境。</li><li>session    同一个HTTP Session共享一个Bean，不同Session使用不同的Bean。该作用域仅适用于web的Spring WebApplicationContext环境。</li></ul><h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><ul><li>BeanFactory就是Bean工厂，所有的Bean都由BeanFactory统一创建和管理。提供了框架和基本功能</li><li>延迟加载策略，根据id获取对象时才创建对象</li><li>多例模式适用</li><li>BeanFactory是接口，提供了IOC容器最基本的形式，给具体的IOC容器的实现提供了规范</li><li>BeanFactory就是Bean工厂，所有的Bean都由BeanFactory统一创建和管理。提供了框架和基本功能</li><li>基础 IoC 容器，提供完整的 IoC 服务支持。</li><li>Spring 容器最核心也是最基础的接口，本质是个工厂类，用于管理 bean 的工厂，最核心的功能是加载 bean，也就是 getBean 方法，通常我们不会直接使用该接口，而是使用其子接口。</li></ul><h2 id="BeanDefinition"><a href="#BeanDefinition" class="headerlink" title="BeanDefinition"></a>BeanDefinition</h2><p>BeanDefinition 是一个接口，它是用来存储Bean定义的一些信息的，比如ClassName，Scope，lifecycle，init-methon等等，BeanDefinition 抽象了对 Bean的定义。</p><h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h2><ul><li><p>在BeanFactory 简单IOC容器的基础上添加了许多对高级容器的支持。ApplicationContext容器通过读取配置元数据来获取要实例化，配置和组装哪些对象的指令。</p></li><li><p>立即加载策略，读取完配置文件即创建对象</p></li><li><p>单例模式适用</p></li><li><p>扩展了 BeanFactory ，除了有BeanFactory的功能还有额外更多功能，所以一般开发人员使用ApplicationContext会更多。</p></li><li><p>在BeanFactory 简单IOC容器的基础上添加了许多对高级容器的支持。ApplicationContext容器通过读取配置元数据来获取要实例化，配置和组装哪些对象的指令。</p></li><li><p>高级 IoC 容器，BeanFactory 的子接口，在 BeanFactory 的基础上进行扩展。包含 BeanFactory 的所有功能，还提供了其他高级的特性</p></li><li><p>单例(singleton)对象的生命周期和容器的生命周期相同</p></li><li><p>多例(prototype)对象在使用对象时创建，没有对象引用，则垃圾回收器回收</p></li></ul><h2 id="AnnotationConfigApplicationContext"><a href="#AnnotationConfigApplicationContext" class="headerlink" title="AnnotationConfigApplicationContext"></a>AnnotationConfigApplicationContext</h2><p>这个类是基于注解的容器类，它实现了BeanFactory和BeanDefinitionRegistry两个接口，拥有Bean对象的管理和BeanDefinition注册功能。同时这个类拥有一个DefaultListableBeanFactory的对象。</p>]]></content>
      
      
      <categories>
          
          <category> Spring IOC学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> IOC </tag>
            
            <tag> BeanFactory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记</title>
      <link href="posts/52ba89f4.html"/>
      <url>posts/52ba89f4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h1><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/image-20200818165454094.png" alt="image-20200818165454094"></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p><strong>1.方便解耦，简化开发</strong></p><p><strong>2.AOP编程的支持</strong></p><p><strong>3.声明式事务的支持</strong></p><p><strong>4.方便程序的测试</strong></p><p><strong>5.方便集成各种优秀框架</strong></p><p><strong>6.降低Java EE API的使用难度</strong></p><p><strong>7.Java 源码是经典学习范例</strong></p><h2 id="Spring各个包"><a href="#Spring各个包" class="headerlink" title="Spring各个包"></a>Spring各个包</h2><ul><li>spring-core:包含Spring 框架基本的核心工具类，主要提供IOC依赖注入功能</li><li>spring-beans:IOC容器必备jar包，包含(IoC/DI）操作相关的所有类</li><li>spring-expression:表达式解析，支持在运行时动态的解析表达式给对象赋值</li><li>spring-aop:使用Spring 的AOP 特性时所需的类和源码级元数据支持</li><li>spring-context:可以找到使用Spring ApplicationContext特性时所需的全部类，会自动将 spring-core、spring-beans、spring-aop、spring-expression</li></ul><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>Spring 通过 <code>ConcurrentHashMap</code> 实现单例注册表的特殊方式实现单例模式。Spring 实现单例的核心代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通过 ConcurrentHashMap（线程安全） 实现单例注册表</span><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String， Object<span class="token operator">></span> singletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span>String， Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> Object <span class="token function">getSingleton</span><span class="token punctuation">(</span>String beanName， ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> singletonFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 检查缓存中是否存在实例  </span>            Object singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    singletonObject <span class="token operator">=</span> singletonFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 如果实例对象在不存在，我们注册到单例注册表中。</span>                <span class="token function">addSingleton</span><span class="token punctuation">(</span>beanName， singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">!=</span> NULL_OBJECT <span class="token operator">?</span> singletonObject <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将对象添加到单例注册表</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addSingleton</span><span class="token punctuation">(</span>String beanName， Object singletonObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName， <span class="token punctuation">(</span>singletonObject <span class="token operator">!=</span> null <span class="token operator">?</span> singletonObject <span class="token operator">:</span> NULL_OBJECT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>在没有Spring帮我们管理事务之前，做法:</p><pre class=" language-java"><code class="language-java">Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>      conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将自动提交设置为false                         </span>    执行CRUD操作     conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//当两个操作成功后手动提交  </span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//一旦其中一个操作出错都将回滚，所有操作都不成功</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    conn<span class="token punctuation">.</span><span class="token function">colse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>事务是一系列的动作，一旦其中有一个动作出现错误，必须全部回滚，系统将事务中对数据库的所有已完成的操作全部撤消，滚回到事务开始的状态，避免出现由于数据不一致而导致的接下来一系列的错误。事务的出现是为了确保数据的完整性和一致性，在目前企业级应用开发中，事务管理是必不可少的。</p><p>Spring事务的本质其实就是数据库对事务的支持，使用JDBC的事务管理机制,就是利用java.sql.Connection对象完成对事务的提交</p><p>声明式事务基于 AOP,将具体业务逻辑与事务处理解耦。声明式事务管理使业务代码逻辑不受污染, 因此在实际使用中声明式事务用的比较多。</p><h2 id="Transactional-注解管理事务的实现步骤"><a href="#Transactional-注解管理事务的实现步骤" class="headerlink" title="@Transactional 注解管理事务的实现步骤"></a>@Transactional 注解管理事务的实现步骤</h2><p>使用@Transactional 注解管理事务的实现步骤分为两步。第一步，@EnableTransactionManagement 注解启用事务管理功能。第二步，将@Transactional 注解添加到合适的方法上</p><p>例如:</p><p>在配置中开启事务支持</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"com.tongji.boying.mapper"</span><span class="token punctuation">,</span> <span class="token string">"com.tongji.boying.dao"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>添加订单时开启事务</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BoyingOrderService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>UserOrderParam param<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 框架 </tag>
            
            <tag> Bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速新建md文件</title>
      <link href="posts/b379f77c.html"/>
      <url>posts/b379f77c.html</url>
      
        <content type="html"><![CDATA[<p>﻿# 快捷键新建文档</p><ol><li>win+r,输入regedit点击运行打开注册表</li><li>ctrl+F搜索 文本文档</li><li>双击此键值，在”文本文档”后加上” (&amp;T)”(不要忘记前面有一个空格)</li><li>此时可以用右键+w+t新建文档</li><li>再修改文件名和后缀为md文件<h1 id="右键新建md文件"><a href="#右键新建md文件" class="headerlink" title="右键新建md文件"></a>右键新建md文件</h1></li><li>新建文本文件<pre><code>Windows Registry Editor Version 5.00</code></pre></li></ol><p>[HKEY_CLASSES_ROOT.md]<br>@=”Typora.md”<br>“Content Type”=”text/markdown”<br>“PerceivedType”=”text”</p><p>[HKEY_CLASSES_ROOT.md\ShellNew]<br>“NullFile”=””</p><pre><code>2. 修改后缀为reg,双击运行即可# win+R输入typora运行</code></pre>]]></content>
      
      
      <categories>
          
          <category> 常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令与使用</title>
      <link href="posts/9f1ebbb4.html"/>
      <url>posts/9f1ebbb4.html</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><ol><li>root的家目录为/root,所以~代表了/root。其余的则在/home/用户名</li><li>/usr/local:系统管理员在本机安装自己下载的软件建议安装的目录</li></ol><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><ol><li><p>\为转义字符，可以后跟回车，使命令连续到下一行</p></li><li><p>tab tab，命令补全</p></li><li><p>man 命令，查看用法</p></li><li><p>ctrl+C终止命令</p></li><li><p>ctrl+D退出终端</p></li><li><blockquote><p>目录操作</p><p>cd </p><p>pwd </p><p>mkdir         -p可以递归创建</p><p>rmdir          -r可以删除有文件的目录</p></blockquote></li><li><blockquote><p> 文件操作</p><p>cp 源文件 目标位置  -r可以复制目录</p><p>rm  -rf  文件/目录   递归删除,且不会出现提示信息</p><p>mv test test1 可以实现更名操作</p></blockquote></li><li><blockquote><p>查找文件</p><p>find /usr -name “jdk*” -type d   查找在/usr下查找目录包含jdk的文件</p></blockquote></li><li><blockquote><p>解压缩</p><p>tar -zxv -f filename.tar.gz  -C 解压缩的目录</p></blockquote></li></ol><h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><ol><li><blockquote><p>三种模式:一般模式,编辑模式,命令行模式</p><p>一般模式按i进入编辑模式,输入/进入命令行模式.其他两个模式按ESC退出到一般模式</p></blockquote></li><li><blockquote><p>退出:</p><p>:wq 保存退出</p><p>:q! 强制退出不保存</p></blockquote></li><li><blockquote><p>一般模式</p><p>Page UP,Page DOWN翻页</p><p>HOME,END移动到该行首/尾</p><p>G移动到末尾,数字G移动到某行,1G则可以移动到开头</p></blockquote></li><li><blockquote><p>查找</p><p>/word向下继续查找</p><p> n为重复前一个查找操作,所以可以配合着向下找.N则向上找</p></blockquote></li><li><blockquote><p>删除一整行 dd</p><p>复制一整行 yy</p><p>将复制数据粘贴 p</p><p>撤销前一个操作 u</p></blockquote></li></ol><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><ol><li>ps aux 查看所有进程</li><li>top 动态查看进程 默认以CPU占用率排序 查看即时活跃的进程，类似Windows的任务管理器</li><li>查看端口是否占用: netstat -tunlp |grep 8000</li><li>ps -ef | grep -i java</li><li>kill -s 9 xxx</li></ol>]]></content>
      
      
      <categories>
          
          <category> 常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机--线程安全与锁优化</title>
      <link href="posts/27a1f8de.html"/>
      <url>posts/27a1f8de.html</url>
      
        <content type="html"><![CDATA[<h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><p>当多个线程同时访问一个对象时,如果不用考虑这些线程在运行时环境下的调度和交替执行,也不需要进行额外的同步,或者在调用方进行任何其他的协调操作,调用这个对象的行为都可以获得正确的结果,就称他为线程安全的</p><p>代码本身封装了所有必要的正确性保证手段(如互斥同步等),令调用者无须关心多线程下的调用问题,更无须自己实现任何措施来保证多线程环境下的正确调用.一般弱化为单次调用</p><h2 id="Java中的线程安全"><a href="#Java中的线程安全" class="headerlink" title="Java中的线程安全"></a>Java中的线程安全</h2><p>以多个线程间存在共享数据的访问为前提</p><h3 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a>不可变</h3><p>不可变对象一定是线程安全的。只要一个不可变对象被正确的创建出来了，那其外部的可见状态让永远不会改变，永远不会看到他在多个线程之中处于不一致的状态。</p><p>用final修饰，或者一个对象自行保证其行为不会对其状态产生任何影响，如String</p><h3 id="绝对线程安全"><a href="#绝对线程安全" class="headerlink" title="绝对线程安全"></a>绝对线程安全</h3><p>在Java API中标注自己是线程安全的类，绝大多数都不是绝对的线程安全</p><h3 id="相对线程安全"><a href="#相对线程安全" class="headerlink" title="相对线程安全"></a>相对线程安全</h3><p>通常意义上的线程安全，需要保证对这个对象的单次操作是线程安全的，在调用的时候不需要进行额外的保障操作。</p><h3 id="线程兼容"><a href="#线程兼容" class="headerlink" title="线程兼容"></a>线程兼容</h3><p>对象本身不是线程安全的。如ArrayList，HashMap等</p><h3 id="线程对立"><a href="#线程对立" class="headerlink" title="线程对立"></a>线程对立</h3><p>不管调用端是否采用了同步措施，都无法在多线程环境中并发使用代码。很少出现，通常有害，尽量避免</p><h2 id="线程安全的实现方法"><a href="#线程安全的实现方法" class="headerlink" title="线程安全的实现方法"></a>线程安全的实现方法</h2><h3 id="互斥同步"><a href="#互斥同步" class="headerlink" title="互斥同步"></a>互斥同步</h3><p>同步：在多个线程并发访问共享数据时，保证共享数据在同一个时刻只被一条线程使用</p><p>互斥：实现同步的一个手段</p><p>synchronized关键字，在经过javac编译后，会在同步块前后分别形成monitorenter,monitorexit两条字节码指令。需要一个reference类型的参数来指明要锁定，解锁的对象。</p><p>如果没有明确规定，则如果是实例方法就用对象实例作为锁，否则用该类型的Class对象作为锁</p><p>在执行monitorenter指令时，首先要去尝试获取对象的锁。如果该对象没被锁定，或者当前线程已经持有了那个对象的锁，就把锁的计数器的值增加1，而在执行monitorexit指令时会把锁计数器值-1。一旦计数器的值为0，锁立即被释放。如果获取对象锁失败，当前线程就应该被阻塞等待，直到请求锁定的对象被持有他的对象释放为止。</p><ol><li><p>被synchronized关键字修饰的同步块对同一个线程来说是可重入的。</p></li><li><p>被synchronized关键字修饰的同步块在持有锁的线程释放锁之前，会无条件阻塞后面其他线程的进入。</p></li></ol><h3 id="重入锁（ReentrantLock"><a href="#重入锁（ReentrantLock" class="headerlink" title="重入锁（ReentrantLock)"></a>重入锁（ReentrantLock)</h3><p>与synchronized的不同：</p><ol><li>等待可中断：正在等待的线程可以放弃等待，改为处理其他事情。</li><li>公平锁：可以通过设置，按照申请锁的时间顺序来依次获得锁</li><li>锁锁定多个对象：一个ReentrantLock对象可以同时绑定多个Condition对象</li></ol><p>在ReentrantLock与synchronized同时满足时优先使用synchronized：</p><ol><li>synchronized是Java语言层面的同步，足够清晰</li><li>synchronized由Java虚拟机保证即使出现异常，锁也能被正确释放</li><li>Java虚拟机更容易针对synchronized进行优化</li></ol><h3 id="非阻塞同步"><a href="#非阻塞同步" class="headerlink" title="非阻塞同步"></a>非阻塞同步</h3><p>互斥同步是一种悲观的并发策略：其总是认为如果不去加锁，就肯定出问题。所以无论是否出现竞争，他都会加锁。<br>基于冲突检测的乐观并发策略（无锁）：不管风险，先进行操作，如果没有其他线程争用共享数据，就操作成功。否则进行其他补偿操作，如不断地重试，直到出现没有竞争的共享数据为止。</p><p>需要保证操作和冲突检测这两个步骤具有原子性。例如：<br>测试并设置（TAS），比较和交换（CAS）<br>CAS（变量的内存地址V，旧的预期值A，准备设置的新值B):仅当V符合A时，处理器才会用B更新V的值，否则就不执行更新。无论是否更新V，都会返回A，整个操作是原子操作<br>Java提供compareAndSet操作，一般使用逻辑：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> current<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> next<span class="token operator">=</span>current<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可能出现ABA问题，可以通过：提供一个带有标记的原子引用类控制变量值的版本来保证CAS的正确性</p><h3 id="无同步方案"><a href="#无同步方案" class="headerlink" title="无同步方案"></a>无同步方案</h3><h4 id="可重入代码"><a href="#可重入代码" class="headerlink" title="可重入代码"></a>可重入代码</h4><p>是线程安全代码的一个子集。如果一个方法的返回结果是可以预测的，只要输入相同的数据，就能返回相同的结果，就满足可重入的要求，就是线程安全的。</p><h4 id="线程本地存储"><a href="#线程本地存储" class="headerlink" title="线程本地存储"></a>线程本地存储</h4><p>如果一段代码中所需要的数据必须与其他代码共享，但是这些共享数据的代码能保证在同一个线程中执行。如Web交互模型中的“一个请求对应一个服务器线程”</p><h1 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h1><h2 id="自旋锁与只适应自旋"><a href="#自旋锁与只适应自旋" class="headerlink" title="自旋锁与只适应自旋"></a>自旋锁与只适应自旋</h2><p>自旋锁：很多应用上，共享数据的锁定状态只会持续很短一段时间。可以让后面请求锁的那个线程稍等一下，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁。为了让线程等待，我们只须让线程执行一个忙循环。自旋有一定的限度，如果自旋超过了限定的次数仍然没有成功获得锁，就会用传统的方式挂起线程。<br>只适应自旋：自旋的时间不是固定的，而是由前一个在同一个锁上的自旋时间以及锁的拥有者的状态来决定</p><h2 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h2><p>即时编译器在运行时，对一些代码要求同步，但是对被检测到不可能存在共享数据竞争的锁进行消除。来源于逃逸分析技术。如果判断一段代码中所有数据都不会被其他线程访问到，就可以当作栈上内存对待，认为是线程私有的</p><h2 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h2><p>原则上只在共享数据的实际作用域上进行同步，使等待锁的线程能尽快获得锁。但如果一系列的连续操作都对同一个对象反复加锁解锁，就应该把加锁同步的范围粗化到整个操作序列的外部。</p><h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h2><p>在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量造成的性能消耗</p><h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h3><p>对象头：<br>第一部分是MarkWord用于存储对象自身的运行时数据，如HashCode，GC分代年龄等<br>另一部分存储指向方法区对象类型数据的指针。<br>如果是数组对象，还有一个额外的部分存储数组长度</p><p>MarkWord根据对象的状态复用自己的存储空间。<br>轻量级锁能提升程序同步性能的依据：对于绝大部分的锁，在整个同步期间都是没有竞争的</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>在无竞争的情况下把整个同步都消除掉，这个锁会偏向于第一个获得他的线程</p>]]></content>
      
      
      <categories>
          
          <category> JVM学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
            <tag> 深入理解Java虚拟机 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机--Java内存模型与线程</title>
      <link href="posts/ce3193b6.html"/>
      <url>posts/ce3193b6.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>多任务处理原因:计算机运算能力强大了,计算机运算速度与他的存储和通信子系统的速度差异大,一个服务端要同时对多个客户端提供服务</p><h1 id="硬件的效率与一致性"><a href="#硬件的效率与一致性" class="headerlink" title="硬件的效率与一致性"></a>硬件的效率与一致性</h1><p>让计算机并发执行若干个计算任务与更充分地利用计算机处理器的效能之间的关系没这么简单</p><p>因为绝大多数的运算任务都不可能只靠处理器的计算完成,还需要与内存的交互等。因为CPU和存储设备速度的差异，现代计算机系统加入一层或多层高速缓存作为内存和处理器的缓冲</p><h2 id="缓存一致性"><a href="#缓存一致性" class="headerlink" title="缓存一致性"></a>缓存一致性</h2><p>共享内存多核系统：在多路处理器系统，每个处理器都有自己的高速缓存，而他们又共享同一个主内存</p><p>当多个处理器的运算任务都涉及到同一块主内存时，将可能遇到缓存不一致的情况，所以需要遵守一定的协议。</p><h2 id="指令重排序优化"><a href="#指令重排序优化" class="headerlink" title="指令重排序优化"></a>指令重排序优化</h2><p>为了使处理器内部的运算单元能尽量被充分利用，处理器可能会对输入代码进行乱序执行，处理器会在计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果是一致的，但并不保证程序中各个语句计算的先后顺序与输入代码的顺序是一致的</p><p>因此如果存在一个计算任务依赖另外一个计算任务的中间结果，那么其顺序性不能靠代码的先后顺序保证</p><h1 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h1><h2 id="主内存和工作内存"><a href="#主内存和工作内存" class="headerlink" title="主内存和工作内存"></a>主内存和工作内存</h2><p>定义程序中各种变量的访问规则，即关注在虚拟机中把变量值存储在内存和从内存中取出变量值这样的底层细节。</p><p>此次变量不包括局部变量和方法参数，因为他们是线程私有的，不会被共享，没有竞争问题</p><p>所有变量都存储在主内存中，每个线程还有自己的工作内存。工作内存保存了被改线程使用的变量的主内存副本，线程对变量的所有操作都必须在工作内存中进行，不能直接读取主内存的数据</p><p>主内存直接对应于物理硬件的内存，工作内存优先存储于寄存器和高速缓存中</p><h2 id="内存间交互操作"><a href="#内存间交互操作" class="headerlink" title="内存间交互操作"></a>内存间交互操作</h2><p>主内存和工作内存之间的具体交互协议，即一个变量如何从主内存拷贝到工作内存，如何从工作内存同步回主内存这一类的实现细节</p><p>下面每个操作都是原子的，不可再分的</p><ol><li>lock 作用于主内存变量，把变量标识为线程独占</li><li>unlock 作用于主内存变量，把变量从锁定状态释放</li><li>read 作用于主内存变量，把一个变量的值从主内存传输到线程的工作内存中</li><li>load 作用于工作内存变量，把read操作从主内存中得到到变量值放入工作内存的变量副本中</li><li>use 作用于工作内存变量，把工作内存中一个变量的值传递给执行引擎</li><li>assign 作用于工作内存变量，把一个从执行引擎接收的值赋给工作内存的变量</li><li>store 作用于工作内存变量，把工作内存中一个变量的值传送到主内存中</li><li>write 作用于主内存变量，把store操作从工作内存中得到的变量值放入主内存的变量中</li></ol><p>之后简化为read,write,lock,unlock,但只是语言描述简化，内存模型的基础设计没变</p><p>之后可以采用一个等效的判断原则：先行发生原则，用来确定一个操作在并发情况下是否安全 </p><h2 id="对于volatile型变量的特殊规则"><a href="#对于volatile型变量的特殊规则" class="headerlink" title="对于volatile型变量的特殊规则"></a>对于volatile型变量的特殊规则</h2><p>提供的最轻量级的同步机制</p><p>两大特性</p><h3 id="保证此量对所有线程的可见性"><a href="#保证此量对所有线程的可见性" class="headerlink" title="保证此量对所有线程的可见性"></a>保证此量对所有线程的可见性</h3><p>指当一条线程修改了这个变量的值，新值对于其他线程来说是立即得知的</p><p>误解：volatile变量在各个线程中是一致的，所以基于volatile变量的运算在并发下是线程安全的</p><p>volatile变量在各个线程的工作内存中是不存在一致性问题，但是Java里面的运算操作符并非原子操作，这导致volatile变量的运算在并发下一样是不安全的</p><p>例子：一条race++ 指令，由四条字节码指令构成，当<code>getstatic</code>指令把race的值取到操作栈顶时，<code>volatile</code>关键字保证此时race的值的正确性，但是在执行接下来的指令的时候，其他线程可能已经将race的值改变了，而操作栈顶的值就变成了过期的数据，所以putstatic指令执行后就可能将较小的race值同步回主内存中</p><p>由于volatile只能保证可见性，除了以下两种情况外，其余都要通过加锁解决：</p><ol><li>运算结果并不依赖于变量的当前值，或者能够确保只有单一的线程修改变量的值</li><li>变量不需要于其他的状态变量共同参与不变约束</li></ol><h3 id="禁止指令重排序优化"><a href="#禁止指令重排序优化" class="headerlink" title="禁止指令重排序优化"></a>禁止指令重排序优化</h3><p>普通变量只能保证结果正确，不能保证变量赋值操作的顺序与程序代码的执行顺序是一致的</p><p>即线程内表现为串行的语义</p><p>有volatile修饰的变量，赋值后多执行一个<code>lock addl $0x0,(%esp)</code>操作，该操作相当于一个内存屏障，指重排序时不能把后面的指令重排序到内存屏障之前的位置</p><p><code>lock addl $0x0,(%esp)</code>操作将本处理器的缓存写入到内存，会引发其他处理器无效化他们的缓存，所以可以让volatile变量的修改对其他处理器立即可见</p><p>从硬件架构上，指令重排序是指处理器采用了运行将多条指令不按程序规定的顺序分开发送给各个相应的电路单元进行处理，他必须能正确处理指令依赖情况，保证能输出正确的结果</p><p>在同一个处理器中，重排序后的代码看起来仍然是有序的，<code>lock addl $0x0,(%esp)</code>把修改同步到缓存时，意味着所有之前的操作已经完成了，就形成了指令重排序无法越过内存屏障的效果</p><p>只有一个处理器访问内存时，不需要内存配置，但是有多个处理器访问同一块内存，且其中一个在观测另一个，就需要内存屏障来保证一致性</p><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>volatile变量读操作性能消耗和普通变量差不多，写操作因为要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行，会慢一些<br>volatile变量总开销比锁低，在volatile与锁之前选择的唯一依据仅仅是volatile能否满足使用场景的要求</p><h2 id="针对long和double型变量的特殊规则"><a href="#针对long和double型变量的特殊规则" class="headerlink" title="针对long和double型变量的特殊规则"></a>针对long和double型变量的特殊规则</h2><p>long和double的非原子性协定：运行虚拟机将并未声明为volatile的64位数据的读取划分为两次32位的操作进行<br>如果有多个线程共享一个并未声明为volatile的long和double型变量，并且同时对他们进行读取和修改操作，可能会读取到半个变量的数值<br>不过非常罕见，64位Java虚拟机不会出现，32位的也通常不会出现。所以在实际开发中，除非该数据有明确可知的线程竞争，否则一般不需要刻意把long和double型变量声明为volatile</p><h2 id="原子性，可见性，有序性"><a href="#原子性，可见性，有序性" class="headerlink" title="原子性，可见性，有序性"></a>原子性，可见性，有序性</h2><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>大致可以认为，基本数据类型的访问读写都是具备原子性的<br>synchronized块之间的操作也具备原子性</p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>当一个线程修改了共享变量的值时，其他变量能立即得知这个修改。<br>三种可见性方式：<br>volatile变量：保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新<br>synchronized关键字：对一个变量执行unlock之前，必须先把此变量同步回主内存中<br>final：被final修饰的字段在构造器一旦被初始化完成，并且构造器没有把this的引用参数传递出去，那么在其他线程中就能看到final字段的值</p><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>天然的有序性：如果在本线程内观测，所有的操作都是有序的；如果在一个线程中观测另一个线程，所有的操作都是无序的。前半句是指线程内似表现为串行的语义，后半句是指指令重排序和工作内存与主内存同步延迟现象。<br>volatile，synchronized关键字保证线程之间操作的有序性。前者本身就包含了禁止指令重排序的语义，后者由一个变量同一时刻只允许一条线程对其lock操作获得<br>synchronized关键字很万能，但是被滥用了，越万能的并发控制，通常会伴随越大的性能影响</p><h2 id="先行发生原则"><a href="#先行发生原则" class="headerlink" title="先行发生原则"></a>先行发生原则</h2><p>是判断数据是否竞争，线程是否安全的非常有用的手段<br>先行发生：例如说操作A先行发生于操作B，则指发生操作B之前，操作A产生的影响能被操作B观察到<br>Java语言中无须任何同步手段保障就能成立的先行发生原则如下，如果两个操作之间的关系无法从下述规则推导出来，他们就没有顺序性保证，虚拟机就能对他们随意地重排序</p><ol><li>程序次序规则：一个线程内，按照控制流顺序前面的操作比后面的操作先执行</li><li>管程锁定规则：一个unlock操作先行发生于后面对同一个锁的lock操作</li><li>volatile变量规则：对一个 volatile变量的写操作先行发生于后面对这个变量的读操作</li><li>线程启动规则：Thread的start（）方法先行发生于该线程的每一个动作</li><li>线程终止规则：线程的所有操作先行发生于对该线程的终止检测</li><li>线程中断规则：对线程interrupt（）方法的调用优先于被中断线程的代码检测到中断事件发生</li><li>对象终结规则：一个对象的初始化方法优先于他的finalized（）方法</li><li>传递性：A先行发生于B，B先行发生于C，则A先行发生于C</li></ol><p>时间先后顺序与先行发生原则之间没有因果关系，所以衡量并发安全问题不要受时间顺序的影响，一切以先行发生原则为准</p><h1 id="Java与线程"><a href="#Java与线程" class="headerlink" title="Java与线程"></a>Java与线程</h1><h2 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h2><h3 id="内核线程实现"><a href="#内核线程实现" class="headerlink" title="内核线程实现"></a>内核线程实现</h3><p>1：1实现， 内核线程就是直接由操作系统内核支持的线程，由内核来完成线程切换。一般使用内核线程的高级接口-轻量级进程<br>内核线程的操作都需要进行系统调用，需要在用户态核心态切换，要消耗一定的内核资源。</p><h3 id="用户线程的实现"><a href="#用户线程的实现" class="headerlink" title="用户线程的实现"></a>用户线程的实现</h3><p>用户线程为1：N的实现，完全建立在用户空间的线程库，系统内核不能感知到用户线程的存在与实现，用户线程的操作完全在用户态完成。<br>比较复杂，一般不倾向使用用户线程</p><h3 id="混合实现"><a href="#混合实现" class="headerlink" title="混合实现"></a>混合实现</h3><p>N：M实现，既存在轻量级进程，又存在用户线程</p><h3 id="java线程的实现"><a href="#java线程的实现" class="headerlink" title="java线程的实现"></a>java线程的实现</h3><p>基于操作系统原生线程模型来实现，即1：1的线程模型<br>每一个Java线程都直接映射到一个操作系统原生线程来实现，线程操作由操作系统全权决定</p><h2 id="Java线程调度"><a href="#Java线程调度" class="headerlink" title="Java线程调度"></a>Java线程调度</h2><h3 id="协同式"><a href="#协同式" class="headerlink" title="协同式"></a>协同式</h3><p>线程的执行时间由线程本身控制。好处是实现简单，切换操作对线程可知，没有线程同步的问题。坏处是执行时间不可控制，使用不当系统崩溃</p><h3 id="抢占式"><a href="#抢占式" class="headerlink" title="抢占式"></a>抢占式</h3><p>由系统来分配线程的执行时间，线程切换不由线程本身控制。<br>可设置进程优先级，但是不是稳定的调节手段。一是某些操作系统上不同优先级，二是进程优先级可能被系统自行改变</p><h2 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h2><p>一共有6种线程状态：</p><ol><li>新建：创建后尚未启动</li><li>运行：包括操作系统状态的Running和Ready，即可能正在运行，也可能等待操作系统为他分配执行时间</li><li>无限期等待：不会被分配处理器执行时间，要等待被其他线程显示唤醒</li><li>期限等待：不会被分配处理器执行时间，一定时间后会由操作系统自动唤醒</li><li>阻塞状态：在等待着获取一个排它锁。在程序等待进入同步区域时，处于该状态</li><li>结束状态：已终止线程的线程状态</li></ol><h1 id="Java与协程"><a href="#Java与协程" class="headerlink" title="Java与协程"></a>Java与协程</h1><h2 id="内核线程的局限"><a href="#内核线程的局限" class="headerlink" title="内核线程的局限"></a>内核线程的局限</h2><p>业务量不断增长，而且为了应对业务复杂化而不断进行服务细分<br>现代BS系统中一次对外部业务请求的响应，往往需要在不同机器上的大量服务共同协作来实现。增加了服务数量，缩短了留给每个服务的响应时间。要求每个服务都必须在极短的时间内完成计算，能同时处理数量更庞大的请求<br>Java的1：1线程模型切换，调整成本高昂，系统能容纳的线程数量有限，对这样的情况造成严重浪费。</p><h2 id="协程的复苏"><a href="#协程的复苏" class="headerlink" title="协程的复苏"></a>协程的复苏</h2><p>内核线程的调度成本主要来自于用户态与内核态之间的状态转换，而这两种状态转换的开销主要来自于响应中断，保护和恢复执行现场的成本。涉及一系列数据在各种寄存器，缓存中的来回拷贝，不是一种轻量级的操作。<br>有栈协程：在内存中划分一片额外空间来模拟调用栈，完整地做调用栈的保护和恢复工作<br>优势是轻量，缺点是需要在应用层面上实现的内容（调用栈，调度器）特别多</p><h2 id="Java的解决方案"><a href="#Java的解决方案" class="headerlink" title="Java的解决方案"></a>Java的解决方案</h2><p>使用纤程，是一种典型的有栈协程。重新提供对用户线程的支持<br>会有两个并发编程模型在Java虚拟机中并存，可以在程序中同时使用</p>]]></content>
      
      
      <categories>
          
          <category> JVM学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解Java虚拟机 </tag>
            
            <tag> 线程 </tag>
            
            <tag> 内存模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机--后端编译与优化</title>
      <link href="posts/78dd2f11.html"/>
      <url>posts/78dd2f11.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>编译器在何时,何种状态下把Class文件转换成与本地基础设施相关的二进制机器码,都可以视为整个编译过程的后端</p><p>所以有提前编译器,即时编译器两种</p><h1 id="即时编译器"><a href="#即时编译器" class="headerlink" title="即时编译器"></a>即时编译器</h1><p>java最初都是通过解释器进行解释执行的,当虚拟机发现某个方法或代码块运行特别频繁,就会认为是热点代码,在运行时,则把这些代码编译成本地机器码,并且以各种手段尽可能地进行代码优化</p><h2 id="解释器与编译器"><a href="#解释器与编译器" class="headerlink" title="解释器与编译器"></a>解释器与编译器</h2><p>hotspot虚拟机内部同时包含解释器与编译器,当程序需要迅速启动和执行时,解释器可以首先发挥作用,省去编译时间,立即运行。随着时间的推移，编译器逐渐发挥作用，把越来越多的代码编译成本地机器码，减少解释器的中间损耗，获得更高执行效率</p><p>解释器节约内存，编译器提高效率</p><p>解释器也可以作为编译器激进优化时后备的逃生门，即编译器可能根据概率选大多数提高运行速度的优化手段，但不是每一次都正确的，当激进优化假设不成立时可以通过逆优化退回到解释状态继续执行</p><p>内置了两个即时编译器 C1(客户端编译器),C2(服务端编译器)</p><p>分层模式之前，采用解释器与其中一个编译器直接搭配的方式工作，虚拟机会根据自身版本和宿主机的硬件性能自动选择运行模式</p><p>一般都使用混合模式</p><h3 id="分层编译"><a href="#分层编译" class="headerlink" title="分层编译"></a>分层编译</h3><p>由于即时编译器编译本地代码需要占用程序运行时间，且要编译处优化程度高的代码，所花费时间便越长，为了在程序启动响应速度与运行效率之间取得平衡，就采用分层编译</p><ul><li>第0层，纯解释执行，而且解释器不开启性能监控</li><li>第1层，使用C1将字节码编译成本地代码，不开启性能监控</li><li>第2层，使用C1将字节码编译成本地代码，仅开启方法及回边统计等有限的性能监控</li><li>第3层，使用C1将字节码编译成本地代码，开启全部性能监控</li><li>第1层，使用C2将字节码编译成本地代码，开启全部性能监控.还会根据性能监控信息进行一些不可靠的激进优化</li></ul><p>实施分层编译后，解释器，C1,C2同时工作，热点代码可能会多次编译，用C1获得更高的编译速度，用C2获得更好的编译质量，在解释执行时也无须额外承担收集性能监控信息的任务，而在C2采用高复杂度的优化算法时，C1可先采用简单优化为他争取更多的编译时间</p><h2 id="编译对象与触发条件"><a href="#编译对象与触发条件" class="headerlink" title="编译对象与触发条件"></a>编译对象与触发条件</h2><p>热点代码:被多次调用的方法,被多次执行的循环体</p><p>这两种情况编译的对象都是整个方法体,而不是单独的循环体</p><p>对于后者,只是执行入口稍有不同,编译时会传入执行入口点字节码序号,以为编译发生在方法执行过程中,所以叫做栈上替换,即方法的栈帧还在栈上,方法就被替换了</p><h3 id="热点探测"><a href="#热点探测" class="headerlink" title="热点探测"></a>热点探测</h3><ol><li>基于采样的热点探测,虚拟机会周期性的检查各个线程的调用栈顶,如果发现某个方法经常出现在栈顶,就是热点代码。缺点是很难精确的确认一个方法的热度</li><li>基于计数器的热点探测，虚拟机会为每个方法建立计数器，统计方法的执行次数。相对更加精确严谨</li></ol><h3 id="HotSpot虚拟机实现"><a href="#HotSpot虚拟机实现" class="headerlink" title="HotSpot虚拟机实现"></a>HotSpot虚拟机实现</h3><p>采用基于计数器的热点探测，准备了方法调用计数器，回边计数器（指循环边界往回跳转），计数器阈值一旦溢出，就触发即时编译。</p><p>执行引擎默认不会同步等待编译请求完成，而是继续进入解释器按照解释方式执行字节码，直到提交的请求被即时编译器编译完成，当编译工作完成，该方法调用入口就会被系统改为新值，下一次调用该方法就会使用已编译版本</p><h4 id="方法调用计数器"><a href="#方法调用计数器" class="headerlink" title="方法调用计数器"></a>方法调用计数器</h4><p>方法调用计数器不是方法被调用的绝对次数，而是相对的执行频率，即一段时间内方法被调用的次数。</p><p>当超过一段时间，方法的调用次数仍然不足以让它提交到即时编译器编译，则该方法的调用计数器就会减半。这个过程称为方法调用计数器热度的衰减。这段时间称为半衰周期<img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/IMG_20200828_0846415.jpg" alt="IMG_20200828_0846415"></p><h4 id="回边计数器"><a href="#回边计数器" class="headerlink" title="回边计数器"></a>回边计数器</h4><p>统计一个方法中循环体代码执行的次数，在字节码中遇到控制流向后跳转的指令就称为回边，目的是触发栈上的替换编译<br>当超过阈值时，将会提交一个栈上替换编译请求，并且把回边计数器值稍微降低，以便继续在解释器中执行循环，等待编译器输出编译结果<br>回边计数器没有计数热点衰减，统计的是该方法循环执行的绝对次数</p><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>默认条件下，无论是方法调用产生的标准编译请求，还是栈上替换编译请求，虚拟机在编译器还未完成编译之前，都仍然按照解释方式继续执行代码，而编译动作则在后台的编译线程中进行</p><h3 id="客户端编译器"><a href="#客户端编译器" class="headerlink" title="客户端编译器"></a>客户端编译器</h3><p>是一个相对简单快速的三段式编译器，主要关注点在局部性的优化，而放弃了许多耗时较长的全局优化手段</p><ol><li>一个平台独立的前端将字节码构造成一种高级中间代码表示（HIR）</li><li>一个平台相关的后端将 HIR产生低级中间代码表示（LIR)</li><li>在平台相关的后端使用线性扫描算法，产生机器代码</li></ol><h3 id="服务端编译器"><a href="#服务端编译器" class="headerlink" title="服务端编译器"></a>服务端编译器</h3><p>专门面向服务端的典型应用场景。是一个能容忍很高优化复杂度的高级编译器。执行大部分经典的优化操作和一些不稳定的预测性的激进优化（如分支频率预测等）</p><h2 id="实战：查看及分析即使编译结果"><a href="#实战：查看及分析即使编译结果" class="headerlink" title="实战：查看及分析即使编译结果"></a>实战：查看及分析即使编译结果</h2><p>Java虚拟机的即使编译过程对用户和程序都是完全透明的<br>空循环在最终的本地代码中实际上是不会执行的</p><h1 id="提前编译器"><a href="#提前编译器" class="headerlink" title="提前编译器"></a>提前编译器</h1><h2 id="提前编译的优劣得失"><a href="#提前编译的优劣得失" class="headerlink" title="提前编译的优劣得失"></a>提前编译的优劣得失</h2><h3 id="两条分支"><a href="#两条分支" class="headerlink" title="两条分支"></a>两条分支</h3><ol><li>在程序运行之前把程序代码编译成机器码的静态翻译工作.他的价值就是即时编译器的最大弱点:即时编译要占用程序运行时间和运算资源。所以在静态编译中进行耗时的优化，生成高质量代码。副作用是安装的时候很慢</li><li>把原本即时编译器在运行时要做的编译工作提前做好并保存下来,下次运行这些代码直接把他加载进来使用。本质上是给即时编译器做缓存加速，去改善Java程序的启动时间以及需要一段时间预热才能达到最高性能的问题。可以叫做即时编译缓存。缺点是这种提前编译方式不仅要和目标机器相关，而且还必须与HotSpot虚拟机的运行参数绑定</li></ol><h3 id="即时编译器的天然优势"><a href="#即时编译器的天然优势" class="headerlink" title="即时编译器的天然优势"></a>即时编译器的天然优势</h3><h4 id="性能分析制导优化"><a href="#性能分析制导优化" class="headerlink" title="性能分析制导优化"></a>性能分析制导优化</h4><p>在解释器或客户端编译器运行过程中，会不断收集性能监控信息。这些信息一般在静态分析时无法得到，或者不可能存在确定的唯一解。然而在动态运行时却可以明显看出他们的偏好，可以把热点代码集中优化分配资源。</p><h4 id="激进预测性优化"><a href="#激进预测性优化" class="headerlink" title="激进预测性优化"></a>激进预测性优化</h4><p>可以大胆的按照高概率的假设进行优化,万一出错,大不了回退到低价编译器甚至解释器上去执行</p><h4 id="链接时优化"><a href="#链接时优化" class="headerlink" title="链接时优化"></a>链接时优化</h4><p>Java语言天生是动态链接的,一个个Class文件在运行期被加载到虚拟机内存中,然后在即时编译器里产生优化后的代码</p><h1 id="编译器优化技术"><a href="#编译器优化技术" class="headerlink" title="编译器优化技术"></a>编译器优化技术</h1><p>编译器的目标是由程序代码翻译为本地机器码的过程,但是输出代码优化质量的高低才是决定编译器优秀与否的关键<br>即时编译器对代码优化变化是在代码的中间表示或机器码上的,而不是Java源码上的<br>优化的代码所达到效果相同,但是省略很多代码语句,体现在字节码和机器码的指令上的差距就越大</p><h2 id="方法内联"><a href="#方法内联" class="headerlink" title="方法内联"></a>方法内联</h2><p>是编译器最重要的优化手段,一般都会放在优化序列最靠前的位置<br>没有方法内联,多数其它优化都无法有效进行,因为分开看很多方法里面的操作可能是有意义的<br>优化行为理解起来就是把目标方法的代码原封不动地”复制”到发起调用的方法之中,但是Java实现挺复杂的</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ol><li>去除方法调用的成本(如查找方法版本,建立栈帧等)</li><li>为其他优化建立良好的基础</li></ol><h3 id="Java实现方法内联问题"><a href="#Java实现方法内联问题" class="headerlink" title="Java实现方法内联问题"></a>Java实现方法内联问题</h3><p>一般只有私有方法,实例构造器,父类方法,静态方法,final方法才会在编译期进行解析。其他的Java方法调用都必须在运行时进行方法接收者的多态选择，可能存在多于一个版本的方法接收者。所以默认的实例方法是虚方法。<br>所以方法应该根据实际类型动态分配，而实际类型必须在实际运行到这行代码才能确定，很难在编译时得到绝对准确的结论<br>Java对象默认的方法就是虚方法，Java间接鼓励了程序员使用大量的虚方法来实现程序逻辑</p><h3 id="Java实现方法内联方法"><a href="#Java实现方法内联方法" class="headerlink" title="Java实现方法内联方法"></a>Java实现方法内联方法</h3><p>使用类型继承关系分析，用于确定在目前已加载的类的接口和父类的信息。这样，编译器在进行内联时就会分不同情况采取不同的处理：</p><ol><li>如果是非虚方法，直接内联</li><li>如果是虚方法，而且只有一个版本，就假设只有这个。不过属于激进预测性优化，必须预留号逃生门，即当假设不成立时的退路。如果之后加载了导致继承关系发生变化的新类，则必须抛弃已经编译的代码，退回到解释状态继续执行，或者重新进行编译。</li><li>如果有多个版本，则使用内联缓存。内联缓存是一个建立在目标方法正常入口之前的缓存。在未发生方法调用前，内联缓存状态为空，当第一次调用时，缓存记录下方法接受者的版本信息，并且每次进行方法调用时都比较接收者的版本，每个每次进来调用方法的接收者都是一样的，他就是一个单态内联缓存</li></ol><p>所以在多数情况下，Java虚拟机进行的方法内联都是一种激进优化，如果真的出现小概率事件，才会使用逃生门回到解释状态重新执行。</p><h2 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h2><p>最前沿的优化技术之一，是为其他优化提供依据的分析技术。但是逃逸计算成本非常高，可能出现效果不稳定的情况</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>分析对象动态作用域，当一个对象在方法里面被定义后，他可能被外部方法所引用，例如作为调用参数传递到其他方法中，这种叫方法逃逸。甚至还有可能被外部线程访问到，譬如赋值给可以在其他线程中访问的实例变量这种叫线程逃逸。<br>如果能证明一个对象不会逃逸到方法或线程之外，或逃逸程度比较低，可以使用以下技术</p><h3 id="栈上分配"><a href="#栈上分配" class="headerlink" title="栈上分配"></a>栈上分配</h3><p>Java几乎都是堆上分配创建对象的内存空间，堆中对象对于各个线程都是共享可见的，只要持有这个对象的引用，就可以访问到堆中存储的对象数据。<br>如果确定一个对象不会逃逸到线程之外，那么可以让改对象在栈上分配内存。可以支持方法逃逸，不支持线程逃逸</p><h3 id="标量替换"><a href="#标量替换" class="headerlink" title="标量替换"></a>标量替换</h3><p>若一个数据已无法分解为更小的数据，就是标量。（int,long,reference等）<br>如果把java对象拆散，将其用到的成员变量恢复为原始类型来访问，这个过程就是标量替换。<br>假如逃逸分析能证明一个对象不会被方法外部使用，并且该对象可以拆分，那么真正执行时可能不会创建这个对象，而是创建它的若干个成员变量。是栈上分配的特例，实现更简单，对逃逸要求更高</p><h3 id="同步消除"><a href="#同步消除" class="headerlink" title="同步消除"></a>同步消除</h3><p>线程同步是相对耗时的操作。如果一个变量不会逃逸出线程，他就没有读写竞争，就可以消除对该变量实施的同步措施</p><h2 id="公共子表达式消除"><a href="#公共子表达式消除" class="headerlink" title="公共子表达式消除"></a>公共子表达式消除</h2><p>语言无关的经典优化技术之一<br>如果一个表达式E在之前被计算过，并且从之前到现在E中所有变量值不变，则可以用前面计算好的结果代替E</p><h2 id="数组边界检查消除"><a href="#数组边界检查消除" class="headerlink" title="数组边界检查消除"></a>数组边界检查消除</h2><p>语言相关的经典优化技术之一<br>Java动态安全，访问数组元素系统会自动进行上下界的范围检查，对开发者友好，但是每次数组元素的读写都有一次隐式地条件判定操作，是一种性能负担。<br>如果数组访问发生在循环之中，并且使用循环变量来进行数组访问，如果编译器只要通过数据流分析就可以判定循环变量的取值范围在数组长度内，就可以把循环中的上下界检查消除掉</p><h1 id="实战：深入理解Graal编译器"><a href="#实战：深入理解Graal编译器" class="headerlink" title="实战：深入理解Graal编译器"></a>实战：深入理解Graal编译器</h1><p>Graal编译器：即时编译器和提前编译器共同的最新成果。有望成为一款高质量编译效率，高输出质量，支持提前编译，即时编译。</p>]]></content>
      
      
      <categories>
          
          <category> JVM学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 深入理解Java虚拟机 </tag>
            
            <tag> 编译器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown常用命令与使用</title>
      <link href="posts/db5a7195.html"/>
      <url>posts/db5a7195.html</url>
      
        <content type="html"><![CDATA[<h1 id="markdown常用语法"><a href="#markdown常用语法" class="headerlink" title="markdown常用语法"></a>markdown常用语法</h1><ol><li># 内容为标题，多个#为多级标题,注意要空格</li><li>一个*包围为倾斜，两个*<em>包围为加粗，三个\</em>为斜体加粗</li><li>&gt;引用,可以多级引用</li><li>-–为分割线</li><li>[链接名字](链接地址)  图片链接</li><li>+ 内容,无序列表,一定要有空格</li><li>1.  内容，有序列表</li><li>```java  ```为代码块</li><li>一个`包围的为一行代码</li></ol><h1 id="Typora的快捷键"><a href="#Typora的快捷键" class="headerlink" title="Typora的快捷键"></a>Typora的快捷键</h1><ol><li>切换到源代码编辑模式:ctrl+/</li><li>[toc]快速生成目录</li></ol>]]></content>
      
      
      <categories>
          
          <category> 常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker常用命令与使用</title>
      <link href="posts/65fb0b69.html"/>
      <url>posts/65fb0b69.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker理解"><a href="#Docker理解" class="headerlink" title="Docker理解"></a>Docker理解</h1><ol><li><p>docker对进程进行隔离,将软件所需的所有资源打包到一个隔离的容器中.</p></li><li><p>容器是相互隔离的,每个容器内部都有一个属于自己的文件系统</p></li><li><p>镜像与容器。容器是用镜像创建的运行实例。容器可以看作简易版的Linux环境</p></li><li><p>仓库包含多个镜像，每个镜像都有不同的标签（tag），即版本</p></li><li><p>联合文件系统:一些已经下的基础包就不会继续下了</p></li><li><p>帮助命令:<code>docker --help</code></p></li><li><blockquote><p>Docker容器卷</p><p>容器之间共享数据</p><p>docker run -it -v 宿主机目录:容器内目录 镜像名 </p></blockquote></li></ol><h1 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h1><blockquote></blockquote><pre><code>&gt; docker images                查看镜像&gt;&gt; docker search  镜像名&gt;&gt; docker pull 镜像名[:TAG]          不写TAG则默认下最新版本&gt;&gt; docker rmi -f 镜像名[:TAG]            删除镜像&gt;&gt; docker rmi -f $(docker images -qa)  删除全部镜像</code></pre><p>​    </p><h1 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h1><blockquote><p>docker run -it  –name centos1  镜像ID/镜像名 </p><p>docker ps              参数-a,列出历史上所有运行过的</p><p>docker stop 容器ID </p><p>docker start 容器ID    </p><p>docker rm 容器ID    删除已停止的容器 参数-f 强制删除正在运行的容器</p><p>docker run -d    镜像ID 以守护式启动,后台运行  如果该进程没有前台进程,会自动退出</p><p>exit 直接退出docker容器</p><p>docker exec -it centos1 /bin/bash 重新进入当前运行的 容器</p><p>docker run -it  -p 8888:8080 tomcat 带端口的启动</p><p>docker run  -it –name centos7 centos:7   /bin/bash </p><p>docker logs -f -t  –tail 10  centos7  <strong>-f :</strong> 跟踪日志输出  <strong>-t :</strong> 显示时间戳</p><p>docker top centos7 查看容器内进程信息</p><p>docker inspect centos7 查看容器内具体信息</p><p>docker cp centos7:/usr/tongji4m3.txt . 拷贝容器内文件到主机</p><p>–name=”名称” 容器名</p><p>-d 后台运行</p><p>-it 以交互方式运行,进入容器</p><p>-p 8888:8080  指定端口映射</p></blockquote><h1 id="DockerFile创建容器"><a href="#DockerFile创建容器" class="headerlink" title="DockerFile创建容器"></a>DockerFile创建容器</h1><p>首先新建个文件<code>vim DockerFile</code></p><pre class=" language-c"><code class="language-c">    FROM centos    ENV mypath <span class="token operator">/</span>usr<span class="token operator">/</span>local    WORKDIR $mypath    RUN yum <span class="token operator">-</span>y install vim    EXPOSE <span class="token number">80</span>    CMD <span class="token operator">/</span>bin<span class="token operator">/</span>bash</code></pre><p>创建  <code>docker build -f /root/myDocker/DockerFile -t mycentos:1.0 .</code></p><p>之后就可以正常使用：<code>docker run -it mycentos:1.0</code></p><h1 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h1><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>docker run -d --name redis -p 6379:6379 redis --requirepass &quot;redis&quot;</code></p><h3 id="以客户端启动"><a href="#以客户端启动" class="headerlink" title="以客户端启动"></a>以客户端启动</h3><p><code>docker exec -it redis redis-cli -a redis </code></p><h1 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h1><pre class=" language-javascript"><code class="language-javascript">FROM centos#拷贝宿主机的文件到容器的文件COPY temp<span class="token punctuation">.</span>txt <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>container<span class="token punctuation">.</span>txt#把Java，tomcat添加到容器中ADD jdk<span class="token operator">-</span>8u221<span class="token operator">-</span>linux<span class="token operator">-</span>x64<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz <span class="token operator">/</span>usr<span class="token regex">/local/</span>ADD apache<span class="token operator">-</span>tomcat<span class="token number">-9.0</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz <span class="token operator">/</span>usr<span class="token regex">/local/</span>#安装vim编辑器RUN yum <span class="token operator">-</span>y install vim#设置登录落脚点ENV MYPATH <span class="token operator">/</span>usr<span class="token operator">/</span>localWORKDIR $MYPATH#配置Java，tomcat环境变量ENV JAVA_HOME <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span><span class="token number">0.221</span>ENV CLASSPATH $JAVA_HOME<span class="token operator">/</span>lib<span class="token operator">/</span>dt<span class="token punctuation">.</span>jar#配置java与tomcat环境变量ENV JAVA HOME <span class="token operator">/</span>usr<span class="token operator">/</span>1ocal<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_ <span class="token number">171</span>ENV CLASSPATH $JAVA_HOME<span class="token operator">/</span>1ib<span class="token operator">/</span>dt<span class="token punctuation">.</span>jar<span class="token punctuation">:</span> $JAVA_HOME<span class="token operator">/</span>lib<span class="token operator">/</span>tools<span class="token punctuation">.</span>jarENV CATALINA_HOME <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token number">-9.0</span><span class="token punctuation">.</span><span class="token number">8</span>ENV CATALINA_BASE <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token number">-9.0</span><span class="token punctuation">.</span><span class="token number">8</span>ENV PATH $PATH<span class="token punctuation">:</span> $JAVA_HOME<span class="token operator">/</span>bin<span class="token punctuation">:</span>$CATALINA_HOME<span class="token operator">/</span>lib<span class="token punctuation">:</span>$CATALINA_HOME<span class="token operator">/</span>bin#监听窗口EXPOSE <span class="token number">8080</span>#启动时运行tomcatCMD <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token number">-9.0</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">/</span>bin<span class="token operator">/</span>startup<span class="token punctuation">.</span>sh</code></pre><p><code>docker pull mysql:5.7</code></p><blockquote><p>mysql安装</p><p>docker run -p 3306:3306 –name mysql -v /root/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7</p></blockquote><p>启动:</p><p><code>docker exec -it mysql bash</code></p><p><code>mysql -uroot -proot</code></p>]]></content>
      
      
      <categories>
          
          <category> 常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机--前端编译与优化</title>
      <link href="posts/c3f1ef69.html"/>
      <url>posts/c3f1ef69.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>编译期可能指以下几种:</p><ol><li>前端编译器:把java文件转为class文件的过程,如Javac</li><li>即时编译器(JIT编译器):运行期把字节码转变为本地机器码的过程,如hotspot虚拟机的C1,C2编译器</li><li>静态的提前编译器:直接把程序编译成与目标指令集相关的二进制代码的过程</li></ol><p>Java中,即时编译器在运行期的优化过程,支撑了程序执行效率的不断提升,而前端编译器在编译期的优化过程,则是支撑着程序员的编码效率和语言使用者的幸福感的提高</p><h1 id="Javac编译器"><a href="#Javac编译器" class="headerlink" title="Javac编译器"></a>Javac编译器</h1><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><ol><li>准备过程:初始化插入式注解处理器</li><li>解析与填充符号表过程<ul><li>词法,语法分析,构造出抽象语法树</li><li>填充符号表,产生符号地址和符号信息</li></ul></li><li>插入式注解处理器的注解处理过程:插入式注解处理器的执行阶段</li><li>语义分析与字节码生成过程<ul><li>标注检查.对语法的静态信息进行检查</li><li>数据流及控制流分析。对程序动态运行过程进行检查</li><li>解语法糖。将简化代码编写的语法糖还原为原有的形式</li><li>字节码生成。将前面各个步骤所生成的信息转换成字节码</li></ul></li></ol><p>上述动作中，执行插入式注解时有可能会产生新的符号，如果有新符号产生，就必须回到之前的解析，填充符号表的过程中重新处理这些新符号</p><h2 id="解析与填充符号表"><a href="#解析与填充符号表" class="headerlink" title="解析与填充符号表"></a>解析与填充符号表</h2><h3 id="词法-语法分析"><a href="#词法-语法分析" class="headerlink" title="词法,语法分析"></a>词法,语法分析</h3><p>词法分析是将源代码的字符流转变为标记集合的过程,标记是编译时的最小元素，例如int就是一个标记</p><p>语法分析是根据标记序列构造抽象语法树的过程，抽象语法树是一种用来描述程序代码语法结构的树形表示方式</p><h3 id="填充符号表"><a href="#填充符号表" class="headerlink" title="填充符号表"></a>填充符号表</h3><p>符号表是一组符号地址和符号信息构成的数据结构，可以当作以键值对存储的哈希表</p><h2 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h2><p>插入式注解处理器：注解一般是在运行期起作用，而这提前到编译期对代码中的特定注解进行处理，从而影响到前端编译器的工作过程。</p><p>可以把插入式注解处理器看作是编译器的插件，如果这些插件在处理注解期间对语法树进行过修改，编译器将回到解析及填充符号表的过程重新处理，直到所有的插入式注解处理器都没有再对语法树进行修改为止，每一次循环过程称为轮次。</p><p>插入式注解处理器可以实现很多功能，如通过注解来实现自动产生getter/setter方法，产生equals（），hashCode（）方法</p><h2 id="语义分析与字节码生成"><a href="#语义分析与字节码生成" class="headerlink" title="语义分析与字节码生成"></a>语义分析与字节码生成</h2><p>抽象语法树能表示一个结构正确的源程序，但无法保证源程序的语义符合逻辑。语义分析主要任务是对结构正确的源程序进行上下文相关性质的检查，例如类型检查等</p><p>编译时在IDE中看到由红线标注的错误提示，其中绝大部分都是由语义分析阶段的检查结果</p><h3 id="标注检查"><a href="#标注检查" class="headerlink" title="标注检查"></a>标注检查</h3><p>检查变量使用前是否被声明，变量与赋值之间的数据类型是否匹配等</p><p>常量折叠：<code>int a=1+2</code>,会变成 a=3</p><h3 id="数据及控制流分析"><a href="#数据及控制流分析" class="headerlink" title="数据及控制流分析"></a>数据及控制流分析</h3><p>检查出诸如程序局部变量在使用前是否有赋值，方法的每条路径是否都有返回值，是否所有的受查异常都被正确处理了等问题</p><h3 id="解语法糖"><a href="#解语法糖" class="headerlink" title="解语法糖"></a>解语法糖</h3><p>在语言中添加某种语法，对语言的编译结果和功能没有实际影响，但能方便程序员使用该语言。减少代码量，增加程序可读性，减少程序代码出错的机会</p><h3 id="字节码生成"><a href="#字节码生成" class="headerlink" title="字节码生成"></a>字节码生成</h3><p>实例构造器<init>()方法和类构造器<cinit>(),就是这个阶段添加到语法树的</p><p><init>()，<cinit>()的产生是代码收敛的过程，编译器会把语句块，变量初始化，调用父类的实例构造器等操作收敛到他们两个方法上</p><p>并且保证无论源码中出现的顺序如何，都一定是按先执行父类的实例构造器，然后初始化变量，最后执行语句块的顺序执行</p><h1 id="Java语法糖的味道"><a href="#Java语法糖的味道" class="headerlink" title="Java语法糖的味道"></a>Java语法糖的味道</h1><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型本质是参数化类型或参数化多态的应用。即可以将操作的数据类型指定为方法签名中的一种特殊参数</p><p>Java的泛型是“类型擦除式泛型”，只在程序源码中出现，在编译后的字节码文件中，全部泛型都被替换为原来的裸类型（Raw Type），并且在相应的地方插入了强制转型代码</p><p>所以ArrayList<Integer>,ArrayList<String> 在运行期是同一种类型</p><p>无论在使用效果还是运行效率上，都全面落后于具现化式泛型，唯一优点就是实现擦除式泛型只需要在Java编译器上改进即可…</p><h3 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h3><p>Java选择把已有的类型泛型化，如ArrayList原地泛型化为ArrayList<T><br>        裸类型应被视为所有该类型泛型化实例的共同父类型<br>        让所有泛型化的实例类型，如ArrayList<Integer>,ArrayList<String> 都自动成为ArrayList的子类型<br>        Java裸类型的实现：简单粗暴地直接在编译期把ArrayList<Integer>还原为ArrayList，只在元素访问，修改时自动插入一些强制类型转换和检查指令</p><p>不过擦除法所谓的擦除，仅仅是对方法的Code属性中的字节码进行擦除，实际上元数据中还是保留了泛型信息。所以编码时能通过反射手段取得参数化类型</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="对原始类型数据不支持"><a href="#对原始类型数据不支持" class="headerlink" title="对原始类型数据不支持"></a>对原始类型数据不支持</h4><p>因为不支持int这些基本类型与Object之间的强制转型，一旦把泛型信息擦除后，到要插入强制转型代码地方就不能进行下去。Java就不支持原生类型的泛型，只能用ArrayList<Integer>,导致了无数构造包装类的装箱，拆箱的开销</p><h4 id="代码啰嗦"><a href="#代码啰嗦" class="headerlink" title="代码啰嗦"></a>代码啰嗦</h4><p>运行期无法取得泛型类型信息</p><h4 id="带来了模棱两可的模糊状况"><a href="#带来了模棱两可的模糊状况" class="headerlink" title="带来了模棱两可的模糊状况"></a>带来了模棱两可的模糊状况</h4><p>当泛型遇到重载时</p><h2 id="自动装箱，拆箱，循环遍历"><a href="#自动装箱，拆箱，循环遍历" class="headerlink" title="自动装箱，拆箱，循环遍历"></a>自动装箱，拆箱，循环遍历</h2><p>循环遍历则是把代码还原成迭代器的实现，所以需要被遍历的类实现Iterator接口</p><p>变长参数在调用时变成一个数组类型的参数</p><pre class=" language-java"><code class="language-java">Integer a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Integer b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>Integer c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>Integer d <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>Integer e <span class="token operator">=</span> <span class="token number">321</span><span class="token punctuation">;</span>Integer f <span class="token operator">=</span> <span class="token number">321</span><span class="token punctuation">;</span>Long g <span class="token operator">=</span> 3L<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token operator">==</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g<span class="token operator">==</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre><p>鉴于包装类的 == 运算在不遇到算术运算的情况下不会自动拆箱，以及他们的equals()方法不处理数据转型的关系，实际编码中尽量避免这样使用自动装箱，拆箱</p><h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><p>Java语言编译方式：编译器并非一个个地编译java文件，而是将所有编译单元的语法树顶级节点输入到待处理列表中再进行编译，因此各个文件之间能够互相提供符号信息</p><p>Java的条件编译：使用条件为常量的if语句，它在编译期就会运行</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>该代码编译后Class文件的反编译结果：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>编译器将会把分支中不成立的代码消除掉。</p><p>这种语法糖只能写在方法体内部，只能实现语句基本块级别的条件编译，而没有办法实现根据条件调整整个Java类的结构</p>]]></content>
      
      
      <categories>
          
          <category> JVM学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 深入理解Java虚拟机 </tag>
            
            <tag> Javac </tag>
            
            <tag> 语法糖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用命令与使用</title>
      <link href="posts/95af1e01.html"/>
      <url>posts/95af1e01.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-安装hexo"><a href="#一-安装hexo" class="headerlink" title="一.安装hexo"></a>一.安装hexo</h2><p>搭建可以参考视频:<a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&seid=17889294783077443284" target="_blank" rel="noopener">CodeSheep搭建博客教程</a>,如果出现问题可以看弹幕解决</p><p><strong>连接Github时注意</strong></p><blockquote><p>git config –global user.name “Github名字”</p><p>git config –global user.email “Github绑定的邮箱”</p></blockquote><p><strong>中文乱码</strong></p><blockquote><p>echo $LANG查看字符集</p><p>在 /etc/profile配置文件添加export LANG=”zh_CN.UTF-8”</p><p> . /etc/profile 重新载入</p></blockquote><p><strong>idea ssh连接中文乱码</strong></p><blockquote><p>File&gt;Settings&gt;Tools&gt;SSH Terminal&gt; Default encoding设为utf-8</p></blockquote><h2 id="二-hexo主题与美化"><a href="#二-hexo主题与美化" class="headerlink" title="二.hexo主题与美化"></a>二.hexo主题与美化</h2><p>主题可以用<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">next主题</a>上的，在next主题上进行美化:<a href="https://blog.csdn.net/nightmare_dimple/article/details/86661502" target="_blank" rel="noopener">next美化教程</a></p><p>另一个教程:<a href="https://blog.csdn.net/qincidong/article/details/82415256" target="_blank" rel="noopener">hexo美化设置</a></p><p>目前正在使用的,<strong>强烈推荐</strong>:<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">Matery主题</a></p><blockquote><p>hexo相关的设置在blog/<em>config.yml文件修改</em></p><p>主题相关的设置在themes/next/_config.yml文件修改</p></blockquote><h2 id="三-hexo相关命令"><a href="#三-hexo相关命令" class="headerlink" title="三.hexo相关命令"></a>三.hexo相关命令</h2><blockquote><p>hexo d 部署到Github上</p><p>hexo clean清空缓存</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机--虚拟机字节码执行引擎</title>
      <link href="posts/988064b3.html"/>
      <url>posts/988064b3.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>物理机的执行引擎是直接建立在处理器,缓存,指令集的操作系统层面上的</p><p>虚拟机执行引擎由软件实现,可以不受物理条件制约地定制指令集与执行引擎的结构体系,能够执行不受硬件直接支持的指令集格式</p><p>执行引擎在执行字节码时,有解释执行,编译执行两种选择。但是输入输出都是一致的：输入字节码二进制流，处理过程是字节码解析执行的等效过程，输出是执行结果</p><h1 id="运行时栈帧结构"><a href="#运行时栈帧结构" class="headerlink" title="运行时栈帧结构"></a>运行时栈帧结构</h1><p>虚拟机以方法为最基本的执行单元，栈帧对应一个方法，是虚拟机运行时数据区的虚拟机栈的栈元素。每一个方法从调用开始到执行结束的过程，都对应着一个栈帧在虚拟机栈里从入栈到出栈的过程</p><p>栈帧存储了局部变量表，操作数栈，动态连接，方法返回地址和附加信息</p><p>一个栈帧需要分配多少内存，在编译程序源码时就被计算出来并且写入到方法表的Code属性中了，并不会受到程序运行期变量数据的影响，仅仅取决于程序源码和具体的虚拟机实现的栈内存布局</p><p>在Java程序的角度看，同一时刻，同一线程上，在调用堆栈的所有方法都同时处在执行状态</p><p>而对于执行引擎，在活动线程中，只有位于栈顶的方法是运行的，被称为当前栈帧和当前方法</p><h2 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h2><p>是一组变量值的存储空间，用于存放方法参数和方法内部定义的局部变量</p><p>在Java程序被编译为Class文件时，就在方法的Code属性的max_locals数据项中确定了该方法所需分配的局部变量表的最大容量</p><p>局部变量表以变量槽位最小单位，一个变量槽可以存放一个32位以内的数据类型</p><p>引用至少要做到两点：</p><pre><code>    1.  根据引用直接或间接地查找对象在Java堆中的数据存放的起始地址或索引      2.  根据引用直接或间接地查找对象所属数据类型在方法区中的存储的类型信息</code></pre><p>对于64位数据，会分配两个连续的变量槽空间（long,double），对他们读写分割位两次32位读写。由于局部变量表是建立在线程堆栈中的，属于线程私有的数据，所以无论两个连续的变量槽是否为原子操作，都不会引起数据竞争和线程安全问题</p><p>当方法被调用，虚拟机会用局部变量表来完成参数值到参数变量列表的传递过程，即实参到形参的传递。如果是实例方法，则局部变量表第0位索引的变量槽默认存放用于传递方法所属对象实例的引用，即this</p><p>变量槽可重用，出作用域的可以重新分配</p><p>局部变量表没有准备阶段，所以如果一个局部变量定义了但是没有赋初始值，则不能使用，编译器在编译期间就能检查到并提示出这一点</p><h2 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h2><p>最大深度也在编译时就写入了Code属性的max_stacks里</p><p>32位数据类型所占的栈容量位1,64所占为2,任何时候操作数栈的深度都不会超过max_stacks设置的最大值</p><p>做算术运算时,通过将运算涉及的操作数压入栈顶后调用运算指令来进行的</p><p>如iadd指令,运行时要求操作数栈中栈顶和次顶元素已经存了两个int型,执行该指令会将两个int出栈并相加,然后重新入栈</p><h2 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h2><p>为了支持方法调用过程中的动态连接,每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用</p><h2 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h2><p>两种方式退出方法:</p><p>​    正常调用完成:执行引擎遇到任意一个方法返回的字节码指令,这时可能有返回值传递给上层的方法调用者</p><p>​    异常调用完成:方法执行过程遇到异常,且该方法的异常表中没有搜索到匹配的异常处理器</p><p>在方法退出之后,都必须返回到最初方法被调用时的位置。如果是正常退出，则保存了主调方法的PC计数器的值</p><p>方法退出时：恢复上层方法的局部变量表和操作数栈，把返回值压入调用者栈帧的操作数栈中，调整PC计数器的值以指向方法调用指令后面的一条指令</p><h2 id="附加信息"><a href="#附加信息" class="headerlink" title="附加信息"></a>附加信息</h2><p>可增加一些规范中没有描述的信息到栈帧之中，例如与调试，性能收集相关的信息</p><p>一般把动态连接，方法返回地址，附加信息归为一类，称为栈帧信息</p><h1 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h1><p>确定被调用方法的版本(即调用哪一个方法),暂时未涉及方法内部的具体运行过程</p><p>一切方法调用在Class文件里面存储的都只是符号引用,而不是方法在实际运行时内存布局中的入口地址(即直接引用)</p><p>所以某些调用需要在类加载期间,甚至在运行期间才能确定目标方法的直接引用</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>在类的解析阶段,会将其中的一部分符号引用转为直接引用,前提是这些方法在程序真正运行之前就有一个可确定的调用版本,且在运行期不改变</p><p>符合”编译期可知,运行期不可变”的,主要有静态方法和私有文件两大类.前者与类型直接关联,后者在外部不可被访问</p><h3 id="调用字节码指令"><a href="#调用字节码指令" class="headerlink" title="调用字节码指令"></a>调用字节码指令</h3><ul><li>invokestatic 用于调用静态方法</li><li>invokespecial 用于调用<init>()方法,私有方法,父类的方法</li><li>invokevirtual 用于调用所有的虚方法</li><li>invokeinterface 用于调用接口方法,会在运行期再确定一个实现该接口的对象</li><li>invokedynamic 先在运行期动态解析出调用点限定符所引用的方法,然后再执行</li></ul><p>只要能被invokestatic,invokespecial 指令调用的方法,都可以在解析阶段中确定唯一的调用版本</p><p>符合这些条件的方法共有:静态方法,私有方法,实例构造器,父类方法,再加上被final修饰的方法(尽管他被invokevirtual 修饰)</p><p>这五类方法再类加载时就可以把符号引用解析为该方法的直接引用，统称为非虚方法</p><p>解析调用一定是静态的过程</p><h2 id="分派"><a href="#分派" class="headerlink" title="分派"></a>分派</h2><h3 id="静态分派"><a href="#静态分派" class="headerlink" title="静态分派"></a>静态分派</h3><pre class=" language-Java"><code class="language-Java">static abstract class Human{}static class Man extends Human{}static class Woman extends Human{}public void sayHello(Human guy){    System.out.println("Human");}public void sayHello(Man guy){    System.out.println("Man");}public void sayHello(Woman guy){    System.out.println("Women");}public static void main(String[] args){    Human man = new Man();    Human women = new Woman();    MainTest mainTest = new MainTest();    mainTest.sayHello(man);    mainTest.sayHello(women);    /*    result:        Human        Human     */}</code></pre><p><code>Human man = new Man();</code>中，Human称为静态类型，Man称为实际类型</p><p>最终的静态类型是再编译期可知的，实际类型变化的结果在运行期才可确定</p><p>虚拟机在重载时是通过参数的静态类型而不是实际类型作为判断依据的。在编译阶段，编译器根据参数的静态类型决定使用哪个重载版本</p><p>所有依赖静态类型来决定方法执行的版本的分派动作，都称为静态分派，最典型的应用就是方法重载</p><p>编译器虽然能确定出方法的重载版本，但是很多情况下重载版本并不唯一，往往只能确定一个相对更适合的版本</p><h3 id="动态分派"><a href="#动态分派" class="headerlink" title="动态分派"></a>动态分派</h3><p>是多态性中的重写的变现。</p><p>在运行期根据变量的实际类型来分派方法执行版本</p><p>字段永远不参与多态</p><p>如今的Java语言是一门静态多分派，动态单分派的语言</p><h4 id="invokevirtual解析过程"><a href="#invokevirtual解析过程" class="headerlink" title="invokevirtual解析过程"></a>invokevirtual解析过程</h4><ol><li>找到操作数栈顶的第一个元素所指向的对象的实际类型,记为C</li><li>如果在类型C中找到与常量中的描述符和简单名称都相符的方法,则进行访问权限校验,如果通过则返回这个方法的直接引用,查找过程结束。不通过则返回IllegalAccessError异常</li><li>否则，按照继承关系从下往上依次对C的各个父类进行第二步的搜索和验证过程</li><li>如果始终找不到合适的方法，则抛出AbstractMethodError</li></ol><h3 id="虚拟机动态分派的实现"><a href="#虚拟机动态分派的实现" class="headerlink" title="虚拟机动态分派的实现"></a>虚拟机动态分派的实现</h3><p>常见的优化手段是在方法区建立一个虚方法表（vtable），使用虚方法表索引来代替元数据提高查找性能</p><p>虚方法表中存放着各个方法的实际入口地址，如果某个方法没有在子类中被重写那子类的虚方法表中的地址入口和父类相同方法的地址入口是一致的，都指向父类的实现入口。</p><p>如果子类重写了，则替换为指向子类实现版本的入口地址。</p><p>虚方法表一般在类加载的连接阶段进行初始化，准备了类的变量初始值后，虚拟机会把该类的虚方法表也一同初始化完毕</p><p>不使用final修饰的默认都是虚方法</p><h1 id="动态类型语言支持"><a href="#动态类型语言支持" class="headerlink" title="动态类型语言支持"></a>动态类型语言支持</h1><p>invokedynamic指令，为实现动态类型语言支持而产生</p><h2 id="动态类型语言"><a href="#动态类型语言" class="headerlink" title="动态类型语言"></a>动态类型语言</h2><p>关键特征是：它的类型检查的主体过程是在运行期而不是编译期进行的</p><p>运行时异常：只要代码不执行到这一行就不会产生异常</p><p>连接时异常：即使代码放在一条根本无法被执行到的路径分支上，类加载时也照样会抛出异常</p><p>动态类型语言另外一个核心特征：变量无类型，变量值有类型</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ol><li>静态类型语言能够在编译期确定变量类型，编译器可以提高全面严谨的类型检查，利于稳定性，让项目更容易达到更大规模</li><li>动态类型语言运行期才确定类型，为开发人员提供极大的灵活性，更清晰明了，意味着开发效率的提高</li></ol><h2 id="java-lang-invoke包"><a href="#java-lang-invoke包" class="headerlink" title="java.lang.invoke包"></a>java.lang.invoke包</h2><h3 id="MethodHandle与Reflection的区别"><a href="#MethodHandle与Reflection的区别" class="headerlink" title="MethodHandle与Reflection的区别"></a>MethodHandle与Reflection的区别</h3><ul><li>Reflection是在Java代码层次模拟的方法调用,MethodHandle是模拟字节码层次的方法调用</li><li>Reflection是Java端的全面映像,是重量级的,MethodHandle是轻量级的</li><li>Reflection难以进行优化,MethodHandle可以实现各种优化(如方法内联等)</li><li>Reflection只是为Java语言服务,MethodHandle则设计为可服务于所有Java虚拟机语言</li></ul><h1 id="基于栈的字节码解释执行引擎"><a href="#基于栈的字节码解释执行引擎" class="headerlink" title="基于栈的字节码解释执行引擎"></a>基于栈的字节码解释执行引擎</h1><p>探讨如何执行方法里面的字节码指令.有解释执行,编译执行两种</p><h2 id="解释执行"><a href="#解释执行" class="headerlink" title="解释执行"></a>解释执行</h2><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/IMG_20200825_184807.jpg" alt="IMG_20200825_184807"></p><p>在执行前,先对程序源码进行词法分析和语法分析处理，把源码转换为抽象目录树。</p><h2 id="基于栈的指令集和基于寄存器的指令集"><a href="#基于栈的指令集和基于寄存器的指令集" class="headerlink" title="基于栈的指令集和基于寄存器的指令集"></a>基于栈的指令集和基于寄存器的指令集</h2><p>Javac编译器输出的字节码指令流，基本上是一种基于栈的指令集架构。字节码指令流中大部分是零地址指令，依赖操作数栈进行工作。</p><p>例如1+1:</p><pre><code>iconst_1iconst_1iaddistore_0</code></pre><p>两条iconst_1指令连续把两个常量1压入栈后，iadd指令把栈顶的两个值出栈，相加，然后把结果放回栈顶，最后istore_0把栈顶的值放到局部变量表的第0个变量槽中</p><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>基于栈的主要优点是可移植，用栈架构，用户程序不会直接使用寄存器，可以由虚拟机实现来将一些访问最频繁的数据（程序计数器，栈顶缓存等）放到寄存器中以提高性能。代码紧凑，编译器实现简单</li><li>缺点是执行速度稍慢，完成相同功能所需的指令数量要多，频繁的栈访问也就意味着频繁的内存访问</li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 栈帧 </tag>
            
            <tag> 方法调用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机--虚拟机类加载机制</title>
      <link href="posts/92288fa0.html"/>
      <url>posts/92288fa0.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Java虚拟机把描述类的数据从Class文件加载到内存,并进行加载,连接,初始化.这些都是在程序运行期间完成的。</p><p>Java天生可以动态扩展的语言特性，就是依赖于运行期动态加载和动态连接实现的</p><p>Class文件，指的是一串二进制字节流，并非特指某个存在于具体磁盘中的文件</p><h1 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h1><ol><li>整个生命周期：加载，连接（验证，准备，解析），初始化，使用，卸载</li><li>加载，验证，准备，初始化，卸载顺序是确定的，必须按照这种顺序按部就班地开始，但不是按部就班地进行或完成。他们通常相互交叉地混合进行，会在一个阶段的执行过程中调用激活另一个阶段</li><li>解析阶段有可能在初始化阶段之后开始，因为要支持运行时绑定（动态绑定）</li></ol><h2 id="立即对类进行初始化的六种情况："><a href="#立即对类进行初始化的六种情况：" class="headerlink" title="立即对类进行初始化的六种情况："></a>立即对类进行初始化的六种情况：</h2><p>有且仅有这六种.这些行为称为对一个类型进行主动引用。除此之外，所有引用类型的方式都不会触发初始化，称为被动引用</p><ol><li><p>遇到new,getstatic,putstatic,invokestatic这四种字节码指令，如果没有进行过初始化，则需要先触发其初始化阶段,典型情况：</p><ol><li>使用new关键字实例化对象</li><li>读取或设置一个类型的静态字段</li><li>调用一个类的静态方法</li></ol></li><li><p>使用java.lang.reflect包的方法对类进行反射调用。如果类没有初始化，则需要触发</p></li><li><p>初始化类，其父类还没有初始化</p></li><li><p>虚拟机启动时，需要指定执行主类（main())，先初始化这个主类</p></li><li><p>使用JDK7新加入的动态语言支持，方法句柄对应的类没有进行过初始化</p></li><li><p>一个接口定义了JDK8新加入的默认方法（被default修饰），如果这个接口的实现类发生了初始化，则该接口要在其之前进行初始化</p><h3 id="被动引用例子"><a href="#被动引用例子" class="headerlink" title="被动引用例子"></a>被动引用例子</h3></li><li><p>通过其子类来引用父类中定义的静态字段,只会触发父类的不会触发之类的初始化。</p></li><li><p>创建类的数组，也只会自动生成一个继承于Object的数组类型，不会触发子类的初始化</p></li><li><p>引用类中定义的常量，因为编译期间通过常量优化，常量的值直接存储在使用的类的常量池中</p></li></ol><h1 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h1><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><ol><li>通过一个类的全限定名获取定义该类的二进制字节流</li><li>将该字节流所代表的静态存储结构转换为方法区的运行时数据结构</li><li>在内存中生成一个代表该类的Class对象，作为方法区这个类的各种数据的访问入口</li></ol><h3 id="二进制字节流获取方式"><a href="#二进制字节流获取方式" class="headerlink" title="二进制字节流获取方式"></a>二进制字节流获取方式</h3><ol><li>从zip获取，如JAR</li><li>从网络中获取，如Web Applet</li><li>运行时计算生成，如动态代理技术</li><li>由其他文件生成，如JSP</li><li>从数据库中获取</li><li>从加密文件中获取，防Class文件被反编译的保护措施</li></ol><h3 id="数组类的加载"><a href="#数组类的加载" class="headerlink" title="数组类的加载"></a>数组类的加载</h3><ol><li>如果数组的组件类型是引用类型，则会递归采用之前所说的加载过程去加载该组件类型，数组类将被标识在加载该组件类型的类加载器的类名称空间上</li><li>如果数组的组件类型不是引用类型，数组类将与引导类加载器关联</li><li>数组类的可访问性与它的组件类型一致， 如果数组的组件类型不是引用类型，则默认为是public<h3 id="加载结束"><a href="#加载结束" class="headerlink" title="加载结束"></a>加载结束</h3>加载阶段结束后，二进制字节流就按照格式存储在方法区之中了，然后会在Java堆内存中实例化一个Class对象，作为程序访问方法区中的类型数据的外部接口</li></ol><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>为了确保Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求，保证这些信息被当作代码运行后不会危害到虚拟机自身的安全</p><h3 id="文件格式验证"><a href="#文件格式验证" class="headerlink" title="文件格式验证"></a>文件格式验证</h3><p>验证字节流是否符合Class文件格式的规范，并且被当前版本的虚拟机处理（例如是否以魔数开头，常量池中常量是否有不被支持的常量类型，CONSTANT_Utf8_info型的常量是否有不符合Utf8编码的数据）</p><p>目的是保证输入的字节流能正确地解析并且存储在方法区之内，即格式上符合描述一个Java类型的要求</p><h3 id="元数据验证"><a href="#元数据验证" class="headerlink" title="元数据验证"></a>元数据验证</h3><p>对字节码描述的信息进行语义分析，包括：</p><ol><li>该类是否有父类</li><li>该类的父类是否继承了不允许继承的类（final修饰的类）</li><li>如果不是抽象类，是否实现了其父类或者接口要求实现的所有方法</li><li>类中字段，方法是否与父类产生矛盾（例如覆盖了父类的final方法，出现不符合规范的重载等等）<h3 id="字节码验证"><a href="#字节码验证" class="headerlink" title="字节码验证"></a>字节码验证</h3>对类的方法体(Class文件中的Code属性)进行校验分析,保证被校验类的方法在运行时不会做出危害虚拟机安全的行为,例如:</li><li>保证任意时刻操作数栈的数据类型与指令的代码序列都能配合工作。不会出现类似于在操作数栈放置了一个int型的数据，使用却按long类型来加载入本地变量表中</li><li>保证任何跳转指令都不会跳转到方法体之外的字节码指令中</li><li>保证方法体中的类型转换都是有效的</li></ol><p>但不可能完全确保程序是安全的，因为停机问题理论：不能通过程序准确地检查出程序是否能在有效的时间之内结束运行</p><h3 id="符号引用验证"><a href="#符号引用验证" class="headerlink" title="符号引用验证"></a>符号引用验证</h3><p>发生在虚拟机将符号引用转化为直接引用的时候，发生在解析阶段。验证该类是否缺少或者被禁止访问它依赖的某些外部类，方法，字段等资源，通常检验：</p><ol><li>符号引用中通过字符串描述的全限定名是否能找到对应的类</li><li>在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段</li><li>符号引用中的类，字段，方法的可访问性</li></ol><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>正式为类中定义的静态变量分配内存并设置类变量初始值的阶段<br>在JDK8中，类变量会随着Class对象一起放Java堆中<br>不包括实例变量，实例变量会在对象实例化时随着对象一起分配在堆中<br>通常情况下初始值是数据类型的零值，直到在类的初始化阶段通过类构造器的<clinit>()方法赋值<br>但如果是final修饰，即存在ConstantValue属性，那在准备阶段就会被初始化为ConstantValue属性所指定的初始值</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><ol><li><p>将常量池内的符号引用替换为直接引用的过程</p></li><li><p>符合引用：以一组符合来描述所引用的目标，可以是任何形式的字面量，与虚拟机实现的内存布局无关</p></li><li><p>直接引用：可以直接指向目标的指针，相对偏移量，或者是一个能间接定位到目标的句柄，与虚拟机实现的内存布局直接相关。如果有了直接引用，那引用目标必定已经在虚拟机的内存中存在</p></li><li><p>在执行操作符号引用的字节码指令之前，必须先堆它所使用的符号引用进行解析。可以自行判断在加载时就解析还是在使用前才解析</p></li></ol><h3 id="类和接口的解析"><a href="#类和接口的解析" class="headerlink" title="类和接口的解析"></a>类和接口的解析</h3><p>假设当前代码所处的类为D,要把从未解析过的符号引用N解析为一个类或接口C</p><ol><li>如果C不是一个数组类型,虚拟机会把代表N的全限定名传递给D的类加载器去加载这个类C</li><li>如果C是一个数组类型,并且数组的元素类型为对象,会先按上面的方法加载数组元素类型,再由虚拟机生成一个代表该数组维度和元素的数组对象</li><li>在解析完成之前,要进行符号引用验证,确认D是否具备对C的访问权限</li></ol><h3 id="字段解析"><a href="#字段解析" class="headerlink" title="字段解析"></a>字段解析</h3><ol><li>会先对字段所属的类或接口的符号引用进行解析</li><li>如果C本身包含了简单名称和字段描述符都与目标相匹配的字段,则返回该字段的直接引用</li><li>否则,则按照继承关系从下往上递归搜索各个接口和它的父接口</li><li>否则,则按照继承关系从下往上递归搜索父类</li><li>找不到,则抛出NoSuchFieldError</li><li>查找成功并返回引用后,将对这个字段进行权限验证,如果没有访问权限,则抛出IllegalAccessError</li></ol><h3 id="方法解析"><a href="#方法解析" class="headerlink" title="方法解析"></a>方法解析</h3><ol><li>会先对方法所属的类或接口的符号引用进行解析</li><li>发现C是接口,抛异常</li><li>如果C本身包含了简单名称和字段描述符都与目标相匹配的字段,则返回该方法的直接引用</li><li>父类中递归查找</li><li>实现的接口列表和父接口中递归查找</li><li>权限认证</li></ol><h3 id="接口方法解析"><a href="#接口方法解析" class="headerlink" title="接口方法解析"></a>接口方法解析</h3><ol><li>会先对方法所属的类或接口的符号引用进行解析</li><li>发现C是类,不是接口,抛异常</li><li>如果C本身包含了简单名称和字段描述符都与目标相匹配的字段,则返回该方法的直接引用</li><li>父接口中递归查找</li><li>因为允许接口的多继承,所以如果在不同的父接口中找到多个,则从多个方法中返回其中一个</li><li>因为接口所有方法默认public,所以JDK9之前没有模块化访问约束,不存在访问权限问题</li></ol><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ol><li>初始化阶段就是执行类构造器<code>&lt;clinit&gt;()</code>方法的过程,它是Javac编译器的自动生成物,是由编译器自动收集类中的所有类变量的赋值动作和静态语句块中语句合并而成的。收集的顺序由在源文件出现的顺序决定</li><li>静态语句块只能访问到定义在静态语句块之前的变量，定义在之后的变量，只能赋值，不能访问</li><li>父类的<code>&lt;clinit&gt;()</code>先执行，所以父类中定义的静态语句块优先于之类的变量赋值操作</li><li><code>&lt;clinit&gt;()</code>方法不是必须的，如果没有类变量的赋值动作和静态语句块，则不为该类生成<code>&lt;clinit&gt;()</code>方法</li><li>执行接口的<code>&lt;clinit&gt;()</code>方法不需要先执行父接口的<code>&lt;clinit&gt;()</code>方法，只有父接口的变量被使用时，父接口才会被初始化。接口的实现类在初始化时也不会执行接口的<code>&lt;clinit&gt;()</code>方法</li><li>虚拟机保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境被正确的加锁同步 </li></ol><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><p>类加载器:通过一个类的全限定类名来获取描述该类的二进制字节流 在Java虚拟机外实现</p><h2 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h2><p>每个类加载器都拥有一个独立的类名称空间</p><p>一个类由他的类加载器和这个类本身一同确定其唯一性</p><p>即使两个类来源于同一个类加载器,被同一个Java虚拟机加载,只要加载他们的类加载器不同,则着两个类必定不相等</p><p>相等,包括了equals()方法,instanceof关键字等等</p><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><h3 id="虚拟机角度"><a href="#虚拟机角度" class="headerlink" title="虚拟机角度"></a>虚拟机角度</h3><p>启动类加载器(Bootstrap ClassLoader) 使用C++实现,是虚拟机自身的一部分</p><p>其他所有类加载器:由Java实现,独立于虚拟机外部,全都继承自抽象类java.lang.ClassLoader</p><h3 id="开发人员角度"><a href="#开发人员角度" class="headerlink" title="开发人员角度"></a>开发人员角度</h3><p>保持着三层类加载器,双亲委派机制的类加载结构</p><h4 id="启动类加载器-Bootstrap-ClassLoader"><a href="#启动类加载器-Bootstrap-ClassLoader" class="headerlink" title="启动类加载器(Bootstrap ClassLoader)"></a>启动类加载器(Bootstrap ClassLoader)</h4><p>负责加载存放在<JAVA_HOME>\lib目录下,而且是虚拟机能够识别的类库加载到虚拟机内存中</p><p>启动类加载器无法被Java程序直接引用,如果需要把加载请求委派给启动类加载器处理,则用null代替</p><h4 id="扩展类加载器-Extension-ClassLoader"><a href="#扩展类加载器-Extension-ClassLoader" class="headerlink" title="扩展类加载器(Extension ClassLoader)"></a>扩展类加载器(Extension ClassLoader)</h4><p>负责加载<JAVA_HOME>\lib\ext目录下类库</p><p>是一种Java系统类库的扩展机制</p><p>允许用户将具有通用性的类库放置在ext目录里以扩展Java SE的功能</p><h4 id="应用程序类加载器-Application-ClassLoader"><a href="#应用程序类加载器-Application-ClassLoader" class="headerlink" title="应用程序类加载器(Application ClassLoader)"></a>应用程序类加载器(Application ClassLoader)</h4><p>也称为系统类加载器。</p><p>负责加载用户类路径（ClassPath)上所有的类库。如果没有定义自己的类加载器，则它就是程序默认的类加载器</p><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p>除了顶层的启动类加载器，其余的类加载器都应有自己的父类加载器，通常使用组合关系来复用父加载器的代码</p><h4 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h4><p>如果一个类加载器收到类加载的请求，他首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（他的搜索范围中没有找到所需的类），子加载器才会尝试自己去完成加载</p><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>类随着他的类加载器一起具备了一种带有优先级的层次关系</p><p>例如Object类，无论哪个类加载器去加载他，都会委派到启动类加载器进行执行，因此Object类在不同的类加载器环境下都能保证是同一个类</p><h2 id="破坏双亲委派机制"><a href="#破坏双亲委派机制" class="headerlink" title="破坏双亲委派机制"></a>破坏双亲委派机制</h2><ol><li>第一次被“破坏”：兼容双亲委派机制出现之前已经存在的用户自定义类加载器的代码。按照loadClass（）方法的逻辑，如果父类加载失败，会调用自己的findClass（）方法来完成加载。这样既不影响用户按照自己的意愿去加载类，又可以保证新写出来的类加载器是符合双亲委派加载的</li><li>第二次被“破坏”：由于模型自身的缺陷导致的，如有基础类型又要调回用户的代码。但是显然启动类加载器不可能认识，加载这些代码。使用线程上下文类加载器，用父加载器去请求子类加载器去完成类加载的行为违背了双亲委派机制的一般性原则</li><li>由于用户对程序动态性的追求导致的。如代码热替换，模块热部署等等。此时的类加载器不再是双亲委派机制推荐的树状结构，而是更加复杂的网状结构</li></ol>]]></content>
      
      
      <categories>
          
          <category> JVM学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 类加载器 </tag>
            
            <tag> 深入理解Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机--类文件结构</title>
      <link href="posts/b05d8834.html"/>
      <url>posts/b05d8834.html</url>
      
        <content type="html"><![CDATA[<h1 id="Class类文件的结构"><a href="#Class类文件的结构" class="headerlink" title="Class类文件的结构"></a>Class类文件的结构</h1><ol><li>以八个字节为基础单位的二进制流</li><li>无符号数为基本数据类型。以u1,u2,u4,u8分别代表1字节，2字节，4字节，8字节的无符号数</li><li>表是由多个无符号数或者其他表作为数据项构成的复合数据类型。习惯以_info结尾</li></ol><h2 id="魔数与Class文件的版本"><a href="#魔数与Class文件的版本" class="headerlink" title="魔数与Class文件的版本"></a>魔数与Class文件的版本</h2><ol><li>头四个字节为魔数，标识他为Class文件。值为0xCAFEBABE</li><li>后面四个字节为版本号。前两个为次版本号（Minor Version）,后两个为主版本号（Minor Version）。次版本号基本未使用，固定为0。主版本号从45开始。</li><li>高版本JDK能向下兼容以前的Class文件但是不能运行之后版本的Class文件</li><li>例如JDK1.1能支持的版本号为:<code>45.0-45.65535</code>,JDK1.2支持<code>45.0-46.65535</code></li></ol><h2 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h2><ol><li>主要存放字面量和符号引用。字面量类似常量，如文本字符串，被声明为final的常量值等等。符号引用属于编译原理相关，包括全限定类名，方法字段名称等等</li><li>符号引用不经过虚拟机运行期转换就无法得到真正的内存入口地址，就无法被虚拟机直接使用。当虚拟机做类加载时，将从常量池获取相应的符号引用，再在类创建时或运行时解析翻译到具体的内存地址中。</li></ol><h3 id="CONSTANT-Class-info"><a href="#CONSTANT-Class-info" class="headerlink" title="CONSTANT_Class_info"></a>CONSTANT_Class_info</h3><ol><li>用u1存储tag，标识常量类型</li><li>用u2存储name_index,是常量池的索引值，指向一个CONSTANT_Utf8_info类型常量，代表了该类的全限定名。</li></ol><h3 id="CONSTANT-Utf8-info"><a href="#CONSTANT-Utf8-info" class="headerlink" title="CONSTANT_Utf8_info"></a>CONSTANT_Utf8_info</h3><ol><li>用u1存储tag，标识常量类型</li><li>用u2存储length，代表字符串长度是多少字节</li><li>之后是用u1存储bytes，一共有length个字节</li></ol><h2 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h2><p>常量池之后两个字节代表访问标志。例如：是类还是接口，是否是public，是否是abstract等等</p><h2 id="类索引，父类索引，接口索引集合"><a href="#类索引，父类索引，接口索引集合" class="headerlink" title="类索引，父类索引，接口索引集合"></a>类索引，父类索引，接口索引集合</h2><ol><li>类索引，父类索引为u2类型的数据，接口索引集合为u2类型的数据集合。由此确定该类型的继承关系。</li><li>类索引，父类索引用u2类型的索引值表示，各自指向一个<code>CONSTANT_Class_info</code>的类描述符常量。又通过该常量的<code>CONSTANT_Utf8_info</code>找到全限定名字符串。</li><li>接口索引集合第一项的u2类型的数据为接口计数器，表示索引表的容量。</li></ol><h2 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h2><ol><li>描述变量，包括类级变量，实例级变量，但不包括方法中的局部变量。</li><li>字段包括: 修饰符<code>（public，private,protected,static,final,volatile,transient）</code>,字符数据类型（基本类型，对象，数组）,字段名称</li><li>修饰符适合用标志位表示，但字符数据类型，字段名称只能引用常量池中的常量来描述</li><li>字符修饰符用u2,access_flags表示。之后是u2的name_index,descriptor_index是对常量池的引用，代表了字段的简单名称和方法的描述符。</li><li>描述符用来描述字段的数据类型，方法的参数列表和返回值。基本数据类型类型和void用一个大写字符表示。例如C代表char。对象类型用L加对象的全限定名表示，例如Ljava/lang/Object;</li><li>数组每一维度用一个<code>[</code>表示，如定义了<code>java.lang.String [][]</code>则记录为<code>[[Ljava/lang/String;</code></li><li>用描述符描述方法，则先参照列表，再返回值的顺序描述。例如<code>String test(char [] chars)</code>为   <code>([C)[Ljava/lang/String;</code></li><li>字段表集合不会列出从父类或者父接口中继承来的字段。但有可能出现Java代码中不存在的字段。例如编译器为内部类自动添加指向外部类实例的字段。</li></ol><h2 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h2><ol><li>和字段表集合极其相似。没有<code>volatile,transient</code>,但多了<code>synchronized,native,strictfp,abstract</code>关键字</li><li>方法中的代码，存放再方法属性表集合中名为<code>Code</code>的属性里面</li><li>若子类没有重写父类方法，则不会出现父类方法信息</li><li>有可能出现由编译器自动添加的方法，例如类构造器<code>&lt;cinit&gt;()</code>,实例构造器<code>&lt;init&gt;()</code>方法</li></ol><h2 id="属性表集合"><a href="#属性表集合" class="headerlink" title="属性表集合"></a>属性表集合</h2><p>Class文件，字段表，方法表都可以携带自己的属性表集合，以描述某些场景专有的信息。</p><h3 id="Code属性"><a href="#Code属性" class="headerlink" title="Code属性"></a>Code属性</h3><ol><li>方法体中代码经过Javac编译器处理后，变成字节码指令存储在Code属性中</li><li><code>attribute_name_index</code>是指向<code>CONSTANT_Utf8_info</code>的索引，固定为”Code”，代表该属性名称</li><li><code>attribute_length</code>指示了属性值的长度，为u4</li><li><code>max_stack</code>代表了操作数栈深度的最大值。根据该值来分配栈帧中的操作数栈深度。</li><li><code>max_locals</code>代表了局部变量表所需的存储空间。单位是Slot（变量槽），变量槽是虚拟机为局部变量分配内存所使用的最小单位。不超过32位的一个槽，double和long占用两个槽。</li><li>方法参数（包括实例方法隐藏参数this），异常参数，方法体中的局部变量都依赖局部变量表存储</li><li>虚拟机将局部变量表中的变量槽复用。当代码执行超出了一个局部变量的作用域时，该局部变量所占的变量槽可以被其他局部变量使用。根据同时生成的最大局部变量数量和类型算出<code>max_locals</code>的大小</li><li><code>code_length</code>,<code>code</code>存储Java源程序编译后生成的字节码指令。每个指令是u1的单字节。可以对应找出该字节码代表什么指令。</li><li>Code属性用于描述代码，其他项目用于描述元数据。</li><li>任何实例方法里面，都可以通过this访问到该方法所属的对象。是通过编译器编译时把对this关键字的访问转变位对一个普通方法参数的访问，虚拟机在调用实例方法时自动传入此参数。因此任何实例方法的局部变量表至少存在一个指向当前对象实例的局部变量。局部变量表也会预留出第一个变量槽位来存放实例对象的引用。</li><li>异常表，当字节码从第<code>start_pc</code>到第<code>end_pc</code>出现了类型为<code>catch_type</code>或其子类的异常，则转到第<code>handle_pc</code>行继续处理。</li></ol><h3 id="Exceptions属性"><a href="#Exceptions属性" class="headerlink" title="Exceptions属性"></a>Exceptions属性</h3><p>列举出方法中可能抛出的受查异常。即方法中throws后面列举的异常。</p><h3 id="LineNumberTable属性"><a href="#LineNumberTable属性" class="headerlink" title="LineNumberTable属性"></a>LineNumberTable属性</h3><p>描述Java源码行号和字节码行号的对应关系。非必须，但如果没有，抛出异常时不会显示出错行号，调试程序也无法按照源码设置断点。</p><h3 id="LocalVariableTable和LocalVariableTypeTable属性"><a href="#LocalVariableTable和LocalVariableTypeTable属性" class="headerlink" title="LocalVariableTable和LocalVariableTypeTable属性"></a>LocalVariableTable和LocalVariableTypeTable属性</h3><p>描述栈帧中局部变量表的变量和Java源码中定义的变量之间的关系。非必须，但没有当其他人引用方法，所有参数名称将会丢失，用arg0,arg1等替代参数名。</p><h3 id="SourceFile属性"><a href="#SourceFile属性" class="headerlink" title="SourceFile属性"></a>SourceFile属性</h3><p>用于记录生成这个Class文件的源码文件名称.大多数类,类名和文件名一致,但有例外。</p><h3 id="ConstantValue属性"><a href="#ConstantValue属性" class="headerlink" title="ConstantValue属性"></a>ConstantValue属性</h3><ol><li>通知虚拟机自动为静态变量赋值。</li><li>对实例变量赋值再<init>()方法中。</li><li>对于类变量，若是final，static修饰，并且是基本类型或者String的话,用<code>ConstantValue</code>进行初始化。否则会选择在<code>&lt;cinit()</code>方法初始化。</li></ol><h3 id="InnerClasses属性"><a href="#InnerClasses属性" class="headerlink" title="InnerClasses属性"></a>InnerClasses属性</h3><p>用于记录内部类和宿主类之间的关联。</p><h3 id="Deprecated及Synthetic属性"><a href="#Deprecated及Synthetic属性" class="headerlink" title="Deprecated及Synthetic属性"></a>Deprecated及Synthetic属性</h3><p>Deprecated属性用于表示某个类，字段或者方法，已经被程序作者定为不再推荐使用。可以用<code>@deprecated</code>注解进行设置。</p><p>Synthetic属性标识此字段或方法不是由Java源码直接产生的，而是由编译器自行添加的。</p><h3 id="StackMapTable属性"><a href="#StackMapTable属性" class="headerlink" title="StackMapTable属性"></a>StackMapTable属性</h3><p>在虚拟机类加载的字节码验证阶段被新类型检查验证器使用。</p><h3 id="Signature属性"><a href="#Signature属性" class="headerlink" title="Signature属性"></a>Signature属性</h3><p>若包含了类型变量或参数化类型，则该属性会为他记录泛型签名信息</p><h3 id="BootStrapMethods属性"><a href="#BootStrapMethods属性" class="headerlink" title="BootStrapMethods属性"></a>BootStrapMethods属性</h3><p>保存<code>invokedynamic</code>指令引用的引导方法限定符</p><h3 id="MethodParameters属性"><a href="#MethodParameters属性" class="headerlink" title="MethodParameters属性"></a>MethodParameters属性</h3><p>记录方法的各个形参名称和信息</p><h3 id="模块化相关属性"><a href="#模块化相关属性" class="headerlink" title="模块化相关属性"></a>模块化相关属性</h3><p>支持Java模块化相关功能</p><h3 id="运行时注解相关属性"><a href="#运行时注解相关属性" class="headerlink" title="运行时注解相关属性"></a>运行时注解相关属性</h3><p>记录了类,字段,方法的声明上记录运行时可见注解</p><h1 id="字节码指令简介"><a href="#字节码指令简介" class="headerlink" title="字节码指令简介"></a>字节码指令简介</h1><p>由一个字节长度的操作码和零或多个的操作数构成.是面向操作数栈的,所以大多数指令不包括操作数,只有操作码.指令参数都放在操作数栈中。</p><h2 id="字节码与数据类型"><a href="#字节码与数据类型" class="headerlink" title="字节码与数据类型"></a>字节码与数据类型</h2><ol><li>iload指令用于从局部变量表中加载int型的数据到操作数栈中</li><li>大多数指令没有支持byte,char,short,boolean。编译器会在编译或者运行期将他们扩展为int型数据</li></ol><h2 id="加载和存储指令"><a href="#加载和存储指令" class="headerlink" title="加载和存储指令"></a>加载和存储指令</h2><p>用于将数据在栈帧中的局部变量表和操作数栈之间来回传输</p><h2 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h2><p>用于对操作数栈上的两个值进行某种特定运算，并且把结果重新存入操作栈顶</p><p>大致分为两种类型：对整数数据，浮点型数据</p><p>不存在直接支持byte,short,char,boolean的运算，都是用操作int类型的指令代替</p><h2 id="类型转换指令"><a href="#类型转换指令" class="headerlink" title="类型转换指令"></a>类型转换指令</h2><ol><li>将两种不同的数据类型相互转换，实现用户代码中的显式类型转换</li><li>小范围到大范围类型为安全转换，无须显示的转换指令，如<code>int 转 long,float,double</code>,<code>long转folat,double</code>,<code>float转double</code></li><li>int转long，只会简单的将高位抛弃，所以可能导致不同的正负号</li><li>转换可能出现上限溢出，下限溢出，精度丢失等等，但永远不可能导致虚拟机抛出运行时异常</li></ol><h2 id="对象创建与访问指令"><a href="#对象创建与访问指令" class="headerlink" title="对象创建与访问指令"></a>对象创建与访问指令</h2><p>Java虚拟机对类实例和数组的创建使用了不同的字节码指令</p><h2 id="操作数栈管理指令"><a href="#操作数栈管理指令" class="headerlink" title="操作数栈管理指令"></a>操作数栈管理指令</h2><p>将操作数栈顶一个或者两个元素出栈：pop,pop2</p><p>将栈顶最顶端两个数值交换：swap</p><h2 id="控制转移指令"><a href="#控制转移指令" class="headerlink" title="控制转移指令"></a>控制转移指令</h2><p>有条件或无条件的修改PC寄存器的值，从指定位置指令的下一条指令继续执行程序</p><p>各种类型的比较最终都会转化为int类型的比较操作</p><h2 id="方法调用和返回指令"><a href="#方法调用和返回指令" class="headerlink" title="方法调用和返回指令"></a>方法调用和返回指令</h2><ol><li><code>invokevirtual</code>:用于调用对象的实例方法,根据对象的实际类型进行分派(虚方法分派)</li><li><code>invokeinterface</code>:用于调用接口方法,在运行时搜索一个实现了这个接口方法的对象,找出合适的方法调用</li><li><code>invokespecial</code>:调用一些需要特殊处理的实例方法,例如实例初始化方法,私有方法,父类方法</li><li><code>invokestatic</code>:用于调用静态方法(static)方法</li><li><code>invokedynamic</code>:用于在运行时动态解析出调用点限定符所引用的方法</li><li>方法返回指令是根据返回值的类型区分的.包括ireturn(返回类型是boolean,byte,char,short,int),lreturn,freturn,dreturn,areturn,return(返回值为void的,实例初始化的,类和接口的类初始化方法)</li></ol><h2 id="异常处理指令"><a href="#异常处理指令" class="headerlink" title="异常处理指令"></a>异常处理指令</h2><p>对显示抛出异常的操作（throw语句）进行处理</p><p>而处理异常（catch语句）不由字节码指令实现，是由异常表实现</p><h2 id="同步指令"><a href="#同步指令" class="headerlink" title="同步指令"></a>同步指令</h2><p>Java虚拟机可以支持方法级同步和方法内部一段指令序列的同步,使用管程实现.</p><p>执行线程要求先成功持有管程,然后才能执行方法,最后当方法完成时释放管程</p><p>使用synchronized语句块表示</p><p>无论这个方法是正常结束还是异常退出,方法调用的每条monitorenter指令都必须有其对应的monitorexit指令</p><h1 id="公有设计，私有实现"><a href="#公有设计，私有实现" class="headerlink" title="公有设计，私有实现"></a>公有设计，私有实现</h1><p>&lt;&lt;Java虚拟机规范&gt;&gt;描绘了Java虚拟机应有的共同程序存储格</p><p>式：Class文件格式以及字节码指令集</p><p>任何一款Java虚拟机都必须能读取Class文件并且精确实现其中的Java虚拟机代码的语义</p><p>Java虚拟机只要外部接口与规范描述一致即可，具体实现不规定</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Class文件格式具备平台中立，紧凑，稳定，可扩展性的特点。是Java技术体系实现平台无关，语言无关的重要支柱</p><p>Class文件是Java虚拟机执行引擎的数据入口。</p>]]></content>
      
      
      <categories>
          
          <category> JVM学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 深入理解Java虚拟机 </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机--垃圾收集器与内存分配策略</title>
      <link href="posts/7dd93822.html"/>
      <url>posts/7dd93822.html</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾标记算法"><a href="#垃圾标记算法" class="headerlink" title="垃圾标记算法"></a>垃圾标记算法</h1><h2 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h2><p>缺点在于两个对象互相引用,但是又不可被访问时,引用计数不为0,无法被回收</p><p>Java虚拟机没有采用这种算法</p><h2 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h2><p>通过GC Roots根对象作为起始节点集,引用链搜索.</p><p>如果对象到GC Roots不可达,则不可能再被使用</p><h3 id="可作为GC-Roots的对象"><a href="#可作为GC-Roots的对象" class="headerlink" title="可作为GC Roots的对象"></a>可作为GC Roots的对象</h3><ol><li>虚拟机栈中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象,例如字符串常量池里的引用</li><li>Native方法引用的对象</li><li>Java虚拟机内部的引用</li><li>被synchronized持有的对象</li></ol><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>最传统的引用,形如:<code>Object obj=new Object()</code></p><p>只要强引用关系还存在,则永远不会回收掉被引用的对象</p><h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>描述一些还有用,但是非必须的对象。在系统将要发生内存溢出异常前，会把这些对象列入回收范围内进行二次回收。</p><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>也是描述一些还有用,但是非必须的对象。比软引用更弱，只能生存到下一次垃圾收集发生为止。垃圾收集器工作时，不管内存是否充足，都会回收掉弱引用关联的对象</p><h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>无法通过虚引用得到一个对象实例。设置虚引用关联的唯一目的是能在这个对象被收集器回收时收到一个系统通知</p><h2 id="不可达对象的回收过程"><a href="#不可达对象的回收过程" class="headerlink" title="不可达对象的回收过程"></a>不可达对象的回收过程</h2><ol><li>进行可达性分析后，发现没有于GC Roots相连接的引用链，进行第一次标记</li><li>随后查看是否有必要执行finalize（）方法，如果没有重写它，或者已经被调用过，则没有必要执行，则回收</li><li>如果有必要执行，则放置在F-Queue队列中</li><li>finalize方法是对象最后的逃脱机会，如果它在finalize方法中重新与引用链上任何一个对象建立关联，则不会被回收。如果还没逃脱，则被回收了。</li><li>任何一个对象finalize方法只会被执行一次<br>尽量避免使用finalize（）方法<h2 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h2></li><li>主要回收废弃的常量和不再使用的类型</li><li>回收类型很苛刻，得同时满足三个条件：该类所有实例被回收，加载该类的类加载器被回收，该类对应的Class对象没有被引用</li><li>在框架等自定义类加载器的场景中，通常需要虚拟机具有类型卸载的能力</li></ol><h1 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h1><h2 id="分代收集理论"><a href="#分代收集理论" class="headerlink" title="分代收集理论"></a>分代收集理论</h2><ol><li>根据弱分代假说，强分代假说。分为新生代，老年代</li><li>跨代引用假说：跨带引用相对于同代引用占比很小。所以在新生代建立全局的数据结构（记忆集），标识出老年代哪一块内存会存在跨带引用。之后的Minor GC中，只有包含在记忆集的对象才会加入GC Roots中进行扫描</li><li>Minor GC/Young GC 目标只是新生代的垃圾收集</li><li>Major GC/Old GC 目标只是老年代的垃圾收集，只有CMS收集器有</li><li>Full GC 收集整个Java堆和方法区的垃圾收集<h2 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h2>先标记所有要回收的对象，标记完成后统一回收所有被标记对象<br>缺点：<ol><li>执行效率不稳定，随对象数量的增长而下降</li><li>存在内存空间碎片化的问题</li></ol></li></ol><h2 id="标记复制算法"><a href="#标记复制算法" class="headerlink" title="标记复制算法"></a>标记复制算法</h2><h3 id="半区复制"><a href="#半区复制" class="headerlink" title="半区复制"></a>半区复制</h3><p>将内存容量划分成大小相等的两块，每次只使用其中一块。当其中一块用完后，把还存活的对象复制到另一块，再把已经使用的清空。<br>实现简单，运行高效，但是可用内存缩小为原来的一半。</p><h3 id="优化后的半区复制"><a href="#优化后的半区复制" class="headerlink" title="优化后的半区复制"></a>优化后的半区复制</h3><ol><li>把新生代分为Eden，Survivor1，Survivor2区，空间为8：1：1</li><li>每次只使用Eden区和其中一块Survivor区</li><li>发生垃圾回收时，将Eden区和使用的Survivor区仍然存活的对象复制到另一块Survivor区，清空Eden区和之前使用的Survivor区</li><li>如果另一块Survivor区没有足够的空间存放存活对象，这些对象可以通过担保机制直接进入老年代</li></ol><h2 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a>标记整理算法</h2><ol><li>针对老年代的算法</li><li>先标记,再让所有存活的对象都向内存空间的一端移动,然后直接清理掉边界以外的内存</li><li>是移动式算法,负载较重,需要全程暂停用户应用程序,即Stop The World.但优点是不会产生碎片.总的来说提高了吞吐量.因为HotShot虚拟机关注吞吐量,所以采用了标记整理.</li></ol><h1 id="HotSpot虚拟机细节"><a href="#HotSpot虚拟机细节" class="headerlink" title="HotSpot虚拟机细节"></a>HotSpot虚拟机细节</h1><h2 id="根节点枚举"><a href="#根节点枚举" class="headerlink" title="根节点枚举"></a>根节点枚举</h2><ol><li>固定可作为GC Roots的主要是:1.全局性引用(常量和类静态属性)2.执行上下文(栈帧中的本地变量表)</li><li>根节点枚举必须STW,因为它必须要再一个能保障一致性的快照上才得以进行</li><li>通过OopMap直接得到哪个地方存放着对象引用.不需要一个不漏的检查所有执行上下文和全局的引用位置</li></ol><h2 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h2><ol><li>只有在特定的位置才记录下OopMap信息,即安全点</li><li>用户进程必须执行到安全点才能够暂停</li><li>安全点位置选取以”是否具有让程序长时间执行的特征”为标准,最明显的特征就是有指令序列的复用</li><li>还需要在垃圾收集发生时让所有线程都跑到最近的安全点,然后停顿下来</li></ol><h3 id="抢先式中断"><a href="#抢先式中断" class="headerlink" title="抢先式中断"></a>抢先式中断</h3><p>当垃圾收集时,把所有线程中断,再让不在安全点的继续跑到安全点</p><p>没有虚拟机采用</p><h3 id="主动式中断"><a href="#主动式中断" class="headerlink" title="主动式中断"></a>主动式中断</h3><p>简单设置标志位,每个线程执行时不断轮询它,一旦中断标志位为真,则自己在最近的安全点主动中断挂起。</p><p>轮询操作精简到只有一条汇编指令–完成安全点轮询和触发线程中断</p><h2 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h2><ol><li>处于Sleep或Block状态的用户线程无法响应虚拟机的中断请求，不能走到安全的地方去中断挂起自己。</li><li>所以安全区域确保在某一段代码中，引用关系不会发生改变，在这个区域内进行垃圾收集是安全的。可以把安全区域看作是被扩展拉伸的安全点</li><li>用户线程到了安全区域，会标识已经进入安全区域。而要离开时，如果虚拟机已经完成了根节点枚举，则继续执行，否则要一直等待直到收到可以离开安全区的信息</li></ol><h2 id="记忆集和卡表"><a href="#记忆集和卡表" class="headerlink" title="记忆集和卡表"></a>记忆集和卡表</h2><ol><li>记忆集是用于记录从非收集区域指向收集区域的指针集合的抽象数据结构。</li><li>收集器只需要通过记忆集判断出某一块非收集区域是否存在有指向收集区域的指针即可</li><li>所以可以采用更粗的记录粒度来节省记忆集的开销。</li><li>目前最常采用的是卡表，卡表是记忆集的具体实现。卡精度：每个记录精确到一块内存区域，该区域内有对象含有跨带指针。</li><li>卡表最简单是实现是字节数组，每一个元素都对应着其标识的内存区域中一块特定大小的内存块，即卡页。大小为2的9次方，512字节。</li><li>一个卡页通常不止一个对象。只要卡也中其中一个对象存在了跨代指针，就标识为1，即变脏。</li><li>垃圾收集时，就把卡表中变脏的元素对应的内存块加入GC Roots中一并扫描</li></ol><h2 id="写屏障"><a href="#写屏障" class="headerlink" title="写屏障"></a>写屏障</h2><ol><li>有其他分代区域中对象引用了本区域对象时,对应的卡表元素应该变脏.时间点应该发生在引用类型字段赋值的那一刻。</li><li>HotSpot虚拟机通过写屏障技术维护卡表状态,是在虚拟机层面上对”引用类型字段赋值”这个动作的AOP切面,即在引用对象赋值时会产生一个环绕通知,供程序执行额外操作。</li><li>应用写屏障后，虚拟机会为所有赋值操作生成相应的指令。每次对引用进行更新，就会产生额外的开销。</li><li>卡表在高并发场景下的“伪共享”问题：缓存系统以缓存行为单位存储，当多线程互相修改独立的变量时，如果这些变量恰好共享同一个缓存行，就会彼此影响而导致性能下降。</li><li>为避免伪共享问题，可以先检查卡带标记，只有当该卡表元素未被标记过时才将其标记为变脏。</li></ol><h2 id="并发的可达性分析"><a href="#并发的可达性分析" class="headerlink" title="并发的可达性分析"></a>并发的可达性分析</h2><ol><li>可达性分析算法理论上要求全过程都STW。在根节点枚举过程中，通过OopMap技术，停顿时间已经比较短暂了。但是从GC Roots遍历图花费的时间与堆容量成正比，所以需要优化。</li><li>如果用户线程与收集器并发工作。收集器在对象图上标记颜色，同时用户线程在修改引用关系，即修改对象图的结构。会产生两种后果：1.把原本消亡的对象标记为存活，这可以容忍 2.把存活对象标记为消亡，则肯定会出错</li></ol><h3 id="对象消失"><a href="#对象消失" class="headerlink" title="对象消失"></a>对象消失</h3><p>即原本是黑色的对象被误标记为白色，需要下述条件同时满足：</p><ol><li>新增了黑色到白色对象的新引用。</li><li>删除了灰色到该白色对象的所有引用</li></ol><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>破坏两个条件之一即可。都是通过写屏障实现</p><ol><li>增量更新。理解为当黑色对象一旦插入了指向白色对象的引用后，它就变回灰色对象。</li><li>原始快照。无论引用对象删除与否，都会按照刚刚开始扫描的那一刻的对象图快照来进行搜索。</li></ol><h1 id="经典垃圾收集器"><a href="#经典垃圾收集器" class="headerlink" title="经典垃圾收集器"></a>经典垃圾收集器</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>如果两个收集器之间存在连线，则可以搭配使用</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/abcd.png" alt="abcd"></p><h2 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h2><ol><li>单线程新生代收集器，必须STW</li><li>是客户端模式下默认的新生代收集器，简单而高效</li><li>对于内存资源受限，单核处理器或处理器核心数较少的环境表现良好</li></ol><h2 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h2><ol><li>是Serial收集器的并行版本，其他与Serial大致相同</li><li>JDK9后，ParNew与CMS只能互相搭配使用</li><li>在单核心处理器不会有比Serial更好的效果</li></ol><h2 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a>Parallel Scavenge</h2><ol><li>同样是基于标记-复制算法，并行收集的多线程收集器。被认为是吞吐量优先收集器。</li><li>目标是达到一个可控制的吞吐量，即运行用户代码的时间/（运行用户代码的时间+运行垃圾收集时间）</li><li>停顿时间短适合用户交互，高吞吐量适用于后台运算，能最高效率的利用处理器资源，尽快完成任务。</li><li>-XX:MaxGCPauseMillis控制最大垃圾收集停顿时间。设置吞吐量大小：-XX:GCTimeRatio</li><li>-XX:+UseAdaptiveSizePolicy 根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大吞吐量。自适应的调节策略。</li></ol><h2 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h2><p>单线程收集器，使用标记整理算法，供客户端模式使用的。</p><h2 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h2><p>支持多线程并发收集。</p><p>“吞吐量优先”收集器搭配组合：Parallel Scavenge与Parallel Old</p><h2 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h2><ol><li>并发收集，低停顿，以获取最短回收停顿时间为目标</li><li>基于标记-清除算法</li></ol><h3 id="四个阶段"><a href="#四个阶段" class="headerlink" title="四个阶段"></a>四个阶段</h3><ol><li>初始标记。需要STW，仅仅标记一下GC Roots直接关联到的对象，速度很快。</li><li>并发标记。从GC Roots直接关联到的对象开始遍历整个对象图，耗时较长但是不需要停顿用户线程，可以并发执行。</li><li>重新标记。修改并发标记期间，因用户线程继续运行而导致的标记发生变动的那一部分对象的标记记录。参考之前的增量更新。需要STW，但是时间仍然比较短。</li><li>并发清除。删除掉标记阶段判断为已经死亡的对象，不需要移动对象，所以可以和用户线程并发执行。</li></ol><h3 id="三个问题"><a href="#三个问题" class="headerlink" title="三个问题"></a>三个问题</h3><ol><li>对处理器资源敏感。即在并发阶段，虽然不会导致用户线程停顿，但因为占用一部分线程，而导致应用程序变慢，降低总吞吐量。</li><li>无法处理浮动垃圾。可能因失败而导致另一次完全的STW的Full GC产生。浮动垃圾即用户线程在并发执行时还会伴随着新的垃圾对象不断产生，但CMS无法在当次收集中处理他们。而且用户线程持续运行，就需要预留足够的内存空间提供给用户线程使用。如果预留的空间无法满足程序分配新对象的需要，就会出现并发失败（Concurrent Mode Failure）就会冻结用户线程的执行，临时启用Serial Old收集器重新进行老年代的垃圾收集。</li><li>有大量的空间碎片。如果无法找到足够大的连续空间来分配给当前对象，则会提前触发一次Full GC。</li></ol><h2 id="Garbage-First收集器"><a href="#Garbage-First收集器" class="headerlink" title="Garbage First收集器"></a>Garbage First收集器</h2><ol><li>面向局部收集，基于Region内存布局</li><li>JDK8后，被称为全功能的垃圾收集器。主要面向服务端。</li><li>JDK9后完全取代了Parallel Scavenge加Parallel Old组合，成为服务端模式下默认垃圾收集器。</li><li>建立了停顿时间模型。即能够支持指定的一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间大概率不超过N毫秒。</li><li>它可以面向堆内存的任何部分来组成回收集。衡量标准不再是属于哪个分代，而是哪块内存存放的垃圾数量最多，回收收益最大。即为Mixed GC模式。</li><li>把连续的Java堆划分为多个大小相等的独立区域（Region），每个Region可以扮演Eden，Survivor或者老年代空间。对扮演不同角色的Region采取不同的策略进行处理。</li><li>还有专门存储大对象的Humongous区域。只要大于Region容量的一半即认为是大对象。而大于一个Region的大对象就会存放在N个连续的Humongous Region区域。将Humongous Region区域作为老年代的一部分看待。</li><li>将Region作为单位回收的最小单元，每次收集的内存空间是Region大小的整数倍。</li><li>按照各个Region垃圾堆积的价值大小，即回收所获得的空间大小和回收所需时间的经验值。在后台维护优先队列，根据用户运行的收集停顿时间，优先回收价值收益最大的Region。</li></ol><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li>跨Region引用对象的解决。每个Region都维护自己的记忆集。记录下别的Region指向自己的指针，并且标记这些指针分别在哪些卡页的范围内。记忆集为哈希表，key为别的Region的起始地址，value是卡表索引号的集合。大致需要10%-20%的Java堆内存维持收集器工作。</li><li>并发标记阶段采用原始快照保证收集线程与用户线程互不干扰的运行。因为程序继续运行会有新对象的创建。所以每个Region都设计了两个指针，划分出一块用于并发回收过程中新对象的分配。这个地址内的对象默认是存活的，不纳入回收范围。如果内存回收速度赶不上分配速度，则也会Full GC,STW</li><li>建立可靠的停顿预测模型。根据每个Region的回收耗时等信息分析得出平均值等统计信息。衰减平均值比普通的平均值更加容易受到新数据的影响，代表“最近的”平均状态。即Region的统计状态越新，越能决定其回收价值。通过这些信息进行预测，就能在不超过期望停顿时间的约束下获得最高的收益。</li></ol><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>初始标记。需要STW，仅仅标记一下GC Roots直接关联到的对象，并且修改TAMS指针,让下一阶段用户线程并发执行时,能正确的在可用Region中分配新对象.需要停顿线程,但耗时很短。</li><li>并发标记。从GC Roots直接关联到的对象开始遍历整个对象图，耗时较长但是不需要停顿用户线程，可以并发执行。扫描结束后，还要重新处理原始快照记录下在并发有引用变动的对象。</li><li>最终标记。对用户线程做另一个短暂的暂停，用于处理并发阶段结束后仍然遗留下来的最后那少量的原始快照（SATB）记录。</li><li>筛选回收。根据Region的回收价值和成本进行排序，再根据用户所期望的停顿时间来制定回收计划。把决定回收的Region存活对象复制到空的Region，再清理掉整个旧Region的全部空间。必须暂停用户线程。</li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>目标是在延迟可控的情况下获得尽可能高的吞吐量。</p><p>可以由用户指定期望的停顿时间</p><p>停顿时间设置100-200ms之间会比较合适，太低则导致选出来的回收集只占堆内存很小一部分。</p><p>追求能应付用于的内存分配速率，而不是追求一次把整个Java堆清理干净。</p><p>G1整体是基于标记整理算法的，而局部即两个Region之间，则是基于标记复制算法的。使得不会产生内存碎片。</p><h3 id="相对于CMS的缺点"><a href="#相对于CMS的缺点" class="headerlink" title="相对于CMS的缺点"></a>相对于CMS的缺点</h3><ol><li>内存占用率高，因为卡表</li><li>对写屏障有复杂操作，不得不实现为类似消息队列的结构，先放到队列，再异步处理。</li><li>在小内存上CMS大概率优于G1平衡点大致是6-8GB内存</li></ol><h1 id="低延迟垃圾回收器"><a href="#低延迟垃圾回收器" class="headerlink" title="低延迟垃圾回收器"></a>低延迟垃圾回收器</h1><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>衡量垃圾收集器指标：内存占用，吞吐量，延迟。最多能同时达到其中两项</p><p>CMS，G1分别采用增量更新，原始快照方式实现了标记阶段的并发，但是对于标记后的处理仍未得到妥善解决。</p><p>Shenandoah和ZGC几乎整个工作过程都是并发的，只有在初始标记，最终标记这些阶段有短暂的停顿。</p><h2 id="ZGC收集器"><a href="#ZGC收集器" class="headerlink" title="ZGC收集器"></a>ZGC收集器</h2><p>基于Region内存布局的，不设分代的，使用了读屏障，染色指针和内存多映射来实现的可并发的标记整理算法，以低延迟为首要目标的一款垃圾收集器。</p><h3 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h3><p>Region具有动态性，动态创建和销毁，有动态的区域容量大小</p><ol><li>小型Region：容量固定2MB</li><li>中型Region：容量固定32MB</li><li>大型Region：容量不固定，但是必须为2MB的整数倍，用于放置4MB或以上的大对象。每个大型Region只会存放一个大对象。</li></ol><h3 id="染色指针技术"><a href="#染色指针技术" class="headerlink" title="染色指针技术"></a>染色指针技术</h3><p>把标记信息直接记录在引用对象的指针上。标志信息包括引用对象的三色标记状态，是否进入重分配集（即被移动过）等。</p><p>优势：</p><ol><li>一旦某个Region的存活对象被移走之后，该Region立即就能被释放和重用。</li><li>大幅度减少内存屏障的使用数量，只使用了读屏障。</li><li>可扩展，之后可以把指针前18位开发使用。</li></ol><h3 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h3><p>分为4个大阶段，都可以并发执行，只在两个阶段中间会存在短暂的停顿小阶段</p><h4 id="并发阶段。"><a href="#并发阶段。" class="headerlink" title="并发阶段。"></a>并发阶段。</h4><p>遍历对象图做可达性分析。标记只在染色指针上进行。</p><h4 id="并发预备重分配。"><a href="#并发预备重分配。" class="headerlink" title="并发预备重分配。"></a>并发预备重分配。</h4><p>得出本次收集过程需要清理哪些Region，将他们组成重分配集。ZGC每次都会扫描所有的Region，换取G1中记忆集的维护成本。</p><h4 id="并发重分配。"><a href="#并发重分配。" class="headerlink" title="并发重分配。"></a>并发重分配。</h4><ol><li>把重分配集中存活对象复制到新的Region中。并且为重分配集的每个Region维护转发表，记录从旧对象到新对象的转向关系。</li><li>仅从引用就明确得知一个对象是否处于重分配集中。</li><li>自愈能力：在ZGC中，当读取处于重分配集的对象时，会被读屏障拦截，通过转发表记录将访问转发到新复制的对象上，并同时修正更新该引用的值，使其直接指向新对象。只慢一次。</li></ol><h4 id="并发重映射"><a href="#并发重映射" class="headerlink" title="并发重映射"></a>并发重映射</h4><p>修正整个堆中指向重分配集中旧对象的所有引用。不是迫切任务，因为可以旧引用通过自愈，最多是第一次比较慢。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>能承受的对象分配速率不会太高。</p><p>支持“NUMA-Aware”（非统一的内存访问架构。为多处理器计算机所设计的内存架构）的内存分配。</p><p>令人震惊的，革命性的ZGC  </p><h2 id="Epsilon收集器"><a href="#Epsilon收集器" class="headerlink" title="Epsilon收集器"></a>Epsilon收集器</h2><p>不能够进行垃圾收集，无操作的垃圾收集器。对于微服务等，只要Java虚拟机能正确分配内存，在堆耗尽之前就会退出，那么运行负载极小，没有任何回收行为的Epsilon是恰当的选择。</p><h1 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>自动给对象分配内存</p><p>自动回收分配给对象的内存</p><h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><ol><li>对象内存分配应该都是堆上分配(但也有可能栈上分配)</li><li>新生对象通常分配在新生代中,少数情况(如对象大小超过一定阈值)可能直接分配到老年代</li></ol><h3 id="对象优先分配Eden区域"><a href="#对象优先分配Eden区域" class="headerlink" title="对象优先分配Eden区域"></a>对象优先分配Eden区域</h3><ol><li>大多数情况下在Eden区分配</li><li>新生代总可用空间为Eden区+1个Survivor区的总容量</li><li>当Eden没有足够的空间时发生一次Minor GC,如果对象放不进Survivor区,则通过分配担保机制提前把这些对象转移到老年代</li></ol><h3 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h3><p>大对象需要大量连续的内存空间，例如很长的字符串,很长的数组。</p><p>容易导致提前垃圾收集，以获取足够的连续空间安置大对象</p><p>大对象直接在老年代分配，以避免在Eden与Survivor区来回复制，付出高额内存复制开销</p><h3 id="长期存活对象进入老年代"><a href="#长期存活对象进入老年代" class="headerlink" title="长期存活对象进入老年代"></a>长期存活对象进入老年代</h3><p>每个对象头有对象年龄计数器。如果经过一次MinorGC仍然存活，并且能被Survivor容纳，则计数器+1，当到15时，则晋身为老年代。</p><h3 id="动态对象年龄判断"><a href="#动态对象年龄判断" class="headerlink" title="动态对象年龄判断"></a>动态对象年龄判断</h3><p>如果Survivor区中相同年龄所有对象的总和大于Survivor区的一半，那么年龄大于等于该年龄‘的对象直接进入老年代</p><h3 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h3><p>在Minor GC前，检查老年代最大可用连续空间是否大于新生代的所有对象空间，如果成立，则这次Minor GC安全。负责要看是否允许担保失败。允许，则检查老年代最大可用连续空间是否大于历次晋升到老年代的平均大小，如果小于，或者不允许担保，则Full GC。</p><p>新生代中，把Survivor无法容纳的对象直接送入老年代，担保前提是老年代本身有容纳这些对象的剩余空间。</p><p>在JDK7及之后。不能设置参数影响空间分配担保策略。只要老年代最大可用连续空间大于新生代的所有对象空间，或者大于历次晋升到老年代的平均大小，就进行Minor GC，负责Full GC</p>]]></content>
      
      
      <categories>
          
          <category> JVM学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 深入理解Java虚拟机 </tag>
            
            <tag> 垃圾收集器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机--Java内存区域与内存溢出异常</title>
      <link href="posts/6fa1fa98.html"/>
      <url>posts/6fa1fa98.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习&lt;&lt;深入理解Java虚拟机&gt;&gt;第三版时做的笔记</p></blockquote><h1 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h1><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><ol><li>线程私有</li><li>记录正在执行的虚拟机字节码指令的地址(如果是Native方法,则位空)</li><li>不会有OutOfMemoryError</li></ol><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><ol><li>线程私有</li><li>存储的是一个个栈帧</li><li>每个方法对应一个栈帧,方法调用则入栈,执行结束则出栈</li><li>可能出现StackOverFlowError与OutOfMemoryError,前者出现是为栈分配了这么大的内存空间,但是线程请求的空间大于所分配的空间,例如不断递归。后者是允许栈动态扩展，但是扩展了还是无法申请到足够的内存，相当于把所有的内存都耗尽了</li></ol><h3 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h3><h4 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h4><ol><li>局部变量槽(slot)中long和double占用两个槽</li><li>所需的内存空间在编译器间完成分配<h4 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h4><h4 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h4><h4 id="方法出口"><a href="#方法出口" class="headerlink" title="方法出口"></a>方法出口</h4></li></ol><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>与虚拟机栈类似，只是虚拟机栈是为虚拟机执行Java方法服务，本地方法栈是为虚拟机执行本地方法（Native）服务。</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><ol><li>虚拟机管理的内存最大的一块</li><li>所有线程共享</li><li>存放几乎所有对象实例（因为逃逸技术。栈上分配，标量替换优化手段使得并不绝对）</li><li>堆中划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer TLAB），提高对象分配时的效率</li><li>物理上不连续，逻辑上连续</li><li>有可能导致OutOfMemoryError异常</li></ol><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><ol><li>线程共享</li><li>存储类型信息，常量，静态变量，即时编译器的代码缓存等</li><li>有可能导致OutOfMemoryError异常</li><li>垃圾收集行为比较少，但是存在，主要针对常量池的回收和对类型的卸载<h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3></li><li>类加载后，Class文件的常量池表（编译期生成的各种字面量和符号引用）存放在运行时常量池中</li><li>具备动态性，允许期间也可以将新常量放入池中，例如String的intern（）方法<h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2></li><li>不是运行时数据区的一部分，但这部分内存经常使用，也有可能导致OutOfMemoryError异常</li><li>与NIO有相关</li><li>直接内存分配不受Java堆的限制，但是受本机总内存限制</li></ol><h1 id="HotSpot虚拟机中的对象"><a href="#HotSpot虚拟机中的对象" class="headerlink" title="HotSpot虚拟机中的对象"></a>HotSpot虚拟机中的对象</h1><h2 id="HotSpot虚拟机"><a href="#HotSpot虚拟机" class="headerlink" title="HotSpot虚拟机"></a>HotSpot虚拟机</h2><p>热点代码探测能力:通过执行计数器找出最具有编译价值的代码,然后通知即时编译器以方法为单位进行编译.</p><p>编译器与解释器协同工作,在最优化程序响应时间与最佳执行性能中取得平衡</p><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><ol><li>遇到字节码new指令时,先检查能否在常量池中定位到一个类的符号引用</li><li>检查符号引用代表的类是否已被加载,解析,初始化,如果没有则执行类加载过程</li><li>为对象分配内存,根据是否规整,有指针碰撞法,空闲链表法</li><li>内存分配还要考虑线程安全问题,可以有两种办法解决:分配内存空间进行同步处理,如CAS配上失败重试。或者可以先分配到每个线程的TLAB中，当本地缓冲区用完后，再同步锁定</li><li>初始化为零值，所以实例字段不赋初始值也能用</li><li>设置对象头（Object Header），如锁信息，哈希码，GC分代年龄等</li><li>执行构造函数 <init>()</li></ol><h2 id="对象内存布局"><a href="#对象内存布局" class="headerlink" title="对象内存布局"></a>对象内存布局</h2><p>对象头，实例数据，对齐填充</p><h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><ol><li>分为两类，第一类为Mark Word，第二类是类型指针</li><li>Mark Word存储对象自身的运行时数据，如HashCode，GC分代年龄，锁状态标志，线程持有的锁，偏向线程ID，偏向时间戳等</li><li>Mark Word有着动态定义的数据结构，根据对象的状态复用自己的存储空间，根据标志位的不同，存储内容也不同。</li><li><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/IMG_20200802_153218.jpg" alt="IMG_20200802_153218"></li><li>类型指针是指向他的类型元数据的指针，通过该指针确定对象是哪个类的实例</li><li>如果是数组，还有一块记录数组长度的数据<h3 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h3>对象真正存储的有效信息，包括定义的各种类型的字段内容，父类继承下来的字段等等<h3 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h3>确保对象是8字节的整数倍<h2 id="对象访问定位"><a href="#对象访问定位" class="headerlink" title="对象访问定位"></a>对象访问定位</h2>通过栈上的reference数据来操作堆上的具体对象，访问方式有下面两种：<br> 句柄访问，直接指针访问，前者在对象改变时，reference本身不需要修改。后者节省一次指针定位的内存开销，速度更快。HotSpot虚拟机采用直接指针方式。<br> <img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/IMG_20200802_154351.jpg" alt="IMG_20200802_154351"><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1>​    idea配置：<br>​    <code>Run-Edit Configurations-Templates-Application-VM options</code><h2 id="堆的OOM"><a href="#堆的OOM" class="headerlink" title="堆的OOM"></a>堆的OOM</h2>​    -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError<br>​    解释：设置堆的最小值，最大值一样即可避免堆自动扩展。设置了堆大小为20MB，且出现内存溢出异常Dump出当前的内存堆转储快照以便进行事后分析<br><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/1.png" alt="1"></li></ol><p>分析是内存泄漏还是内存溢出.</p><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><p>则查看泄漏对象到GC Roots的引用链,查看为什么垃圾回收器无法回收他们</p><h3 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h3><p>即内存对象确实是必须存活的,则首先看看堆参数设置是否合理(-Xmx,-Xms),能否再向上调整。再从代码上检查，减少程序运行期的内存消耗。</p><h2 id="虚拟机栈和本地方法栈的溢出"><a href="#虚拟机栈和本地方法栈的溢出" class="headerlink" title="虚拟机栈和本地方法栈的溢出"></a>虚拟机栈和本地方法栈的溢出</h2><ol><li>HotSpot虚拟机不区分这两者，栈容量只能通过-Xss来设置</li><li>StackOverflowError与OutOfMemoryError异常，但是HotShot不支持栈内存动态扩展，所以除非创建线程申请内存时就因无法获取足够的内存报OOM，其他只会因为线程请求的栈的深度大于虚拟机所允许的最大深度而报StackOverflowError异常</li></ol><h2 id="方法区和运行时常量池的溢出"><a href="#方法区和运行时常量池的溢出" class="headerlink" title="方法区和运行时常量池的溢出"></a>方法区和运行时常量池的溢出</h2><p>JDK7以后，运行时常量池移至堆之中，主流的框架经常在运行时生成大量动态类的应用场景，需要特别关注这些类的回收状况。但是类被回收的条件很苛刻。</p><p>JDK8的元空间中，很少出现方法区的溢出异常，但是还有参数可以设置：</p><ol><li>-XX:MaxMetaspaceSize 设置元空间最大值，默认是-1，即不限制，只受本地内存的影响</li><li>-XX:MetaspaceSize 设置初始空间的大小，达到该值则触发垃圾收集进行类型卸载</li></ol><h2 id="直接内存溢出"><a href="#直接内存溢出" class="headerlink" title="直接内存溢出"></a>直接内存溢出</h2><p>容量可以通过-XX:MaxDirectMemorySize指定，默认与堆最大值一致。</p><p>间接使用直接内存的典型就是NIO</p>]]></content>
      
      
      <categories>
          
          <category> JVM学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 深入理解Java虚拟机 </tag>
            
            <tag> 运行时数据区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH常用命令与使用</title>
      <link href="posts/50d6952b.html"/>
      <url>posts/50d6952b.html</url>
      
        <content type="html"><![CDATA[<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><pre class=" language-java"><code class="language-java">Tools——Deployment——Configuration 点击加号  选择SFTPSSH configuration需要额外配置配置Mappings <span class="token punctuation">,</span>即本地资源路径和远程路径的映射Local path是本地资源路径，Deployment path on server 是远程服务器对应的文件路径 </code></pre><h3 id="中文乱码问题"><a href="#中文乱码问题" class="headerlink" title="中文乱码问题"></a>中文乱码问题</h3><pre class=" language-java"><code class="language-java">echo $LANG查看字符集在 <span class="token operator">/</span>etc<span class="token operator">/</span>profile配置文件添加export LANG<span class="token operator">=</span><span class="token string">"zh_CN.UTF-8"</span><span class="token punctuation">.</span> <span class="token operator">/</span>etc<span class="token operator">/</span>profile 重新载入</code></pre><p> idea SSH连接中文乱码</p><blockquote><p>File&gt;Settings&gt;Tools&gt;SSH Terminal&gt; Default encoding设为utf-8</p><p>重新启动idea</p></blockquote><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><blockquote><p>Tools—Deployment—- Remote Host </p><p>一定要选择映射的那个文件夹—-右键—Upload here</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记221._最大正方形</title>
      <link href="posts/7b573481.html"/>
      <url>posts/7b573481.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/maximal-square/" target="_blank" rel="noopener">221. 最大正方形</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。</p><pre class=" language-java"><code class="language-java">示例<span class="token operator">:</span>输入<span class="token operator">:</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span>输出<span class="token operator">:</span> <span class="token number">4</span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>采用动态规划的思想,<code>dp[i][j]</code>代表最大的正方形边长,从左到右,从上到下进行扫描</li><li>或者可以采用处理这种问题的通用方法,即定义<code>height,left,right</code>数组,逐层扫描,逐层计算result</li></ol><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><ol><li>初始化为:<code>int[][] dp = new int[m + 1][n + 1];</code>,这样可以不需要再处理初始的边界问题</li><li>动态规划递推公式为:<code> dp[i][j] = Math.min(dp[i - 1][j], Math.min(dp[i][j - 1], dp[i - 1][j - 1])) + 1;</code>,因为是正方形,所以需要他左,上,左上三个角都有才能构成更大的正方形。</li></ol><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><ol><li>在对每一层处理时，首先要考虑他们和上一层的关系</li><li><code>left</code>数组是从左往右处理，<code>right</code>数组是从右往左处理</li><li>小心处理当<code>matrix[i][j]==0</code>的情况，要考虑对下层的影响。例如当<code>matrix[i][j]==0</code>，需要让<code>left[j] = 0</code>，以便下层缩小范围。</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="方法1-1"><a href="#方法1-1" class="headerlink" title="方法1"></a>方法1</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maximalSquare</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">,</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dp[i][j]代表最大的正方形边长</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="方法2-1"><a href="#方法2-1" class="headerlink" title="方法2"></a>方法2</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maximalSquare</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">,</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> right<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//look</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//对height赋值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//对left赋值</span>        <span class="token keyword">int</span> leftIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//继承上一个的</span>                left<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftIndex<span class="token punctuation">,</span>left<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                left<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//考虑下面继承他的范围,就要放宽</span>                leftIndex <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//right赋值</span>        <span class="token keyword">int</span> rightIndex <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                right<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>rightIndex<span class="token punctuation">,</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                right<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>                rightIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//计算正方形</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> left<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> value <span class="token operator">*</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 二维数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记_208_实现 Trie (前缀树)</title>
      <link href="posts/f5d941ba.html"/>
      <url>posts/f5d941ba.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/" target="_blank" rel="noopener">208. 实现 Trie (前缀树)</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><pre class=" language-java"><code class="language-java">实现一个 <span class="token function">Trie</span> <span class="token punctuation">(</span>前缀树<span class="token punctuation">)</span>，包含 insert<span class="token punctuation">,</span> search<span class="token punctuation">,</span> 和 startsWith 这三个操作。示例<span class="token operator">:</span>Trie trie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>trie<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 返回 true</span>trie<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 返回 false</span>trie<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回 true</span>trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   trie<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 返回 true</span>说明<span class="token operator">:</span>你可以假设所有的输入都是由小写字母 a<span class="token operator">-</span>z 构成的。保证所有输入均为非空字符串。</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>使用<code>26叉树</code>的结构,每当有一个单词加进来,就顺着路径不断的初始化<code>Node</code>,并且在最后一个<code>Node</code>出赋值,代表单词的结束。</p><p>查找过程即根据单词每个字符对应的数组下标，不断在<strong>单词搜索树中查询</strong>，如果找到为空的<code>Node</code>，或者结尾处为-1，代表这个单词不存在。</p><p>查找前缀过程和查找过程一样，<strong>只是他不要求前缀结尾部分的Node值为-1</strong></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo208</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Node root<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> value<span class="token punctuation">;</span>        Node <span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Demo208</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Node temp <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Node temp <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> temp<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Node temp <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> prefix<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记155</title>
      <link href="posts/17a31575.html"/>
      <url>posts/17a31575.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/min-stack/" target="_blank" rel="noopener">155. 最小栈</a></p><p>其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</p><pre><code>push(x) —— 将元素 x 推入栈中。pop() —— 删除栈顶的元素。top() —— 获取栈顶元素。getMin() —— 检索栈中的最小元素。</code></pre><p>示例:</p><pre><code>输入：[&quot;MinStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;getMin&quot;,&quot;pop&quot;,&quot;top&quot;,&quot;getMin&quot;][[],[-2],[0],[-3],[],[],[],[]]输出：[null,null,null,null,-3,null,0,-2]解释：MinStack minStack = new MinStack();minStack.push(-2);minStack.push(0);minStack.push(-3);minStack.getMin();   --&gt; 返回 -3.minStack.pop();minStack.top();      --&gt; 返回 0.minStack.getMin();   --&gt; 返回 -2.</code></pre><p>提示：</p><p>pop、top 和 getMin 操作总是在 非空栈 上调用。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>多用一个栈保存最小值</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p>栈与存储最小元素的辅助栈最小元素要一一对应,不能因为重复就不存了.</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinStack</span><span class="token punctuation">{</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack<span class="token punctuation">;</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> minStack<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//小于等于都存,一一对应,好删除</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> x <span class="token operator">&lt;=</span> minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> minStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记_207_课程表</title>
      <link href="posts/5e9da042.html"/>
      <url>posts/5e9da042.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/course-schedule/" target="_blank" rel="noopener">207. 课程表</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>你这个学期必须选修 <code>numCourse</code> 门课程，记为 0 到<code>numCourse-1</code> 。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：<code>[0,1]</code></p><p>给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？</p><p>示例 1:</p><pre class=" language-java"><code class="language-java">输入<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> 输出<span class="token operator">:</span> <span class="token boolean">true</span>解释<span class="token operator">:</span> 总共有 <span class="token number">2</span> 门课程。学习课程 <span class="token number">1</span> 之前，你需要完成课程 <span class="token number">0</span>。所以这是可能的。</code></pre><p>示例 2:</p><pre class=" language-java"><code class="language-java">输入<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出<span class="token operator">:</span> <span class="token boolean">false</span>解释<span class="token operator">:</span> 总共有 <span class="token number">2</span> 门课程。学习课程 <span class="token number">1</span> 之前，你需要先完成课程 <span class="token number">0</span>；并且学习课程 <span class="token number">0</span> 之前，你还应先完成课程 <span class="token number">1</span>。这是不可能的。</code></pre><p>提示：</p><pre class=" language-java"><code class="language-java">输入的先决条件是由 边缘列表 表示的图形，而不是 邻接矩阵 。详情请参见图的表示法。你可以假定输入的先决条件中没有重复的边。<span class="token number">1</span> <span class="token operator">&lt;=</span> numCourses <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token operator">^</span><span class="token number">5</span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>该题为拓扑排序相关问题。</p><p>首先先<strong>构造图</strong>。可以先将课程转为图的顶点，再为课程关系转为有向图中的边。</p><p>随后判断图是否是<strong>无环图</strong>,无环图则代表这样的课程顺序符合规范。具体做法为用<code>dfs</code>进行遍历，且每次遍历时维护一个cycle以作为每次有环的判断。</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p>维护一个全局变量<code>hasCycle</code>可以在有环时直接退出<code>dfs</code>，并且能够在有环后不进行更深层次的递归，优化程序速度。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> graph<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marked<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cycle<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> hasCycle<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createGraph</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prerequisites<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//存储点和他们的邻接边</span>        graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化图</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> graph<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加有向边</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prerequisites<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>prerequisites<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>prerequisites<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//标记数组</span>        marked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//负责判断是否有环的临时数组</span>        cycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 拓扑排序相关问题     * 有向图,判断是否有环     * 构造图,dfs判断即可     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canFinish</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prerequisites<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">createGraph</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">,</span>prerequisites<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//以没标记过的顶点作为某个根节点进行深搜</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//无环则可上课</span>        <span class="token keyword">return</span> <span class="token operator">!</span>hasCycle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//顶点标记为已访问</span>        marked<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        cycle<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer w <span class="token operator">:</span> graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hasCycle<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为了避免有环还在不断寻找</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cycle<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                hasCycle <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cycle<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记152</title>
      <link href="posts/89c780d6.html"/>
      <url>posts/89c780d6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/maximum-product-subarray/" target="_blank" rel="noopener">152. 乘积最大子数组</a></p><p>其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p><p> </p><p>示例 1:</p><pre><code>输入: [2,3,-2,4]输出: 6解释: 子数组 [2,3] 有最大乘积 6。</code></pre><p>示例 2:</p><pre><code>输入: [-2,0,-1]输出: 0解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><pre><code>dp[i]代表连续子数组乘到i的最大值min[i]代表连续子数组乘到i的最小值int result=0;dp[0]=nums[0]min[0]=nums[0]for i in N:    if(nums[i]&gt;0)     {        dp[i]=nums[i]*max(1,dp[i-1]);//适当时候抛弃前面的        min[i]=min(min[i-1],1)*nums[i];    }    else    {        dp[i]=nums[i]*min(min[i-1],1);//适当时候抛弃前面的        min[i]=max(dp[i-1],1)*nums[i];    }    result=max(dp[i],result)</code></pre><pre><code>//简化后的思路:        for (int i = 1; i &lt; N; i++)        {            int temp = max;            max = Math.max(max * nums[i], Math.max(nums[i] * min, nums[i]));            min = Math.min(min * nums[i], Math.min(temp * nums[i], nums[i]));            result = Math.max(max, result);        }</code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p>压缩空间后,记得处理好他们的依赖关系</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//经典动态规划</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> max <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> min <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意初始值</span>    max<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    min<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            max<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> max<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//适当时候抛弃前面的</span>            min<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            max<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//适当时候抛弃前面的</span>            min<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//压缩空间</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>N<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> min <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> result <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            max <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//适当时候抛弃前面的</span>            min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp<span class="token operator">=</span>max<span class="token punctuation">;</span>            max <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//适当时候抛弃前面的</span>            <span class="token comment" spellcheck="true">//look,这里min依赖与max[i-1]</span>            min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//压缩空间后进一步简化版本</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> N <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> min <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> result <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> max<span class="token punctuation">;</span>            max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> min<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>temp <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记148</title>
      <link href="posts/70095889.html"/>
      <url>posts/70095889.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><ol start="148"><li><p>排序链表</p><p>其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></li></ol></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。</p><pre><code>示例 1:输入: 4-&gt;2-&gt;1-&gt;3输出: 1-&gt;2-&gt;3-&gt;4</code></pre><pre><code>示例 2:输入: -1-&gt;5-&gt;3-&gt;4-&gt;0输出: -1-&gt;0-&gt;3-&gt;4-&gt;5</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>归并法排序,用循环合并两个有序数组</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>fast可以先等于head.next,避免将两条链表断开的麻烦操作</li><li>对一个链表继续递归进行<code>sortList</code>时,注意接收传回的引用</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">sortList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将链表大致平分成head,slow两条</span>    <span class="token comment" spellcheck="true">//look 先将fast向后移动一位,这样切分单数数组就是前面少一个,后面多一个.切分双数正好相等</span>    <span class="token comment" spellcheck="true">//而且这样可以减少处理的麻烦</span>    ListNode slow <span class="token operator">=</span> head<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ListNode second <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    slow<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为了断开中点前一个节点与中点之间的连接</span>    head <span class="token operator">=</span> <span class="token function">sortList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//look,要接收改变后的链表的引用</span>    second <span class="token operator">=</span> <span class="token function">sortList</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对两条有序链表进行合并操作</span>    ListNode pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode temp <span class="token operator">=</span> pre<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> second <span class="token operator">!=</span> null<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> second<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            value <span class="token operator">=</span> head<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            value <span class="token operator">=</span> second<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            second <span class="token operator">=</span> second<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">?</span> second <span class="token operator">:</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记146</title>
      <link href="posts/97b1758e.html"/>
      <url>posts/97b1758e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><ol start="146"><li>LRU缓存机制</li></ol><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。</p><p>获取数据 get(key) - 如果关键字 (key) 存在于缓存中，则获取关键字的值（总是正数），否则返回 -1。<br>写入数据 put(key, value) - 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字/值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</p><p>进阶:</p><p>你是否可以在 O(1) 时间复杂度内完成这两种操作？</p><p>示例:</p><pre><code>LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );cache.put(1, 1);cache.put(2, 2);cache.get(1);       // 返回  1cache.put(3, 3);    // 该操作会使得关键字 2 作废cache.get(2);       // 返回 -1 (未找到)cache.put(4, 4);    // 该操作会使得关键字 1 作废cache.get(1);       // 返回 -1 (未找到)cache.get(3);       // 返回  3cache.get(4);       // 返回  4</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>可以使用<code>LinkedHashMap</code>,已经封装好了方法,只需要重写<code>removeEldestEntry</code>方法即可</li><li>自己实现逻辑,则使用双向链表与哈希表结合,其实就是上述1方法的具体实现方式</li></ol><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LRUCache</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Node<span class="token operator">></span> map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储的是key,Node</span>    DoubleList cache<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于保证删除是O(1)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> key<span class="token punctuation">;</span>        <span class="token keyword">int</span> value<span class="token punctuation">;</span>        Node next<span class="token punctuation">;</span>        Node pre<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">DoubleList</span>    <span class="token punctuation">{</span>        Node first<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//头尾虚节点</span>        Node last<span class="token punctuation">;</span>        <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token function">DoubleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            last <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            first<span class="token punctuation">.</span>next <span class="token operator">=</span> last<span class="token punctuation">;</span>            last<span class="token punctuation">.</span>pre <span class="token operator">=</span> first<span class="token punctuation">;</span>            size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>pre<span class="token operator">=</span>first<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>next<span class="token operator">=</span>first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            first<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre<span class="token operator">=</span>node<span class="token punctuation">;</span>            first<span class="token punctuation">.</span>next<span class="token operator">=</span>node<span class="token punctuation">;</span>            <span class="token operator">++</span>size<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node <span class="token function">remove</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre <span class="token operator">=</span> node<span class="token punctuation">.</span>pre<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>pre <span class="token operator">=</span> null<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token operator">--</span>size<span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">remove</span><span class="token punctuation">(</span>last<span class="token punctuation">.</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cache<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">==</span> cache<span class="token punctuation">.</span>size<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Node last <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>last<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这是为什么Node要存key,val,不能只存val</span>            <span class="token punctuation">}</span>            cache<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**调用库的实现方法LinkedHashMap&lt;Integer, Integer>它是一个将所有Entry节点链入一个双向链表的HashMap此外，LinkedHashMap可以很好的支持LRU算法它额外维护了一个双向链表用于保持迭代顺序,该迭代顺序可以是插入顺序，也可以是访问顺序。 * @author 12549 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer capacity<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    当accessOrder标志位为true时，表示双向链表中的元素按照访问的先后顺序排列    当标志位accessOrder的值为false时，表示双向链表中的元素按照Entry插入LinkedHashMap到中的先后顺序排序    当我们要用LinkedHashMap实现LRU算法时，就需要调用该构造方法并将accessOrder置为true。    当accessOrder为true时，get方法和put方法都会调用recordAccess方法使得最近使用的Entry移到双向链表的末尾     */</span>    <span class="token keyword">public</span> <span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span><span class="token number">0.75F</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    该方法是用来被重写的，一般地，如果用LinkedHashMap实现LRU算法，就要重写该方法。    比如可以将该方法覆写为如果设定的内存已满，则返回true，    这样当再次向LinkedHashMap中putEntry时，    在调用的addEntry方法中便会将近期最少使用的节点删除掉（header后的那个节点）。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> eldest<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>capacity<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LRU </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记142</title>
      <link href="posts/90dcb197.html"/>
      <url>posts/90dcb197.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">142. 环形链表 II</a></p><p>其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p><p>说明：不允许修改给定的链表。</p><p> </p><p>示例 1：</p><pre><code>输入：head = [3,2,0,-4], pos = 1输出：tail connects to node index 1解释：链表中有一个环，其尾部连接到第二个节点。</code></pre><p>示例 2：</p><pre><code>输入：head = [1,2], pos = 0输出：tail connects to node index 0解释：链表中有一个环，其尾部连接到第一个节点。</code></pre><p>示例 3：</p><pre><code>输入：head = [1], pos = -1输出：no cycle解释：链表中没有环。</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>先让快慢指针相遇,再让一个指针从头开始,与慢指针同时向后走,他们相遇,则到了入口(可通过画图证明正确性)</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p>在判断有没有循环链表的时候就先把没有循环的链表直接返回,避免之后找首节点的逻辑错误</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span><span class="token punctuation">{</span>    ListNode fast <span class="token operator">=</span> head<span class="token punctuation">,</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">==</span> null <span class="token operator">||</span> fast<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//必然有循环</span>    fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>slow<span class="token operator">==</span>fast<span class="token punctuation">)</span> <span class="token keyword">return</span> fast<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 快慢指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记141</title>
      <link href="posts/9d5e02d.html"/>
      <url>posts/9d5e02d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">141. 环形链表</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个链表，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p><p>如果链表中存在环，则返回 true 。 否则，返回 false 。</p><pre><code>输入：head = [3,2,0,-4], pos = 1输出：true解释：链表中有一个环，其尾部连接到第二个节点。</code></pre><pre><code>输入：head = [1,2], pos = 0输出：true解释：链表中有一个环，其尾部连接到第一个节点。</code></pre><pre><code>输入：head = [1], pos = -1输出：false解释：链表中没有环。</code></pre><p>提示：</p><pre><code>链表中节点的数目范围是 [0, 104]-105 &lt;= Node.val &lt;= 105pos 为 -1 或者链表中的一个 有效索引 。</code></pre><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span><span class="token punctuation">{</span>    ListNode fast <span class="token operator">=</span> head<span class="token punctuation">,</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token operator">==</span>slow<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 快慢指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记139</title>
      <link href="posts/484ffed8.html"/>
      <url>posts/484ffed8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p> 139.单词拆分</p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。</p><p>说明：</p><p>拆分时可以重复使用字典中的单词。<br>        你可以假设字典中没有重复的单词。<br>示例 1：</p><pre><code>输入: s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]输出: true解释: 返回 true 因为 &quot;leetcode&quot; 可以被拆分成 &quot;leet code&quot;。</code></pre><p>示例 2：</p><pre><code>输入: s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]输出: true解释: 返回 true 因为 &quot;applepenapple&quot; 可以被拆分成 &quot;apple pen apple&quot;。     注意你可以重复使用字典中的单词。</code></pre><p>示例 3：</p><pre><code>输入: s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]输出: false</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><pre><code>动态规划dp[i]代表s.substring(0,i)能否被表示dp[0]=truereturn dp[s.length()]dp[i]=    for j in [0,i):        只要包含了一个(前一部分存在,剩下的那个单词在wordDict中)</code></pre><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre><code>public boolean wordBreak(String s, List&lt;String&gt; wordDict){    if(s==null || s.length()==0) return false;    boolean[] dp = new boolean[s.length() + 1];    dp[0] = true;    for (int i = 0; i &lt; dp.length; i++)    {        for (int j = 0; j &lt; i; j++)        {            if (dp[j] &amp;&amp; wordDict.contains(s.substring(j, i)))            {                dp[i] = true;                break;//look 找到一个即可,不用继续找了            }        }    }    return dp[s.length()];}</code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记136</title>
      <link href="posts/d8f0e349.html"/>
      <url>posts/d8f0e349.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">136. 只出现一次的数字</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p>说明：</p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><p>示例 1:</p><pre><code>输入: [2,2,1]输出: 1</code></pre><p>示例 2:</p><pre><code>输入: [4,1,2,1,2]输出: 4</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>因为一个数对同一个数异或两次会得到原本的结果，所以对数组循环遍历一遍，对每一个数进行异或，就会得到单独剩下的那个数。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> result <span class="token operator">^=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 异或 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目------操作系统_电梯调度项目</title>
      <link href="posts/4ef3d1ce.html"/>
      <url>posts/4ef3d1ce.html</url>
      
        <content type="html"><![CDATA[<h1 id="电梯调度项目源码-Github地址"><a href="#电梯调度项目源码-Github地址" class="headerlink" title="电梯调度项目源码_Github地址"></a><a href="https://github.com/tongji4m3/memoryProject" target="_blank" rel="noopener">电梯调度项目源码_Github地址</a></h1><h1 id="项目目的"><a href="#项目目的" class="headerlink" title="项目目的"></a>项目目的</h1><ul><li><p>学习调度算法</p></li><li><p>通过实现电梯调度，体会操作系统调度过程</p></li><li><p>学习特定环境下多线程编程方法</p></li></ul><h1 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h1><ul><li><p>某一层楼20层，有五部互联的电梯。基于线程思想，编写一个电梯调度程序。（可考虑：楼层和电梯数可设置）。</p></li><li><p>每个电梯里面设置必要功能键：如数字键、关门键、开门键、上行键、下行键、报警键、当前电梯的楼层数、上升及下降状态等。</p></li><li><p>每层楼的每部电梯门口，应该有上行和下行按钮和当前电梯状态的数码显示器。</p></li><li><p>五部电梯门口的按钮是互联结的，即当一个电梯按钮按下去时，其他电梯的相应按钮也就同时点亮，表示也按下去了。</p></li><li><p>所有电梯初始状态都在第一层。每个电梯如果在它的上层或者下层没有相应请求情况下，则应该在原地保持不动。</p></li><li><p>调度算法自行设计。</p></li></ul><h1 id="项目设计及算法"><a href="#项目设计及算法" class="headerlink" title="项目设计及算法"></a>项目设计及算法</h1><h2 id="项目开发概览"><a href="#项目开发概览" class="headerlink" title="项目开发概览"></a>项目开发概览</h2><ul><li><p>采用JAVA开发语言,使用JAVA的Swing类库来进行图形界面设计与开发。</p></li><li><p>在windows操作系统环境下，采用IDEA作为开发工具。</p></li><li><p>通过实现 Runnable 接口来进行多线程编程。</p></li><li><p>采用扫描算法（SCAN算法）来进行电梯调度。</p></li></ul><h2 id="扫描算法介绍"><a href="#扫描算法介绍" class="headerlink" title="扫描算法介绍"></a>扫描算法介绍</h2><ul><li><p>简介：扫描算法（SCAN）<br>是一种按照楼层顺序依次服务请求，它让电梯在最底层和最顶层之间连续往返运行，在运行过程中响应处在于电梯运行方向相同的各楼层上的请求。</p></li><li><p>优点:进行寻找楼层的优化，效率比较高。较好地解决了电梯移动的问题，在这个算法中，每个电梯响应乘客请求使乘客获得服务的次序是由其发出请求的乘客的位置与当前电梯位置之间的距离来决定的。所有的与电梯运行方向相同的乘客的请求在一次电向上运行或向下运行的过程中完成，免去了电梯频繁的来回移动。</p></li><li><p>缺点:扫描算法是一个非实时算法，他的平均响应时间较长。</p></li></ul><h2 id="项目多线程"><a href="#项目多线程" class="headerlink" title="项目多线程"></a>项目多线程</h2><blockquote><p>  计划在项目中通过implement<br>  Runnable接口来实现多线程，之后重写里面的run（）方法。并且通过new<br>  Thread(该类).start()来开启一条多线程。</p></blockquote><blockquote><p>  其中，电梯要采用多线程方式启动以此实现调度，并且电梯调度控制类也需要以多线程方式调度，以此实时监听任务并且调度电梯。除此之外，在电梯视图控制类也需要多线程方式启动，以此实时监听并且控制画面刷新。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/b2b901b25dc6a7e6a874f48b8c59ce66.png"></p><h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><ul><li><p>总体采用三层架构,分别是实体层，展示层,控制层。</p></li><li><p>实体层中有三个类，Const类负责存储项目的各种常量，Elevator类负责创建电梯实体，Task类则负责存储实际需求任务。</p></li><li><p>展示层则负责页面的展示，共有三个类，View负责展示整体画面。ElevatorView负责展示电梯内部的按钮，ElevatorOutView负责展示每层楼电梯外部按钮。</p></li><li><p>控制层负责控制事件触发以及调度算法执行。ElevatorOutViewControl负责电梯按钮触发事件以及动态刷新页面等等。ElevatorsControl则根据SCAN算法负责对所有触发的任务进行电梯调度。</p></li><li><p>最后，MainTest是函数的入口，负责以多线程的方式启动ElevatorsControl类，并且启动整个视图View。</p></li></ul><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/70cf77f8256087dc81a91e8107406d60.jpg"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/9538497173b402aa0e037e6ff47396bb.png"></p><h1 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h1><h2 id="domain包下类实现"><a href="#domain包下类实现" class="headerlink" title="domain包下类实现"></a>domain包下类实现</h2><h3 id="Const类实现"><a href="#Const类实现" class="headerlink" title="Const类实现"></a>Const类实现</h3><blockquote><p>  该类存储了项目需要的一些全局变量。例如电梯数量，楼层高度；各种视图的位置大小等，还有用UP，DOWN，STOP来代表电梯状态。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/d0120d5480182e8f69bfd07dfa2fd1a6.png"></p><h3 id="Elevator类实现"><a href="#Elevator类实现" class="headerlink" title="Elevator类实现"></a>Elevator类实现</h3><blockquote><p>  定义了电梯序号，当前该电梯所处位置，以及当前状态，例如UP,DOWN等。而且该类实现了Runnable接口，实现run（）方法，之后调度时就可以以多线程方式启动电梯。</p></blockquote><blockquote><p>  部分代码如下（下同）：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/e08e56b4c83ab8265608e3d0a79e063e.png"></p><h3 id="Task类实现"><a href="#Task类实现" class="headerlink" title="Task类实现"></a>Task类实现</h3><blockquote><p>  该类主要提供要操作的任务，共有三个变量：需要上行还是下行；当前位置，要去的位置。该类在电梯内外都能使用，当在电梯外时，to即要去的位置设置为-1即可。并且提供set，get方法，以及构造函数等。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/3422a76f6d2b8aba3ae47056ba2c67a9.png"></p><h2 id="view包下类实现"><a href="#view包下类实现" class="headerlink" title="view包下类实现"></a>view包下类实现</h2><h3 id="ElevatorView类实现"><a href="#ElevatorView类实现" class="headerlink" title="ElevatorView类实现"></a>ElevatorView类实现</h3><blockquote><p>  该类通过继承Jpanel类来负责展示电梯内部视图，例如开门关门按钮，要去的楼层按钮等，并且对按钮提供了事件监听。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/64634ad3a094fc1d7bf04f2db86e2f1b.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/619067c8f9591193ea1958173259060d.png"></p><h3 id="ElevatorOutView类实现"><a href="#ElevatorOutView类实现" class="headerlink" title="ElevatorOutView类实现"></a>ElevatorOutView类实现</h3><blockquote><p>  该类也继承了Jpanel，负责展示楼层间的电梯外部视图。主要有上升下降按钮，以及显示电梯状态以及位置的文本。还包含了一个ElevatorControl类对象，以为需要得到里面的电梯对象。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/619067c8f9591193ea1958173259060d.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/d9e7185cf83f3e64ff58f4be3f9a9e92.png"></p><h3 id="View类实现"><a href="#View类实现" class="headerlink" title="View类实现"></a>View类实现</h3><blockquote><p>  该类是视图的最外层，负责展示其他组件，如电梯内部，外部视图等。它通过继承Jframe类实现该功能。他可以调用ElevatorView类与ElevatorOutView类来批量创造电梯内外视图，达到最终效果。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/faa67568b8f558e807cad36c271373fb.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/8fb4d6f9147a4466562fedfefb942b82.png"></p><h2 id="control包下类实现"><a href="#control包下类实现" class="headerlink" title="control包下类实现"></a>control包下类实现</h2><h3 id="ElevatorOutViewControl类实现"><a href="#ElevatorOutViewControl类实现" class="headerlink" title="ElevatorOutViewControl类实现"></a>ElevatorOutViewControl类实现</h3><blockquote><p>  该类主要有两个功能,一是对外部电梯按钮进行事件监听,并且向控制器添加任务,<br>  二是对外部电梯标签进行刷新,以标识电梯目前的位置以及状态。</p></blockquote><blockquote><p>  首先初始化时，会创建20*5个ElevatorOutView对象，代表每层楼，每个电梯都有一个外部视图。其次，会分别给所有ElevatorOutView对象的开门关门键提供事件监听，当按下按钮时，会在控制器中添加任务，并且同楼层的电梯的相同方向按钮会同时变红，代表被按下。</p></blockquote><blockquote><p>  该类也实现了Runnable接口，在run方法中，每隔100ms刷新页面，将最新的电梯状态展示，并且将已完成任务从control类控制列表中删除。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/f1fad668c43ca41ee9b665f51f0f3963.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/ba53b196d33be1fa43db04190cfcb19f.png"></p><h3 id="ElevatorsControl类实现"><a href="#ElevatorsControl类实现" class="headerlink" title="ElevatorsControl类实现"></a>ElevatorsControl类实现</h3><blockquote><p>  负责电梯的实际调度，当没有任务时，电梯将静止不动。有任务时，电梯将持续的往返扫描运行，并且将Elevator对象中的location每秒向上或向下改变1楼（取决于当前电梯运行的状态）。且设置有1个任务则第一个电梯运行，有两个则前两个电梯运行..大于5个任务则所有电梯都不断扫描运行。因为会在ElevatorOutViewControl对象中实时响应任务，所有任务会实时更新，而电梯状态也会实时更新。例如当任务数量从5变为4时，则电梯5将变为静止状态。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/4ff18f1c272f4f3db3ccb6cf2b7c7f1c.png"></p><h1 id="项目界面展示"><a href="#项目界面展示" class="headerlink" title="项目界面展示"></a>项目界面展示</h1><h2 id="总体界面展示"><a href="#总体界面展示" class="headerlink" title="总体界面展示"></a>总体界面展示</h2><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/e5a65a44d44fe8c757ece5a49751a127.png"></p><blockquote><p>  左边为五部电梯的内部视图，灰色标签表明具体是哪部电梯的内部视图，其中按钮则分别是要去的楼层，报警键，开门关门键。</p></blockquote><blockquote><p>  右边则是楼层视图，以行来分析，则一行中，最左边是楼层高度，其次是电梯在该楼层的上行下行按钮以及电梯的状态和电梯目前的位置（因为初始在1楼而且为静止状态，所以显示为∎1）。因为有五个电梯，所以有5个电梯的按钮及状态显示。共有20行，代表20楼，每行为每楼可进行的按钮。</p></blockquote><blockquote><p>  以一列来看，则每一列代表了每个电梯在各个楼层的上下行操作按钮，以及电梯状态，因为为同一个电梯，所以每一列的电梯状态都相同，标志了该电梯目前的状态以及该电梯所处的楼层。因为有五个电梯，所以有五列。</p></blockquote><h2 id="电梯运行界面展示"><a href="#电梯运行界面展示" class="headerlink" title="电梯运行界面展示"></a>电梯运行界面展示</h2><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/3d2b3c03c8da120f68f0ffe0d11c87eb.png"></p><blockquote><p>  如图为按下了2个上楼,2个下楼按钮的电梯图,可以看出,同楼层按钮是互联结的,并且此时一号电梯处于上升状态,且目前在7楼,其他电梯同理。注意，此时电梯5处于静止状态，并且在一楼。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/dc70bb469eeae097811a17de09f26d21.png"></p><blockquote><p>  接上图，在电梯上行的时候，处理了楼层8，楼层11的上行请求，所以上行请求消失。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/685efb1e717ce692a1656e1387baabf6.png"></p><blockquote><p>  如图，因为电梯1下行，处理完了两个下行请求。且之后没有任务时，就处于静止状态。</p></blockquote><h2 id="电梯内部按钮界面"><a href="#电梯内部按钮界面" class="headerlink" title="电梯内部按钮界面"></a>电梯内部按钮界面</h2><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/3baf35d4b474eacc8b7c6d6f6569dbda.png"></p><blockquote><p>  如图，电梯内部按钮都可以按下,如选择哪层楼，开门关门等。</p></blockquote><h1 id="项目实现情况与可行性分析"><a href="#项目实现情况与可行性分析" class="headerlink" title="项目实现情况与可行性分析"></a>项目实现情况与可行性分析</h1><h2 id="实现情况"><a href="#实现情况" class="headerlink" title="实现情况"></a>实现情况</h2><ul><li><p>实现多线程电梯及实现Scan电梯调度算法。</p></li><li><p>五部电梯门口的按钮是互联结的，实现同时按下。</p></li><li><p>楼层和电梯数可设置。</p></li><li><p>所有电梯初始状态都在第一层。</p></li><li><p>每个电梯如果在它的上层或者下层没有相应请求情况下，则保持不动。</p></li><li><p>每个电梯里面设置必要功能键。</p></li><li><p>每层楼的每部电梯门口，有上行和下行按钮和当前电梯状态的数码显示器。</p></li><li><p>只能在楼层等待电梯时发出任务请求。进入电梯内部后不能操纵电梯内部按钮（如开门，关门，上升下降到某层楼等）。</p></li></ul><h2 id="可行性分析"><a href="#可行性分析" class="headerlink" title="可行性分析"></a>可行性分析</h2><ul><li><p>该项目基本实现了电梯的调度功能，基本能完成需求</p></li><li><p>没有实现进入电梯内部后的任务请求调度，只能是进入电梯后等待电梯不断上下扫描到达目的地。</p></li><li><p>调度算法不够合理，电梯只会不断上下扫描，响应可能会比较久。例如当所有电梯都处于8楼，而且是上行时。此时如果在7楼新提出了一个上行请求时，电梯会先上升到顶楼，再下到1楼，再上升到7楼才会响应这个请求。但幸运的是，这种情况出现的概率比较小，因为有5辆电梯。他们大概率处于不同的状态，或者是静止状态，所以能很快做出响应。</p></li><li><p>没有考虑到电梯人数超载问题</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> Swing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记121</title>
      <link href="posts/5f8f47ab.html"/>
      <url>posts/5f8f47ab.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">121. 买卖股票的最佳时机</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。</p><p>注意：你不能在买入股票前卖出股票。</p><p> </p><p>示例 1:</p><pre><code>输入: [7,1,5,3,6,4]输出: 5解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</code></pre><p>示例 2:</p><pre><code>输入: [7,6,4,3,1]输出: 0解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><pre class=" language-java"><code class="language-java">动态规划<span class="token operator">:</span>sell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span>代表第i天卖出得到的最大利润buy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span>代表第i天买入的最大利润sell<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>price<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> buy<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>buy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">-</span>price<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>buy<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>初始化<span class="token operator">:</span>buy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>price<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>结果<span class="token operator">:</span>result<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>sell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p>都可以节约空间,减少一个维度</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//无化简的动态规划</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    buy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    sell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        buy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> buy<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//look,是+,不是-,因为buy[i]是负数</span>        sell<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> buy<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> sell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//节约空间</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> buy<span class="token operator">=</span><span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sell<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        sell <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> buy<span class="token punctuation">)</span><span class="token punctuation">;</span>        buy <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> buy<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> sell<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记114</title>
      <link href="posts/4c8e0e7.html"/>
      <url>posts/4c8e0e7.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/" target="_blank" rel="noopener">114. 二叉树展开为链表</a></p><p>其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个二叉树，原地将它展开为一个单链表。</p><pre><code>例如，给定二叉树    1   / \  2   5 / \   \3   4   6将其展开为：1 \  2   \    3     \      4       \        5         \          6</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>按照中序遍历的顺序构造成链表,并将之放在右子树的位置上</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p>需要原地展开</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * * 该做法是不断将右子树放在左子树的最后一个节点上,再将左子树变为右子树 * 更加直观,更加符合中左右的形式 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatten</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token operator">!=</span>null<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//没有左子树,则直接到下一个右子树上,不需要继续考虑</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token operator">!=</span>null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//找到左子树最右节点</span>            TreeNode temp <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//将右子树放在左子树的最后一个节点上</span>            temp<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将左子树变为右子树</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 该方法是先把左子树放当前节点右边,当到最后一个左节点时,再放入右节点     * 速度比较慢     */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatten</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token punctuation">{</span>    Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token operator">!=</span>null<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//保存当前节点的右节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//将当前节点的左子树转移到右子树</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//说明往左遍历结束了</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token operator">==</span>null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                root<span class="token punctuation">.</span>right <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//说明左右子树都没了</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记105</title>
      <link href="posts/6ad4e130.html"/>
      <url>posts/6ad4e130.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/" target="_blank" rel="noopener">105. 从前序与中序遍历序列构造二叉树</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>根据一棵树的前序遍历与中序遍历构造二叉树。</p><p>注意:<br>    你可以假设树中没有重复的元素。</p><pre><code>例如，给出前序遍历 preorder = [3,9,20,15,7]中序遍历 inorder = [9,3,15,20,7]返回如下的二叉树：    3   / \  9  20    /  \   15   7</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>对于前序与中序遍历的数组[lo,hi]:</p><ul><li>前序的根节点是lo,中序的根节点是i</li><li>前序的左子树是[lo+1,i],右子树是[i+1,hi]</li><li>中序的左子树是[lo,i-1],右子树是[i+1,hi]</li></ul><p>由此,可以先构造根节点,然后根据前序中序的左右数组构造他的左右节点,一直不断递归下去…</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>注意几次递归后前序,中序数组可能不是上下对称的,所以他们索引index得区分为preIndex,inIndex</li><li>用map存储可以加快速度</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * look 用map存储加快速度树中没有重复元素用map存储inorder数组的值和对应索引 方便找到根节点位置 */</span><span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> TreeNode <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> TreeNode <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span> preLo<span class="token punctuation">,</span> <span class="token keyword">int</span> preHi<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span> inLo<span class="token punctuation">,</span> <span class="token keyword">int</span> inHi<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>preLo <span class="token operator">></span> preHi <span class="token operator">||</span> inLo <span class="token operator">></span> inHi<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//找到根节点在中序遍历的索引位置</span>    <span class="token keyword">int</span> inIndex <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>preLo<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//look,i在经过几次之后,只是对应了inorder的i,但是对于preorder,应该只是一个偏移量</span>    <span class="token comment" spellcheck="true">//inIndex - inLo代表左子树的个数,preIndex则是前序遍历左子树的最后一个元素</span>    <span class="token keyword">int</span> preIndex <span class="token operator">=</span> preLo <span class="token operator">+</span> inIndex <span class="token operator">-</span> inLo<span class="token punctuation">;</span>    TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>preLo<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preLo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preIndex<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> inLo<span class="token punctuation">,</span> inIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preHi<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> inIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inHi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware常用命令与使用</title>
      <link href="posts/d398cc0d.html"/>
      <url>posts/d398cc0d.html</url>
      
        <content type="html"><![CDATA[<h1 id="配置Ubuntu"><a href="#配置Ubuntu" class="headerlink" title="配置Ubuntu"></a>配置Ubuntu</h1><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a><a href="https://blog.csdn.net/stpeace/article/details/78598333" target="_blank" rel="noopener">教程</a></h2><h2 id="设置root密码"><a href="#设置root密码" class="headerlink" title="设置root密码"></a>设置root密码</h2><p><code>ctrl+alt+F3</code>切换命令行,设置root: <code>sudo passwd root</code>,设置密码,确认密码</p><h2 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h2><h3 id="教程-1"><a href="#教程-1" class="headerlink" title="教程"></a><a href="https://blog.csdn.net/weixin_42739326/article/details/82260588?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param" target="_blank" rel="noopener">教程</a></h3><h3 id="ssh连接允许root登录"><a href="#ssh连接允许root登录" class="headerlink" title="ssh连接允许root登录"></a>ssh连接允许root登录</h3><p>修改<code>/etc/ssh/sshd_config</code>下的<code>PermitRootLogin yes</code><br>        重新启动服务<code>/etc/init.d/ssh restart</code></p><h3 id="用idea管理ssh连接"><a href="#用idea管理ssh连接" class="headerlink" title="用idea管理ssh连接"></a>用idea管理ssh连接</h3><p><a href="https://blog.csdn.net/weixin_42249196/article/details/107464658" target="_blank" rel="noopener">教程</a><br>或者可以用idea连接进行命令行操作,用Xftp进行文件上传操作</p><h2 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h2><p>为便于出错后的恢复,最好在具体操作之前做好快照<br><code>对虚拟机项目右键-快照-拍摄快照</code></p><h2 id="配置镜像源"><a href="#配置镜像源" class="headerlink" title="配置镜像源"></a>配置镜像源</h2><p><a href="https://blog.csdn.net/u013541411/article/details/81410964" target="_blank" rel="noopener">教程</a></p><h1 id="配置centos7"><a href="#配置centos7" class="headerlink" title="配置centos7"></a>配置centos7</h1><h2 id="教程-2"><a href="#教程-2" class="headerlink" title="教程"></a><a href="https://blog.csdn.net/qq_39135287/article/details/83993574?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param" target="_blank" rel="noopener">教程</a></h2><p>yum不可用,更换源:<a href="https://blog.csdn.net/qq_41684957/article/details/83345154?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param" target="_blank" rel="noopener">教程</a></p><h2 id="ssh连接-1"><a href="#ssh连接-1" class="headerlink" title="ssh连接"></a><a href="https://blog.csdn.net/mengzuchao/article/details/80261836" target="_blank" rel="noopener">ssh连接</a></h2>]]></content>
      
      
      <categories>
          
          <category> 常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目------操作系统_文件管理项目</title>
      <link href="posts/1c948532.html"/>
      <url>posts/1c948532.html</url>
      
        <content type="html"><![CDATA[<h1 id="文件管理源码-Github地址"><a href="#文件管理源码-Github地址" class="headerlink" title="文件管理源码_Github地址"></a><a href="https://github.com/tongji4m3/fileSystem" target="_blank" rel="noopener">文件管理源码_Github地址</a></h1><blockquote><p>图片太多,上传之后有些位置错乱或者不显示,可以在源码地址查看word版本</p></blockquote><h1 id="项目目的"><a href="#项目目的" class="headerlink" title="项目目的"></a>项目目的</h1><ul><li><p>理解文件存储空间的管理；</p></li><li><p>掌握文件的物理结构、目录结构和文件操作；</p></li><li><p>实现简单文件系统管理；</p></li><li><p>加深文件系统实现过程的理解；</p></li></ul><h1 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h1><h2 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h2><ul><li><p>在内存中开辟一个空间作为文件存储器，在其上实现一个简单的文件系统;</p></li><li><p>退出这个文件系统时，需要该文件系统的内容保存到磁盘上，以便下次可以将其回复到内存中来。</p></li></ul><h2 id="具体要求"><a href="#具体要求" class="headerlink" title="具体要求"></a>具体要求</h2><ul><li><p>文件存储空间管理可采取显式链接（如FAT）或者其他方法；</p></li><li><p>空闲空间管理可采用位图或者其他方法；</p></li><li><p>文件目录采用多级目录结构，目录项目中应包含：文件名、物理地址、长度等信息。</p></li></ul><h2 id="文件系统提供的操作"><a href="#文件系统提供的操作" class="headerlink" title="文件系统提供的操作"></a>文件系统提供的操作</h2><pre><code>-   格式化-   创建子目录-   删除子目录-   显示目录-   更改当前目录-   创建文件-   打开文件-   关闭文件-   写文件-   读文件-   删除文件</code></pre><h1 id="项目设计及算法"><a href="#项目设计及算法" class="headerlink" title="项目设计及算法"></a>项目设计及算法</h1><h2 id="项目整体结构"><a href="#项目整体结构" class="headerlink" title="项目整体结构"></a>项目整体结构</h2><p>本项目是windows平台下,采用java语言开发的，通过命令行互动的文件管理项目。主要采用MVC架构模式,分为三个包(model,view,controller),和一个主类Main。通过主类调用view包下的View类开启命令行交互进行文件管理。</p><p>model包下放置了一些实体类以及常量结合。其中的Const存放一些公共参数，例如物理块的大小，容量等等。FCB类则代表一个文件目录项的实体，存储一些文件名，文件属性，文件物理块地址等信息。Block类则充当了磁盘物理块实体，它存储了物理块地址和数据。</p><p>view包下主要负责和用户进行命令行交互的全部内容，对于用户输入的指令进行判断，并且调用controller以及model包下的类完成功能。例如用户输入ls指令，在View类中，就会判断该指令，并且调用controller得到当前目录，然后得到该目录的所有子目录，再将之按照特定的格式打印并呈现给用户。</p><p>controller包下包含了两个类：Controller，IOController。其中Controller负责对目录区，文件区，FAT，位示图，打开文件表等进行相应的管理，包括分配释放等操作。IOController负责读写文件，并且负责初始时从电脑本地磁盘回复内容到内存（即此虚拟文件管理系统中），还负责退出文件系统时，把文件系统内容保存在电脑本地磁盘中。</p><h2 id="项目实现思路"><a href="#项目实现思路" class="headerlink" title="项目实现思路"></a>项目实现思路</h2><p>首先，当退出程序时，将用来模拟物理块，PCB等数组存储在本地文件之中，而启动程序时，则从本地文件中读取相应的数据，以此达到备份的目的。</p><p>然后，该文件系统主要分为目录位示图，文件位示图，FAT，目录区，文件区五部分组成。文件目录采用多级目录结构。文件存储空间管理采取显式链接管理（FAT），空闲空间管理采用位示图管理。</p><p>目录区为FCB组成的数组。其中每个文件（目录或者文件）对应一个FCB，每个FCB都存储了文件名，文件类型，物理块号，父路径，子目录等信息。而目录区物理块分配与否通过目录的位示图标识。</p><p>文件区为Block组成的数组，存储了物理块号以及实际的文件数据。分配文件时,则扫描位示图,找到N个0,并且计算出对应的盘块号,将之分配给文件。并且在FAT中，以静态链接的形式标识出分配的物理块顺序。</p><p>程序一直会存储当前路径（即某个FCB）,并且初始化为根路径/，而进行操作时，可以有两种方式：绝对路径，相对路径。相对路径则根据当前路径进行操作。而绝对路径方式，则从目录区获取根路径/的PCB，然后按照层级进行操作。程序还存储一个打开文件表，当打开，读写文件时，就会将文件加入到打开文件表。</p><h2 id="文件系统可用指令"><a href="#文件系统可用指令" class="headerlink" title="文件系统可用指令"></a>文件系统可用指令</h2><p>其中，涉及fileName的指令，fileName都可以有两种写法，一种是从根路径开始的绝对路径写法，例如/usr/local；另外一种是从当前路径开始，例如，temp。</p><p>从本地磁盘加载与保存文件是系统自动进行的。如果想要到初始环境，可以执行format指令。</p><ul><li><p>退出 exit</p></li><li><p>查看帮助 –help</p></li><li><p>格式化 format</p></li><li><p>显示目录 pwd</p></li><li><p>更改当前目录 cd fileName</p></li><li><p>创建子目录 mkdir fileName</p></li><li><p>删除子目录 rm fileName</p></li><li><p>列出当前目录下所有文件 ls</p></li><li><p>创建文件 touch fileName</p></li><li><p>打开文件 open fileName</p></li><li><p>关闭文件 close fileName</p></li><li><p>写文件 vim fileName</p></li><li><p>读文件 cat fileName</p></li><li><p>删除文件 delete fileName</p></li><li><p>查看目录区信息 dirBlock</p></li><li><p>查看文件区信息 fileBlock</p></li><li><p>查看打开文件表 openFiles</p></li></ul><h1 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h1><h2 id="Main类实现"><a href="#Main类实现" class="headerlink" title="Main类实现"></a>Main类实现</h2><blockquote><p>  Main类只是整个程序的入口，他通过new<br>  View（）调用View类执行文件系统主要的逻辑。</p></blockquote><h2 id="model包下类的实现"><a href="#model包下类的实现" class="headerlink" title="model包下类的实现"></a>model包下类的实现</h2><h3 id="Const类的实现"><a href="#Const类的实现" class="headerlink" title="Const类的实现"></a>Const类的实现</h3><blockquote><p>  Const类存储了程序用到的所有常量,放在一起,便于程序的维护。首先，用DIR=1，FILE=0来标识文件类型，之后可以直接引用，不需要记住是0还是1。随后，记录了目录区物理块数量，以及目录区位示图的尺寸。最后，记录了文件区物理块数量，容量，以及文件区位示图的尺寸。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90b25namk0bTMub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tLzZhYjJmOTAxZGFjMTU2MTZjMjZiNGM5ZmI4ZDlhNTEyLnBuZw?x-oss-process=image/format,png"></p><h3 id="FCB的实现"><a href="#FCB的实现" class="headerlink" title="FCB的实现"></a>FCB的实现</h3><blockquote><p>  一个FCB代表了一个目录项。所以FCB包含以下属性：文件名称（即相对路径名称），文件路径（即绝对路径名称），文件类型（File或者Dir），文件物理块地址，文件物理块长度，文件的子目录（只有文件类型为Dir才有），文件的父路径。</p></blockquote><blockquote><p>  其中有以下实用函数：</p></blockquote><blockquote><p>  getChildren（String<br>  childName）:从该FCB的子目录中查找名称为childName的文件并返回，如果不存在则返回null。</p></blockquote><blockquote><p>  remove（String childName）:删除名称为childName的文件并返回删除结果。</p></blockquote><blockquote><p>  toString（）:通过使用String.format函数，按照阅读良好的格式输出该FCB。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90b25namk0bTMub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tLzVhZWM1MTllYTcxMjE0NDE0MWUzYWQ0ZWM4OTAwNzBlLnBuZw?x-oss-process=image/format,png"></p><h3 id="Block类的实现"><a href="#Block类的实现" class="headerlink" title="Block类的实现"></a>Block类的实现</h3><blockquote><p>  Block主要是模拟文件区的物理块。有两个属性：id和data，id代表该块的编号，data为ByteBuffer类型，存储了文件实际的试卷。</p></blockquote><h2 id="view包下类的实现"><a href="#view包下类的实现" class="headerlink" title="view包下类的实现"></a>view包下类的实现</h2><blockquote><p>  view包只有一个类View，但是里面有很多函数来实现和用户的交互功能。他有两个成员变量：controller以及ioController，负责调用Controller包下的两个类进行文件管理的具体操作。</p></blockquote><h3 id="初始化函数View（）"><a href="#初始化函数View（）" class="headerlink" title="初始化函数View（）"></a>初始化函数View（）</h3><blockquote><p>  在初始化时，会先从本地磁盘加载上一次退出时文件系统的数据。随后不断接收用户输入的数据，并且根据用户的指令调用相应的函数进行文件管理。值得注意的是，指令有两种模式，一种是equals（），例如exit指令，只有仅仅输入exit时，才会执行相应操作。另外一种是startWith（）模式，会将所有以此开头的指令相匹配，例如mkdir<br>  /usr/local命令就用到这种模式。而且equals模式放在了startWith模式之前，防止一些匹配错误的问题。最后，还在每次输入指令时，显示了当前的用户和路径。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90b25namk0bTMub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tLzU1YzU1ZjRjODIwNWIxNTI5YjZkOTY0NDVjOTQ5NjFiLnBuZw?x-oss-process=image/format,png"></p><h3 id="函数exit（）"><a href="#函数exit（）" class="headerlink" title="函数exit（）"></a>函数exit（）</h3><blockquote><p>  退出时，调用ioController.save()方法，将本次文件系统的内容保存在本地硬盘中。</p></blockquote><h3 id="函数format（）"><a href="#函数format（）" class="headerlink" title="函数format（）"></a>函数format（）</h3><blockquote><p>  其实就是另外一次初始化，且不加载磁盘中的文件。主要就是将controller，ioController重新初始化。</p></blockquote><h3 id="函数help（）"><a href="#函数help（）" class="headerlink" title="函数help（）"></a>函数help（）</h3><blockquote><p>  通过输入—help，进入该函数，打印本文件系统所支持的所有操作。</p></blockquote><h3 id="getCurrentFCB-String-command"><a href="#getCurrentFCB-String-command" class="headerlink" title="getCurrentFCB(String command)"></a>getCurrentFCB(String command)</h3><blockquote><p>  一个重要的公共函数，负责从command中获取文件的FCB。例如指令mkdir<br>  /usr/local。首先，会将指令按照空格分隔，并且进行有效性检验。随后根据后者的路径是否以/开头进行不同的操作，如果是/开头，则从根目录开始不断查找到它，如果不是，则从当前路径的子目录进行查找。最后将之返回，如果不存在，则返回null。</p></blockquote><h3 id="checkFileName-String-fileName"><a href="#checkFileName-String-fileName" class="headerlink" title="checkFileName(String fileName)"></a>checkFileName(String fileName)</h3><blockquote><p>  检验文件名合法性的公共函数，通过正则表达式判断文件名是否合法。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90b25namk0bTMub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tLzQ4NTFjNzU3NTQzOGRiMTY2NTY4YjU3YjY1YjQyZjg2LnBuZw?x-oss-process=image/format,png"></p><h3 id="create-String-command-int-type"><a href="#create-String-command-int-type" class="headerlink" title="create(String command, int type)"></a>create(String command, int type)</h3><blockquote><p>  该函数可根据指令创建文件或者命令。首先还是把命令拆分得到文件路径，并且根据是否以/开头执行不同操作，而之后又根据是文件或目录执行不同的创建操作。如果是以/开头，则还是先得到根路径，随后将路径按照/拆分。以/usr/local/temp.txt为例：将之拆分为usr，local，temp.txt。首先校验文件名是否合法。随后如果路径是存在的，则进入路径，例如如果原来存在usr文件夹，则进入，而local文件夹不存在，则创建文件夹（先通过目录位示图得到空闲目录块地址，再将目录磁盘块分配给他，还要新建FCB，并且在他的父路径的子目录中添加他）。随后，又发现temp.txt文件不存在，则创建他（在位示图中分配，在FAT中分配，新建该文件的FCB，另他父路径的子目录添加该FCB）。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90b25namk0bTMub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tL2Y3MGU5M2ZkNjE5NjZhZDA3MWJkZGE3ZmNhMTZkMjZmLnBuZw?x-oss-process=image/format,png"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90b25namk0bTMub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tL2Q1NTNlY2IwNGNiN2RhMmJjZmFlYmIzZmNjODNhMWQwLnBuZw?x-oss-process=image/format,png"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90b25namk0bTMub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tLzllZjdlNGI0MmY5YjY5MmQ5MWYyYzViN2Y4MGUzMWIzLnBuZw?x-oss-process=image/format,png"></p><h3 id="delete-String-command"><a href="#delete-String-command" class="headerlink" title="delete(String command)"></a>delete(String command)</h3><blockquote><p>  通过调用getCurrentFCB(command)指令得到该指令里的文件的FCB，如果文件名不对则提示并且返回。随后在打开文件表中删除，在位示图移除，在磁盘块删除，在FCB目录中移除，在FAT中回收。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90b25namk0bTMub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tLzViNzUzY2RlYTg1YzhmNDQ5ZWVmZjM3NjgwMTg0ZjI4LnBuZw?x-oss-process=image/format,png"></p><h3 id="write-String-command"><a href="#write-String-command" class="headerlink" title="write(String command)"></a>write(String command)</h3><blockquote><p>  负责写入文件内容，如果文件不存在会先创建一个。随后通过调用getCurrentFCB(command)指令得到该指令里的文件的FCB，如果文件名不对则提示并且返回。然后首先加入打开文件表，之后将用户输入暂存与StringBuilder中，再调用ioController.write()将输入内容写入文件对应的物理磁盘块中。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90b25namk0bTMub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tLzdmODEwYTQwZjRhNTYxZjU5ZmEzZmY5NDJkZjQxZjVhLnBuZw?x-oss-process=image/format,png"></p><h3 id="read-String-command"><a href="#read-String-command" class="headerlink" title="read(String command)"></a>read(String command)</h3><blockquote><p>  负责读取文件内容。通过调用getCurrentFCB(command)指令得到该指令里的文件的FCB，如果文件名不对则提示并且返回。然后首先加入打开文件表，通过ioController.read()将文件内容显示到屏幕上。</p></blockquote><h3 id="open-close-函数"><a href="#open-close-函数" class="headerlink" title="open(),close()函数"></a>open(),close()函数</h3><blockquote><p>  通过调用getCurrentFCB(command)指令得到该指令里的文件的FCB，如果文件名不对则提示并且返回。将文件添加或者移除打开文件表。</p></blockquote><h3 id="rm-String-command-函数"><a href="#rm-String-command-函数" class="headerlink" title="rm(String command)函数"></a>rm(String command)函数</h3><blockquote><p>  通过调用getCurrentFCB(command)指令得到该指令里的文件的FCB，如果文件名不对则提示并且返回。并且调用rmRecursive（FCB<br>  fcb）将他的子目录以及文件都删除（如果还是目录，则继续调用自己，递归删除所有文件）。最后，再将他本身删除。（在FCB中删除，在目录的位示图中删除，在目录磁盘块中删除）。</p></blockquote><h3 id="cd-String-command"><a href="#cd-String-command" class="headerlink" title="cd(String command)"></a>cd(String command)</h3><blockquote><p>  照例，先将命令拆分，得到路径。然后需要判断路径是否是.. ../ ./<br>  .等执行特殊操作。若不是，则通过调用getCurrentFCB(command)指令得到该指令里的文件的FCB，如果文件名不对，或者不是目录则提示并且返回。然后将当前路径设为该FCB。</p></blockquote><h3 id="ls（）函数"><a href="#ls（）函数" class="headerlink" title="ls（）函数"></a>ls（）函数</h3><blockquote><p>  首先得到当前路径的子目录，然后全部打印。因为前面说过重写了FCB的toString（）方法，所以格式良好。</p></blockquote><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><blockquote><p>  pwd（）函数得到controller的当前目录的路径名，并且打印。openFiles()获取controller的打开文件表，并且展示打开文件表中文件名以及占用的物理块号。fileBlock()，dirBlock()则根据文件/目录的位示图，判断出已经使用的磁盘块，并且展示。</p></blockquote><h2 id="controller包下类的实现"><a href="#controller包下类的实现" class="headerlink" title="controller包下类的实现"></a>controller包下类的实现</h2><h3 id="Controller类"><a href="#Controller类" class="headerlink" title="Controller类"></a>Controller类</h3><blockquote><p>  成员函数包括：当前的目录项，目录区磁盘块，文件区磁盘块，文件分配表FAT。目录的空闲分区位示图，文件的空闲分区位示图以及打开文件表。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90b25namk0bTMub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tLzhkZWUyMTc3YzM2ZjdmNzQzYmIzYmEyYWFiNzJkMmJkLnBuZw?x-oss-process=image/format,png"></p><h4 id="初始化函数Controller（）："><a href="#初始化函数Controller（）：" class="headerlink" title="初始化函数Controller（）："></a>初始化函数Controller（）：</h4><blockquote><p>  将上述的成员变量初始化。值得注意的是，在FAT中,-1代表结束,其他数字代表下一个物理块指向,所以初始化为-2。并且为根路径分配目录区的物理块0，并且设置为当前目录。</p></blockquote><h4 id="allocFAT-与freeFAT-："><a href="#allocFAT-与freeFAT-：" class="headerlink" title="allocFAT()与freeFAT()："></a>allocFAT()与freeFAT()：</h4><blockquote><p>  负责FAT的分配与回收，根据之前分配给文件的物理块地址链表，在FAT中进行分配，且FAT的值为下一个物理块索引，最后一块值为-1。回收则是传入文件的起始物理块，随后一直根据FAT中的值寻找到下一个物理块，并且置为-2（未分配状态）。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90b25namk0bTMub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tL2RlNGY3ZmNmY2Y4ZGQyNGIxNzlmNGQ2YzY0NWZmMGQ5LnBuZw?x-oss-process=image/format,png"></p><h4 id="getFreeDirBlock-与setFreeDirBlock-int-dirIndex-："><a href="#getFreeDirBlock-与setFreeDirBlock-int-dirIndex-：" class="headerlink" title="getFreeDirBlock()与setFreeDirBlock(int dirIndex)："></a>getFreeDirBlock()与setFreeDirBlock(int dirIndex)：</h4><blockquote><p>  负责目录位示图的分配与回收操作。从位示图选取一个未分配的，通过数学转换成一维的目录块索引，并且标记为已分配。而回收则把目录磁盘块索引转为二维位示图坐标，标记为未分配。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90b25namk0bTMub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tLzE4ODVjYjdkODRiMjAxNDM1ZTZjY2VlZjM1MDhkMDI2LnBuZw?x-oss-process=image/format,png"></p><h4 id="getFreeFileBlock-int-size-与setFreeFileBlock-int-dirIndex-："><a href="#getFreeFileBlock-int-size-与setFreeFileBlock-int-dirIndex-：" class="headerlink" title="getFreeFileBlock(int size)与setFreeFileBlock(int dirIndex)："></a>getFreeFileBlock(int size)与setFreeFileBlock(int dirIndex)：</h4><blockquote><p>  负责文件位示图的分配与回收操作。需要传入文件块的大小，以便分配足够的文件物理块。从位示图选取size个未分配的，通过数学转换成一维的文件块索引，并且标记为已分配，返回索引链表。而回收则把文件磁盘块索引转为二维位示图坐标，标记为未分配。</p></blockquote><h4 id="addOpenFiles-String-address-Integer-blockIndex"><a href="#addOpenFiles-String-address-Integer-blockIndex" class="headerlink" title="addOpenFiles(String address,Integer blockIndex)"></a>addOpenFiles(String address,Integer blockIndex)</h4><blockquote><p>  负责加入与移除打开文件表。实现很简单，加入就往map中加入键值对（文件的地址，文件起始物理块号）。删除则根据文件地址删除键值对。</p></blockquote><h3 id="IOController类"><a href="#IOController类" class="headerlink" title="IOController类"></a>IOController类</h3><p>IOController类负责读写文件，并且负责初始时从电脑本地磁盘回复内容到内存（即此虚拟文件管理系统中），还负责退出文件系统时，把文件系统内容保存在电脑本地磁盘中。该类有一个成员变量controller，以获取Controller提供的一些功能。</p><h4 id="write（）与read（）函数："><a href="#write（）与read（）函数：" class="headerlink" title="write（）与read（）函数："></a>write（）与read（）函数：</h4><p>负责文件内容的读写，读写都需要传入要操作的文件的PCB，然后写还需要传入写入的文本。随后写则在文件区中寻找该PCB所对应的物理块，并且对他的data区域进行写操作。读操作也是找到对应的物理块进行读操作。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90b25namk0bTMub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tL2FkNDQ0YmQ5NGIwMWE3Zjc0ZDVhMjg3Njg1Y2JiNWMzLnBuZw?x-oss-process=image/format,png"></p><h4 id="load（）与save（）函数："><a href="#load（）与save（）函数：" class="headerlink" title="load（）与save（）函数："></a>load（）与save（）函数：</h4><blockquote><p>  负责将文件系统加载与保存于本地磁盘中。他们是成对的。通过调用函数，他们保存与加载了文件系统中的目录位示图，文件位示图，FAT，目录物理块，文件物理块。基本的操作都是将当前文件系统中的数据按照约定格式写在磁盘中特定的文件中，然后下次启动时，则从这些文件中按之前的格式读取数据并且给他们赋值。</p></blockquote><h4 id="saveBits（）与loadBits（）函数："><a href="#saveBits（）与loadBits（）函数：" class="headerlink" title="saveBits（）与loadBits（）函数："></a>saveBits（）与loadBits（）函数：</h4><blockquote><p>  首先在本地建立文件bits，随后将controller中的文件位示图一行行写入文件中。而恢复则从bits文件一行行赋值给初始的文件位示图bits。</p></blockquote><h4 id="saveDirBits（）与loadDirBits（）函数："><a href="#saveDirBits（）与loadDirBits（）函数：" class="headerlink" title="saveDirBits（）与loadDirBits（）函数："></a>saveDirBits（）与loadDirBits（）函数：</h4><blockquote><p>  与文件位示图的保存恢复差不多。都是首先在本地建立文件dirBits，随后将controller中的目录位示图一行行写入文件中。而恢复则从dirBits文件一行行赋值给初始的目录位示图bits。</p></blockquote><h4 id="saveDirArea（）与loadDirArea（）函数："><a href="#saveDirArea（）与loadDirArea（）函数：" class="headerlink" title="saveDirArea（）与loadDirArea（）函数："></a>saveDirArea（）与loadDirArea（）函数：</h4><p>也是创建一个文件dirArea来存储数据。策略是按照深度优先搜索算法递归的存储目录信息，并且存储文件所在层级（根目录的层级是0，它所有子目录下文件层级是1，以此类推）。而从已经存储好的目录数据中加载数据时，则一行行的加载目录数据，根据层级重建目录。并且根据层级的变化判断他的父目录。如果层级是递增的，那么文件的上一级目录就是他前面那个，否则则还要回头找到他的父目录。比如层级0,1,2,3,2,3,4<br>则第二个2的父目录不是前面的3,而是前面的1。根据文件数据生成FCB后，还需要设置好他的父目录parent和他的子目录children（在他的子文件设置父目录时进行）。</p><h4 id="saveFileArea（）与loadFileArea（）函数："><a href="#saveFileArea（）与loadFileArea（）函数：" class="headerlink" title="saveFileArea（）与loadFileArea（）函数："></a>saveFileArea（）与loadFileArea（）函数：</h4><p>如果文件位示图中显示某个物理块被占用，则将在写入本地磁盘文件fileArea中，随之写入的还有他的物理块号。而加载时则按行扫描fileArea，并且从中读取文件数据以及对应的物理块号，写在本文件管理系统的特定物理块上。</p><h1 id="项目界面展示"><a href="#项目界面展示" class="headerlink" title="项目界面展示"></a>项目界面展示</h1><blockquote><p>这里的图片都混乱了,就删除了,可以运行源码,或者看word版查看效果</p></blockquote><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><h2 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h2><h2 id="更改路径"><a href="#更改路径" class="headerlink" title="更改路径"></a>更改路径</h2><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h2 id="创建删除文件"><a href="#创建删除文件" class="headerlink" title="创建删除文件"></a>创建删除文件</h2><h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><h2 id="文件系统查看操作"><a href="#文件系统查看操作" class="headerlink" title="文件系统查看操作"></a>文件系统查看操作</h2><h2 id="保存与加载操作"><a href="#保存与加载操作" class="headerlink" title="保存与加载操作"></a>保存与加载操作</h2><blockquote><p>  退出程序：<br>  重新启动程序：</p></blockquote><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><blockquote><p>  格式化：<br>  帮助文档：</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 项目文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 文件管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记104</title>
      <link href="posts/1dd3d1a6.html"/>
      <url>posts/1dd3d1a6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p> <a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">104. 二叉树的最大深度</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><pre><code>示例：给定二叉树 [3,9,20,null,null,15,7]，    3   / \  9  20    /  \   15   7返回它的最大深度 3 。</code></pre><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记102</title>
      <link href="posts/f4b07493.html"/>
      <url>posts/f4b07493.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p>[102. 二叉树的层序遍历](<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-level-order-traversal</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p><pre><code>示例：二叉树：[3,9,20,null,null,15,7],   3  / \ 9  20   /  \  15   7返回其层次遍历结果：[ [3], [9,20], [15,7]]</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>递归的思路：从根节点，高度为0处开始递归。首次进入某层时,就开辟新的空间,随后进入相同的层则直接根据他所在的高度加入即可</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">recursive</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recursive</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">==</span>null<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//最多就是等于,不会大于,因为每层不满足都会构建</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token operator">==</span>result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">recursive</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>height<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">recursive</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>height<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 层次遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记101</title>
      <link href="posts/6db92529.html"/>
      <url>posts/6db92529.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p> <a href="https://leetcode-cn.com/problems/symmetric-tree/" target="_blank" rel="noopener">101. 对称二叉树</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个二叉树，检查它是否是镜像对称的。</p><pre><code>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。    1   / \  2   2 / \ / \3  4 4  3但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:    1   / \  2   2   \   \   3    3</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>递归,每次分为两次递归,判断最外层的两个节点,最内侧两节点是否相等</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p>注意节点为空的情况</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">recursive</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">recursive</span><span class="token punctuation">(</span>TreeNode left<span class="token punctuation">,</span>TreeNode right<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>null <span class="token operator">&amp;&amp;</span> right<span class="token operator">==</span>null<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>null <span class="token operator">||</span> right<span class="token operator">==</span>null<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> left<span class="token punctuation">.</span>val <span class="token operator">==</span> right<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> <span class="token function">recursive</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>left<span class="token punctuation">,</span> right<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">recursive</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>right<span class="token punctuation">,</span> right<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目------操作系统_内存管理项目</title>
      <link href="posts/8f00f39.html"/>
      <url>posts/8f00f39.html</url>
      
        <content type="html"><![CDATA[<h1 id="内存管理源码-Github地址"><a href="#内存管理源码-Github地址" class="headerlink" title="内存管理源码_Github地址"></a><a href="https://github.com/tongji4m3/memoryProject" target="_blank" rel="noopener">内存管理源码_Github地址</a></h1><h1 id="项目目的"><a href="#项目目的" class="headerlink" title="项目目的"></a>项目目的</h1><ul><li><p>动态分区分配方式</p><ul><li><p>数据结构、分配算法</p></li><li><p>加深对动态分区存储管理方式及其实现过程的理解。</p></li></ul></li><li><p>请求分区分配方式</p><ul><li><p>页面、页表、地址转换</p></li><li><p>页面置换过程</p></li><li><p>加深对请求调页系统的原理和实现过程的理解</p></li></ul></li></ul><h1 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h1><h2 id="动态分区分配方式的模拟"><a href="#动态分区分配方式的模拟" class="headerlink" title="动态分区分配方式的模拟"></a>动态分区分配方式的模拟</h2><ul><li>要求:</li></ul><blockquote><p>  假设初始态下，可用内存空间为640K，并有下列请求序列，请分别用首次适应算法和最佳适应算法进行内存块的分配和回收，并显示出每次分配和回收后的空闲分区链的情况来。</p></blockquote><ul><li>请求序列:</li></ul><blockquote><p>  作业1申请130K</p></blockquote><blockquote><p>  作业2申请60K</p></blockquote><blockquote><p>  作业3申请100k</p></blockquote><blockquote><p>  作业2释放60K</p></blockquote><blockquote><p>  作业4申请200K</p></blockquote><blockquote><p>  作业3释放100K</p></blockquote><blockquote><p>  作业1释放130K</p></blockquote><blockquote><p>  作业5申请140K</p></blockquote><blockquote><p>  作业6申请60K</p></blockquote><blockquote><p>  作业7申请50K</p></blockquote><blockquote><p>  作业6释放60K</p></blockquote><h2 id="请求调页存储管理方式模拟"><a href="#请求调页存储管理方式模拟" class="headerlink" title="请求调页存储管理方式模拟"></a>请求调页存储管理方式模拟</h2><ul><li>内容</li></ul><blockquote><p>  假设每个页面可存放10条指令，分配给一个作业的内存块为4。模拟一个作业的执行过程，该作业有320条指令，即它的地址空间为32页，目前所有页还没有调入内存。</p></blockquote><ul><li><p>模拟过程</p></li><li><p>在模拟过程中，如果所访问指令在内存中，则显示其物理地址，并转到下一条指令；如果没有在内存中，则发生缺页，此时需要记录缺页次数，并将其调入内存。如果4个内存块中已装入作业，则需进行页面置换。</p></li><li><p>所有320条指令执行完成后，计算并显示作业执行过程中发生的缺页率。</p></li><li><p>置换算法可以选用FIFO或者LRU算法</p></li><li><p>作业中指令访问次序可以按照下面原则形成:50%的指令是顺序执行的，25%是均匀分布在前地址部分，25％是均匀分布在后地址部分</p></li><li><p>具体实施方法(参考):</p></li><li><p>在0－319条指令之间，随机选取一个起始执行指令，如序号为m</p></li><li><p>顺序执行下一条指令，即序号为m+1的指令</p></li><li><p>通过随机数，跳转到前地址部分0－m-1中的某个指令处，其序号为m1</p></li><li><p>顺序执行下一条指令，即序号为m1+1的指令</p></li><li><p>通过随机数，跳转到后地址部分m1+2~319中的某条指令处，其序号为m2</p></li><li><p>顺序执行下一条指令，即m2+1处的指令。</p></li><li><p>重复跳转到前地址部分、顺序执行、跳转到后地址部分、顺序执行的过程，直到执行完320条指令。</p></li></ul><h1 id="项目设计及算法"><a href="#项目设计及算法" class="headerlink" title="项目设计及算法"></a>项目设计及算法</h1><h2 id="项目整体结构"><a href="#项目整体结构" class="headerlink" title="项目整体结构"></a>项目整体结构</h2><p>本项目是采用java语言开发的，通过命令行互动的内存管理项目。主要分为2个包(dynamic,request)和一个主类MainTest。通过主类的main函数选择相应的算法进行模拟。</p><p>其中的dynamic包主要是完成对动态分区分配的模拟，他有两个子包，一个是存储实体的domain包，里面包括了要执行的作业（Task类），以及空闲分区链中的每一项(FreeItem)。而另一个子包algorithm中，有一个类FitAlgorithm,抽取了FF和BF的整个流程里面重复的代码片段。并且他可以根据选择的参数，来决定调用首次适应算法（BF类）还是最佳适应算法（FF类）中的方法。</p><p>而request包主要是完成请求调页方式的模拟，也有两个子包domain以及algorithm。在domain包中有两个类，PageItem类主要负责存储页表中的项，InstructionSequence则负责提供一组特定规则的随机序列，模拟指令。而algorithm包中，只有一个类requestPage，负责完成请求调页方式模拟的逻辑以及展示页面。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/d0e3fe82479fd4fb3080a5a5e1c7d55b.png"></p><h2 id="首次适应算法"><a href="#首次适应算法" class="headerlink" title="首次适应算法"></a>首次适应算法</h2><ul><li><p>实现：根据空闲分区链中地址从低到高的顺序，从空闲分区链的第一个地址找起，把最先能够满足要求的空闲区分配给作业。如果满足要求的空闲分区大小正好等于该任务所需内存大小，则需要在空闲分区链中删除该空闲分区，否则就改变该空闲分区的相应参数（始址，长度）。</p></li><li><p>优点:查找时间短，算法开销小，回收分区后不需要对空闲分区队列重新排序，综合性能最好。</p></li><li><p>缺点:低址部分不断被划分，会留下许多难以利用的，很小的空闲分区，称为碎片。而每次查找又都是从低址部分开始的，这无疑又会增加查找可用空闲分区时的开销。</p></li></ul><h2 id="最佳适应算法"><a href="#最佳适应算法" class="headerlink" title="最佳适应算法"></a>最佳适应算法</h2><ul><li><p>实现：通常是采用空闲分区以容量递增的顺序排列，每次选择容量最小的能满足需求的空闲分区。但我的具体实现是从按地址递增的空闲分区链中,先筛选出符合条件的空闲分区,再从中找到最小的一个空闲分区，如果该空闲分区大小正好等于该任务所需内存大小，则需要在空闲分区链中删除该空闲分区，否则就改变该空闲分区的相应参数（始址，长度）。因为这样可以不用对空闲分区按照容量递增排序，可以复用FF中的分区回收算法。</p></li><li><p>优点:优先使用更小的分区，保留更多的大分区，所以会有更多的大分区保留下来，更能满足大进程的需求。</p></li><li><p>缺点:会留下许多难以利用的，很小的空闲分区，称为碎片碎片。每次都要找到最小的可用的空闲分区，算法的开销大。</p></li></ul><h2 id="LRU置换算法"><a href="#LRU置换算法" class="headerlink" title="LRU置换算法"></a>LRU置换算法</h2><ul><li><p>实现：在每一个页表项的访问字段中记录了上次访问时间（用一个不断递增的变量实现）。当内存块中已经满了，需要置换时，<br>就查看内存块里面的四个页面，根据访问字段选取出最近最久未使用的页面，并且模拟调出内存，再把所需要的页面调入内存（实际上就是在对应的内存块数组中放入该页面的索引），并且把该页面访问时间改为最新的。</p></li><li><p>优点:性能很好，缺页率较低，是局部性原理的合理近似，</p></li><li><p>缺点:算法开销较大，需要记录页面使用时间的先后关系，硬件开销太大。</p></li></ul><h1 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h1><h2 id="MainTest类实现"><a href="#MainTest类实现" class="headerlink" title="MainTest类实现"></a>MainTest类实现</h2><blockquote><p>  通过命令行输入的参数，选择对应的算法进行模拟。其中，1表示选择首次适应算法，2表示选择最佳适应算法，3表示进行请求调页存储管理方式模拟。</p></blockquote><blockquote><p>  其中，选择1和2将使用FitAlgorithm类并且传入该参数来选择首次适应算法，或者最佳适应算法。选择3则使用RequestPage类进行请求调页方式模拟。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/55475d0b605c779c4904f5382947faf7.png"></p><h2 id="dynamic包下类实现"><a href="#dynamic包下类实现" class="headerlink" title="dynamic包下类实现"></a>dynamic包下类实现</h2><h3 id="Task类实现"><a href="#Task类实现" class="headerlink" title="Task类实现"></a>Task类实现</h3><blockquote><p>  实体类，字段包含了作业名称，进行的操作（释放/申请），释放/申请的内存大小。并且重写了toString方法，使得展示更符合阅读规范。</p></blockquote><blockquote><p>  该类有一个静态方法，getTask，将存储了一系列的任务列表封装成链表并返回。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/39f5702ea2f2f5b06f3762634a5de6ac.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/6072930d7d7c4d44c763e3039d6edb13.png"></p><h3 id="FreeItem类实现"><a href="#FreeItem类实现" class="headerlink" title="FreeItem类实现"></a>FreeItem类实现</h3><blockquote><p>  该类也是实体类，有三个字段，分别是空闲分区的起始地址，长度，以及分配情况（未分配，或者分配给了哪一个作业）。同样重写了toString()方法，使得格式更加整齐。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/6c98c1f5062c26c75f7fc8e317746285.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/81019078308e9a96ee5c8e3352cf1f61.png"></p><h3 id="FitAlgorithm类实现"><a href="#FitAlgorithm类实现" class="headerlink" title="FitAlgorithm类实现"></a>FitAlgorithm类实现</h3><blockquote><p>  该类负责实现动态分区分配的具体逻辑，并且通过传入参数选择FF或者BF算法进行内存分配。</p></blockquote><blockquote><p>  首先，初始化空闲分区链，已分配分区链，并且从Task类中拿到具体的任务要求。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/2fc55d3ae09686706127c470c8424bc9.png"></p><blockquote><p>  然后每次从任务列表中取出第一条任务，根据该任务需要申请/释放内存进行相应操作（下面会讲），然后打印出空闲分区链及已分配分区链此时的情况。每间隔两秒循环一次，直到任务列表为空。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/b54aeb5a1851c9e0bf8a653ae19bb3cc.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/394e1dd3e381d7c937a5faacf8dc6991.png"></p><blockquote><p>  任务如果进行的是释放操作，则首先从已分配分区表中得到该作业在内存中的起始地址以及大小，随后在空闲分区表中释放该区域内存。但是这样一共有四种情况：<br>  1.释放该作业内存后和后面的空闲分区相连,2.释放该作业内存后和前面的空闲分区相连,3.<br>  释放该作业内存后和前面以及后面的空闲分区连成一大块,4释放的该作业内存和前后空闲分区都不相连。(需要考虑是否存在前后空闲分区的情况)。</p></blockquote><blockquote><p>  四种情况示意图如下：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/9e0be407bff7128705dd54b2bdf0e8cd.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/87b03cf926c8a919f2f8b3aa5b225702.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/1db0d7a3c1095736db718dfc17016277.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/addd2254cb6cad29ef4e555a38896bca.png"></p><blockquote><p>  任务如果是申请操作，则根据之前在main函数选择的数字来采取对应的算法（FF或者BF）。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/a8e8cdfc194b64de62874f63a3e546c7.png"></p><h3 id="FF类实现"><a href="#FF类实现" class="headerlink" title="FF类实现"></a>FF类实现</h3><blockquote><p>  采取首次适应算法进行内存分配，主要实现在静态函数ff中。根据空闲分区链中地址从低到高的顺序，从空闲分区链的第一个地址找起，把最先能够满足要求的空闲区分配给作业。如果满足要求的空闲分区大小正好等于该任务所需内存大小，则需要在空闲分区链中删除该空闲分区，否则就改变该空闲分区的相应参数（始址，长度）。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/6676b7082e5ff71f0c30d7993dc9de3a.png"></p><h3 id="BF类实现"><a href="#BF类实现" class="headerlink" title="BF类实现"></a>BF类实现</h3><blockquote><p>  采取最佳适应算法进行内存分配，主要实现在静态函数bf中。从按地址递增的空闲分区链中,先筛选出符合条件的空闲分区,再从中找到最小的一个空闲分区，如果该空闲分区大小正好等于该任务所需内存大小，则需要在空闲分区链中删除该空闲分区，否则就改变该空闲分区的相应参数（始址，长度）。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/1e9dcb8919ac79588d66666235616c24.png"></p><h2 id="request包下类实现"><a href="#request包下类实现" class="headerlink" title="request包下类实现"></a>request包下类实现</h2><h3 id="InstructionSequence类实现"><a href="#InstructionSequence类实现" class="headerlink" title="InstructionSequence类实现"></a>InstructionSequence类实现</h3><blockquote><p>  主要作用是根据ppt的方式,得到指令序列.并且是通过伪随机数,每次都得到同样的一组随机数,便于测试与复现。</p></blockquote><blockquote><p>  大致先随机选取作业中的一条指令，并且按顺序得到下一条指令，随后不断循环，重复跳转到前地址部分、顺序执行、跳转到后地址部分、顺序执行的过程，直到得到320条指令（最后两条指令由于数组大小原因，选择了随机某条指令以及按顺序的下一条指令）。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/e8f1c50bd23c6834f5ba6374ff13cf9d.png"></p><h3 id="PageItem类实现"><a href="#PageItem类实现" class="headerlink" title="PageItem类实现"></a>PageItem类实现</h3><blockquote><p>  该类是实体类，代表了页表中的页表项，有四个字段：页号，内存块号（-1代表不在内存中），状态（true代表在内存中，false代表不在内存中），访问字段（记录上次访问时间，以实现LRU算法）。初始化中，所有页面都不在内存中，最久访问字段也设置为-1。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/11dd591286f905e60f7ed914a221b8f7.png"></p><h3 id="RequestPage类实现"><a href="#RequestPage类实现" class="headerlink" title="RequestPage类实现"></a>RequestPage类实现</h3><blockquote><p>  该类实现请求调页的主要功能。首先定义了缺页次数字段，已经最近访问时间visitCount(初始化为0,每次访问页面后赋值到页面的访问字段并且+1)，并且初始化了该作业的32个页面。并且初始化分配给该作业的4个内存块（开始内存块中无页面）。随后通过之前的InstructionSequence类得到了指令序列。随后就对指令序列的每条指令进行执行（随后会说），最后打印缺页率。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/2b74914710aa33e14622215e0e316eca.png"></p><blockquote><p>  在每条指令的执行过程中，首先先找到该指令所属的页号。如果该页面在内存块中，则打印出指令的物理地址，并且将访问时间设为最近的（visitCount++）。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/2174614935e27dc4d473a8fed6ce2c55.png"></p><blockquote><p>  如果缺页了，但是内存块中还有空余位置，则将页面直接放入空闲的内存块中，并且让缺页次数+1，并且设置最近访问时间，而且不需要页面置换。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/d287b0087981a986ced3ba6ff2c20bad.png"></p><blockquote><p>  如果缺页了，并且4个内存块中都装满了作业，则使用LRU算法进行页面置换。首先查看内存块里面的四个页面，根据访问字段选取出最近最久未使用的页面，并且模拟调出内存，再把所需要的页面调入内存（实际上就是在对应的内存块数组中放入该页面的索引），并且把该页面访问时间改为最新的。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/ef0b8793e707f6b75da6212d09e13e28.png"></p><blockquote><p>  最后，展示页表目前的情况，但是由于作业的总页数太大，所以只展示了曾经放入内存块中的页面（通过判断访问时间是否&gt;=0实现）。并且还展示了4个内存块里面存储的页面号。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/db9b37208a2e0a329f104c5c30b21f78.png"></p><h1 id="项目界面展示"><a href="#项目界面展示" class="headerlink" title="项目界面展示"></a>项目界面展示</h1><h2 id="动态分区分配-FF算法界面展示"><a href="#动态分区分配-FF算法界面展示" class="headerlink" title="动态分区分配-FF算法界面展示"></a>动态分区分配-FF算法界面展示</h2><blockquote><p>  处理作业1后的情况：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/df6a6335e312d038091dea6a3463e415.png"></p><blockquote><p>  处理作业2，作业3情况也类似，只截处理完作业3的图:</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/10e2779fe65ed692275f26620b156f25.png"></p><blockquote><p>  释放作业2内存：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/875cb49b31240357406074307c454a9e.png"></p><blockquote><p>  作业4申请，作业3，作业1释放后：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/4479c4ee520de74517d4932804c2757e.png"></p><blockquote><p>  作业5申请，这里是FF和BF算法在该作业序列里不一样的地方，FF算法在这里按地址顺序寻找到前面的低地址空闲分区就分配了，但是BF会找到最后的那块容量最小的内存分区进行分配：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/425f09d23162c2d467be3f7d6aa17bfd.png"></p><blockquote><p>  作业6，作业7申请后：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/ee201abca741ee6466f5ea97ea66f686.png"></p><blockquote><p>  最后一个序列，作业6释放内存：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/04e29ec16f986738cea51c9b16ecf785.png"></p><h2 id="动态分区分配-BF算法界面展示"><a href="#动态分区分配-BF算法界面展示" class="headerlink" title="动态分区分配-BF算法界面展示"></a>动态分区分配-BF算法界面展示</h2><blockquote><p>  前面的都和FF算法一样，只是在作业5申请时有了变化，这里找到了容量较小的空闲分区进行分配：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/888b21728dd642ae54394740c7cfe12c.png"></p><blockquote><p>  作业6，作业7申请：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/7beb1dc31066e275047d7cf2635192f0.png"></p><blockquote><p>  最后一条，作业6释放：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/833e9dc938bf5f2bc170ad8db8b5bf9a.png"></p><blockquote><p>  5.3请求调页-LRU算法界面展示</p></blockquote><blockquote><p>  执行第一条指令，116：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/386f3697478d202ba923225ba4dacea2.png"></p><blockquote><p>  第二条，指令117（之后的指令两两基本同一个页面，所以每隔2条指令截图一次）：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/ab6e684d1f44ad3e0ad0aa044c5f50f4.png"></p><blockquote><p>  第三条，指令80：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/7777c3ef8f32aef7b3263f067500c3c8.png"></p><blockquote><p>  第五条，指令250：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/80764683f5943b3fb58b0dd8a506f75c.png"></p><blockquote><p>  第七条，指令160：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/ea3a5a81d2039ab695d954e663f59cb8.png"></p><blockquote><p>  第九条，指令259（没有缺页，但是更新了访问时间）：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/2273642bb1b7703abd15eb43cbb1943c.png"></p><blockquote><p>  第十条，指令260（虽然和259相连，但是不在同一页上，所以缺页，并且发生页面置换。替换最近未访问的页号11，且页号11状态标志为不在内存块中）：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/c3f8eaff0646ace444b67bb1ab793a22.png"></p><blockquote><p>  第十一条，指令54（缺页，页面置换。替换最久未使用的页面8）：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/bbfececf9d264f8072f05286d7e5b533.png"></p><blockquote><p>  随后的指令基本类似，只截取最后两条指令：</p></blockquote><blockquote><p>  指令81：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/4553ca7dd481a10d6b5125f57225c080.png"></p><blockquote><p>  指令82：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/b66e80ebebb962cd6a678cda6d10a7f8.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 内存管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记98</title>
      <link href="posts/ada9b038.html"/>
      <url>posts/ada9b038.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/" target="_blank" rel="noopener">98. 验证二叉搜索树</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p><p>假设一个二叉搜索树具有如下特征：</p><p>节点的左子树只包含小于当前节点的数。<br>        节点的右子树只包含大于当前节点的数。<br>        所有左子树和右子树自身必须也是二叉搜索树。<br>示例 1:</p><pre><code>输入:    2   / \  1   3输出: true</code></pre><p>示例 2:</p><pre><code>输入:    5   / \  1   4     / \    3   6输出: false解释: 输入为: [5,1,4,null,null,3,6]。     根节点的值为 5 ，但是其右子节点值为 4 。</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>中序遍历,如果后面的节点小于等于前面的节点,就不是二叉搜索树</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p>使用isFirst避免下面特殊情况出现错误:</p><p>如果最左边的正好是Integer.MIN_VALUE或者有两个Integer.MIN_VALUE</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token punctuation">{</span>    Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode temp <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isFirst <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pre<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">!=</span>null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">!=</span>null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isFirst<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pre <span class="token operator">=</span> temp<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            isFirst <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>val<span class="token operator">&lt;=</span>pre<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pre <span class="token operator">=</span> temp<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目------Web游戏-俄罗斯方块</title>
      <link href="posts/1a7d60e1.html"/>
      <url>posts/1a7d60e1.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-整体架构"><a href="#1-整体架构" class="headerlink" title="1.整体架构"></a>1.整体架构</h1><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>该项目是基于html+css+js开发的俄罗斯方块前端游戏。项目已部署到远程服务器,可直接访问:<br><a href="http://47.103.203.188:8080/tetris/html/index.html%20" target="_blank" rel="noopener">运行游戏</a>。</p><p>源码可在Github上查看:<a href="https://github.com/tongji4m3/tetris" target="_blank" rel="noopener">tongji4m3</a></p><h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><p>本项目总体分为四个文件夹:html,css,js,img。img包含了背景图片。html中只有index.html，负责游戏的展示。css文件中只有index.css，负责对index.html的美化。游戏具体逻辑包含在js文件中。</p><p>js文件夹中，const.js定义了整个游戏的常量，例如游戏长宽，方块颜色，键盘的键与数值等。tetris.js代表着一种特点的方块类型,方块位置，也包含了方块变换等。controller.js执行了游戏的具体逻辑，如控制方块下落，方块变体，是否得分，游戏是否结束等等。view.js负责游戏区与下一方块区表格的动态生成以及游戏方块的绘制等等。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/400f4a8a4575cfc57aa331b5ca9384d0.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/e71387d08a0edb58f8cf89a113046d3e.png"></p><h1 id="2-项目实现"><a href="#2-项目实现" class="headerlink" title="2.项目实现"></a>2.项目实现</h1><h2 id="index-html实现"><a href="#index-html实现" class="headerlink" title="index.html实现"></a>index.html实现</h2><p>index.html中首先引入了相关的css文件以及js文件。主体通过div将页面分为三部分：左边为游戏区域,右边为辅助区域(右上角为下一方块预告区,右下角为操作说明区)。</p><p>在游戏区以及下一方块预告区，都只放了一个table标签，并且赋予一个id，之后通过index.css控制他的样式，通过view.js动态往表格添加行列，以可以根据传入值动态改变游戏区的长宽。预告区则是一些文本，其中的分数和速度则有id，可以在js中根据游戏进度动态改变。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/af5562472786187932abcc87e75ab368.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/5873677b292faf23ec0d32ac45b894cd.png"></p><h2 id="index-css实现"><a href="#index-css实现" class="headerlink" title="index.css实现"></a>index.css实现</h2><p>主要设置了整体的背景，以及控制了游戏区，下一方块预告区，操作提示区的相对位置。以及游戏区，下一方块区中每个小方格的样式。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/fc1363b58fa790fe2c2afc425ee5224a.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/adde641caf8036e3decbbf65152774a2.png"></p><h2 id="const-js实现"><a href="#const-js实现" class="headerlink" title="const.js实现"></a>const.js实现</h2><p>该文件定义了整体程序需要用到的一些常量，一是为了便于修改，二是通过字符串代替数字，便于代码阅读。首先定义了游戏主界面的宽高以及下一方块提示区的宽高。其次定义了初始方块产生的位置。然后定义了不同种类的方块对应的字符串，例如WALL代表墙。还定义了使用到的键盘的键与值的对应关系。最后定义了使用到的颜色。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/4eb1393726b1c70932db9b9a6287446f.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/f245fcf5964cb84c4d7083ecd9c2c0af.png"></p><h2 id="tetris-js实现"><a href="#tetris-js实现" class="headerlink" title="tetris.js实现"></a>tetris.js实现</h2><p>定义二维位置坐标类,方便坐标表示。然后定义了方块类，包含了重要点坐标，方块类型，方块颜色，整体形状坐标。</p><p>众所周知，一个整体的方块由四个原子方块组成。所以重要点坐标标记了该整体方块的一个点的位置，然后其他三个点则可以通过该重要点的坐标以及该方块类型得到（通过makeTetris（）函数生成）。每个整体方块的颜色是随机生成的。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/59c997eed9e8d30617a6aabe67254eba.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/7e74e0992e569b2628c3cac42a68e59b.png"></p><p>makeTetris（）函数则就是根据上述的重要点坐标（x,y）以及方块类型flag来生成。俄罗斯方块一共21种类型，对应每种类型生成他四个点的坐标并存储在数组中。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/35704969093fe1e901b55eadcac5eafe.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/0c9987edd2cd3b74290d0bd9d89f90a0.png"></p><p>changeTetris（）函数是为了支持方块变形而存在的。首先改变flag到他的下一个转体的flag。因为除了田字形只有一种类型外，其他四个为一组，所以可以简单的操作即可得到转变后的flag。得到之后，调用之前的makeTetris（）即可得到转变后的整体方块的四个坐标。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/ca147ba64e0255f954c09c405ea3d1d0.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/330bc00838630d6a247e3ecc12d9b978.png"></p><p>rechangeTetris（）函数是changeTetris（）函数的逆运算，为的是模拟转体后发现空间不够则要转回原本的形状。实现起来差不多，只是形状改变的方向不一样。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/3d764fa633e30b9ebd5bffa4d45617d1.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/3ae5b038767dc3722b78ab9f8dd2fb98.png"></p><h2 id="view-js实现"><a href="#view-js实现" class="headerlink" title="view.js实现"></a>view.js实现</h2><p>主要是负责图像的绘制，即往表中根据const.js中定义的宽高，动态的生成表格的行和列，代表了每个小方块。还绘制了小方块的颜色。</p><p>首先，定义了游戏区，下一方块预告区（以下简称next区）的二维数组，之后基本通过操作二维数组来实现功能。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/61a8798f8379f9dd2619dbe949f8db0a.png"></p><p>初始化函数init（）。负责将游戏区和next区的二维数组初始化。游戏区一部分初始化为EMPTY代表此时没有方块，边缘初始化为WALL，代表是墙。next区则全部初始化为EMPTY。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/4ca0365317a84550829ab1a6d50707e4.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/1d5906f8c4fdc7277485e11fa2528cbc.png"></p><p>append（）函数。负责在屏幕上动态添加表格，即根据const定义的宽高往游戏区，next区动态添加对应的表格。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/43f75f32f0e95c419c863ef70deca9ee.png"></p><p>draw（）函数。负责绘制游戏区的方块颜色，根据不同种类的方块（空白，墙，已经落下的，正在落下的），绘制不同的颜色。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/4941c27368fd441a6c23e062e499d53b.png"></p><p>drawSmall（）函数。负责next区的绘图。和draw（）原理一样。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/24a9df9727e853d16d487d1837d19345.png"></p><h2 id="controller-js实现"><a href="#controller-js实现" class="headerlink" title="controller.js实现"></a>controller.js实现</h2><p>该js文件负责游戏的具体逻辑实现。首先定义了一些全局变量。例如当前方块类型flag，下一方块类型nextFlag。当前方块tetris，下一方块nextTetris。以及两个变量movable，gameOver表示是否能移动，是否游戏结束。以及两个变量speed，scope代表速度和得分。最后moveDownId是控制方块不断下移函数moveDown的定时器的返回值，为了能停止定时器，调整速度等等。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/2c28d9c4c4177c6c4319e5d566a84708.png"></p><p>window.onload（）函数。是该js文件的入口，当html页面一加载就进入该函数。他调用了之后用到的函数，大概逻辑是：先初始化游戏区，next区的二维数组，然后将初始的表格给动态添加好。随后就绘制游戏区和next区的方块。随后就调用定时器，每隔一段时间调用moveDown函数，让当前方块下移。最后还添加了事件监听。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/7b5f787a34c8ddd2507502bf53e6e019.png"></p><p>addEventListener（）函数。添加键盘事件监听。根据不同的键盘按键，采取对应的措施。如果是UP，则方块先变形，如果不能变形，则回退。如果是DOWN，则让方块向下移动一位，且调用makeTetris()函数，让核心小方块之外的其他三个小方块坐标也发生改变，同样的，如果是不能向下移动，则取消刚刚的操作。LEFT，RIGHT函数以此类推。SPACE，则简单的将moveable=！moveable就实现了暂停。而+-号则改变速度，首先先把speed变量做相应的改变然后先通过之前提到的定时器ID：moveDownId来停止movedown函数的定时器，再新建一个定时器（因为不这样的话，定时器的速度会按照之前的速度，即不会改变）。同时，获取html上的对应speed元素，并且修改值。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/e6a9e4e2b06a4389ad8feededdfb2507.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/1a47e25419e9f80947f4def13f522543.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/34c6511cb734ef2e44074a464ba59f11.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/24039215d38011643738882aaf85eb1d.png"></p><p>moveDown()函数：之前所提到的，就是通过定时器调用moveDown()函数实现方块的自动下落，是一个比较关键的函数。</p><p>该函数首先会判断，如果没有暂停，则将tetris的核心小方块x坐标下移，并且将其他三个小方块也下移。随后判断是否可移动，如果是不可移动的，说明该方块已经落到了下面，则调用newStart（）函数生成新的方块继续。如果是可以移动的，则调用updateBoard()函数更新方块位置，并且通过draw（）函数绘制当前方块情况。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/be5da2aa64d60769e110aa603716428c.png"></p><p>updateBoard()函数：负责每次方块下落时将游戏区的二维数组更新，具体逻辑是先将数组中值等于NEW，即刚刚落下的给赋值为EMPTY。再将当前tetris的四个小方块位置坐标标记为NEW。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/3b8654ef815c9f7f75fcbdec25d0cf13.png"></p><p>isMovable()函数：负责碰撞检测。具体做法是，对方块中的每一个小方块，首先判断是否数组越界，然后判断坐标所在位置是否是OLD或者WALL，是则返回false，代表不能移动。（因为碰撞检测是在updateBoard()之前，所以还不会覆盖）。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/eb9e4430fd0acd00661d6640d79e2be3.png"></p><p>newStart()函数：当一个方块下落到不能继续下落时调用该方法。首先将方块整体上移一格，以抵消之前的下移操作。随后更新方块，将此方块变成已下落状态。并且此时还调用clearLine()进行满行清空操作。最后还判断游戏是否结束，结束则调用newGame（）函数进行相关清理工作，未结束则把之前的nextTetris变成当前的tetris，并且重新生成下一方块并展示。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/8a54cb8e243f1378882a9fed179467c6.png"></p><p>newGame()函数：初始化数组，重新绘图，并且终止定时器。</p><p>isOver()函数：用于判断游戏是否结束，具体是查看游戏区的顶部是否已经有了已经落下的方块，或者是应该落下新方块的位置是否已经有了方块。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/cfc9aaa6c9d76397d6ad9e09d9bdfc4b.png"></p><p>clearLine()函数则负责消除满行。具体做法是，从游戏区的底部往上进行扫描操作，并且计算每一行的方块数，如果某一行满了，则让该行清空。并且让这一行上面的所有方块都不断下移，把空出来的位置填满，并且又从底部重新开始扫描（因为可能消去之后下面的区域又全满了）。最后更新分数，并且展示在屏幕上。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/9d8d9a9b4d714bd37b1acc3018bddd14.png"></p><h1 id="3-项目展示"><a href="#3-项目展示" class="headerlink" title="3.项目展示"></a>3.项目展示</h1><p>初始页面：</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/bc2c190196439d37817452551c1df7db.png"></p><p>消除一行并且改变了速度的页面：</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/f75a7f497951e45f40c107fddb4510e6.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> JavaScript </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记96</title>
      <link href="posts/4a119d3f.html"/>
      <url>posts/4a119d3f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/unique-binary-search-trees/" target="_blank" rel="noopener">96. 不同的二叉搜索树</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个整数 n，求以 1 … n 为节点组成的二叉搜索树有多少种？</p><p>示例:</p><pre><code>输入: 3输出: 5解释:给定 n = 3, 一共有 5 种不同结构的二叉搜索树:   1         3     3      2      1    \       /     /      / \      \     3     2     1      1   3      2    /     /       \                 \   2     1         2                 3</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><pre><code>动态规划:dp[i]代表n=i时组成的二叉搜索树的种类数量初始化: dp[0]=1,dp[1]=1递推方程:for j in [1,i]:        dp[i]+=dp[j-1]*dp[i-j]返回:dp[n]</code></pre><pre><code>for i in [2,n]:    for j in [1,i]:        dp[i]+=dp[j-1]*dp[i-j]</code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p>注意i从2开始</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//dp[0]=1也可以代表的是,左边(右边)为空的情况有一种</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//look,i要从2开始,1的话是初始值,如果从1开始,则dp[1]=2</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记94</title>
      <link href="posts/a41ffc13.html"/>
      <url>posts/a41ffc13.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p> <a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener">94. 二叉树的中序遍历</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个二叉树，返回它的中序 遍历。</p><p>示例:</p><pre><code>输入: [1,null,2,3]   1    \     2    /   3输出: [1,3,2]</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>迭代:用栈的方式,思路和递归差不多。先往左走到底，不能走就回退一格，加入当前元素。然后继续查看当前元素的右节点。搞定完该节点，再回退一格。直到弄完根节点。</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//递归</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">recursive</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recursive</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">==</span>null<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">recursive</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">recursive</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//迭代</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode current <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//current!=null 代表了还存在右节点</span>    <span class="token comment" spellcheck="true">//!stack.isEmpty() 代表了存在父节点</span>    <span class="token comment" spellcheck="true">//当然开始时只是看根节点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>current<span class="token operator">!=</span>null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>current<span class="token operator">!=</span>null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        current <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记84</title>
      <link href="posts/bd04cd52.html"/>
      <url>posts/bd04cd52.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/" target="_blank" rel="noopener">84. 柱状图中最大的矩形</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定 <em>n</em> 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p><p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p><p><strong>示例:</strong></p><pre><code>输入: [2,1,5,6,2,3]输出: 10</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>整体思路是最大矩形是遍历一遍数组，分别查看以索引i为高度所形成的矩形，取他们的最大值</p><p>维护一个递增序列。当遇到一个递减的元素，前面比他高的元素所能形成的矩形已经确定了，即可计算出来。然后继续，直到遍历完数组，此时有一个递增序列。</p><p>对于这个序列中的某个元素nums[i],他的右边界是数组最后一个元素，左边界是下一个栈元素+1（画图出来考虑）</p><p><a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/bao-li-jie-fa-zhan-by-liweiwei1419/" target="_blank" rel="noopener">liweiwei1419的解法</a></p><pre class=" language-java"><code class="language-java">Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递增序列 存储的是索引下标 </span><span class="token keyword">for</span> i in N<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//nums[stack.top()]=nums[i]的要留下,因为前面的元素还可以继续扩展</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里计算的是以弹出那个元素为高度的最大矩形</span>        <span class="token keyword">int</span> index<span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">-</span>index<span class="token punctuation">)</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时为递增序列</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//对递增序列进行计算</span><span class="token comment" spellcheck="true">//这些元素每一个都可以扩展到数组尽头</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//范围是[ stack.top()+1 , N-1 ]</span>    <span class="token keyword">int</span> index<span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span><span class="token punctuation">(</span>N<span class="token operator">-</span>stack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>stack底部用一个-1标识，不然计算索引为0的元素的左边界有问题</li><li>注意左边界的计算不能直接为索引i（因为要注意左边比他高的被忽略而不在栈中的元素）</li><li>注意计算的都是以该索引位置的值为高，他左右两边能扩展的最大距离为宽</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">largestRectangleArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> heights<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//递增序列 存储的是索引下标</span>    Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> heights<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//防止最左边元素计算不了面积</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//heights[stack.top()]=heights[i]的要留下,因为前面的元素还可以继续扩展</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">></span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这里计算的是以弹出那个元素为高度的最大矩形</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//look 这里也要按照下面的思路,即该元素的左边界是stack.top()+1 而不能仅仅是(i - index) * heights[index]</span>            result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> heights<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//此时为递增序列</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对递增序列进行计算</span>    <span class="token comment" spellcheck="true">//这些元素每一个都可以扩展到数组尽头</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//范围是[ stack.top()+1 , N-1 ]</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> heights<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$O(N)$</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$O(N)$</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目------Web项目-简单的购物网站</title>
      <link href="posts/a8f59b26.html"/>
      <url>posts/a8f59b26.html</url>
      
        <content type="html"><![CDATA[<h1 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h1><p>本项目是基于BS架构的简单购物网站。主要实现了用户注册登录，商品展示，添加购物车，结算下单，查询历史订单信息五个功能。前后端分为两个项目，都采用了IDEA进行开发。其中前端使用了HTML，CSS，JavaScript技术，并且使用原生ajax向后端发起请求。后端则使用maven管理依赖，使用springboot框架，并且整合了mybatis框架以连接MySQL数据库。并且该项目前后端分离，且严格分离html，css和js。其中，整个项目部署在了云服务器上，访问地址为：</p><p><a href="http://47.103.203.188:8080/project/html/index.html" target="_blank" rel="noopener">http://47.103.203.188:8080/project/html/index.html</a></p><p>源码可在Github上查看:<a href="https://github.com/tongji4m3/webProject" target="_blank" rel="noopener">tongji4m3</a></p><h1 id="项目技术架构介绍"><a href="#项目技术架构介绍" class="headerlink" title="项目技术架构介绍"></a>项目技术架构介绍</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><blockquote><p>  前端项目一共有4个文件夹，分别存储了<code>html</code>，<code>css</code>，<code>js</code>，<code>img</code>文件。其中每一个html文件都会引用css，js文件夹中与之对应的文件，并且在主页以及商品详情中引用img文件夹里的相应图片。</p></blockquote><blockquote><p>  每个商品的商品详情则是放在了html/productDetails中。图片则根据商品名称放在不同的文件夹下。而ajax请求的路径，则统一放置在了js/api.js文件中。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/615544abc332617d714709043dbca86c.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/04fdb77cca62acf21e33e753bc975cdc.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/083899cb9561ac40e8dafeac0b44459e.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/e7508c123b5b86102d8d41dc5d5cc9c7.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/fa09cc6d1dbc52e50f4a16820a79e526.png"></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><blockquote><p>  共分为四个表，user表存储用户信息，product表存储商品信息，shoppingCart存储购物车信息并且关联了user表和product表，myOrder存储订单信息并且关联了user表和product表。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/2e26a50a7b8e4736fb2340349809f374.png"></p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><blockquote><p>  后端使用三层架构的模式，controller包为界面层，负责从前端获取json数据，并且调用业务逻辑层获取相关的数据封装成json格式并且返回给前端。而service包下为业务逻辑层，主要负责进行一些业务处理，并且调用数据访问层得到数据并返回给界面层。mapper包下负责查询数据库，获取相关信息，并且将一些信息封装成实体类并且返回给业务逻辑层。domain包下则是一个个实体类。</p></blockquote><blockquote><p>  controller包下主要有三个类，分别负责对用户登录注册等功能的处理的UserController类，对购物车和订单操作的处理的OperatorController类，以及返回验证码的CheckCodeController类。</p></blockquote><blockquote><p>  service包下基本就是对应于controller包下三个类的对应接口和实行类。mapper包下就是对应于controller包下三个类的接口，他们的具体逻辑实现通过xml配置文件实现。</p></blockquote><blockquote><p>  domain包下分别有用户，商品，购物车，订单的实体类，并且还有一个封装了要返回信息的ResultInformation类。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/e6fa4af191f391f3aa29ad41014470d3.png"></p><h1 id="项目功能介绍"><a href="#项目功能介绍" class="headerlink" title="项目功能介绍"></a>项目功能介绍</h1><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><blockquote><p>  首页主要实现了一个首页导航栏以及商品简略信息的查看功能，导航栏能跳转到登录，注册，购物车，订单页面中。并且实现了对登录者用户名的存储，展示以及注销功能。商品简略信息则有一些动态效果，并且点击能跳转到相应的商品详情页面。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/803e7752c2cb01a3b406c7cc2284f798.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/2ae59d5f365c24d7d4ef356712e4c3e0.png"></p><h2 id="用户注册登录"><a href="#用户注册登录" class="headerlink" title="用户注册登录"></a>用户注册登录</h2><blockquote><p>  登录于注册功能都有对表单的校验功能，并且注册功能还有验证码功能，点击可以动态刷新，但是由于跨域session存储不了的问题，后端没有去校验验证码。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/f6cf9544375e71bab20397f08978c4bd.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/f88237bd17dc0dbee7b23d8c7e8b89b7.png"></p><h2 id="商品详情页面"><a href="#商品详情页面" class="headerlink" title="商品详情页面"></a>商品详情页面</h2><blockquote><p>  每个商品的商品详情中，有一个导航栏，有一个定时切换商品不同图片的轮播图，以及商品详情的文字描述，以及加入购物车和立即购买按钮，两个按钮都会判断是否登录而采取不同动作。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/0dcbe38556203a7b32055ca2e384ecc9.png"></p><h2 id="添加购物车"><a href="#添加购物车" class="headerlink" title="添加购物车"></a>添加购物车</h2><blockquote><p>  在商品详情点击添加购物车后，如果未登录，将跳转到登录界面，否则将之加入购物车，并且前往购物车界面，购物车页面会展示已经加入购物车的商品，并且可以选择购买或者删除该商品。</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/40a0aab6c095373eaddc834c12ca7036.png"></p><h2 id="结算下单"><a href="#结算下单" class="headerlink" title="结算下单"></a>结算下单</h2><p>当在商品详情选择立即购买，或者在购物车点击购买时，将跳转到购买界面，显示要购买的商品，以及购买人的信息。点击购买，则模拟购买成功，并且跳转到历史订单界面。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/debe58129dc0bfdc1597629e0945ce7d.png"></p><h2 id="历史订单查询"><a href="#历史订单查询" class="headerlink" title="历史订单查询"></a>历史订单查询</h2><p>登录状态才能进入历史订单页面，进入后将展示购买过的商品，并且可以删除订单。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/57c5639f4db15bda5e7cb79bcc7db8bf.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记79</title>
      <link href="posts/442dad20.html"/>
      <url>posts/442dad20.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/word-search/" target="_blank" rel="noopener">79. 单词搜索</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个二维网格和一个单词，找出该单词是否存在于网格中。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><p> </p><p>示例:</p><pre><code>board =[  [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;E&#39;],  [&#39;S&#39;,&#39;F&#39;,&#39;C&#39;,&#39;S&#39;],  [&#39;A&#39;,&#39;D&#39;,&#39;E&#39;,&#39;E&#39;]]给定 word = &quot;ABCCED&quot;, 返回 true给定 word = &quot;SEE&quot;, 返回 true给定 word = &quot;ABCB&quot;, 返回 false</code></pre><p>提示：</p><pre><code>board 和 word 中只包含大写和小写英文字母。1 &lt;= board.length &lt;= 2001 &lt;= board[i].length &lt;= 2001 &lt;= word.length &lt;= 10^3</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>深度优先搜索,在同一个搜索中,将搜索过的改变为*或其他标识,搜索后再恢复</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> i in M<span class="token operator">:</span>    <span class="token keyword">for</span> j in N<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果找到了就直接结束,找不到就继续找</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>word<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>word<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    temp<span class="token operator">=</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标记为已访问</span>    如果符合边界条件<span class="token punctuation">,</span><span class="token function">dfs</span><span class="token punctuation">(</span>他的上下左右<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这次深搜结束,恢复</span><span class="token punctuation">}</span></code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>找到了可以直接返回,不进入二维数组,找不到则要继续,所以注意条件</li><li>dfs里,return的条件是四个方向都找不到才返回false</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exist</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> String word<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> board<span class="token punctuation">.</span>length<span class="token punctuation">,</span> n <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> String word<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> temp <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//标记为已访问</span>    board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> board<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        result <span class="token operator">=</span> result <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        result <span class="token operator">=</span> result <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        result <span class="token operator">=</span> result <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这次深搜结束,恢复</span>    board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 深搜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记78</title>
      <link href="posts/332a9db6.html"/>
      <url>posts/332a9db6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/subsets/" target="_blank" rel="noopener">78. 子集</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</p><p>说明：解集不能包含重复的子集。</p><p>示例:</p><pre><code>输入: nums = [1,2,3]输出:[  [3],  [1],  [2],  [1,2,3],  [1,3],  [2,3],  [1,2],  []]</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>画出解空间树,相当于把解空间树所有的元素都加入到了集合中(去掉重复的集合)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> marked<span class="token punctuation">;</span><span class="token function">recursive</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">recursive</span><span class="token punctuation">(</span><span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">{</span>    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token operator">==</span>N<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> i in N    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            marked<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">recursive</span><span class="token punctuation">(</span>height<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            marked<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>注意还要去掉重复的集合,所以可以直接采用偏序简化代码</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">subsets</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">recursive</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recursive</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token punctuation">{</span>    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">recursive</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        temp<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//循环</span><span class="token comment" spellcheck="true">//本质上就是模拟一个个元素不断加入集合的过程</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">subsets</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//刚开始为空集</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//加入元素nums[i]所得到的额外的list</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> e <span class="token operator">:</span> result<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//就是通过原本的每个集合都加入该元素</span>        <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        result<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$O(1)$</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 解空间树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记76</title>
      <link href="posts/d492b0b1.html"/>
      <url>posts/d492b0b1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/minimum-window-substring/" target="_blank" rel="noopener">76. 最小覆盖子串</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给你一个字符串 S、一个字符串 T 。请你设计一种算法，可以在 O(n) 的时间复杂度内，从字符串 S 里面找出：包含 T 所有字符的最小子串。</p><p>示例：</p><pre><code>输入：S = &quot;ADOBECODEBANC&quot;, T = &quot;ABC&quot;输出：&quot;BANC&quot;</code></pre><p>提示：</p><pre><code>如果 S 中不存这样的子串，则返回空字符串 &quot;&quot;。如果 S 中存在这样的子串，我们保证它是唯一的答案。</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>滑动窗口的方法:先扩大hi,使之包含T,然后增加lo,使之最小直到不满足要求。继续循环扩大hi</p><pre><code>//初步思路int lo=0,hi=0;//左右指针,指向最小覆盖子串的首尾int result=0;while(hi&lt;N) {        while([lo,hi]区间包含T)    {        result=max(result,hi-lo+1);        ++lo;//增加lo    }    ++hi;//扩大hi}</code></pre><p>关键在于如何判断：[lo,hi]区间包含T</p><p>可以让map存储T中字符与出现次数,循环中如果出现了T中字符，则加入window中</p><p>用一个值判断map与windows中字符的匹配情况（如果一个字符出现的次数相同则匹配）</p><pre><code>int lo=0,hi=0;//左右指针,指向最小覆盖子串的首尾int match=0;//匹配情况for ch in T:    map.put(ch,map.get(ch)+1)while(hi&lt;N) {    char ch=T[hi]    if(map.contains(ch))    {        window.put(ch,window.get(ch)+1);        if(map.get(ch)==window.get(ch)) ++match; //windows中该字符太多不会匹配多次    }    //说明至少包含了T所有字符    while(match==map.size())    {        result=max(result,hi-lo+1);        if(map.contains(T[lo])) //说明滑动了一个T中字符        {            window.put(T[lo],window.get(T[lo])-1);//look ch代表的是T[hi]            if(map.get(T[lo])&gt;window.get(T[lo])) --match;        }        ++lo;//增加lo    }    ++hi;//扩大hi}</code></pre><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">minWindow</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> lo<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>hi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左右指针,指向最小覆盖子串的首尾</span>    <span class="token keyword">int</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token operator">=</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//look 记录结果 求最小,length应该为最大</span>    <span class="token keyword">int</span> match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//匹配情况</span>    Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//代表滑动窗口</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> t<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>hi<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> chHi <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//look 命名为ch可能导致下面误导用ch表示S[lo]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>chHi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果出现了T中字符,则放入</span>        <span class="token punctuation">{</span>            window<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>chHi<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>chHi<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>chHi<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>chHi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>match<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//windows中该字符太多不会匹配多次</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>match<span class="token operator">==</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token operator">></span>hi<span class="token operator">-</span>lo<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                length <span class="token operator">=</span> hi <span class="token operator">-</span> lo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                start <span class="token operator">=</span> lo<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">char</span> chLo <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>lo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>chLo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//说明滑动了一个T中字符</span>            <span class="token punctuation">{</span>                window<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>chLo<span class="token punctuation">,</span>window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>chLo<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>chLo<span class="token punctuation">)</span><span class="token operator">></span>window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>chLo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">--</span>match<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token operator">++</span>lo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//增加lo</span>        <span class="token punctuation">}</span>        <span class="token operator">++</span>hi<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//扩大hi</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果不包含这样的子串,那length没变</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token operator">==</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>start<span class="token operator">+</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记75</title>
      <link href="posts/4d9be10b.html"/>
      <url>posts/4d9be10b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/sort-colors/" target="_blank" rel="noopener">75. 颜色分类</a></p></blockquote><blockquote><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p><p>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p><p>注意:<br>不能使用代码库中的排序函数来解决这道题。</p><p>示例:</p><pre><code>输入: [2,0,2,1,1,0]输出: [0,0,1,1,2,2]</code></pre><p>进阶：</p><p>一个直观的解决方案是使用计数排序的两趟扫描算法。<br>首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。<br>你能想出一个仅使用常数空间的一趟扫描算法吗？</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>采用快排的partition思想,在数组首尾定义指针,lo标识0的结束(保证lo-1处一定为0),hi标识2的开始(保证hi+1处一定为2).再用指针i来遍历数组</p><p>一个比较好的测试用例<code>2 0 1 0 1 2</code></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sortColors</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> lo<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>hi<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>hi<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//exch(nums,i++,lo++); 由于特殊性,化简</span>            nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>lo<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//                exch(nums,i,hi--);</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>hi<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 快排 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记72</title>
      <link href="posts/d3ff74a8.html"/>
      <url>posts/d3ff74a8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/edit-distance/" target="_blank" rel="noopener">72. 编辑距离</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。</p><p>你可以对一个单词进行如下三种操作：</p><p>插入一个字符<br>删除一个字符<br>替换一个字符</p><p>示例 1：</p><pre><code>输入：word1 = &quot;horse&quot;, word2 = &quot;ros&quot;输出：3解释：horse -&gt; rorse (将 &#39;h&#39; 替换为 &#39;r&#39;)rorse -&gt; rose (删除 &#39;r&#39;)rose -&gt; ros (删除 &#39;e&#39;)</code></pre><p>示例 2：</p><pre><code>输入：word1 = &quot;intention&quot;, word2 = &quot;execution&quot;输出：5解释：intention -&gt; inention (删除 &#39;t&#39;)inention -&gt; enention (将 &#39;i&#39; 替换为 &#39;e&#39;)enention -&gt; exention (将 &#39;n&#39; 替换为 &#39;x&#39;)exention -&gt; exection (将 &#39;n&#39; 替换为 &#39;c&#39;)exection -&gt; execution (插入 &#39;u&#39;)</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><pre><code>dp[i][j]代表将word1的前i-1个字符与word2的前j-1个字符转换的最小操作返回dp[m][n]初始化: dp[0][0]=0 dp[i][0]=i dp[0][j]=j递推方程:上边代表增加,左边代表删除,左上代表替换,因为可能不用替换dp[i][j]=min(dp[i-1][j]+1,dp[i][j-1]+1,dp[i-1][j-1]+(word1[i-1]==word2[j-1] ? 0:1))</code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>注意不匹配时要加一的操作</li><li>如果节约空间,则可以用一维数组表示,可以从二维上推导,要注意的是推导过程中列的初始化操作的改变,以及用一个变量存储左上角元素时的细节</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>String word1<span class="token punctuation">,</span> String word2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//look,需要+1,并且注意+1的时机</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                                Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//节约空间</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>String word1<span class="token punctuation">,</span> String word2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> leftTop <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//look 记录左上角的值 注意和下面一条的顺序</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//look 不要忽略这里的初始化</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> leftTop<span class="token punctuation">;</span>            <span class="token keyword">else</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> leftTop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            leftTop <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$O(N^2)$</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$O(N^2)$ 空间优化:$O(N)$</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记70</title>
      <link href="posts/3df11584.html"/>
      <url>posts/3df11584.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/climbing-stairs/" target="_blank" rel="noopener">70. 爬楼梯</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>注意：给定 n 是一个正整数。</p><p>示例 1：</p><pre><code>输入： 2输出： 2解释： 有两种方法可以爬到楼顶。1.  1 阶 + 1 阶2.  2 阶</code></pre><p>示例 2：</p><pre><code>输入： 3输出： 3解释： 有三种方法可以爬到楼顶。1.  1 阶 + 1 阶 + 1 阶2.  1 阶 + 2 阶3.  2 阶 + 1 阶</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>其实就是斐波那契数列</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正整数,不用考虑这么多</span>    <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> second <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化为爬1楼,2楼的方法数量</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//i代表楼梯数</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span>        first <span class="token operator">=</span> second<span class="token punctuation">;</span>        second <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> second<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$O(N)$</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记64</title>
      <link href="posts/2387e0dc.html"/>
      <url>posts/2387e0dc.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p> <a href="https://leetcode-cn.com/problems/minimum-path-sum/" target="_blank" rel="noopener">64. 最小路径和</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p>说明：每次只能向下或者向右移动一步。</p><p>示例:</p><pre><code>输入:[  [1,3,1],  [1,5,1],  [4,2,1]]输出: 7解释: 因为路径 1→3→1→1→1 的总和最小。</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>普通的动态规划,但是还是要注意初始化条件</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//look,还是要初始化,最好先画图</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> grid<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> grid<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$O(N^2)$</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$O(N^2)$</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记62</title>
      <link href="posts/cae445e9.html"/>
      <url>posts/cae445e9.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/unique-paths/" target="_blank" rel="noopener">62. 不同路径</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p><p>问总共有多少条不同的路径？</p><p>示例 1:</p><pre><code>输入: m = 3, n = 2输出: 3解释:从左上角开始，总共有 3 条路径可以到达右下角。1. 向右 -&gt; 向右 -&gt; 向下2. 向右 -&gt; 向下 -&gt; 向右3. 向下 -&gt; 向右 -&gt; 向右</code></pre><p>示例 2:</p><pre><code>输入: m = 7, n = 3输出: 28</code></pre><p>提示：</p><p>1 &lt;= m, n &lt;= 100<br>题目数据保证答案小于等于 2 * 10 ^ 9</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>标准动态规划</p><pre><code>dp[i][j]代表有多少种路径到该点最后求dp[m-1][n-1]p[i][0]=1; dp[j][0]=1dp[i][j]=dp[i-1][j]+dp[i][j-1]</code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>m,n代表的长宽与常识上不太相同,但是不影响</li><li>先写成标准的动态规划,再简化空间开销就比较容易</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//标准动态规划</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//节约空间 改成一维数组</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$O(N^2)$</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$ O(N^2) $<br>节约空间,则为$ O(N) $</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记56</title>
      <link href="posts/e6a4d233.html"/>
      <url>posts/e6a4d233.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p> <a href="https://leetcode-cn.com/problems/merge-intervals/" target="_blank" rel="noopener">56. 合并区间</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给出一个区间的集合，请合并所有重叠的区间。</p><p> </p><p>示例 1:</p><pre><code>输入: intervals = [[1,3],[2,6],[8,10],[15,18]]输出: [[1,6],[8,10],[15,18]]解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</code></pre><p>示例 2:</p><pre><code>输入: intervals = [[1,4],[4,5]]输出: [[1,5]]解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。</code></pre><p>提示：</p><p><code>intervals[i][0] &lt;= intervals[i][1]</code></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><pre class=" language-python"><code class="language-python">按区间的第一个元素排序<span class="token keyword">for</span> i <span class="token keyword">in</span> N<span class="token punctuation">:</span>    lo<span class="token operator">=</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    hi<span class="token operator">=</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>N <span class="token operator">&amp;</span><span class="token operator">&amp;</span> hi<span class="token operator">>=</span>intervals<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> hi<span class="token operator">=</span>intervals<span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">//</span>扩展该区间    result<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span>hi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>区间长度要选两个合并区间最大的一个</li><li>注意集合和数组的转换操作</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intervals<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> intervals<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//按第一个元素排序</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> lo<span class="token operator">=</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hi<span class="token operator">=</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>N <span class="token operator">&amp;&amp;</span> hi<span class="token operator">>=</span>intervals<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表明把下一个区间也纳入到了本区间里了</span>            hi<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>hi<span class="token punctuation">,</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//look 扩展该区间,选最大的一个</span>        <span class="token punctuation">}</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>lo<span class="token punctuation">,</span> hi<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span> <span class="token punctuation">[</span>result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$O(N log N)$,主要是排序开销,其他的就是N开销的扫描</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$O(logN)$,计算出了答案外的额外空间开销,这里是排序所需的空间复杂度</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记55</title>
      <link href="posts/7fad8389.html"/>
      <url>posts/7fad8389.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/jump-game/" target="_blank" rel="noopener">55. 跳跃游戏</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个位置。</p><p>示例 1:</p><pre><code>输入: [2,3,1,1,4]输出: true解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。</code></pre><p>示例 2:</p><pre><code>输入: [3,2,1,0,4]输出: false解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//伪代码</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//所处位置</span><span class="token keyword">int</span> jump<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//能跳到的最远位置</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>jump<span class="token punctuation">)</span><span class="token punctuation">{</span>    jump<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>jump<span class="token punctuation">,</span>i<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i+nums[i]为通过i位置能跳到的最远处</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>jump<span class="token operator">>=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不断往前走一格</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canJump</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//所处位置</span>    <span class="token keyword">int</span> jump <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//能跳到的最远位置</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> jump<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        jump <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>jump<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i+nums[i]为通过i位置能跳到的最远处</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jump <span class="token operator">>=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不断往前走一格</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$O(N)$,只需要遍历一次数组</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$O(1)$,只有两个索引</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记53</title>
      <link href="posts/96ce26bc.html"/>
      <url>posts/96ce26bc.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">53. 最大子序和</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p>示例:</p><pre><code>输入: [-2,1,-3,4,-1,2,1,-5,4]输出: 6解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</code></pre><p>进阶:</p><p>如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>从左往右遍历,如果大于0,则保留,否则不要。result则每个时刻都要判断</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p>因为子数组最少包含一个元素，所以初始化不能为0，而应该是int的最小值</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//子数组最少包含一个元素</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span>temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//look,因为条件是至少包含</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp <span class="token operator">=</span> temp <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> temp <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$O(N)$</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记49</title>
      <link href="posts/6f00fee3.html"/>
      <url>posts/6f00fee3.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/group-anagrams/" target="_blank" rel="noopener">49. 字母异位词分组</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p><p>示例:</p><pre><code>输入: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]输出:[  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],  [&quot;nat&quot;,&quot;tan&quot;],  [&quot;bat&quot;]]</code></pre><p>说明：</p><p>所有输入均为小写字母。<br>        不考虑答案输出的顺序。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>用一个Map存储索引和索引对应的组。索引是由字母异位词算出来的唯一标识。这样，遍历strs数组，把索引相同的字符串放在同一组中即可</p><p>关于索引的计算，可以将每个字母与一个素数绑定。对于一个字符串，则将包含的每个字母对于的素数相乘，得到的和即为索引</p><p>第二种写法和上一种相似：map存储字典序字符串和对应的组。每次循环都把字符串转为字典序字符串，再判断</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p>map直接存储用于区分组的索引，和List组即可，节约内存</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//生成素数</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">prime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>N<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//素数可以提前生成好</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> <span class="token function">groupAnagrams</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span><span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//List&lt;Integer> prime = prime();</span>    <span class="token comment" spellcheck="true">//预先准备好</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prime <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> strs<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> string<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//                index*=prime.get(ch - 'a');</span>            index<span class="token operator">*=</span>prime<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第二种思路</span><span class="token comment" spellcheck="true">//map存储字典序字符串和对应的组。每次循环都把字符串转为字典序字符串，再判断</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> <span class="token function">groupAnagrams1</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span><span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//map中只存储字典序字符串</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>        String string <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一次放入某类型的字母异位词</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>第一种方法：$O(NK)$ N是数组的长度，K是字符串的最大长度。外部循环需要遍历一遍字符串数组，内部需要对每个字符串进行索引计算。</p><p>第二种方法：$O(NK \log K)$   N是数组的长度，K是字符串的最大长度。外部循环需要遍历一遍字符串数组。内部需要对每个字符串进行排序</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$O(NK)$ 存储在Map的values中共需要NK的空间</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记48</title>
      <link href="posts/1807ce75.html"/>
      <url>posts/1807ce75.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/rotate-image/" target="_blank" rel="noopener">48. 旋转图像</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个 n × n 的二维矩阵表示一个图像。</p><p>将图像顺时针旋转 90 度。</p><p>说明：</p><p>你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。</p><p>示例 1:</p><pre><code>给定 matrix = [  [1,2,3],  [4,5,6],  [7,8,9]],原地旋转输入矩阵，使其变为:[  [7,4,1],  [8,5,2],  [9,6,3]]</code></pre><p>示例 2:</p><pre><code>给定 matrix =[  [ 5, 1, 9,11],  [ 2, 4, 8,10],  [13, 3, 6, 7],  [15,14,12,16]], 原地旋转输入矩阵，使其变为:[  [15,13, 2, 5],  [14, 3, 4, 1],  [12, 6, 8, 9],  [16, 7,10,11]]</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>外围旋转中,只需要把[0,0],到[0,n-2]的依次与对应的四个角旋转即可<br>因为是方阵,所以定义lo,hi表示遍历的上层,遍历的下层,而且对左右也是有用的</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>lo<span class="token operator">&lt;</span>hi<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hi <span class="token operator">-</span> lo<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp<span class="token operator">=</span>matrix<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">[</span>lo<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            matrix<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">[</span>lo <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>hi <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">;</span>            matrix<span class="token punctuation">[</span>hi <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">[</span>lo<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">[</span>hi <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>            matrix<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">[</span>hi <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>lo <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">;</span>            matrix<span class="token punctuation">[</span>lo <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">[</span>hi<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">++</span>lo<span class="token punctuation">;</span>        <span class="token operator">--</span>hi<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记46</title>
      <link href="posts/ffbfe372.html"/>
      <url>posts/ffbfe372.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p> <a href="https://leetcode-cn.com/problems/permutations/" target="_blank" rel="noopener">46. 全排列</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个 没有重复 数字的序列，返回其所有可能的全排列。</p><p>示例:</p><pre><code>输入: [1,2,3]输出:[  [1,2,3],  [1,3,2],  [2,1,3],  [2,3,1],  [3,1,2],  [3,2,1]]</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>传统的回溯法,和之前的差不多</p><p>只是要处理重复问题,可以用marked数组解决</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    这里没有说是按照数字大小的顺序,只要排序没有重复即可    而这里的直接按照初始的数字顺利得到全排列 例如:7,6,8,1    这里第一个是7,6,8,1    而下面那个是,1,6,7,8    */</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marked<span class="token punctuation">;</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    marked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">recursive</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recursive</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token operator">==</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止引用问题</span>        <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//终止循环</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//用一个标记数组更加快</span>        <span class="token comment" spellcheck="true">//            if(!temp.contains(nums[i]))//避免重复的</span>        <span class="token comment" spellcheck="true">//            {</span>        <span class="token comment" spellcheck="true">//                temp.add(nums[i]);</span>        <span class="token comment" spellcheck="true">//                recursive(nums,length+1);</span>        <span class="token comment" spellcheck="true">//                temp.remove(temp.size()-1);</span>        <span class="token comment" spellcheck="true">//            }</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            marked<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">recursive</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            marked<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>最坏时间复杂度:$O(N×N!)$</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$O(N)$</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 全排列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记42</title>
      <link href="posts/f8d2276b.html"/>
      <url>posts/f8d2276b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定 <em>n</em> 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p>上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。</p><p><strong>示例:</strong></p><pre><code>输入: [0,1,0,2,1,0,1,3,2,1,2,1]输出: 6</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>找左边最高位置:从左往右遍历</p><p>找右边最高位置:从右往左遍历</p><p>找到每个位置的左边最高和右边最高高度,取他们较小的那个-那个位置的高度.即为该位置接的雨水</p><p>把每个位置接的雨水累计即可</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> height<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接不了雨水</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    right<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> right<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> result <span class="token operator">+=</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$O(N)$,三次循环,每次需要N,总共3N</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$O(N)$,定义两个大小为N的数组,总共需要空间为2N</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea常用命令与使用</title>
      <link href="posts/e0571985.html"/>
      <url>posts/e0571985.html</url>
      
        <content type="html"><![CDATA[<h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><hr><ol><li><p>File Export Settings先导出一份自己熟悉使用的设置，导出为 settings.jar.新电脑就直接file import Settings</p></li><li><p>下载ultimate版本的,注册可以用去官网学生认证</p></li><li><p>全屏，view，appearance，full screen；如果顶部菜单栏不见了，改ui.inf.xml的<option name="SHOW_MAIN_MENU" value="false" />这个选项为false，将其修改为true</p></li><li><p>大小写不敏感：setting-&gt;Editor-&gt;General-&gt;Code Completion取消Match case</p></li><li><p>花括号File-&gt;Setting-&gt;Editor-&gt;Code Style-&gt;Java-&gt;Wrapping and Braces</p></li><li><blockquote><p>自定义模板</p><p>File –&gt; Setting中, 搜索live…要设置下面的change，选java</p><p>fori不用配置</p><p>集合.for增强for循环快捷键  </p><p>sys:System.out.print($END$);</p></blockquote></li><li><p>ctrl+F8设置断点,改成ctrl+shift+B,记得去除之前的一个</p></li><li><p>格式化 ctrl+shift+F,在右边搜索栏输入：reformat code </p></li><li><p>Args传入参数：Run下的Edit Configurations，配置Configuration分页中的Program arguments选项</p></li><li><p>Ctrl+鼠标滑轮控制字体大小，在File -&gt; Setting -&gt; Editor -&gt; General下进行设置。选中Change font size (Zoom) with Ctrl+Mouse wheel </p></li><li><p>设置idea背景,File | Settings | Appearance &amp; Behavior | Appearance|background Image</p></li></ol><hr><h1 id="快捷键-常用"><a href="#快捷键-常用" class="headerlink" title="快捷键(常用)"></a>快捷键(常用)</h1><ol><li><p>Alt+enter内容辅助，可以这样比较方便的新建一个类,或者是修改建议</p></li><li><p>Ctrl +Y 删除代码</p></li><li><p>代码的上下移动，ctrl+shift+上下箭头</p></li><li><p>shift+F6 重命名</p></li><li><p>格式化 ctrl+shift+F</p></li><li><p>Ctrl+D 复制当前行到下一行</p></li><li><p>ctrl+/；ctrl+shift+/  注释</p></li><li><p>Alt+ins，快速生成get，set等等</p></li><li><p>Alt+1打开层次体系</p></li><li><p>行末加分号，ctrl+shift+enter</p></li><li><p>用F2移动到有错误的代码</p></li><li><p>Ctrl+alt+ins快速新建类</p></li><li><p>ctrl+shift+加减,代码折叠 </p></li><li><p>选中类名 Ctrl+鼠标点击  查看源码</p></li><li><p>shift+enter 快速下一行</p></li><li><p>Ctrl+删除，删除这个单词</p></li><li><p>.Ctrl+F搜索</p></li><li><p>ctrl+左右，快速跳过一个单词;Shift+上下,选中某行；</p></li></ol><hr><h1 id="快捷键-常忘记的"><a href="#快捷键-常忘记的" class="headerlink" title="快捷键(常忘记的)"></a>快捷键(常忘记的)</h1><ol><li>运行：Alt+Shift+F10运行程序，Shift+F9启动调试，Ctrl+F2停止。Ctrl+F8 设置断点 。F7/F8/F9分别对应Step into，Step over，Continue，shift+F8退出方法</li><li>抽取方法快捷键:ctrl+alt+m</li><li>Ctrl+H打开类继承体系，ctrl+F12查看类所有方法</li><li>Ctrl+Alt+V则是抽取变量</li><li>Ctrl+W快速选中一行</li><li>Ctrl+Tab切换类</li><li>Shift+shift快速搜索，可以查找类</li><li>Ctrl+alt+s 打开设置</li><li>ctrl alt+t 用try catch等包裹代码</li><li>shift+end或者home,快速选择一行</li><li>ctrl+p方法参数提示</li></ol><h1 id="整合github"><a href="#整合github" class="headerlink" title="整合github"></a>整合github</h1><p>在IDEA中设置GitHub，File–&gt;Setting-&gt;Version Control–&gt;GibHub</p><p>创建本地仓库，VCS–&gt;Import into Version Control–&gt;Create Git Repository</p><p>VCS–&gt;Import into Version Control–&gt;Share Project on GitHub</p><h1 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h1><ol><li>右键一个类–Diagram–show Diagrams</li><li>对一个类,右键,可用<code>show Parents</code>,<code>show implementations</code></li><li>也可以新添加类,对一个类按空格</li></ol>]]></content>
      
      
      <categories>
          
          <category> 常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记39</title>
      <link href="posts/20416824.html"/>
      <url>posts/20416824.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/combination-sum/" target="_blank" rel="noopener">39. 组合总和</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的数字可以无限制重复被选取。</p><p>说明：</p><p>所有数字（包括 target）都是正整数。<br>        解集不能包含重复的组合。 </p><pre><code>示例 1：输入：candidates = [2,3,6,7], target = 7,所求解集为：[  [7],  [2,2,3]]</code></pre><pre><code>示例 2：输入：candidates = [2,3,5], target = 8,所求解集为：[  [2,2,2,2],  [2,3,3],  [3,5]]</code></pre><pre><code>提示：1 &lt;= candidates.length &lt;= 301 &lt;= candidates[i] &lt;= 200candidate 中的每个元素都是独一无二的。1 &lt;= target &lt;= 500</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>采用回溯法</p><p>因为元素都是独一无二的且不重复,所以很多特殊情况不用考虑。例如当target等于0时，就不用往该分支下进行了。</p><p>而且result中不含重复，所以需要措施跳过重复的（循环中小于父节点的）。</p><pre><code>//伪代码sort(nums);int sum=0;List temp;recursive(target){    if(target==0)     {        result.add(temp);        return;    }    for(i in N)    {        if(nums[i]&gt;target) return;//剪枝条件        if(nums[i]&lt;temp.top()) continue;//剪枝条件 避免重复        temp.add(nums[i]);        recursive(target-nums[i]);                temp.remove(nums[i]);    }}</code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>加入结果时，要注意引用问题，重新复制到一个新的list</li><li>注意处理重复问题</li><li>注意剪枝优化问题</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">combinationSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">recursive</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">recursive</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//look 这里有引用问题,应该是复制一个新的给result</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> begin<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//剪枝条件</span>        <span class="token comment" spellcheck="true">//look 注意越界问题</span>        <span class="token comment" spellcheck="true">//可优化成开始条件</span>        <span class="token comment" spellcheck="true">//if(!temp.isEmpty() &amp;&amp; candidates[i]&lt;temp.get(temp.size()-1)) continue;//剪枝条件 避免重复</span>        temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//look 不需要sum</span>        <span class="token function">recursive</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span>target<span class="token operator">-</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记34</title>
      <link href="posts/5ef01499.html"/>
      <url>posts/5ef01499.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">34. 在排序数组中查找元素的第一个和最后一个位置</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p><p>你的算法时间复杂度必须是 O(log n) 级别。</p><p>如果数组中不存在目标值，返回 [-1, -1]。</p><p>示例 1:</p><pre><code>输入: nums = [5,7,7,8,8,10], target = 8输出: [3,4]</code></pre><p>示例 2:</p><pre><code>输入: nums = [5,7,7,8,8,10], target = 6输出: [-1,-1]</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>第一种:直接找中点,然后向两边逐个找边界.</li><li>第二种:先二分查找到左边界,再二分查找右边界,删除即可</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//二分中心扩展性</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;=</span> hi<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> mid<span class="token punctuation">,</span> right <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> lo <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span>left<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> hi <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>right<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>left<span class="token punctuation">,</span> right<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//查找左右边界</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token function">leftBound</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rightBound</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    寻找左边界    result的取值范围为[0,N],当target大于所有数组元素时,result取到了N*/</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">leftBound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;=</span> hi<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不直接返回,往左逼近</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//只要找到了,lo是不会移动的</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lo<span class="token operator">==</span>nums<span class="token punctuation">.</span>length <span class="token operator">||</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token operator">!=</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> lo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rightBound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;=</span> hi<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不直接返回,往右边逼近</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//只要找到了,hi是不会移动的 hi取值为[-1,N)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hi<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token operator">!=</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> hi<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>第一种方法:平均$O(log N)$,最坏$O(N)$,因为如果有很多重复的话,需要逐个遍历</p><p>第二种方法:$O(log N)$,寻找左右边界,分别需要log N的时间</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$O(1)$,两种方法都只用了常数的时间</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分搜索 </tag>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记33</title>
      <link href="posts/c094813a.html"/>
      <url>posts/c094813a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p> <a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="noopener">33. 搜索旋转排序数组</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p><p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p><p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p><p>你可以假设数组中不存在重复的元素。</p><p>你的算法时间复杂度必须是 O(log n) 级别。</p><p>示例 1:</p><pre><code>输入: nums = [4,5,6,7,0,1,2], target = 0输出: 4</code></pre><p>示例 2:</p><pre><code>输入: nums = [4,5,6,7,0,1,2], target = 3输出: -1</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//伪代码</span><span class="token keyword">int</span> lo<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>hi<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>lo<span class="token operator">&lt;=</span>hi<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span>lo<span class="token operator">+</span><span class="token punctuation">(</span>hi<span class="token operator">-</span>lo<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">></span>nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//target在数组切分后的左边</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//可以简化</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span> hi<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mid在左边的上半部分</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">)</span> lo<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mid在左边的下半部分</span>        <span class="token keyword">else</span>  hi<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在右边部分</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token comment" spellcheck="true">//在右边</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//可以简化</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span> lo<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mid在右边的下半部分</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">)</span> lo<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mid在左边部分</span>        <span class="token keyword">else</span>  hi<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在右边的上半部分</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>要画图分析,分情况讨论</li><li>注意是纯递增的情况。经验是nums[mid]与nums[lo],nums[hi]最接近的一个比较</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    画图分析!    关键是先定下target的位置    不存在重复,那么lo与hi对应的值不会相等(lo!=hi)时     */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;=</span> hi<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">></span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//target在数组切分后的左边</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">)</span> lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token comment" spellcheck="true">//在右边</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//look 要考虑是纯递增的情况</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">)</span> hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$O(log N)$</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分搜索 </tag>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记32</title>
      <link href="posts/b793b1ac.html"/>
      <url>posts/b793b1ac.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/longest-valid-parentheses/" target="_blank" rel="noopener">32. 最长有效括号</a></p><p>其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个只包含 ‘(‘ 和 ‘)’ 的字符串，找出最长的包含有效括号的子串的长度。</p><p>示例 1:</p><pre><code>输入: &quot;(()&quot;输出: 2解释: 最长有效括号子串为 &quot;()&quot;</code></pre><p>示例 2:</p><pre><code>输入: &quot;)()())&quot;输出: 4解释: 最长有效括号子串为 &quot;()()&quot;</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>用Stack存储左括号的位置,并且栈底总是存储最后一个没有被匹配的右括号的下标。这样每次遇到左括号就push。</p><p>遇到右括号则先弹出Stack中的一个元素，如果此时栈未空，说明弹栈把最后一个没有被匹配的右括号的下标弹出去的,就说明该右括号是没有左括号匹配的。则将他放入栈底。如果不为空，则说明有左括号匹配，则计算result。</p><h2 id="left，right指针"><a href="#left，right指针" class="headerlink" title="left，right指针"></a>left，right指针</h2><p>先正向遍历，适用右括号比左括号多的情况</p><p>再反向遍历，适用右括号比左括号少的情况</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>用栈的话要注意初始在栈底放一个元素占位。而且记得计算时要先弹出一个元素</li><li>用left，right指针要注意反向遍历时，是左括号比右括号多时才清零</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//栈</span><span class="token comment" spellcheck="true">//在栈底放最后一个没有被匹配的右括号的下标</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认的栈底,这样计算会正确</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//说明弹栈把最后一个没有被匹配的右括号的下标弹出去的,就说明该)也是没有(匹配的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> i <span class="token operator">-</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用left，right指针</span><span class="token comment" spellcheck="true">/*    完美匹配肯定测得出来    如果是不完美匹配,要么是左括号过多,要么是右括号过多    如果是右括号过多,则在过多的那个地方,都给清0,就不会影响后续的判断了    如果是左括号过多,则应在之后反向判断,转为右括号过多,就能正常判断了 */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第一轮匹配的是右括号多的情况 即类似())(()))这些</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token operator">++</span>left<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">++</span>right<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">></span> left<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//反向遍历 判断左括号过多的情况</span>    left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token operator">++</span>left<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">++</span>right<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> left<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这里要改变</span>        <span class="token punctuation">{</span>            left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>使用栈:$O(N)$<br>        使用left，right指针：$O(N)$</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>使用栈:$O(N)$<br>        使用left，right指针：$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记31</title>
      <link href="posts/2e9ae016.html"/>
      <url>posts/2e9ae016.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p> <a href="https://leetcode-cn.com/problems/next-permutation/" target="_blank" rel="noopener">31. 下一个排列</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</p><p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p><p>必须原地修改，只允许使用额外常数空间。</p><p>以下是一些例子，输入位于左侧列，其相应输出位于右侧列。</p><pre><code>1,2,3 → 1,3,23,2,1 → 1,2,31,1,5 → 1,5,1</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>从后往前,找到第一个非递增数(说明他可以换)。换则继续从后往前找到第一个大于它的数，将他们两交换。再将换的索引之前的逆序，即可得到下一个排列。<br>要注意54321这种全逆序的情况</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>注意什么时候要返回了</li><li>注意索引的一些细节，还有反转数组时的索引</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextPermutation</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> index<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从倒数第二个元素开始比</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> index<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//=号不行</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//说明是54321这种或者为空,或者只有一个元素</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//颠倒即可</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//找到第一个大于他的</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//=号不行</span>        <span class="token punctuation">{</span>            <span class="token function">exch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> index<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从index+1,到n-1,反转数组</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//look,做完直接return了</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//lo,hi为要反转数组的开始,结束索引位置</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">exch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lo <span class="token operator">+</span> i<span class="token punctuation">,</span> hi <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//look 判断条件这有问题</span>    <span class="token comment" spellcheck="true">//        for (int i = lo; i &lt; (hi - lo + 1) / 2; i++) exch(nums, i, hi - i);</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">exch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$O(N)$，最坏情况下只需要对整个数组进行两次扫描，以及一次数组反转</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$O(1)$,在原数组上进行交换</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 全排列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记23</title>
      <link href="posts/d98fb07b.html"/>
      <url>posts/d98fb07b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">23. 合并K个排序链表</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p><p>示例:</p><pre><code>输入:[  1-&gt;4-&gt;5,  1-&gt;3-&gt;4,  2-&gt;6]输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>分治法：调用之前写过的<code>mergeTwoLists</code>不断两两合并到只剩一条链表</p><p>优先队列法：把每个链表的首元素放入优先队列，每次取出最小的，并且把那条链表的下一个元素加入。不断进行直到优先队列为空</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>优先队列法内存消耗小,但比较慢.</li><li>优先队列法需要存储每个元素对应的链表,所以就要定义二元组,所以就要重新传入比较器。而且要自己构造链表，注意pre和cur。</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//归并法</span><span class="token keyword">public</span> ListNode <span class="token function">mergeKLists</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span> lists<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> lists<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> lists<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//考虑奇数有一个没参与合并,但是要参与下一次运算</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    ListNode result <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//优先队列法</span><span class="token keyword">class</span> <span class="token class-name">Tuple</span><span class="token punctuation">{</span>    Integer key<span class="token punctuation">;</span>    Integer value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Tuple</span><span class="token punctuation">(</span>Integer key<span class="token punctuation">,</span> Integer value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> ListNode <span class="token function">mergeKLists</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span> lists<span class="token punctuation">)</span><span class="token punctuation">{</span>    ListNode pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cur<span class="token operator">=</span>pre<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用优先队列存储每个链表最前面的值,以及他们对应是哪个链表</span>    Queue<span class="token operator">&lt;</span>Tuple<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>tuple1<span class="token punctuation">,</span>tuple2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">(</span>tuple1<span class="token punctuation">.</span>key<span class="token operator">-</span>tuple2<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lists<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注意要非null</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Tuple tuple <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//弹出最小的一个数</span>        <span class="token comment" spellcheck="true">//look,自己创建链表的问题l,不能用pre来算</span>        cur<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>tuple<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//look,引用的问题,应该是让数组的引用向下一位</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>tuple<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token operator">!=</span>null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>tuple<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">,</span>tuple<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//tuple.values标识是哪个链表</span>            lists<span class="token punctuation">[</span>tuple<span class="token punctuation">.</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> lists<span class="token punctuation">[</span>tuple<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>分治法：第一轮合并k/2组链表，每组代价为$O(2n)$,第二轮合并k/4组链表，每组代价为$O(4n)$,一共合并log k次，所以为$O(kn*log k)$</p><p>优先队列法:每次优先队列最多只有k个元素，插入，删除代价为$ O(log k) $,最多有kn个节点要操作，所以为$O(kn*log k)$</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>分治法：$ O(log k) $,递归用到的栈空间</p><p>优先队列法:$ O(k) $,优先队列元素不超过k个</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 归并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记22</title>
      <link href="posts/ae8880ed.html"/>
      <url>posts/ae8880ed.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p> <a href="https://leetcode-cn.com/problems/generate-parentheses/" target="_blank" rel="noopener">22. 括号生成</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</p><p> </p><p>示例：</p><pre><code>输入：n = 3输出：[       &quot;((()))&quot;,       &quot;(()())&quot;,       &quot;(())()&quot;,       &quot;()(())&quot;,       &quot;()()()&quot;     ]</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>回溯法.可以画出解空间树，加剪枝帮助理解。</p><pre class=" language-java"><code class="language-java"><span class="token function">recursive</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//左括号个数，右括号个数开始都为n</span><span class="token function">recursive</span><span class="token punctuation">(</span>leftCount<span class="token punctuation">,</span>rightCount<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rightCount<span class="token operator">&lt;</span>leftCount<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//限定条件 说明)比(多</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rightCount<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> leftCount<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>leftCount<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//限定条件 说明(用完了</span>    <span class="token punctuation">{</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">recursive</span><span class="token punctuation">(</span>leftCount<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>rightCount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//往左走，即往结果加个（</span>        移除stringBuilder刚加入的元素，即返回到父节点    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rightCount<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//限定条件 说明)用完了</span>    <span class="token punctuation">{</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">recursive</span><span class="token punctuation">(</span>leftCount<span class="token punctuation">,</span>rightCount<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//往右走，即往结果加个）</span>        移除stringBuilder刚加入的元素，即返回到父节点    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>注意n=0的返回值</li><li>注意递归返回时，要把stringBuilder刚加入的元素清除。画解空间树就一目了然</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo22</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> StringBuilder stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//n==0,返回的是空集合,不是空字符串</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左括号个数，右括号个数开始都为n</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> leftCount<span class="token punctuation">,</span> <span class="token keyword">int</span> rightCount<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rightCount<span class="token operator">&lt;</span>leftCount<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//限定条件 说明)比(多</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rightCount<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> leftCount<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>leftCount<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//限定条件 说明(用完了</span>        <span class="token punctuation">{</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>leftCount<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>rightCount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//往左走，即往结果加个（</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//回到上一层,父节点</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rightCount<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//限定条件 说明)用完了</span>        <span class="token punctuation">{</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>leftCount<span class="token punctuation">,</span>rightCount<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//往右走，即往结果加个）</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//回到上一层,父节点</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$ O(4^n/\sqrt n) $</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>空间复杂度：O(n)，除了result之外，所需空间取决于递归栈的深度，每一层递归函数需要 O(1)的空间，最多递归 2n 层，因此空间复杂度为 O(n)。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记21</title>
      <link href="posts/3781d157.html"/>
      <url>posts/3781d157.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p> <a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">21. 合并两个有序链表</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p> </p><p>示例：</p><pre><code>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p>如果迭代的想要更快,可以直接改指针指向原链表.但是这样指向同一条链表可能不太好</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//递归</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        ListNode result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//迭代</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ListNode pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> curr <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ListNode temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                curr<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>                curr <span class="token operator">=</span> temp<span class="token punctuation">;</span>                l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                ListNode temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                curr<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>                curr <span class="token operator">=</span> temp<span class="token punctuation">;</span>                l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ListNode temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            curr<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>            curr <span class="token operator">=</span> temp<span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l2 <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ListNode temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            curr<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>            curr <span class="token operator">=</span> temp<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$ O(n + m) $,每次都会递归调用一个节点</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>递归:$ O(n + m) $,递归调用需要消耗栈空间,递归调用最坏情况 <code>m+n</code> 次<br>        迭代:$ O(1) $ 只需要常数的空间存放若干变量</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记20</title>
      <link href="posts/4086e1c1.html"/>
      <url>posts/4086e1c1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">20. 有效的括号</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>        左括号必须以正确的顺序闭合。<br>        注意空字符串可被认为是有效字符串。</p><p>示例 1:</p><pre><code>输入: &quot;()&quot;输出: true</code></pre><p>示例 2:</p><pre><code>输入: &quot;()[]{}&quot;输出: true</code></pre><p>示例 3:</p><pre><code>输入: &quot;(]&quot;输出: false</code></pre><p>示例 4:</p><pre><code>输入: &quot;([)]&quot;输出: false</code></pre><p>示例 5:</p><pre><code>输入: &quot;{[]}&quot;输出: true</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>用stack存储左括号,遇到括号则从栈顶取出,如果不匹配,则返回false.一直到最后,如果栈不为空,也返回false</p><pre><code>//伪代码for(ch in string){    if(ch==&#39;(&#39; || ch==&#39;[&#39; || ch==&#39;{&#39;)     {        stack.push(ch);    }    else    {        if(stack.isEmpty() || stack.pop()!=ch) return false;    }    if(!stack.isEmpty()) return false;}</code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>注意匹配条件,不是相等</li><li>注意最后还要判断<code>stack.isEmpty()</code></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>    Stack<span class="token operator">&lt;</span>Character<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'('</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token string">'['</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token string">'{'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//look 是匹配,不是相等</span>            <span class="token comment" spellcheck="true">//if(stack.isEmpty() || stack.pop()!=ch) return false;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">')'</span><span class="token operator">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">']'</span><span class="token operator">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token string">'['</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'}'</span><span class="token operator">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token string">'{'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$ O(N) $,遍历字符串,并且每次遍历时只进行$ O(1) $的常数操作</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$ O(N) $,最坏情况下要把所有字符串都入栈,例如<code>((((((((</code></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记19</title>
      <link href="posts/12770aa6.html"/>
      <url>posts/12770aa6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p> <a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener">19. 删除链表的倒数第N个节点</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p><p>示例：</p><pre><code>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</code></pre><p>说明：</p><p>给定的 n 保证是有效的。</p><p>进阶：</p><p>你能尝试使用一趟扫描实现吗？</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>设置快慢指针,快指针先走n步,然后快慢指针同步走,当快指针的next为null时,慢指针next为要删除的元素</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>处理列表head为null的情况</li><li>处理要删除头节点去情况</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    边界:如果head=null,返回null    因为n保证是合理的,所以1&lt;=n&lt;=head.length    如果n==head.length那么fast为null,此时是删除首元素     */</span><span class="token keyword">public</span> ListNode <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//必须>0</span>    ListNode fast<span class="token operator">=</span>head<span class="token punctuation">,</span> slow<span class="token operator">=</span>head<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果fast==null,说明删除第一个元素</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token operator">==</span>null<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ListNode temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//快慢指针一起往前</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//此时slow.next指向要删除的元素</span>    slow<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$O(N)$</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记17</title>
      <link href="posts/f5cf27a1.html"/>
      <url>posts/f5cf27a1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p> <a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">17. 电话号码的字母组合</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p>![Mon Aug 10 064242 CST 2020](<a href="https://tongji4m3.oss-cn-beijing.aliyuncs.com/Mon" target="_blank" rel="noopener">https://tongji4m3.oss-cn-beijing.aliyuncs.com/Mon</a> Aug 10 064242 CST 2020.png)</p><pre class=" language-java"><code class="language-java">输入：<span class="token string">"23"</span>输出：<span class="token punctuation">[</span><span class="token string">"ad"</span><span class="token punctuation">,</span> <span class="token string">"ae"</span><span class="token punctuation">,</span> <span class="token string">"af"</span><span class="token punctuation">,</span> <span class="token string">"bd"</span><span class="token punctuation">,</span> <span class="token string">"be"</span><span class="token punctuation">,</span> <span class="token string">"bf"</span><span class="token punctuation">,</span> <span class="token string">"cd"</span><span class="token punctuation">,</span> <span class="token string">"ce"</span><span class="token punctuation">,</span> <span class="token string">"cf"</span><span class="token punctuation">]</span><span class="token punctuation">.</span></code></pre><p>说明:<br>尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>用数组存储数字与字符串的对应关系.</p><p>递归,先加入字符,递归到下一层,再移除那个字符</p><p>到最后一个的时候,就加入结果,停止本层的递归</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>length<span class="token punctuation">)</span>    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ch in map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//每个数字字符对应的字符串</span><span class="token punctuation">{</span>    stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">recursive</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stringBuilder<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>把方法局部变量变成成员变量,加快速度</li><li>注意传入空串时的返回</li><li>用<code>map[digits.charAt(index)-&#39;0&#39;]</code>转换优化速度</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo17</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">,</span> <span class="token string">"ghi"</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">,</span> <span class="token string">"mno"</span><span class="token punctuation">,</span> <span class="token string">"pqrs"</span><span class="token punctuation">,</span> <span class="token string">"tuv"</span><span class="token punctuation">,</span> <span class="token string">"wxyz"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> StringBuilder stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//方法局部变量变成成员变量,加快速度</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>String digits<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//look 长度为0,返回空,而不是空的字符串串</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>digits<span class="token operator">==</span>null <span class="token operator">||</span> digits<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token function">recursive</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//result为结果集合,stringBuilder存储中间字符串,index代表递归到哪个数字字符</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recursive</span><span class="token punctuation">(</span>String digits<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>digits<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//优化速度</span>        String string <span class="token operator">=</span> map<span class="token punctuation">[</span>digits<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例如abc</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例如加入a</span>            <span class="token function">recursive</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继续下一层</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除刚刚加入的</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>因为是普通的递归,所以结果有多少种,时间复杂度就是多少.假如x是<code>234568</code>的总数量(一个数字对应三个字母),y是<code>79</code>数字的总数量(对应四个字符).总时间复杂度为$O(3^x4^y)$ ,(x+y)为输入的总字符串长度.</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>需要存储这些结果,空间复杂度也为$O(3^x4^y)$</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记15</title>
      <link href="posts/1bc1468d.html"/>
      <url>posts/1bc1468d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p> <a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">15. 三数之和</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><p>示例：</p><pre><code>给定数组 nums = [-1, 0, 1, 2, -1, -4]，满足要求的三元组集合为：[  [-1, 0, 1],  [-1, -1, 2]]</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><pre><code>先排序，然后逐个遍历i，双指针lo=i+1,hi=n-1,找到lo&gt;=hi为止去除重复：i遇到重复的跳过，nums[i]+nums[lo]+nums[hi]==0时，++lo,--hi同时循环进行因为可能下一个还是同样值的lo，hi，且一个移动之后，不可能再相等，为了更快两个一起移动</code></pre><pre class=" language-java"><code class="language-java"><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i in nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    lo<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>hi<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    处理第一个元素重复的情况<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//至少为三元组</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>lo<span class="token operator">&lt;</span>hi<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            加入result中<span class="token punctuation">;</span>            注意处理重复的情况<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            根据大小关系<span class="token operator">--</span>hi或者<span class="token operator">++</span>lo<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>注意第一个处理重复要从1开始,不然会越界</li><li>如果第一个就大于0,排序后的肯定找不到.所以可以优化</li><li>注意后面两个元素处理重复的技巧</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//优化</span>        <span class="token comment" spellcheck="true">//处理第一个元素的重复</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lo <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>lo<span class="token operator">&lt;</span>hi<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//至少有三个元素</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//去重</span>                <span class="token comment" spellcheck="true">//look,必须至少强制位移一次</span>                <span class="token comment" spellcheck="true">//因为去掉重复,所以一个位移了,另外一个必然是要位移的</span>                <span class="token comment" spellcheck="true">//                    while(lo&lt;hi &amp;&amp; nums[lo+1]==nums[lo]) ++lo;</span>                <span class="token comment" spellcheck="true">//                    while(lo&lt;hi &amp;&amp; nums[hi]==nums[hi-1]) --hi;</span>                <span class="token comment" spellcheck="true">//look,注意细节,如果先++lo了,那肯定会错,因为两个相等了</span>                <span class="token comment" spellcheck="true">//                    while(lo&lt;hi &amp;&amp; nums[++lo]==nums[lo]);</span>                <span class="token comment" spellcheck="true">//                    while(lo&lt;hi &amp;&amp; nums[--hi]==nums[hi]);</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>lo<span class="token operator">&lt;</span>hi <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span><span class="token operator">++</span>lo<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>lo<span class="token operator">&lt;</span>hi <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span><span class="token operator">--</span>hi<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">--</span>hi<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token operator">++</span>lo<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$O(N^2)$,外层遍历一次数组,随后又用lo,hi内层循环遍历</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$O(1)$ 忽略返回结果消耗的内存,忽略Arrays.sort()有可能消耗的内存</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础--JavaWeb</title>
      <link href="posts/582aa7a5.html"/>
      <url>posts/582aa7a5.html</url>
      
        <content type="html"><![CDATA[<ol><li><code>BeanPropertyRowMapper&lt;User&gt;(User.class)</code>封装必须数据库和类的字段名字一样，不然会封装为null，且如果没有匹配会报错</li><li>session和直接存储attribute的不同，作用域不一样。request.setAttribute()是只在此action的下一个forward需要使用的时候使用；session.setAttribute 作用域是整个会话期间，在所有的页面都使用这些数据的时候使用。</li><li>导入的jar包直接放在web-INF的lib目录下，不要再分细的包，不然不行</li><li>maven管理jar包，依赖的jar直接添加在已经给的dependences里面，不然不行</li><li>直接在右边maven里面，toncat:run就行</li><li>加scope不然包冲突</li><li>设置jdk，不然可能用不了，继续在pom插件，添加了模板jdk_use，可以直接使用了</li><li>还要设置tomcat7(设置了快捷键tomcat7)，不然跑不了，然后运行 tomcat7:run</li><li>jedis操作的时候，要开启redis的server和client</li><li>自己的服务器安装了mysql之后,得再阿里云开放3306端口</li><li>JDBCUtils.class.getResourceAsStream,无论如何都找到了</li><li>mysql设置编码,插入中文</li><li>新建maven项目,在pom.xml里面配置jdk和tomcat7,jar包配置,试跑一下</li><li>做好大概的思维导图,大致明确逻辑,建好层级目录</li><li>先放入几个util类,新建数据库,实现User,Userdao,并测试</li><li>导入jquery,css,boostrap等</li><li>写注册页面的基本表单</li><li>正则表达式简单校验输入内容</li><li>不支持发行版本5 settings中找到java compiler 将右边改成jdk9,直接快捷键jdk9</li><li>oracle不支持:mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.4.0 -Dpackaging=jar -Dfile=D:\Oracle_10g_10.2.0.4_JDBC_ojdbc14.jar</li><li>idea静态资源热部署,<a href="https://bbs.csdn.net/topics/392365951?list=9345374" target="_blank" rel="noopener">https://bbs.csdn.net/topics/392365951?list=9345374</a></li></ol><p>热部署后,运行,刷新的时候按ctrl+F9就行了</p><ol start="22"><li><pre><code>#mybatis版本问题,不加这个不会自动扫描包mybatis.type-aliases-package=com.tongji</code></pre></li><li><p>有时pom不主动下依赖,就maven-clean再maven-install</p></li><li><p>还报错就reload项目</p></li><li><p>springboot热启动:ctrl+F9</p></li><li><p>BeanPropertyRowMapper<User>(User.class)封装必须数据库和类的字段名字一样，不然会封装为null，且如果没有匹配会报错</p></li><li><p>session和直接存储attribute的不同，作用域不一样。request.setAttribute()是只在此action的下一个forward需要使用的时候使用；session.setAttribute 作用域是整个会话期间，在所有的页面都使用这些数据的时候使用。</p></li><li><p>导入的jar包直接放在web-INF的lib目录下，不要再分细的包，不然不行</p></li><li><p>maven管理jar包，依赖的jar直接添加在已经给的dependences里面，不然不行</p></li><li><p>直接在右边maven里面，toncat:run就行</p></li><li><p>加scope不然包冲突</p></li><li><p>设置jdk，不然可能用不了，继续在pom插件，添加了模板jdk_use，可以直接使用了</p></li><li><p>还要设置tomcat7(设置了快捷键tomcat7)，不然跑不了，然后运行 tomcat7:run</p></li><li><p>jedis操作的时候，要开启redis的server和client</p></li><li><p>自己的服务器安装了mysql之后,得再阿里云开放3306端口</p></li><li><p>JDBCUtils.class.getResourceAsStream,无论如何都找到了</p></li><li><p>mysql设置编码,插入中文</p></li><li><p>新建maven项目,在pom.xml里面配置jdk和tomcat7,jar包配置,试跑一下</p></li><li><p>做好大概的思维导图,大致明确逻辑,建好层级目录</p></li><li><p>先放入几个util类,新建数据库,实现User,Userdao,并测试</p></li><li><p>导入jquery,css,boostrap等</p></li><li><p>写注册页面的基本表单</p></li><li><p>正则表达式简单校验输入内容</p></li><li><p>settings code templates other web servlet Annotated给servlet加上doPost</p></li><li><p>mysql安装:设置用户名,密码,然后配置环境变量:</p><blockquote><p>环境变量-系统变量-添加 C:\Program Files\MySQL\MySQL Server 5.5\bin</p></blockquote></li><li><p>maven镜像: C:\Users\12549.m2 下新建settings.xml文件,复制其他地方的内容进去,并且在mirrors标签下添加:</p><pre><code>&lt;mirror&gt;      &lt;id&gt;nexus-aliyun&lt;/id&gt;      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;      &lt;name&gt;Nexus aliyun&lt;/name&gt;      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记11</title>
      <link href="posts/1cac8294.html"/>
      <url>posts/1cac8294.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p> <a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">11. 盛最多水的容器</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>说明：你不能倾斜容器，且 n 的值至少为 2。</p><p><strong>示例：</strong></p><pre><code>输入：[1,8,6,2,5,4,8,3,7]输出：49</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>面积=底*高.显然首尾元素的底最大。所以可以从首尾不断的缩小，找出最大值.</p><p>缩小可以让高度较小的那条边缩小，就不会漏掉解</p><pre class=" language-java"><code class="language-java">lo<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>hi<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>lo<span class="token operator">&lt;</span>hi<span class="token punctuation">)</span><span class="token punctuation">{</span>    result<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span><span class="token punctuation">(</span>hi<span class="token operator">-</span>lo<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span>hi<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token operator">++</span>lo<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p>可以进行优化,即选择了小的那个支柱后，往内侧寻找，可以采用while循环的方式。如果都是小于等于支柱的高，就一直循环（注意边界），节省开销。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> height<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//lo==hi的话，只有一个，是没有面积的</span>    <span class="token punctuation">{</span>        result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>lo<span class="token punctuation">]</span> <span class="token operator">></span> height<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//右边是短板</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//因为底不断变小,所以高小于支柱的可以都淘汰</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> height<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//必须先强制-1,不然可能死循环 高相等的总面积也小</span>            <span class="token comment" spellcheck="true">//不会越界,最多减小到lo</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>hi<span class="token operator">></span>lo <span class="token operator">&amp;&amp;</span> height<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token operator">&lt;=</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> height<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">++</span>lo<span class="token operator">&lt;</span>hi <span class="token operator">&amp;&amp;</span> height<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token operator">&lt;=</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$ O（N) $ </p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>$ O(1) $</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记10</title>
      <link href="posts/6babb202.html"/>
      <url>posts/6babb202.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p><a href="https://leetcode-cn.com/problems/regular-expression-matching/" target="_blank" rel="noopener">10. 正则表达式匹配</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p><p>‘.’ 匹配任意单个字符<br>‘*’ 匹配零个或多个前面的那一个元素<br>所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。</p><p>说明:</p><p>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。<br>示例 1:</p><pre><code>输入:s = &quot;aa&quot;p = &quot;a&quot;输出: false解释: &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</code></pre><p>示例 2:</p><pre><code>输入:s = &quot;aa&quot;p = &quot;a*&quot;输出: true解释: 因为 &#39;*&#39; 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 &#39;a&#39;。因此，字符串 &quot;aa&quot; 可被视为 &#39;a&#39; 重复了一次。</code></pre><p>示例 3:</p><pre><code>输入:s = &quot;ab&quot;p = &quot;.*&quot;输出: true解释: &quot;.*&quot; 表示可匹配零个或多个（&#39;*&#39;）任意字符（&#39;.&#39;）。</code></pre><p>示例 4:</p><pre><code>输入:s = &quot;aab&quot;p = &quot;c*a*b&quot;输出: true解释: 因为 &#39;*&#39; 表示零个或多个，这里 &#39;c&#39; 为 0 个, &#39;a&#39; 被重复一次。因此可以匹配字符串 &quot;aab&quot;。</code></pre><p>示例 5:</p><pre><code>输入:s = &quot;mississippi&quot;p = &quot;mis*is*p*.&quot;输出: false</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>动态规划:</p><p>定义<code>dp[i][j]</code>为s的<code>[0,i-1]</code>个字符与p的前<code>[0,j-1]</code>个字符是否匹配.</p><p>结束:<code>dp[m][n]</code></p><p>初始化:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//s为空时,p匹配s的情况:</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果这个位置为*,则还可能为true,即让前个位置字符匹配0次,查看是否相等</span><span class="token comment" spellcheck="true">//注意越界检查等等</span><span class="token keyword">for</span><span class="token punctuation">(</span>j in <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'*'</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">else</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p为空时,p匹配s的情况:</span><span class="token comment" spellcheck="true">//无特殊情况</span><span class="token keyword">for</span><span class="token punctuation">(</span>i in <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span></code></pre><p>递推公式:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//匹配的情况最好</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//是特殊字符*</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//分三种情况讨论,分别是匹配0次,1次,n次</span>    <span class="token comment" spellcheck="true">//只要其中一种匹配成功即可,即为||</span>    <span class="token comment" spellcheck="true">//匹配n次比较复杂 要求s[0,i-2]的都匹配了(即dp[i-1][j]匹配),再看s[i-1]是否能匹配上p中要复制的字符,即p.charAt(j - 2)和它相等或者为.的情况(.*)</span>    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">||</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span>     <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'.'</span> <span class="token operator">||</span> p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>要注意很多的数组边界情况</li><li>s.length()的情况不用考虑</li><li><code>*</code>匹配多个的逻辑要注意,并且要考虑 <code>.*</code>的情况</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//look如果判断s.length()==0,会很难处理 因为""与".*"是匹配的</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化 不需要判断s,p的长度是否0,因为dp[0][0]肯定存在</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认*不能出现在最前面</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">char</span> charS <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> charP <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>charS <span class="token operator">==</span> charP <span class="token operator">||</span> charP <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>charP <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//look,匹配多个判断,首先要s[0,i-2]的都匹配了(即dp[i-1][j]匹配),再看s[i-1]是否能匹配上p中要复制的字符</span>                <span class="token comment" spellcheck="true">//即p.charAt(j - 2)和它相等或者为.的情况(.*)</span>                <span class="token keyword">boolean</span> matchMore <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'.'</span> <span class="token operator">||</span> p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> charS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">||</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> matchMore<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>二重循环,$ O(MN) $</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>dp数组,$ O(MN) $</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记04</title>
      <link href="posts/75dd475a.html"/>
      <url>posts/75dd475a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p>  <a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">4. 寻找两个正序数组的中位数</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。</p><p>请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p><p>你可以假设 nums1 和 nums2 不会同时为空。</p><pre><code>示例 1:nums1 = [1, 3]nums2 = [2]则中位数是 2.0</code></pre><pre><code>示例 2:nums1 = [1, 2]nums2 = [3, 4]则中位数是 (2 + 3)/2 = 2.5</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>选择两个数组中较小的一个,先将之对半分,通过计算,对另一个数组在某位置也切一刀，使得两个数组切下那刀后左右两边数量相同。然后判断切出来的数字是否是中位数。如果不是中位数，则继续二分，直到找到中位数。</p><pre class=" language-java"><code class="language-java">选择较小的那个数组<span class="token punctuation">;</span>lo<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>hi<span class="token operator">=</span>数组长度<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    mid<span class="token operator">=</span>lo<span class="token operator">+</span><span class="token punctuation">(</span>hi<span class="token operator">-</span>lo<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    在另一个数组切一刀，使得切下去后两边元素相等<span class="token punctuation">;</span>    判断是否为中位数，是则退出循环，否则根据大小判断增大lo或者减小hi<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>切分也要能在两个数的中间切，不然可能切不平衡。所以开始先要对两个数组扩充成2*n+1的大小(逻辑上扩充，物理上不扩充)</li><li>要判断切割后是否是中位数，则要找到切割元素的左右两边的值，所以要定义四个变量标识两个数组的左右两边的值。</li><li>计算第二个数组的中位数：mid1,mid2也是在逻辑扩充后的数组上操作.扩充后总共有2（m+n+1)个元素，切分的mid1代表了num1左边元素的个数，mid1+mid2应该等于m+n，所以mid2=m+n-mid1.(可画图分析)</li><li>计算切分元素两边的值：如果mid为基数，切的是元素，mid/2即可得到元素，他的左右两边就是他本身。如果是偶数，则是切两个数之间，mid/2就是右边元素，(mid-1)/2就是左边元素。因为（基数-1）/2效果一样，所以两种情况可以合并。</li><li>还要考虑左右两边如果是没有数字的问题。</li><li>判断往哪边二分可以画图分析.如果找到了值,返回的中位数为四个值中最中间的两个(也可以画图讨论正确性).</li><li>标为look的为之前写错后来改的部分</li></ol><p>​    </p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">,</span> n <span class="token operator">=</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//只选取小的切分 所以取反,look 直接return,而不是调用</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>nums2<span class="token punctuation">,</span> nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> L1<span class="token punctuation">,</span> R1<span class="token punctuation">,</span> L2<span class="token punctuation">,</span> R2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//切割元素左右两边的值</span>    <span class="token keyword">int</span> mid1<span class="token punctuation">,</span> mid2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//逻辑上扩充成2*n+1,但是最后一个元素还要-1</span>    <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> m<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo<span class="token operator">&lt;=</span>hi<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        mid1 <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        mid2 <span class="token operator">=</span> m <span class="token operator">+</span> n <span class="token operator">-</span> mid1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算得到</span>        <span class="token comment" spellcheck="true">//计算切分元素两边的值</span>        <span class="token comment" spellcheck="true">//look 首先判断条件是2*m,扩充后的数组</span>        <span class="token comment" spellcheck="true">//且L1,L2为值,不是索引,所以是nums1[(mid1 - 1) / 2]而不是(mid1 - 1) / 2</span>        L1 <span class="token operator">=</span> <span class="token punctuation">(</span>mid1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> Integer<span class="token punctuation">.</span>MIN_VALUE <span class="token operator">:</span> nums1<span class="token punctuation">[</span><span class="token punctuation">(</span>mid1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        R1 <span class="token operator">=</span> <span class="token punctuation">(</span>mid1 <span class="token operator">==</span> <span class="token number">2</span><span class="token operator">*</span>m <span class="token operator">?</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span> nums1<span class="token punctuation">[</span>mid1 <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        L2 <span class="token operator">=</span> <span class="token punctuation">(</span>mid2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> Integer<span class="token punctuation">.</span>MIN_VALUE <span class="token operator">:</span> nums2<span class="token punctuation">[</span><span class="token punctuation">(</span>mid2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        R2 <span class="token operator">=</span> <span class="token punctuation">(</span>mid2 <span class="token operator">==</span> <span class="token number">2</span><span class="token operator">*</span>n <span class="token operator">?</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span> nums2<span class="token punctuation">[</span>mid2 <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L1 <span class="token operator">></span> R2<span class="token punctuation">)</span> hi <span class="token operator">=</span> mid1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>L2 <span class="token operator">></span> R1<span class="token punctuation">)</span> lo <span class="token operator">=</span> mid1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>L1<span class="token punctuation">,</span> L2<span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>R1<span class="token punctuation">,</span> R2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//look 注意运算优先级</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>选取最小的数组进行二分,而且二分循环中为常数操作,所以O(min(m,n))</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>只定义了固定的几个变量,O(1)</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数组 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记05</title>
      <link href="posts/2da77cc.html"/>
      <url>posts/2da77cc.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p>  <a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">5. 最长回文子串</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p><pre><code>示例 1:输入: &quot;babad&quot;输出: &quot;bab&quot;注意: &quot;aba&quot; 也是一个有效答案。</code></pre><pre><code>示例 2:输入: &quot;cbbd&quot;输出: &quot;bb&quot;</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>遍历一次数组，对每次遍历，从那个字符为中心开始向左右扩展直到不能扩展为止。扩展分为一个字符扩展和两个字符扩展两种。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">,</span><span class="token keyword">int</span> i in string<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> lo<span class="token operator">=</span>i<span class="token punctuation">,</span>hi<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//单向扩展</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果符合条件，则一直扩展</span>        <span class="token operator">--</span>lo<span class="token punctuation">,</span><span class="token operator">++</span>hi<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    result<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span><span class="token function">substring</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span>hi<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//双向扩展</span>    lo<span class="token operator">=</span>i<span class="token punctuation">,</span>hi<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果符合条件，则一直扩展</span>        <span class="token operator">--</span>lo<span class="token punctuation">,</span><span class="token operator">++</span>hi<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code># 细节</code></pre><ol><li>如果不用额外空间，就用两个指针指向要返回字符串的位置，他们的初始值应该都是0。那么这样就先要判断s是否为空字符串。</li><li>注意s.substring()截取的是左闭右开区间，自己设计的变量标识是[left,right]</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lo <span class="token operator">=</span> i<span class="token punctuation">,</span> hi <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//单向扩展</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>lo<span class="token operator">-</span><span class="token number">1</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> hi<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>lo<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>hi<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>lo<span class="token punctuation">;</span>            <span class="token operator">++</span>hi<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//其实是right-left+1 &lt; hi-lo+1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>hi<span class="token operator">-</span>lo<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            left <span class="token operator">=</span> lo<span class="token punctuation">;</span>            right <span class="token operator">=</span> hi<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//双向扩展</span>        lo <span class="token operator">=</span> i<span class="token punctuation">;</span>        hi <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果一开始就不能双向扩展,就不用管了</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hi<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>lo<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>lo<span class="token operator">-</span><span class="token number">1</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> hi<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>lo<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>hi<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token operator">--</span>lo<span class="token punctuation">;</span>                <span class="token operator">++</span>hi<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>hi<span class="token operator">-</span>lo<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                left <span class="token operator">=</span> lo<span class="token punctuation">;</span>                right <span class="token operator">=</span> hi<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>循环遍历的时间复杂度为O(N),中心扩散的时间复杂度也为O(N),所以总共为$ O(N^2) $</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>只用了几个变量，和string的长度无关，所以是O(1)</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记03</title>
      <link href="posts/ebb9d2f9.html"/>
      <url>posts/ebb9d2f9.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p> <a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3. 无重复字符的最长子串</a></p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><pre><code>示例 1:输入: &quot;abcabcbb&quot;输出: 3 解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</code></pre><pre><code>示例 2:输入: &quot;bbbbb&quot;输出: 1解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</code></pre><pre><code>示例 3:输入: &quot;pwwkew&quot;输出: 3解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//伪代码</span>    maxLength<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>lo<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>hi<span class="token operator">=</span><span class="token number">0</span>    Map<span class="token operator">&lt;</span>字符<span class="token punctuation">,</span>index<span class="token operator">></span> map    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>ch in string<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        hi<span class="token operator">=</span>i        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> lo<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>lo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//说明有重复的</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>        maxLength<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span>hi<span class="token operator">-</span>lo<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span></code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li><p>因为可能在中间取得最大值,所以每一次都要判断一下<code>maxLength=max(maxLength,hi-lo+1);</code></p></li><li><p>通过HashMap查看是否有重复的元素,有则更新到重复元素之后,相当于去掉那个重复元素</p></li><li><p>一定要把最新遍历到的put到map中,这样不管里面有没有,都会更新到最前面的位置</p></li><li><p><code>lo=max(map.find(ch)+1,lo) </code>是因为例如abba等,在遍历完第二个b时,lo=2,而遍历最后的a,<code>map.find(ch)+1</code>值为1,就不符合实际情况。这样做的本质是取历史不重复子串和此次不重复子串的交集。</p></li></ol><p>​    </p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> maxLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        hi <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> lo <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//look</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//look</span>        maxLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> hi <span class="token operator">-</span> lo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxLength<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>因为是字符，所以改用大小为128的数组存储,思路是一样的，但是用数组快一点</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>lo<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化为-1</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        lo <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span> map<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> map<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">-</span> lo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>对字符串进行一次遍历，循环内操作都可以在常数时间内解决，例如map的put，get方法。所以时间复杂度O(N)</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>只需要字符集大小的空间存储即可（重复的字符也是如此），所以空间复杂度为O(|E|) 其中的E代表字符集</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记02</title>
      <link href="posts/9cbee26f.html"/>
      <url>posts/9cbee26f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p>2.两数相加</p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><pre><code>示例：输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出：7 -&gt; 0 -&gt; 8原因：342 + 465 = 807</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>可以在循环中不断计算两个指针对应的值之和,然后两个指针再指向链表下一个位置(同时考虑是否有进位的情况,以及链表是否为空的情况),计算直到两个指针为空并且没有进位 </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//伪代码</span><span class="token keyword">while</span><span class="token punctuation">(</span>链表<span class="token number">1</span><span class="token operator">!=</span>null <span class="token operator">||</span> 链表<span class="token number">2</span><span class="token operator">!=</span>null <span class="token operator">||</span> 有进位<span class="token punctuation">)</span><span class="token punctuation">{</span>    对链表<span class="token number">1</span><span class="token punctuation">,</span>链表<span class="token number">2</span>如果为null时的特殊处理    value<span class="token operator">=</span>链表<span class="token number">1</span><span class="token operator">+</span>链表<span class="token number">2</span><span class="token operator">+</span>进位    value考虑是否进位的处理    构造新的结果链表<span class="token punctuation">}</span><span class="token keyword">return</span> 结果链表</code></pre><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li>因为都是逆序存储,所以从链表头部计算相当于从两个数的低位开始计算,就算不对齐也不会影响结果.例如2-&gt;4-&gt;3与4-&gt;5-&gt;6-&gt;2,就是342+2654</li><li>因为非空链表,而且非负整数,每个节点存储一位数字,所以不用讨论很多特殊情况,且要考虑进位</li><li>也可以采用递归,但是能用循环还是用循环</li><li>链表总是得考虑null值情况的处理</li><li>当l1==null,l2==null但是carryOver(进位)==1的情况,还要构造新的链表,所以while循环有三个条件</li><li><code>carryOver = value / 10</code>的计算必须在<code>value = value % 10</code>之前,因为后者已经把value降为10以下</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//ListNode</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        val <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//第一个元素只是为了方便编程</span>    <span class="token comment" spellcheck="true">//result代表结果链表的头部,current则构造该链表</span>    ListNode result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode current <span class="token operator">=</span> result<span class="token punctuation">;</span>    <span class="token keyword">int</span> carryOver <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进位标志</span>    <span class="token comment" spellcheck="true">//三者只要其中一个满足条件,就能计算下去</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null <span class="token operator">||</span> l2 <span class="token operator">!=</span> null <span class="token operator">||</span> carryOver <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//需要判断l1,l2是否为null</span>        <span class="token keyword">int</span> value1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> value2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            value1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            value2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> value1 <span class="token operator">+</span> value2 <span class="token operator">+</span> carryOver<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否进位</span>        <span class="token comment" spellcheck="true">//顺序不能颠倒,否则value已经&lt;10,carryOver一定为0</span>        carryOver <span class="token operator">=</span> value <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> value <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造结果链表</span>        current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//链表第二个元素起才有实际的意义</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>设m,n分别为链表1,链表2的长度,因为循环的次数是max(m,n),所以时间复杂度为O(max(m,n))</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>O(max(m,n)),因为两个链表的值相加,最后链表长度最大为max(m,n)+1(最前面进位1的情况)</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记01</title>
      <link href="posts/5b7b3d5.html"/>
      <url>posts/5b7b3d5.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目出自LeetCode</p><p>1.两数之和</p><p> 其他题解或源码可以访问： <a href="https://github.com/tongji4m3/LeetCode" target="_blank" rel="noopener">tongji4m3</a></p></blockquote><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><pre><code>示例:给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1]</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>不断将元素加入Map集合中,key为值,value为数组的索引。这样，不断在map中查找（target-下一个数组元素），如果找到，就可以直接返回两个对应的索引。找不到，则将该元素放入map中，继续数组下一个元素。（因为规定了只有一个，所以不需要考虑覆盖map中相同key的问题）</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li><p>返回的是数组索引</p></li><li><p>每种输入只会对应一个答案:找到即可返回</p></li><li><p>数组同一个元素只可使用一次,但是用map不需要考虑这个问题</p></li><li><p>找不到则返回{-1，-1}</p></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//value,index</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>             map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>HashMap理想或者均摊情况下的时间复杂度O(1)。最坏情况对数组进行一次循环，总时间复杂度为O（N）</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>最坏情况把所有数组都放入了Map中。所以空间复杂度为O（N）</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> HashMap </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue常用命令与使用</title>
      <link href="posts/2d8f53b2.html"/>
      <url>posts/2d8f53b2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>官网下载安装node.js</p><p> 安装cnpm:npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org/" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> </p><p>npm install -g @vue/cli</p><p>vue –version 查看是否成功</p><p>安装vue全局扩展:npm install -g @vue/cli-service-global</p><p>vue create 项目名</p><p>用IDEA打开项目,可以在Terminal运行npm run serve</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础--异常</title>
      <link href="posts/1a12af4c.html"/>
      <url>posts/1a12af4c.html</url>
      
        <content type="html"><![CDATA[<h1 id="异常简介"><a href="#异常简介" class="headerlink" title="异常简介"></a>异常简介</h1><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/image-20200807095737682.png" alt="image-20200807095737682"></p><ol><li>所有的RuntimeException及其子类都属于运行时异常。在编写处理程序阶段可用处理，也可用选择不处理</li><li>Exception中除了RuntimeException的其他子类，都是编译时异常，又叫受检异常。即编写程序时必须预先对异常进行处理，否则编译器报错。编译时异常发生概率高。所以未雨绸缪。</li><li>编译时异常例子：大雨天，出门不带伞，很大可能会生病（很大可能发生的一种异常）。那就提前带一把伞（对概率较高的异常进行预处理）</li><li>运行时异常例子：被飞机砸中，发生概率比较低。如果提前预处理，就很麻烦</li><li>编译期，运行期异常都发生在运行阶段。编译阶段异常不会发生。</li></ol><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>编译时异常在编写程序时就要预先处理，可以继续向上抛出，或者自行处理。</p><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><ol><li>如果异常一直上抛，main再上抛则上抛到了JVM，则会终止程序</li><li><code>throws ClassNotFoundException</code>交给调用该方法的调用者处理</li><li></li></ol><h2 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h2><p>异常堆栈信息从上往下看。先看抛出的异常名。再看自己代码中最顶端报错的代码位置。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span><span class="token string">"my_exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//my_exception</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印异常栈堆信息</span><span class="token punctuation">}</span></code></pre><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><ol><li>无论try里执行了return语句、break语句、还是continue语句，finally语句块还会继续执行。</li><li>当try或者catch的代码在运行的时候，JVM退出了。那么finally语句块就不会执行。同样，如果线程在运行try或者catch的代码时被中断了或者被杀死了(killed)，那么finally语句可能也不会执行了，即使整个运用还会继续执行。</li><li>如果在try语句里有return语句，finally语句还是会执行。它会在把控制权转移到该方法的调用者或者构造器前执行finally语句。也就是说，使用return语句把控制权转移给其他的方法前会执行finally语句。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//100</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span>        <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//反编译</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span></code></pre><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//要定义编译时异常就Exception,运行时异常就RuntimeException</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span>    <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">"myExceptionInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MyException</span> e<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//test.MyException: myExceptionInfo</span>    <span class="token comment" spellcheck="true">//    at demo1.MainTest.main(MainTest.java:21)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础--常用对象</title>
      <link href="posts/d70d769a.html"/>
      <url>posts/d70d769a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><pre><code>public String toString() {    return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());}</code></pre><p>返回对象的字符串表示形式,建议所有子类重写此方法.</p><h2 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h2><pre><code>public boolean equals(Object obj){    return (this == obj);}</code></pre><p>如果是对象引用,那么equals()底层调用==,比较的是对象内存地址是否相等</p><p>一般重写它以比较两个对象的内容</p><p>无论何时覆盖该方法，通常需要覆盖<code>hashCode</code>方法，以便维护<code>hashCode</code>方法的通用合同，该方法规定相等的对象必须具有相等的哈希码。</p><p>所以基本数据类型用==判断相等,引用数据类型都用equals()进行判断(String也是引用类型)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//idea生成</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> o<span class="token punctuation">;</span>    <span class="token keyword">return</span> age <span class="token operator">==</span> person<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span>        username<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><ul><li><ul><li><ul><li><p>创建并返回此对象的副本。“复制”的精确含义可能取决于对象的类。一般的意图是，对于任何对象<code>x</code> ，表达式：</p><pre><code>  &gt; ` x.clone() != x`  将是真实的，而且表达：  &gt; ` x.clone().getClass() == x.getClass()`  将是`true`  ，但这些都不是绝对的要求。通常情况是：  &gt; ` x.clone().equals(x)`  将是`true`  ，这不是一个绝对的要求。</code></pre></li></ul></li></ul></li><li><ul><li><ul><li><p>按照惯例，返回的对象应该通过调用<code>super.clone</code>获得。  如果一个类和它的所有超类（除了<code>Object</code> ）遵守这个惯例，那将是<code>x.clone().getClass()  == x.getClass()</code>的情况。 </p><pre><code>  按照惯例，此方法返回的对象应该与此对象（正被克隆）无关。  为了实现这一独立性，可能需要修改`super.clone`返回的对象的一个或多个字段。  通常，这意味着复制构成被克隆的对象的内部“深层结构”的任何可变对象，并通过引用该副本替换对这些对象的引用。  如果一个类仅包含原始字段或对不可变对象的引用，则通常情况下，  `super.clone`返回的对象中的字段通常不需要修改。 </code></pre></li></ul></li></ul></li><li><ul><li><ul><li><p><code>clone</code>的方法<code>Object</code>执行特定的克隆操作。  首先，如果此对象的类不实现接口<code>Cloneable</code>  ，则抛出<code>CloneNotSupportedException</code> 。  请注意，所有数组都被认为是实现接口<code>Cloneable</code>  ，并且数组类型<code>T[]</code>的<code>clone</code>方法的返回类型是<code>T[]</code>  ，其中T是任何引用或原始类型。  否则，该方法将创建该对象的类的新实例，并将其所有字段初始化为完全符合该对象的相应字段的内容，就像通过赋值一样。  这些字段的内容本身不被克隆。 因此，该方法执行该对象的“浅拷贝”，而不是“深度拷贝”操作。 </p><pre><code>  `Object`类本身并不实现接口`Cloneable`  ，因此在类别为`Object`的对象上调用`clone`方法将导致运行时抛出异常。 </code></pre></li></ul></li></ul></li></ul><h1 id="八种包装类型"><a href="#八种包装类型" class="headerlink" title="八种包装类型"></a>八种包装类型</h1><ol><li>Byte,Short,Integer,Long,Float,Double父类都是Number</li><li>Boolean,Character父类是Object</li></ol><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>提供了六种转换方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">long</span> <span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="拆箱装箱机制"><a href="#拆箱装箱机制" class="headerlink" title="拆箱装箱机制"></a>拆箱装箱机制</h2><p><code>Integer i=100</code> 其实还是相当于<code>Integer i= new Integer(100)</code>i还是指向内存地址。只是自动装箱了,只有运算才会自动拆装箱</p><pre><code>//==永远判断内存地址是否相同Integer i= new Integer(100);Integer j= new Integer(100);if(i==j) //结果为false</code></pre><p>Integer类加载时会初始化整数型常量池：256个对象<br>在[-128,127]之间会被包装到固定的对象,放在整数型常量池里<br>此区间的数据直接从内存中取出，内存地址相同</p><pre class=" language-java"><code class="language-java">Integer a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>Integer b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//结果为true</span></code></pre><h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Date转为String</span>SimpleDateFormat dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//String转为Date</span>SimpleDateFormat dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String s <span class="token operator">=</span> <span class="token string">"2020年08月07日 08:28:23"</span><span class="token punctuation">;</span>Date date <span class="token operator">=</span> dateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从1970.1.1至今的总毫秒数</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//高精度,如财务处理软件等</span>BigDecimal bigDecimal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BigDecimal bigDecimal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BigDecimal add <span class="token operator">=</span> bigDecimal1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bigDecimal2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//7.5999999999999996447286321199499070644378662109375</span>BigDecimal divide <span class="token operator">=</span> bigDecimal1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>bigDecimal2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>divide<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</span></code></pre><h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//构造参数可传入随机种子,每次程序的随机数都一样</span>Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//产生int范围内的随机数</span><span class="token keyword">int</span> j <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//产生[0,100)范围内的随机数</span></code></pre><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//junit</span>    <span class="token comment" spellcheck="true">//@Before使得所有测试方法先执行该方法</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"close.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      Demo demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      demo<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="stream流"><a href="#stream流" class="headerlink" title="stream流"></a>stream流</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//stream流式模型 相当于对一个list或者数组进行一系列处理,然后对剩下的集合打印或者其他操作</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"AAB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">filter</span><span class="token punctuation">(</span>name<span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">filter</span><span class="token punctuation">(</span>name<span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">forEach</span><span class="token punctuation">(</span>name<span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre><code>//一种数据类型转换为另外一种Stream&lt;String&gt; stream = Stream.of(&quot;12&quot;, &quot;23&quot;, &quot;45&quot;);Stream&lt;Integer&gt; stream1=stream.map((String name) -&gt; {       return Integer.parseInt(name); });stream1.forEach(i-&gt;System.out.println(i));Stream&lt;String&gt; stream = Stream.of(&quot;12&quot;, &quot;23&quot;, &quot;45&quot;,&quot;78&quot;);System.out.println(stream.limit(3).count());```</code></pre><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><pre><code>@Deprecated  代表方法已经过时@SuppressWarnings(&quot;all&quot;)  抑制警告@Override 重写方法</code></pre><p>端口号 0-65535  1024之前的端口不能使用</p><p>idea默认编码UTF-8，win10默认GBK</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对象 </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础--String</title>
      <link href="posts/a0a3a5a1.html"/>
      <url>posts/a0a3a5a1.html</url>
      
        <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><pre><code>private final char value[];</code></pre><p>数组长度不可变,而且加了final,所以只能指向那个对象,所以不可变</p><h1 id="println"><a href="#println" class="headerlink" title="println"></a>println</h1><p>输出任何数据都转换成字符串再输出</p><h2 id="pringf"><a href="#pringf" class="headerlink" title="pringf"></a>pringf</h2><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%8.2f"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//s为字符串，f为浮点数，d为十进制数</span><span class="token comment" spellcheck="true">//用8字符的宽度和小数点后两位的精度打印x</span><span class="token comment" spellcheck="true">//.2如果用在String则表示打印String时输出字符的最大数量</span><span class="token comment" spellcheck="true">//%-10 则为左对齐</span></code></pre><h2 id="System-out-println-new-Object"><a href="#System-out-println-new-Object" class="headerlink" title="System.out.println(new Object());"></a>System.out.println(new Object());</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span>Object x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String s <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">valueOf</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"null"</span> <span class="token operator">:</span> obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="System-out-println-1"><a href="#System-out-println-1" class="headerlink" title="System.out.println(1);"></a>System.out.println(1);</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">write</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础--IO</title>
      <link href="posts/48185b72.html"/>
      <url>posts/48185b72.html</url>
      
        <content type="html"><![CDATA[<h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><ol><li>用完流要调用close()关闭</li><li>最终输出前,调用flush(),清空管道</li><li>以Stream结尾都是字节流,以Reader/Writer结尾都是字符流</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    FileInputStream fileInputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>    FileOutputStream fileOutputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span>    <span class="token punctuation">{</span>        fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/test1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一次读取1024*1024个字节</span>        <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读到的字节数量,读取不到返回-1</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count<span class="token operator">=</span>fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//把读到的byte数组再写出去</span>            fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fileOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">finally</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fileInputStream<span class="token operator">!=</span>null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fileOutputStream<span class="token operator">!=</span>null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自带缓冲</span><span class="token comment" spellcheck="true">//包装类模式</span>BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String line<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不读换行符</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只需要关闭最外层的流</span>bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/image-20200808071748335.png" alt="image-20200808071748335"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//转换流</span>BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><ol><li>要实现标志接口 <code>Serializable</code>,会自动生成序列化版本号</li><li>transient:不参与序列化</li><li>通过类名,序列号区分一个类</li><li>建议将序列号手动写出来,这样类改动也还能用之前序列化后的</li></ol><pre class=" language-java"><code class="language-java">Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ObjectOutputStream objectOutputStream <span class="token operator">=</span>     <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>objectOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">ObjectInputStream objectInputStream <span class="token operator">=</span>     <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object object <span class="token operator">=</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>objectInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础--常见基础</title>
      <link href="posts/e7b0c3c0.html"/>
      <url>posts/e7b0c3c0.html</url>
      
        <content type="html"><![CDATA[<ol><li><blockquote><p>int 4字节 (-2的31次方)~(2的31次方-1) </p><p>short 2字节</p><p>long 8字节</p><p>byte 1字节 (-128~127)</p><p>float 四字节</p><p>double 8字节</p><p>byte 2字节     因为Java采用16位的Unicode字符集</p><p>boolean 只有两个值,但是大小没精确定义</p></blockquote></li><li><blockquote><p>0x开头代表十六进制,如:0xCAFE </p><p>0b开头代表二进制数,如:0b1001</p></blockquote></li><li><blockquote><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%8.2f"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//s为字符串，f为浮点数，d为十进制数</span><span class="token comment" spellcheck="true">//用8字符的宽度和小数点后两位的精度打印x</span></code></pre></blockquote></li><li><blockquote><p>Java总是按值调用</p><p>如果是基本数据类型,那么值不变</p><p>引用数据类型:引用被拷贝,指向的是原对象,所以仍能改变对象值</p></blockquote></li><li><blockquote><p>Object类equals()方法:</p><p>底层调用==来实现,判断两个对象是否具有相同的引用</p><p>若是比较状态是否相等</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">==</span>obj<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>    <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*Objects.equals():public static boolean equals(Object a, Object b) {    return (a == b) || (a != null &amp;&amp; a.equals(b));}*/</span></code></pre></blockquote></li><li><blockquote><p> Object类hashCode()方法</p><p> 如果重新定义equals方法,则需要重新定义hashCode()方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote></li><li><blockquote><p>自动装箱,自动拆箱,在-128,127之间会被包装到固定的对象,会导致</p><pre class=" language-java"><code class="language-java">Integer a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>Integer b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//结果为true</span></code></pre></blockquote></li><li><blockquote><p>异常</p><pre class=" language-java"><code class="language-java">Throwable      Error 非受查异常     Exception         IOException等 受查异常         RuntimeException 非受查异常</code></pre><p>  一个方法必须声明所有可能抛出的受查异常.非受查异常要么不可控制,要么应该避免发生.</p></blockquote></li></ol><p>​    </p><ol><li><p>多态,父类引用指向子类对象.编译看左边,运行看右边.</p></li><li><pre class=" language-java"><code class="language-java">SimpleDateFormat dateFormat <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><pre class=" language-java"><code class="language-java">StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"BC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String s <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><pre class=" language-java"><code class="language-java">Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span> extend E<span class="token operator">></span>泛型中必须是本身或者子类</code></pre></li><li><pre class=" language-java"><code class="language-java">Collections<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>poker<span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>poker<span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>poker<span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><ol><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//运行期异常可以不进行异常处理(RuntimeException).抛出异常</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"传递对象为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//编译期异常必须进行异常处理</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//同步方法 线程安全 锁对象是this</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">payTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//等待唤醒机制,实现线程通信</span>Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      obj<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//用线程池管理线程</span>ExecutorService es <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>es<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>  <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*函数式编程 只要获取结果就行,不注重谁去做适合只想传递一段代码的情况Lambda表达式*/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cook</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">invokeCooke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookImpl</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃饭了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>Cook cook<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cook<span class="token punctuation">.</span><span class="token function">invokeCooke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*******************带参数的省略写法************************/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cook</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">invokeCooke</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookImpl</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span>Cook cook<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> result<span class="token operator">=</span>cook<span class="token punctuation">.</span><span class="token function">invokeCooke</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//相对路径 相当于当前项目的根目录 //C:\code_home\idea_home\JAVA\DouDiZhu</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"DouDiZhu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字符流处理中文问题</span> FileReader fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"D:\\test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取到chars中</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//len记录每次读取的字符个数</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>fileReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//流对象自动关闭,无需手动close</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>   <span class="token keyword">throws</span> FileNotFoundException<span class="token punctuation">{</span>  <span class="token keyword">try</span><span class="token punctuation">(</span>FileInputStream fileInputStream <span class="token operator">=</span>       <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\00001.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      FileOutputStream fileOutputStream <span class="token operator">=</span>       <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\copy.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length<span class="token operator">=</span>fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//fileOutputStream.close();</span>  <span class="token comment" spellcheck="true">//fileInputStream.close();</span><span class="token punctuation">}</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置文件加载与存储</span>Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"李"</span><span class="token punctuation">,</span> <span class="token string">"168"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"BA"</span><span class="token punctuation">,</span> <span class="token string">"1688"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"CA"</span><span class="token punctuation">,</span> <span class="token string">"168888"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"D:\\test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"save data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储硬盘中</span>Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加载硬盘中</span>properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"D:\\test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">stringPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> strings<span class="token punctuation">)</span><span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//配置文件基本表示类型</span><span class="token comment" spellcheck="true">/*#save data#Wed Feb 05 11:12:12 CST 2020李=168CA=168888BA=1688*/</span></code></pre></li><li><pre class=" language-java"><code class="language-java">HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BufferedReader bufferedReader <span class="token operator">=</span>   <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"D:\\test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String line<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>  String<span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果放在上面就会没了</span>BufferedWriter bufferedWriter <span class="token operator">=</span>   <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"D:\\test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>String key<span class="token operator">:</span>hashMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  String value <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  line <span class="token operator">=</span> key <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> value<span class="token punctuation">;</span>  bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>  bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><pre class=" language-java"><code class="language-java">idea默认编码UTF<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span>win10默认编码GBK</code></pre></li><li><p>ipconfig  127.0.0.1 localhost 代表自己  </p></li><li><p>端口号 0-65535  1024之前的端口不能使用</p></li><li><p>网络端口:80     MySQL:3306      tomcat服务器:8080</p></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//网络编程</span><span class="token comment" spellcheck="true">//客户端</span>Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>OutputStream outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好,服务器"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>InputStream inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*******************服务器端*******************/</span>ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Socket socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>InputStream inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"收到谢谢"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//检测是否是函数式接口 有且仅有一个抽象方法</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>Test myTest<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        myTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//stream流式模型 相当于对一个list或者数组进行一系列处理,然后对剩下的集合打印或者其他操作</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"AAB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token function">filter</span><span class="token punctuation">(</span>name<span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token function">filter</span><span class="token punctuation">(</span>name<span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token function">forEach</span><span class="token punctuation">(</span>name<span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><pre><code>//一种数据类型转换为另外一种Stream&lt;String&gt; stream = Stream.of(&quot;12&quot;, &quot;23&quot;, &quot;45&quot;);Stream&lt;Integer&gt; stream1=stream.map((String name) -&gt; {       return Integer.parseInt(name); });stream1.forEach(i-&gt;System.out.println(i));Stream&lt;String&gt; stream = Stream.of(&quot;12&quot;, &quot;23&quot;, &quot;45&quot;,&quot;78&quot;);System.out.println(stream.limit(3).count());```</code></pre><ol start="18"><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//junit</span><span class="token comment" spellcheck="true">//@Before使得所有测试方法先执行该方法</span><span class="token annotation punctuation">@Before</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@After</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"close.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Demo demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  demo<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//三种反射获得方式</span><span class="token comment" spellcheck="true">//全类名</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.tongji.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一个案例</span>Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>InputStream inputStream <span class="token operator">=</span> ReflectTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>  <span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"com/tongji/test/pro.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>String className <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String methodName <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"methodName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">cls</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>Object object <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Method method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Deprecated</span>  代表方法已经过时<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>  抑制警告<span class="token annotation punctuation">@Override</span> 重写方法</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础--Java简介</title>
      <link href="posts/31c6b392.html"/>
      <url>posts/31c6b392.html</url>
      
        <content type="html"><![CDATA[<h1 id="java简介"><a href="#java简介" class="headerlink" title="java简介"></a>java简介</h1><h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><ol><li>简单性(不能直接操作指针)</li><li>面向对象性</li><li>健壮性(GC机制)</li><li>多线程并发</li><li>可移植性/跨平台性 write once,run everywhere</li></ol><h2 id="JDK-JRE-JVM"><a href="#JDK-JRE-JVM" class="headerlink" title="JDK,JRE,JVM"></a>JDK,JRE,JVM</h2><ol><li>JDK包括JRE,JRE包括JVM</li><li>JDK:开发工具包</li><li>JRE:java运行环境</li><li>安装JDK自带JRE,因为开发还需要测试</li></ol><h2 id="javac-java"><a href="#javac-java" class="headerlink" title="javac,java"></a>javac,java</h2><ol><li>javac在编译期,将.java文件形成.class文件 <code>javac MainTest.java</code><br> 相对路径写法，即MainTest.java必须在当前路径下</li><li>java在运行期,运行.class文件   <code>java MainTest</code><br> 如果指定了classpath则不必，否则MainTest.class也必须在当前路径下</li></ol><h1 id="JAVA配置环境变量解析"><a href="#JAVA配置环境变量解析" class="headerlink" title="JAVA配置环境变量解析"></a>JAVA配置环境变量解析</h1><h2 id="环境变量简介"><a href="#环境变量简介" class="headerlink" title="环境变量简介"></a>环境变量简介</h2><p>环境变量包括了 系统变量,用户变量<br>系统变量的范围比较大,会让所有计算机用户都生效<br>用户变量只会作用与当前用户</p><h2 id="path环境变量"><a href="#path环境变量" class="headerlink" title="path环境变量"></a>path环境变量</h2><p>path环境变量告诉windows可以去哪里找到命令.这样就不用写程序的绝对路径了,如<br><code>C:\Program Files\Java\jdk1.8.0_261\bin\javac.exe</code>或者<br><code>%JAVA_HOME%\bin\java</code><br>可以直接在任何路径下的命令行敲javac</p><h2 id="classpath"><a href="#classpath" class="headerlink" title="classpath"></a>classpath</h2><ol><li>默认情况下classpath只加载当前路径下的class文件</li><li>classpath给类加载器指定路径,让类加载器去指定路径下加载字节码</li><li>为了程序能找到相应的”.class”文件</li><li>classpath不区分大小写,如CLASSPATH</li><li>CLASSPATH配置:<code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code><h2 id="JAVA-HOME"><a href="#JAVA-HOME" class="headerlink" title="JAVA_HOME"></a>JAVA_HOME</h2></li><li>方便引用。<code>C:\Program Files\Java\jdk1.8.0_261</code>,设置JAVA_HOME为该目录路径, 那么以后你要使用这个路径的时候, 只需输入%JAVA_HOME%即可,避免每次引用都输入很长的路径串;</li><li>归一原则。即只需改一处</li><li>有些第三方软件例如Tomcat约定要用JAVA_HOME</li></ol><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="class文件"><a href="#class文件" class="headerlink" title="class文件"></a>class文件</h2><ol><li>一个java源文件可以定义多个class</li><li>源文件中只要有一个class定义，就会产生一个class文件</li><li>public类可以没有，但有则必须与源文件名保持一致，且只能有一个</li><li>每个类都能有自己的main方法</li></ol><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><ol><li>ASCII码用byte进行编码。计算机先编码，再解码，如果用的不是同一个编码方法，则乱码。 ‘a’ : 97，’A’ : 65， space : 32</li><li>GBK支持中文</li><li>Unicode支持全世界语言文字。具体实现有UTF-8</li><li>char可以存储一个汉字，采用Unicode编码，用单引号</li><li>计算机只存储二进制的补码</li></ol><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><ol><li>\为转义字符，在输出或者字符串中使用，\加特殊符号则转为普通符号，例如<code>\&quot;</code>等等</li><li>\u 后面跟16进制为输出对应的unicode码。例如<code>\u 4e2d</code>可以转为汉字”中”，（注意没有空格，只是因为typora也会转义)</li></ol><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ol><li>int型中，0x开头代表16进制,如:0xCAFE ，0b开头为二进制，例如int a=0b110,输出结果为6</li><li>一个字面量，默认当作int类型处理，后面加L则默认为long类型</li><li>自动类型转换： long b=200; 200字面量首先默认当作int型，但是自动转换为long。而long b=300L,300字面量默认当作long，赋值给b不存在类型转换。</li><li>long a=200_0000_0000会报错，因为后者默认先为int时，已经超出int，就报错了</li><li>大容量转小容量需要强制类型转换，有可能损失精度</li><li>byte中，当整数型不超过[-128,127]时，该字面量可以直接赋值给byte，不需要类型转换。<code>byte x=127; byte a = (byte)128;</code>short，char也是可以的。只有字面量可以这样转换，例如 <code>short s=a+x</code>则会报错：不兼容的类型：从int转换到short可能会有损失。</li><li><code>char ch=97</code>一个整数赋值给char类型变量能自动类型转换</li><li>byte，short，char混合运算，都会先转换为int再运算</li><li>多种数据类型混合运算，最终结果为“最大容量”类型</li><li>boolean类型不能转换</li><li>如果整数型字面量没有超过byte，short,char的取值范围，可以直接将其赋值给他们相应类型的变量</li><li>容量比较：byte&lt;short(char)&lt;int&lt;long&lt;float&lt;double  char比short代表更大的正整数</li><li><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2></li><li>float容量&gt;long容量 <code>3.4028235E38</code>与<code>9223372036854775807</code></li><li>所有浮点型默认当作double类型处理，要当作Float，后面加F</li></ol><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ol><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">byte</span> x<span class="token operator">=</span><span class="token number">100</span> x<span class="token operator">+=</span><span class="token number">1</span> <span class="token comment" spellcheck="true">//+=不会改变运算结果类型 </span> <span class="token comment" spellcheck="true">//x+=1   ====== x=(byte)(x+1)</span></code></pre></li><li><p>+两边只要有一边是字符串类型，拼接完就还是字符串。遵循从左到右的原则，例如<code>System.out.println(100+200+&quot;300&quot;);//300300</code></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2></li><li><p>方法重载：同一个类中，方法名相同，参数列表不同。只有返回值不同不能算方法重载</p></li><li><p>尽量不使用递归，消耗内存大</p></li><li><p>方法参数传递只有传值,引用对象也是.不过引用对象传递了地址值过去,所以修改能成功.引用被拷贝,指向的是原对象,所以仍能改变对象值</p></li></ol><h2 id="对象相关"><a href="#对象相关" class="headerlink" title="对象相关"></a>对象相关</h2><ol><li>在类加载时执行且只执行一次</li><li>一个类中可以写多个,代码块有先后顺序,自上而下执行</li><li>静态代码块与静态变量有先后顺序</li><li>此时其他非静态的还未创建</li><li>在构造方法执行之前,执行实例语句块</li><li>this为指向自己的引用.实例对象只有有引用才能访问.所以类中访问成员变量,方法时,省略了this。即age其实是this.age。即当前对象的成员变量age</li><li>this不能用于静态方法，因为静态方法调用不需要this</li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是引用数据类型,数组父类是Object,存储在堆中</p><p>数组元素首地址作为整个数组对象的地址</p><p>初始化数组有默认值,如:</p><p><code>String [] names=new String[6]</code>每个元素初始化为null</p><h1 id="继承多态"><a href="#继承多态" class="headerlink" title="继承多态"></a>继承多态</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h3><ol><li>只允许单继承</li><li>子类继承父类的所有除了构造方法，但是父类私有的属性无法在子类直接访问</li><li>都继承了Object</li><li>this是指向自己的引用</li><li>super不是引用，也不保存内存地址，也不指向一块对象，只是代表当前对象内部的那一块父类型的特征</li><li>this（），super（）都只能出现在构造方法第一行。为u的是创建子类对象时，先初始化父类的特征</li></ol><h3 id="方法覆盖"><a href="#方法覆盖" class="headerlink" title="方法覆盖"></a>方法覆盖</h3><ol><li><p>私有方法无法覆盖</p></li><li><p>构造方法不能被继承，所以也不能被覆盖</p></li><li><p>静态方法覆盖没有意义</p></li><li><p>方法名相同，参数相同，一般来说返回类型也相同。子类的返回值与父类相同或者是父类返回类型的子类型。</p></li><li><p>子类方法可以具有相同的访问权限或者子类的访问权限大于父类</p></li><li><p>子类方法不能比父类方法抛出更多的编译时异常（不是运行时异常），即子类方法抛出的编译时异常或者和父类相同或者是父类异常的子类。</p></li></ol><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="基础-2"><a href="#基础-2" class="headerlink" title="基础"></a>基础</h3><p>多态：编辑阶段是一种状态，运行阶段又是另外一种状态。父类引用指向子类对象</p><p>向上转型：子类转为父类。<br>        向下转型：父类转为子类，需要加强制类型转换符。</p><p>编译阶段属于静态绑定<br>        运行阶段属于动态绑定</p><h3 id="子类特有方法"><a href="#子类特有方法" class="headerlink" title="子类特有方法"></a>子类特有方法</h3><ol><li><code> Animal animal=new Cat();</code></li><li>编译阶段绑定父类的方法，运行阶段绑定子类对象的方法</li><li>只有编译通过的代码才能运行，所以直接使用子类的方法编译期间就通不过</li><li>编译期间只知道引用是父类型的变量</li><li>当一定需要使用子类特有的方法，则要向下转型</li><li>为避免ClassCastException异常，使用instanceof语法，可以在运行阶段动态判断引用指向的对象的类型。（引用 instanceof 类型） 结果为true/false</li></ol><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><ol><li>final修饰的变量只能赋一次值</li><li>引用也是变量,存内存地址.所以final修饰的引用只要指向了一个对象就永远指向那个变量</li><li>局部变量没有初始值,只能手动赋值</li><li>虽然实例变量如果没有手动赋值,系统会赋默认值。但是final修饰实例变量,内部实现让他必须要手动赋值。手动赋值可以在变量后面直接赋值，或者在构造器中赋值</li><li>实例对象用final修饰，说明该实例变量值不会随着对象的变化而变化，所以一般加static修饰变成常量</li><li>常量，静态变量存储在方法区中，在类加载时初始化</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程基础</title>
      <link href="posts/b9f6280b.html"/>
      <url>posts/b9f6280b.html</url>
      
        <content type="html"><![CDATA[<h1 id="线程基础"><a href="#线程基础" class="headerlink" title="线程基础"></a>线程基础</h1><h2 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h2><ul><li>根本区别：进程是操作系统资源分配的基本单位，而线程是处理器任务调度和执行的基本单位</li><li>资源开销：每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小。</li><li>内存分配：一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程都死掉。所以多进程要比多线程健壮。</li><li>进程：进程是程序的⼀次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行⼀个程序即是⼀个进程从创建，运行到消亡的过程。在 Java 中，当我们启动 main 函数时其实就是启动了⼀个 JVM 的进程，而 main 函数所在的线程就是这个进程中的⼀个线程，也称主线程。</li><li>线程：但线程是⼀个比进程更小的执行单位。⼀个进程在其执行的过程中可以产生多个线程，线程也被称为轻量级进程。多个线程共享进程的堆和方法区资源，但是每个线程有自己的程序计数器、虚拟机栈 和 本地方法栈。</li></ul><h2 id="线程切换时机"><a href="#线程切换时机" class="headerlink" title="线程切换时机"></a>线程切换时机</h2><ul><li>CPU时间片用完</li><li>垃圾回收</li><li>更高优先级线程运行</li><li>线程自己调用sleep，yield，wait，join，park，synchronized，lock</li></ul><h2 id="线程实现"><a href="#线程实现" class="headerlink" title="线程实现"></a>线程实现</h2><h3 id="内核线程实现"><a href="#内核线程实现" class="headerlink" title="内核线程实现"></a>内核线程实现</h3><ul><li>1：1实现</li><li>由内核完成线程切换</li><li>一般使用内核线程的高级接口-轻量级进程</li><li>即使其中某个轻量级进程在系统调用中被阻塞，也不会影响整个进程继续工作</li><li>缺点是轻量级进程要消耗一定的内核资源，线程操作需要系统调用</li><li>Java线程模型基于操作系统原生线程模型实现，即1：1线程模型</li><li>每一个Java线程都是直接映射到一个操作系统原生线程来实现，HotSpot不干涉线程调度，交给操作系统管理</li></ul><h3 id="用户线程实现"><a href="#用户线程实现" class="headerlink" title="用户线程实现"></a>用户线程实现</h3><ul><li>1：N实现</li><li>完全建立在用户空间的线程库上，系统内核不能感知用户线程的存在</li><li>完全由用户态完成，不需要切换到内核态</li><li>一般不支持用户线程</li></ul><h3 id="用户线程和轻量级进程混合实现"><a href="#用户线程和轻量级进程混合实现" class="headerlink" title="用户线程和轻量级进程混合实现"></a>用户线程和轻量级进程混合实现</h3><ul><li>N:M实现</li><li>用户线程还是完全建立在用户空间中，可以支持大规模的用户线程并发</li><li>操作系统支持的轻量级进程作为用户线程和内核线程之间的桥梁</li></ul><h2 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h2><h3 id="协同式"><a href="#协同式" class="headerlink" title="协同式"></a>协同式</h3><ul><li>执行时间由线程本身来控制，实现简单，切换操作对自己可知，没有线程同步问题</li><li>线程执行时间不可控制，如果坚持不让处理机，可能系统崩溃</li></ul><h3 id="抢占式"><a href="#抢占式" class="headerlink" title="抢占式"></a>抢占式</h3><ul><li>由系统分配执行时间，线程切换不受线程本身决定</li><li>线程执行时间可控</li><li>线程调度虽然是系统自动完成，但可以设置线程优先级来建议操作系统</li><li>线程优先级不稳定，因为java线程是被映射到系统的原生线程上来实现的，可能某些操作系统实际优先级与java的不能一一对应，优先级还可能被系统自行改变</li></ul><h1 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h1><p>从原理上看两种方法本质上是一样的</p><p>将该Runnable传递给Thread的target成员变量，最终调用target.run()方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Runnable target<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        target<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h2><p>run（）方法整个被重写</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//继承Thread类实现多线程</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>， <span class="token string">"thread1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="实现Runnable-接口"><a href="#实现Runnable-接口" class="headerlink" title="实现Runnable()接口"></a>实现Runnable()接口</h2><ul><li>代码架构角度：代表一个任务，和线程进行区分，解耦</li><li>节约资源：新建线程的损耗大，反复利用同一个线程</li><li>扩展性，Java不允许多继承，如果继承Thread类，就不能多继承了</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//覆写Runnable()接口实现多线程</span>Runnable runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable，<span class="token string">"thread2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="外在包装"><a href="#外在包装" class="headerlink" title="外在包装"></a>外在包装</h2><p>本质上都是新建Thread类</p><h3 id="通过线程池启动多线程"><a href="#通过线程池启动多线程" class="headerlink" title="通过线程池启动多线程"></a>通过线程池启动多线程</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//通过线程池启动多线程</span><span class="token comment" spellcheck="true">//创建线程池</span>ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行</span>executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭连接</span>executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="覆写Callable接口实现多线程"><a href="#覆写Callable接口实现多线程" class="headerlink" title="覆写Callable接口实现多线程"></a>覆写Callable接口实现多线程</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//覆写Callable接口实现多线程</span>FutureTask<span class="token operator">&lt;</span>Integer<span class="token operator">></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task，<span class="token string">"thread3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一直阻塞直到结果返回</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以用于延迟计算，如执行数据库查询</p><p>它认为主入口点（call)将返回一个值，并可能抛出一个异常</p><p><strong>与Runnable的区别</strong></p><p>Runnable没有返回值；Callable可以返回执行结果，是个泛型，和Future、FutureTask配合可以用来获取异步执行的结果</p><p>Callalble接口支持返回执行结果，需要调用FutureTask.get()得到，此方法会阻塞主进程的继续往下执行，如果不调用不会阻塞。</p><p>Callable接口的call()方法允许抛出异常；Runnable的run()方法异常只能在内部消化，不能往上继续抛</p><p><strong>Future</strong></p><p>表示一个任务的生命周期，并提供了相应的方法来判断是否已经完成或取消，以及获取任务的结果和取消任务等</p><p>get：如果任务已完成，get立即返回或抛异常，未完成，则阻塞直到任务完成</p><p><strong>FutureTask</strong></p><p>实现了Runnable，可以将他提交给Executor来执行</p><h1 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h1><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><ul><li>启动新线程</li><li>处于就绪(可运行)状态</li><li>并没有运行，一旦得到cpu时间片，就开始执行run()方法</li><li>不能重复执行start()方法，抛出异常：IllegalThreadStateException</li><li>Run方法运行结束，此线程随即终止。</li></ul><h2 id="run"><a href="#run" class="headerlink" title="run"></a>run</h2><p>run()方法只是类的一个普通方法而已，如果直接调用Run方法，程序中依然只有主线程这一个线程，其程序执行路径还是只有一条，还是要顺序执行，还是要等待run方法体执行完毕后才可继续执行下面的代码，这样就没有达到写线程的目的。</p><p>调用start方法方可启动线程，而run方法只是thread的一个普通方法调用，还是在主线程里执行。这两个方法应该都比较熟悉，把需要并行处理的代码放在run()方法中，start()方法启动线程将自动调用 run()方法，这是由jvm的内存机制规定的。并且run()方法必须是public访问权限，返回值类型为void。</p><h1 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>使用interrupt来通知，而不是强制</li><li>被中断的线程拥有如何响应中断的权利，必须等待线程处理完之后主动中止，所以不应该莽撞的使用stop方法</li><li>线程就算是sleep状态，也会响应interrupt</li><li>想停止线程，要请求方、被停止方、子方法被调用方相互配合</li></ul><h2 id="情况"><a href="#情况" class="headerlink" title="情况"></a>情况</h2><h3 id="run（）内没有sleep或wait方法时，停止线程"><a href="#run（）内没有sleep或wait方法时，停止线程" class="headerlink" title="run（）内没有sleep或wait方法时，停止线程"></a>run（）内没有sleep或wait方法时，停止线程</h3><p>如果不检测线程状态isInterrupted()，则调用thread.interrupt();没有任何影响</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException， InterruptedException <span class="token punctuation">{</span>    Runnable runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要检测是否被中断，并且响应</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello + "</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被中断了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行结束了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="在线程sleep期间interrupt"><a href="#在线程sleep期间interrupt" class="headerlink" title="在线程sleep期间interrupt"></a>在线程sleep期间interrupt</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException， InterruptedException <span class="token punctuation">{</span>    Runnable runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要检测是否被中断，并且响应</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello + "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//控制不住，因为调用后中断标志被清除了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被中断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果在sleep时中断，就会抛出该异常，所以就可以在catch中处理</span>            <span class="token comment" spellcheck="true">//该循环会继续工作，因为catch后就执行下一轮循环</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//sleep interrupted</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行结束了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//控制interrupt时线程正在sleep</span>    TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>会抛出异常：InterruptedException（sleep interrupted）</p><p>会继续执行，不会中断：interrupt中断标记被清除，而且是循环，try-catch后会继续执行下一个循环</p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>不应屏蔽中断请求</p><h3 id="优先选择：传递异常"><a href="#优先选择：传递异常" class="headerlink" title="优先选择：传递异常"></a>优先选择：传递异常</h3><p><strong>反面教材：在try-catch中处理</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    catch了InterruptedException后优先选择在方法签名中抛出异常     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"业务逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">throwInMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果子方法使用try-catch，则下面不会有效果</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"break"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//线程使用</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//最佳是抛出异常到方法签名</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">throwInMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果用这样，则中断的时候会e.printStackTrace();但是会继续运行</span>        <span class="token comment" spellcheck="true">//因为该方法不是run()方法，是底层被run()调用的方法，就导致没能响应中断，run的while循环仍然执行</span>        <span class="token comment" spellcheck="true">//相当于把中断给吞掉了</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="推荐：抛出异常到方法签名"><a href="#推荐：抛出异常到方法签名" class="headerlink" title="推荐：抛出异常到方法签名"></a>推荐：抛出异常到方法签名</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    catch了InterruptedException后优先选择在方法签名中抛出异常     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"业务逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//run方法不能抛出异常，因为顶层的run方法没有异常，子类自然不能有</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">throwInMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//线程使用</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//最佳是抛出异常到方法签名</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">throwInMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="不想或者无法传递：恢复中断"><a href="#不想或者无法传递：恢复中断" class="headerlink" title="不想或者无法传递：恢复中断"></a>不想或者无法传递：恢复中断</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"业务逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">throwInMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//因为重新设置了中断状态，所以是有效的</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"break"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//线程使用</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">throwInMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//恢复设置中断状态，以便于在后续执行时，仍然能够检查到刚刚发生了中断</span>            Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="错误的停止方法"><a href="#错误的停止方法" class="headerlink" title="错误的停止方法"></a>错误的停止方法</h2><h3 id="被弃用的stop、resume方法等"><a href="#被弃用的stop、resume方法等" class="headerlink" title="被弃用的stop、resume方法等"></a>被弃用的stop、resume方法等</h3><p>会导致线程运行一半突然停止，没办法完成一个基本单位的操作</p><p>资源分配戛然而止，银行批量转账10个人，只转了8个人，很难排查错误</p><h3 id="用volatile设置boolean标记位"><a href="#用volatile设置boolean标记位" class="headerlink" title="用volatile设置boolean标记位"></a>用volatile设置boolean标记位</h3><p>这样陷入阻塞时，就不会有人去唤醒他，他就不会执行到判断volatile那个变量的标志位的代码，就会一直等待</p><h2 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h2><h3 id="void-interrupt"><a href="#void-interrupt" class="headerlink" title="void interrupt()"></a>void interrupt()</h3><p>设置interrupted</p><p>如果被打断线程正在 sleep，wait，join 会导致被打断的线程抛出 InterruptedException，并且打断标记还是false。但是对于正常进程被打断打断标记是true</p><h3 id="static-boolean-interrupted"><a href="#static-boolean-interrupted" class="headerlink" title="static boolean interrupted()"></a>static boolean interrupted()</h3><p>目标对象为当前线程</p><p>清除当前线程的中断状态，并返回他之前的值</p><p>判断是否被打断，并且清除打断标记(设为false)</p><p>由于会清除当前线程的中断状态，如果调用他时返回true，那么除非你想屏蔽这个中断，否则必须对他进行处理。可以抛出InterruptedException，或再调用interrupt来恢复中断状态</p><h3 id="boolean-isInterrupted"><a href="#boolean-isInterrupted" class="headerlink" title="boolean isInterrupted()"></a>boolean isInterrupted()</h3><p>判断是否被打断，不会清除打断标记</p><p>返回目标线程的中断状态</p><h1 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h1><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/_CopyPix_1611884091_1.png" alt="img"></p><ul><li>NEW：初始状态，线程被构建，但是没有调用start()</li><li>RUNNABLE：运行状态，将操作系统的就绪和运行状态统称为RUNNABLE；有可能正在运行，也有可能等待CPU资源</li><li>BLOCKED：阻塞状态，线程阻塞与锁；在程序等待进入同步区域时，将进入这种状态；在等待一个排它锁，该事件在另外一个线程放弃这个锁时发生；只有Synchronized修饰的，而且没有拿到锁，才是BLOCKED状态，其他锁不算</li><li>WAITING：无限期等待状态，当前线程需要等待其他线程通知或中断；没有设置Timeout的Object::wait()；没有设置Timeout的Thread::join()；LockSupport::park()</li><li>TIME_WAITING：超时等待状态，可以在指定的时间自行返回；Thread::sleep()；设置Timeout的Object::wait()；设置Timeout的Thread::join()；LockSupport::parkUntil()</li><li>TERMINATED：终止状态，当前线程已经执行完毕</li></ul><h2 id="代码查看状态"><a href="#代码查看状态" class="headerlink" title="代码查看状态"></a>代码查看状态</h2><h4 id="NEW、RUNNABLE、TERMINATED"><a href="#NEW、RUNNABLE、TERMINATED" class="headerlink" title="NEW、RUNNABLE、TERMINATED"></a>NEW、RUNNABLE、TERMINATED</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NEW</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//RUNNABLE</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//TERMINATED</span>    <span class="token punctuation">}</span></code></pre><h3 id="WAITING、BLOCKED、TIMED-WAITING"><a href="#WAITING、BLOCKED、TIMED-WAITING" class="headerlink" title="WAITING、BLOCKED、TIMED_WAITING"></a>WAITING、BLOCKED、TIMED_WAITING</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">syn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">syn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread1<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//TIMED_WAITING</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread2<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//BLOCKED</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread1<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//WAITING</span>    <span class="token punctuation">}</span></code></pre><h1 id="Object相关方法"><a href="#Object相关方法" class="headerlink" title="Object相关方法"></a>Object相关方法</h1><ul><li><p>wait、notify、notifyAll定义在Object中，因为是锁级别的</p></li><li><p>wait需要在同步代码块内使用</p></li><li><p>wait()的作用是让当前线程进入等待状态，同时，wait()也会让当前线程释放它所持有的锁。“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法”，当前线程被唤醒(进入“就绪状态”)</p></li><li><p>wait(long timeout)让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的notify()方法或 notifyAll() 方法，或者超过指定的时间量”，当前线程被唤醒(进入“就绪状态”)。</p></li><li><p>因为wait需释放锁，所以必须在synchronized中使用（没有锁定则么可以释放？没有锁时使用会抛出IllegalMonitorStateException（正在等待的对象没有锁））</p></li><li><p>notify()和notifyAll()的作用，则是唤醒当前对象上的等待线程；notify()是唤醒单个线程，而notifyAll()是唤醒所有的线程</p></li><li><p>notify也要在synchronized使用，应该指定对象，t1.notify()，通知t1对象的等待池里的线程使一个线程进入锁定池，然后与锁定池中的线程争夺锁。那么为什么要在synchronized使用呢？ t1.notify()需要通知一个等待池中的线程，那么这时我们必须得获得t1的监视器（需要使用synchronized），才能对其操作，t1.notify()程序只是知道要对t1操作，但是是否可以操作与是否可以获得t1锁关联的监视器有关。</p></li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>使用wait必须先拥有monitor</li><li>使用notify只会唤醒一个，而且取决于JVM</li><li>任何对象都拥有这些方法</li></ul><h2 id="唤醒时机"><a href="#唤醒时机" class="headerlink" title="唤醒时机"></a>唤醒时机</h2><ul><li>notify()本线程</li><li>notifyAll()</li><li>wait(long timeout)超时时间达到</li><li>线程自身调用interrupt()</li></ul><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*Thread-0线程开始执行！Thread-1线程开始执行！线程Thread-1获取到了锁！线程Thread-0获取到了锁！ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Object object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Thread1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"线程开始执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    object<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"获取到了锁！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Thread2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"线程开始执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                object<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"获取到了锁！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread1 thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread2 thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*Thread-1获取到锁Thread-0获取到锁线程3唤醒Thread-0执行结束Thread-1执行结束 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Object object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"获取到锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    object<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>                object<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                object.notify();//只能唤醒一个</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程3唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="线程属性"><a href="#线程属性" class="headerlink" title="线程属性"></a>线程属性</h1><ul><li>线程Id</li><li>线程名称</li><li>isDaemon(true代表是守护线程）<ul><li>是给用户线程提供服务的</li><li>默认情况下，Java进程会等待所有线程都运行结束，才会结束</li><li>守护进程，如果所有非守护进程结束，守护进程也都结束了(垃圾回收器)</li><li>如后台记录操作日志，监控内存，垃圾回收</li><li>thread1.setDaemon(true);</li></ul></li><li>priority（优先级）<ul><li>10个优先级，默认是5</li><li>优先级高度依赖于操作系统的优先级，Java映射过去的</li><li>优先级会被操作系统改变</li></ul></li></ul><h1 id="Thread方法"><a href="#Thread方法" class="headerlink" title="Thread方法"></a>Thread方法</h1><h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h2><ul><li>让当前执行的线程休眠n毫秒， 休眠时让出 cpu 的时间片给其它线程</li><li>可以调用interrupt()方法唤醒，但是会抛出异常：InterruptedException，并且会清除中断状态</li><li>不释放锁，规定时间后继续执行</li></ul><h2 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h2><ul><li>等待线程运行结束，可以控制线程的同步</li><li>因为新的线程加入了我们，所以我们要等他执行完再出发</li><li>main等待thread1执行完毕</li><li>源码调用wait()一直休眠，但每一个线程在执行完run()都会执行notifyAll()</li><li>此时主线程在waiting状态</li></ul><h3 id="简单使用-1"><a href="#简单使用-1" class="headerlink" title="简单使用"></a>简单使用</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*开始等待所有子线程执行Thread-0执行Thread-1执行所有子线程执行完毕 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始等待所有子线程执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有子线程执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始等待所有子线程执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        thread.join();</span>        <span class="token comment" spellcheck="true">//等价于以下语句：</span>        <span class="token comment" spellcheck="true">/*        主线程执行到下面语句，会阻塞，直到thread线程执行完，隐式的调用了notifyAll()           */</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">{</span>            thread<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有子线程执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="yield"><a href="#yield" class="headerlink" title="yield()"></a>yield()</h2><ul><li>提示线程调度器 让出当前线程对CPU的使用，具体要看操作系统实现</li><li>让当前的线程暂停，但是不阻塞，从运行状态变为就绪状态</li><li>让CPU重新调度，但是不能决定CPU</li><li>不会释放锁</li><li>为了稳定性，实际开发不使用，但是很多并发包使用</li></ul><h2 id="currentThread"><a href="#currentThread" class="headerlink" title="currentThread()"></a>currentThread()</h2><p>获取当前执行线程的引用</p><h1 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h1><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/image-20210204082438815.png" alt="image-20210204082438815"></p><h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><h2 id="线程安全的定义"><a href="#线程安全的定义" class="headerlink" title="线程安全的定义"></a>线程安全的定义</h2><ul><li>讨论的线程安全，以多个线程之间存在共享数据访问为前提</li><li>当多个线程同时访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果</li><li>代码本身封装了所有必要的正确性保障手段（如互斥同步等），令调用者无需关心多线程下的调用问题，更无须自己实现任何措施来保证多线程环境下的正确调用</li><li>通常将定义弱化，把调用这个对象的行为限定为单次调用</li><li>编写业务逻辑时不需要做额外的处理程序就能正常执行</li></ul><h2 id="竟态条件"><a href="#竟态条件" class="headerlink" title="竟态条件"></a>竟态条件</h2><ul><li>当某个计算的正确性取决于多个线程的交替执行时序时，就会发生竟态条件。</li><li>最常见的就是“先检查后执行”操作，即通过一个可能失效的观测结果来决定下一步的动作。</li><li>竟态条件不是总会发生错误，还需要某种不恰当的执行时序</li><li>要避免竟态条件，就必须在某个线程修改该变量时，通过某种方式防止其他线程使用这个变量，从而确保其他线程只能在修改操作完成之前或之后读取和修改状态，而不是在修改状态的过程中</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="不变性"><a href="#不变性" class="headerlink" title="不变性"></a>不变性</h3><ul><li>只要一个不可变对象被正确的创建出来了（没有发生this引用逃逸），那其外部的可见状态让永远不会改变，永远不会看到他在多个线程之中处于不一致的状态。</li><li>不可变对象一定是线程安全的</li><li>不可变条件<ul><li>对象创建后其状态不能改变</li><li>对象的所有域都是final的</li><li>对象是正确创建的(this引用没有逸出)</li></ul></li><li>基本数据类型，只要定义时使用final修饰就可以保证不可变</li><li>对象<ul><li>需要对象自行保证其行为不会对其状态产生任何影响</li><li>如String对象实例，是典型的不可变对象</li><li>保证对象行为不影响自己状态，最简单的就是把对象里面的带有状态的变量声明为final</li><li>在构造函数后，就是不可变的</li><li>Integer不可变：private final int value;</li></ul></li></ul><h3 id="绝对线程安全"><a href="#绝对线程安全" class="headerlink" title="绝对线程安全"></a>绝对线程安全</h3><ul><li>Java API标注是线程安全的，基本都不是绝对线程安全</li><li>例如Vector由synchronized修饰，保证了原子性，可见性，有序性。但复合操作仍然不是线程安全的，需要另外添加synchronized修饰</li></ul><h3 id="相对线程安全"><a href="#相对线程安全" class="headerlink" title="相对线程安全"></a>相对线程安全</h3><ul><li>保证该对象单次操作是线程安全的</li><li>连续调用则需要使用额外的同步手段确保调用的正确性</li></ul><h3 id="线程兼容"><a href="#线程兼容" class="headerlink" title="线程兼容"></a>线程兼容</h3><ul><li>通常意义上的线程不安全类</li><li>如HashMap</li></ul><h3 id="线程对立"><a href="#线程对立" class="headerlink" title="线程对立"></a>线程对立</h3><ul><li>无法在多线程环境中并发使用代码</li><li>通常是有害的，应尽量避免</li></ul><h2 id="活跃性问题（死锁）"><a href="#活跃性问题（死锁）" class="headerlink" title="活跃性问题（死锁）"></a>活跃性问题（死锁）</h2><p>两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String lockA <span class="token operator">=</span> <span class="token string">"lockA"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String lockB <span class="token operator">=</span> <span class="token string">"lockB"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getLock</span><span class="token punctuation">(</span>String first<span class="token punctuation">,</span> String second<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"尝试获取锁:"</span><span class="token operator">+</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"尝试获取锁:"</span><span class="token operator">+</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>second<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"获取两个锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockA<span class="token punctuation">,</span>lockB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"thread1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockB<span class="token punctuation">,</span>lockA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"thread2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="在构造函数中未初始化完毕就this赋值"><a href="#在构造函数中未初始化完毕就this赋值" class="headerlink" title="在构造函数中未初始化完毕就this赋值"></a>在构造函数中未初始化完毕就this赋值</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Point point<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span>， <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>point <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Point{x=1， y=0}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> x， y<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x， <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>        MainTest<span class="token punctuation">.</span>point <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Point{"</span> <span class="token operator">+</span>                <span class="token string">"x="</span> <span class="token operator">+</span> x <span class="token operator">+</span>                <span class="token string">"， y="</span> <span class="token operator">+</span> y <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生命周期 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> interrupt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JMM与Volatile</title>
      <link href="posts/d01af2da.html"/>
      <url>posts/d01af2da.html</url>
      
        <content type="html"><![CDATA[<h1 id="为什么需要JMM"><a href="#为什么需要JMM" class="headerlink" title="为什么需要JMM"></a>为什么需要JMM</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>缺少同步，一个线程无法看到变量的最新值<ul><li>在编译器中生成的指令顺序，可以与源代码中的顺序不同，指令重排优化</li><li>编译器会把变量保存在寄存器而不是内存中，成熟的全局寄存器分配算法</li><li>保存在处理器本地缓存中的值，对于其他处理器是不可见的</li></ul></li><li>单线程环境，只要程序的最终结果与严格串行环境中的执行结果相同，上述所有操作都是允许的，除了提高程序执行速度外，不会产生其他影响</li><li>多线程环境，只有当多个线程要共享数据时，才必须协调他们之间的操作</li><li>计算机的存储设备与处理器的运算速度有几个数量级的差距，现代计算机加入多层高速缓存。他带来了缓存一致性问题<ul><li>共享内存多核系统：即每个处理器都有自己的高速缓存，而他们又共享同一主内存</li><li>当多个处理器的运算任务都涉及同一块内存区域时，将可能导致各自的缓存数据不一致</li><li>解决一致性问题，各个处理器访问缓存时要遵循一些协议，如MSI，MESI</li></ul></li><li>处理器可能会对输入代码进行乱序执行优化<ul><li>处理器会在计算之后将乱序执行的结果重组，保证改结果与顺序执行的结果是一致的<ul><li>如果存在一个计算任务依赖另外一个计算任务的中间结果，那么其顺序性不能靠代码的先后顺序来保证</li></ul></li><li>Java虚拟机的即时编译器也有指令重排序优化</li></ul></li></ul><h2 id="平台内存模型"><a href="#平台内存模型" class="headerlink" title="平台内存模型"></a>平台内存模型</h2><ul><li>共享内存的对处理器体系结构<ul><li>每个处理器有自己的缓存</li><li>定期与主内存进行协调</li><li>提供不同级别的缓存一致性，最小保证是允许不同的处理器在任意时刻从同一个存储位置上看到不同的值</li></ul></li><li>放宽存储一致性保证<ul><li>不需要在任意时刻知道其他处理器正在进行的工作</li><li>定义特殊指令（内存屏障），当需要共享数据时，这些指令能实现额外的存储协调保证</li><li>JVM通过在恰当位置插入内存屏障来屏蔽JMM和底层平台内存模型的差异</li><li>当跨线程共享数据时，需要通过内存屏障防止出现数据不一致情况</li></ul></li><li>串行一致性<ul><li>任何现代多处理器架构都不保证</li><li>想象在程序中只存在唯一的操作执行顺序，而不考虑这些操作在何种处理器上执行，并且每次读取变量时，都能获取在执行序列中最近一次写入该变量的值</li></ul></li><li>重排序<ul><li>如果每个线程中的各个操作之间不存在数据流依赖性，那么这些操作可以乱序执行</li></ul></li></ul><h1 id="JMM理解"><a href="#JMM理解" class="headerlink" title="JMM理解"></a>JMM理解</h1><p><img src="https://tongji2021.oss-cn-shanghai.aliyuncs.com/img/v2-af520d543f0f4f205f822ec3b151ad46_1440w.jpg"></p><ul><li>JMM是一组规范，规定了JVM必须遵循一组最小保证，这组保证规定了对变量的写入操作在何时将对于其他线程可见</li><li>所有变量都存储在主内存中，主内存是共享内存区域，所有线程都可以访问。主内存直接对应与物理硬件的内存</li><li>每个线程都有自己的工作内存<ul><li>每个线程创建时JVM都会为其创建一个工作内存(栈空间)，工作内存是每个线程的私有数据结构</li><li>工作内存优先存储与寄存器和高速缓存中</li><li>各个线程中的工作内存都存储着主内存中的变量副本拷贝 </li><li>但线程对变量的所有操作必须在工作内存中进行，而不能直接读取主内存中的数据。</li><li>不同线程不能访问其他线程的工作内存。线程间变量值的传递需要通过主内存来完成</li><li>线程首先要将变量从主内存拷贝到自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写回主内存</li></ul></li></ul><h1 id="JMM主要内容"><a href="#JMM主要内容" class="headerlink" title="JMM主要内容"></a>JMM主要内容</h1><h2 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h2><p>好处：提高处理速度</p><p>三种情况：编译器优化、CPU指令重排、内存重排序</p><h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><p>默认的原子性操作</p><p>除long、double之外的基本类型</p><p>所有引用的reference的赋值操作</p><p>Atomic包中所有类</p><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><ul><li>保证此变量对所有线程的可见性</li><li>当一条线程修改了这个变量的值，新值对于其他线程是立即得知的</li><li>普通变量不能保证立即可见，普通变量的值在线程间传递时需要通过主内存完成。只有A线程修改该值，向主内存回写，B线程在A回写完成后再对主内存读取，新变量值才对线程B可见</li><li>synchronized可见性：对一个变量unlock前，必须先把变量同步回主内存中</li><li>final可见性：被final修饰的字段在构造器初始化完成后，并且没有把this引用传递出去，那么在其他线程中就能看到final字段的值</li></ul><h2 id="关于同步的规定"><a href="#关于同步的规定" class="headerlink" title="关于同步的规定"></a>关于同步的规定</h2><ul><li>线程解锁前，必须把共享变量的值刷新回主内存</li><li>线程加锁前，必须读取主内存的最新值到自己的工作内存</li><li>加解锁是同一把锁</li></ul><h2 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h2><ul><li>如果在指令间插入一条<code>Memory Barrier</code>，则不管什么指令都不能和该指令重排序。也就是说通过内存屏障禁止在内存屏障前后的指令执行重排序优化。</li><li>而且会强制刷出各种CPU缓存数据，因此所有线程都能读取到这些数据的最新版本</li></ul><h1 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h1><p>普通对象:</p><ul><li>markword，8字节 记录了锁信息<ul><li>存储自身的运行时数据，如HashCode，GC分代年龄</li><li>占用64比特，根据对象的状态复用自己的存储空间</li></ul></li><li>class pointer 存储指向方法区对象类型数据的指针，属于哪个类 压缩后4字节</li><li>数组对象还有一个额外的部分存储数组长度</li><li></li><li>instance data 对象里面的实例数据  压缩后每个4字节</li><li>padding补成8字节的整数倍</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//8字节markword，4字节class pointer，4字节补充 一共16字节</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ClassLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre><code>java.lang.Object object internals: OFFSET  SIZE   TYPE DESCRIPTION                               VALUE      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)      8     4        (object header)                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)     12     4        (loss due to the next object alignment)Instance size: 16 bytesSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total</code></pre><h2 id="压缩指针"><a href="#压缩指针" class="headerlink" title="压缩指针"></a>压缩指针</h2><ul><li>默认64位操作系统应该是八个字节，但是使用压缩指针<code>UseCompressedClassPointers</code>，<code>class pointer</code>只占了4字节</li><li><code>UseCompressedOops</code>，使得对象指针也是压缩的</li></ul><pre><code>C:\code_home\JUC&gt;java -XX:+PrintCommandLineFlags -version-XX:InitialHeapSize=265782080 -XX:MaxHeapSize=4252513280 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGCjava version &quot;1.8.0_261&quot;Java(TM) SE Runtime Environment (build 1.8.0_261-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.261-b12， mixed mode)</code></pre><h1 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h1><ul><li>是java虚拟机提供的轻量级的同步机制</li><li>volatile变量读操作的性能消耗与普通变量没区别</li><li>写操作需要在本地代码中插入许多内存屏障来保证处理器不发生乱序执行</li><li>总开销比锁低，使用场景符合要求则优先用volatile</li><li>三个保证<ul><li>在工作内存中，每次使用V之前都必须先从主内存刷新最新的值，用于保证能看见其他线程对变量V所作的修改</li><li>在工作内存中，每次修改V后都必须立刻同步回主内存中，用于保证其他线程可以看到自己对变量V所做的修改</li><li>volatile修饰的变量不会被指令重排序优化，保证代码的执行顺序与程序的顺序相同</li></ul></li></ul><h2 id="可见性-1"><a href="#可见性-1" class="headerlink" title="可见性"></a>可见性</h2><p>我们不仅希望防止某个线程正在使用对象状态而另外一个线程在同时修改该状态，而且希望确保当一个状态修改了对象状态后，其他线程能够看到发生的状态变化。</p><p>加锁的含义不仅仅局限于互斥行为，还包括了内存可见性，即确保某个线程写入该变量的值对于其他线程来说都是可见的。</p><p>没有可见性我们就无法确保执行读操作的线程能适时地看到其他线程写入的值</p><ul><li>对volatile变量执行写操作时，会在写操作后加入一条store写屏障指令，强制将缓存刷新到主内存中</li><li>对volatile变量执行读操作时，会在读操作前加入一条load读屏障指令，强制使缓冲区缓存失效，所以会从主内存读取最新值。</li><li>防止指令重排序。</li></ul><p>volatile变量在每次被线程访问时，都强迫从主内存中重读该变量的值，而当该变量发生变化时，又会强迫线程将最新的值刷新到主内存。这样在任何时刻，不同的线程总能看到该变量的最新值。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tongji<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyData</span><span class="token punctuation">{</span>    <span class="token keyword">volatile</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        number <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyData myData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            myData<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">": "</span><span class="token operator">+</span>myData<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>，<span class="token string">"thread1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//main线程</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>myData<span class="token punctuation">.</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//一直等待</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">": "</span><span class="token operator">+</span>myData<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        加了volatile才有，不加则一直死循环:            thread1            thread1: 60            main: 60         */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="不保证原子性"><a href="#不保证原子性" class="headerlink" title="不保证原子性"></a>不保证原子性</h2><h3 id="不需要加锁就能保证原子性的情况"><a href="#不需要加锁就能保证原子性的情况" class="headerlink" title="不需要加锁就能保证原子性的情况"></a>不需要加锁就能保证原子性的情况</h3><p>运算结果并不依赖与变量的当前值，或者能保证只有单一的线程修改变量的值</p><p>变量不需要与其他的状态变量共同参与不变约束</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> shutdownRequested<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//不依赖与变量的当前值</span>        shutdownRequested <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>shutdownRequested<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//业务逻辑</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>虽然volatile变量在各个线程的工作内存中不存在一致性问题，但Java里面的运算操作符不是原子操作，依然并发不安全</p><p>例如一条race++ 指令，由四条字节码指令构成，当<code>getstatic</code>指令把race的值取到操作栈顶时，<code>volatile</code>关键字保证此时race的值的正确性，但是在执行接下来的指令的时候，其他线程可能已经将race的值改变了，而操作栈顶的值就变成了过期的数据，所以putstatic指令执行后就可能将较小的race值同步回主内存中</p><p><code>number++</code>对应的字节码：</p><ul><li>getfield</li><li>iconst_1</li><li>iadd</li><li>putfield</li></ul><p>包含三个操作:</p><ul><li>读取value</li><li>将value+1</li><li>并将计算结果写入value</li></ul><p>假设两个线程A，B同时执行到<code>iadd</code>，要写回的值是2，然后A执行<code>putfield</code>操作，虽然保证了可见性，也就是其他线程此时如果读取该number值，是正确的。但是B此时不需要读取了，他只需要把值写回主内存，即B的操作栈顶的值是过期的数据。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tongji<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyData</span><span class="token punctuation">{</span>    <span class="token keyword">volatile</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        number<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyData myData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Runnable runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    myData<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使当前线程从执行状态（运行状态）变为可执行态（就绪状态）.cpu会从众多的可执行态里选择，</span>            <span class="token comment" spellcheck="true">// 当前也就是刚刚的那个线程还是有可能会被再次执行到的，并不是说一定会执行其他线程而该线程在下一次中不会执行到了。</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//18801</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myData<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用<code>AtomicInteger</code>来解决</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Runnable runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    atomicInteger<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使当前线程从执行状态（运行状态）变为可执行态（就绪状态）.cpu会从众多的可执行态里选择，</span>            <span class="token comment" spellcheck="true">// 当前也就是刚刚的那个线程还是有可能会被再次执行到的，并不是说一定会执行其他线程而该线程在下一次中不会执行到了。</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//18801</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="禁止指令重排"><a href="#禁止指令重排" class="headerlink" title="禁止指令重排"></a>禁止指令重排</h2><p>保证变量赋值操作的顺序与程序代码中的执行顺序一致</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//该例子不好，后续换一个</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    由于指令重排，可能导致执行顺序是:    flag = true;    a = 1;    而多线程环境下，就会导致错误的情况     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="配置读取并发"><a href="#配置读取并发" class="headerlink" title="配置读取并发"></a>配置读取并发</h3><p>如果定义initialized变量没有使用volatile变量修饰，可能由于指令重排序优化，导致线程A的最后一行代码“initialized = true;”被提前执行。这样在线程B中使用配置信息的代码就可能出现错误</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> initialized <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//假设以下代码在线程A中执行</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//读取配置信息，进行初始化等</span>        <span class="token comment" spellcheck="true">//当配置完成时，通知其他线程配置可用</span>        initialized <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//假设以下代码在线程B中执行</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//等待initialized = true，代表线程A已经把配置信息初始化完成</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>initialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//使用线程A中已初始化的配置信息</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="应用：单例模式"><a href="#应用：单例模式" class="headerlink" title="应用：单例模式"></a>应用：单例模式</h2><h3 id="不安全的延迟初始化"><a href="#不安全的延迟初始化" class="headerlink" title="不安全的延迟初始化"></a>不安全的延迟初始化</h3><p>将对象的初始化操作推迟到实际被使用时才进行，同时要确保只被初始化一次</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyInitRace</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ExpensiveObject instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> ExpensiveObject <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpensiveObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果线程A、线程B同时执行<code>getInstance()</code>，可能会同时进入循环<code>if (instance == null) {}</code>里，则会创建两个实例</p><p>如果用于初始化注册表，可能就会丢失部分注册信息，或者多个行为对同一组注册对象变现出不一致的视图</p><h3 id="双重检测机制"><a href="#双重检测机制" class="headerlink" title="双重检测机制"></a>双重检测机制</h3><p>有volatile修饰，则赋值后多执行了一个lock 操作，即内存屏障。lock作用是将本处理器的缓存写入内存中，而且引发别的内核无效后其缓存，通过这样一个空操作，可让前面volatile变量的修改对其他处理器立即可见。在同一个处理器中，重排序过的代码看起来仍然是有序的，因此lock指令把修改同步到内存时，意味着所有之前的操作已经执行完成。所以指令重排序无法越过内存屏障</p><p>重排序时不能把后面的指令重排序到内存配置之前的位置</p><p>只有一个处理器访问内存时，不需要内存配置，但是有多个处理器访问同一块内存，且其中一个在观测另一个，就需要内存屏障来保证一致性</p><p>用volatile来防止指令重排序：新建对象有三个步骤，可能进行了指令重排序，即先提供了对象引用，然而此时的对象可能没成功的构建，让其他的线程拿到了一个空引用，之后就出现NPE</p><ul><li>构建对象：首先main线程会在栈中申请一个自己的栈空间，然后调用main方法后会生成一个main方法的栈帧。然后执行new Person() ，这里会根据Person类元信息先确定对象的大小，向JVM堆中申请一块内存区域并构建对象，同时对Person对象成员变量信息并赋默认值。</li><li>初始化对象：然后执行对象内部生成的init方法，初始化成员变量值，同时执行搜集到的{}代码块逻辑，最后执行对象构造方法</li><li>引用对象：对象实例化完毕后，再把栈中的Person对象引用地址指向Person对象在堆内存中的地址。</li></ul><p>用volatile保证可见性：赋值时可能其他线程看不见，又重新赋值了一遍</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//必须要加 volatile !!</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> MainTest instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">MainTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//DCL (Double Check Lock 双重检测机制)</span>    <span class="token comment" spellcheck="true">/*    没加volatile:出现几率很小，但是还是有可能的    因为指令重排的问题:    instance = new MainTest();分为三步完成:    memory=allocate(); //分配对象内存空间    instance(memory); //初始化对象    instance=memory; //设置instance指向刚分配的内存地址，此时instance!=null    但是他们不存在数据依赖关系，在单线程下执行结果不变.所以有可能发生指令重排序    所以某个线程在最外层的 if (instance == null) 时，由于指令重排序，他看到的instance!=null    但是instance实际上尚未初始化完成，所以出现了线程安全问题     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> MainTest <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>MainTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true">// A线程被指令重排了，刚好先赋值了；但还没执行完构造函数。</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MainTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 后面B线程执行时将引发：对象尚未初始化错误。</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                MainTest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="使用推荐"><a href="#使用推荐" class="headerlink" title="使用推荐"></a>使用推荐</h2><ul><li>对变量的写入操作不依赖变量的当前值，或者你能确保只有单个线程更新变量的值</li><li>该变量不会与其他状态变量一起纳入不变性条件中</li><li>在访问变量时不需要加锁</li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> JMM </tag>
            
            <tag> Volatile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串排序算法的调研与实现</title>
      <link href="posts/80898847.html"/>
      <url>posts/80898847.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>   参考&lt;&lt;算法-第四版&gt;&gt;写的数据结构小论文(已修改格式)<br>   用C++代码实现了LSD算法,MSD算法以及三向快速排序算法来对字符串进行排序</p></blockquote><h1 id="Github地址"><a href="#Github地址" class="headerlink" title="Github地址"></a><a href="https://github.com/tongji4m3/DataStructureDesign" target="_blank" rel="noopener">Github地址</a></h1><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>对于许多的排序,决定顺序的键值都是字符串,于是就想利用字符串的特殊性质来设定专门针对字符串的排序算法,使得排序效率更高。我调研并用C++代码实现了LSD算法,MSD算法以及三向快速排序算法来对字符串进行排序,<br>        并且对这些算法增加了一些改进。之后通过运行程序来比较了几个算法所需要的排序时间,<br>最后通过查找资料分析归纳了这些算法的特性。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在学习多种排序算法时，发现主要是通过比较int类型或者是一些可比较的值进行排序。而字符串排序很常用，并且字符串很有特点，于是我就对字符串排序产生了兴趣。</p><p>首先，学习基数排序时，课本介绍了实现多关键码排序有两种常用的方法：最高位优先MSD与最低位优先LSD。我发现与字符串排序非常符合，于是上网查了相关的资料并且借阅了网上推荐的数据结构书籍《算法4》。</p><p>在《算法4》中，发现里面的第五章对字符串排序有非常详细的描述，只不过是用Java语言实现的。于是我就学习研究了里面的内容，并且将之转化位C++版本的代码。</p><p>学习历程大概是先学习了最低位优先LSD排序算法,<br>而上课所学的基数排序是典型的LSD排序方法，这里只是针对字符串做了相应的改变而已，所以掌握很快。之后再学习了最高位优先MSD排序算法，学习中，我发现其实和LSD算法差距不大，只是从左往右排序罢了。</p><p>之后，通过它的后续章节意识到了，MSD算法其实就是专门针对字符串的快速排序，而之前老师也提过的三向快排，其实也可以用在这里，于是又学习了三向字符串快速排序算法，至此，学完了《算法4》的理论知识。</p><p>随后，我用C++代码重新实现了这三个代码，并且参照《算法4》中提出的改进建议给代码做了一些优化改进。之后又受到之前所写的数据结构课程设计习题，写了个小程序来比较几个算法排序所用的时间。最后，参照《算法4》，根据自己的理解，分析归纳这几个字符串排序算法的一些特性。</p><h1 id="LSD算法实现"><a href="#LSD算法实现" class="headerlink" title="LSD算法实现"></a>LSD算法实现</h1><h2 id="LSD算法描述"><a href="#LSD算法描述" class="headerlink" title="LSD算法描述"></a>LSD算法描述</h2><p>首先,用LSD算法对字符串数组进行排序需要保证字符串数组中的字符串长度是相等的。它从右向左以每个位置的字符作为键，以键值索引法的思想将字符串排序W遍（W为字符串的长度）。</p><p>每一次排序都针对字符串的第d个字符进行排序，大致分为一下四个步骤：</p><p>1.计算字符串的第d个字符出现的频率</p><p>2.将频率转为索引</p><p>3.将字符串按照对应组的位置放入aux中</p><p>4.将排序好的字符串从aux回写到strings中</p><p>排序流程：</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/10fce372462e169cb3887794e93f8c9f.png"></p><h2 id="LSD算法代码实现"><a href="#LSD算法代码实现" class="headerlink" title="LSD算法代码实现"></a>LSD算法代码实现</h2><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/241d7552a0c23aaba2986db42ac8ed71.jpg"></p><h1 id="MSD算法实现"><a href="#MSD算法实现" class="headerlink" title="MSD算法实现"></a>MSD算法实现</h1><h2 id="MSD算法描述"><a href="#MSD算法描述" class="headerlink" title="MSD算法描述"></a>MSD算法描述</h2><p>用MSD算法排序字符串数组，实际上是从高位即从左到右对字符串不断排序，它不要求字符串数组中的字符串长度都相同，适用范围更加广。它也以键值索引法为基础进行排序。</p><p>MSD的核心思想是分治算法，即将大问题分为小问题来解决，其思想与快速排序类似，具体做法是：先对最高位的字符（即string[0]）进行排序，将排序后的字符串进行分组——最高位相同的在一组；之后递归的对同一组继续进行MSD排序，不过此时以第二位字符进行排序，直到排完最低位，算法结束。</p><p>需要注意的是，因为不要求字符串的长度必须一致，那么就要讨论递归到了字符串结尾的情况。一般来说，当一个字符串的所有字符都已经被检查了之后，它应该排在其他字符串的前面。例如abc，abcd，当检查完了c，那么abc肯定要排在abcd的前面。所以需要设置检查完所有字符的字符串放在第一组。</p><p>排序的其中一部分：</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/18240d4543d8b39326e438fd7b1fe51d.jpg"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/70af344d9808b75013c6a47acf6a08d3.png"></p><h2 id="MSD算法代码实现"><a href="#MSD算法代码实现" class="headerlink" title="MSD算法代码实现"></a>MSD算法代码实现</h2><h3 id="charAt函数"><a href="#charAt函数" class="headerlink" title="charAt函数"></a>charAt函数</h3><p>因为高位排序不一定都是同样长度的字符串，所以必须有个函数处理字符串访问越界问题。所有字符都已经被检查过的字符串所在的子数组应该排在子数组的前面。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/cafcbecf53f71070fce9efe69dbe4406.png"></p><h3 id="exch函数"><a href="#exch函数" class="headerlink" title="exch函数"></a>exch函数</h3><p>一个交换字符串数组中两个元素的函数。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/d8626989db2b4a7e32341b4b29682dbb.png"></p><h3 id="核心函数"><a href="#核心函数" class="headerlink" title="核心函数"></a>核心函数</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/926e0d743318180c57b872200d41e775.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/c56d3b0ed3edeb28150f567b0f3c9ebc.png"></p><h2 id="MSD算法改进"><a href="#MSD算法改进" class="headerlink" title="MSD算法改进"></a>MSD算法改进</h2><h3 id="切换插入排序"><a href="#切换插入排序" class="headerlink" title="切换插入排序"></a>切换插入排序</h3><p>因为是一种递归算法，所以递归到后面将要处理大量微型数组。如果是当hi&lt;=lo时才返回，那么要递归到只剩下一个字符串的子数组时才会返回，显然会对性能影响很大。</p><p>所以，设置一个转换阈值M，当子数组中的元素小于这个阈值时，切换为插入排序。我设置M为15，因为插入排序在数组较小时表现比较好，所以能节约时间。</p><p>还需要注意的是，切换为插入排序时，应该排序的是从lo到hi的子数组，且排序完就应该返回了，因为此时已经是有序的了。且插入排序比较的是剩余子字符串。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/8c5fcd8900a07e9e72af7235ad975d16.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/1cd477dc4f3f8a90d252cba067016faa.png"></p><h3 id="随机化"><a href="#随机化" class="headerlink" title="随机化"></a>随机化</h3><p>和快速排序一样，为了避免出现最坏情况，可以将数组打乱后再排序。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/c34b36fad4fafd37f9c596d41e745338.png"></p><h1 id="三向快速排序算法实现"><a href="#三向快速排序算法实现" class="headerlink" title="三向快速排序算法实现"></a>三向快速排序算法实现</h1><h2 id="三向快速排序算法描述"><a href="#三向快速排序算法描述" class="headerlink" title="三向快速排序算法描述"></a>三向快速排序算法描述</h2><p>MSD算法在处理含有大量公共前缀的字符串数组时表现不太好。于是针对这个情况改进成字符串三向快速排序算法。其实这个算法和普通的三向快排很像。</p><p>大致是根据字符串的首字母将字符串数组分为三个子数组，然后递归地将这三个子数组排序：一个含有所有首字母小于切分字符的字符串子数组，一个含有所有首字母等于切分字符的字符串子数组（接下来的排序将忽略他们当前这个首字符），还有一个含有所有首字符大于切分字符的子字符串数组。</p><p>三向字符串快速排序示意图：</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/794d594ad20409d271e73a6b796486d9.jpg"></p><h2 id="三向快速排序算法代码实现"><a href="#三向快速排序算法代码实现" class="headerlink" title="三向快速排序算法代码实现"></a>三向快速排序算法代码实现</h2><p>有一些和MSD相同的辅助函数就不列出来了</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/299173f782890294bfb087bbb98f53e7.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/8897dd834f0aea0c6f3bbbb869ec5c10.png"></p><h2 id="三向快速排序算法改进"><a href="#三向快速排序算法改进" class="headerlink" title="三向快速排序算法改进"></a>三向快速排序算法改进</h2><h3 id="切换为插入排序"><a href="#切换为插入排序" class="headerlink" title="切换为插入排序"></a>切换为插入排序</h3><p>和MSD算法一样，在处理小子数组时，需要切换位插入排序以提高速度。hi&lt;=lo+M时切换。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/1cd477dc4f3f8a90d252cba067016faa.png"></p><h3 id="随机打乱数组"><a href="#随机打乱数组" class="headerlink" title="随机打乱数组"></a>随机打乱数组</h3><p>和快速排序一样，最好在排序之前将数组打乱或者将第一个元素和一个随机位置的元素交换以得到一个随机的切分元素，这样就可以预防数组已经有序或是接近有序的最坏情况。</p><p>我在这里的随机化算法和MSD采用的不一样，我是在递归排序子数组的函数中，将数组中的lo与lo-hi之间某一元素交换。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/57054e652bc09202eac6f5c5db2abd06.png"></p><h1 id="三种算法排序时间比较"><a href="#三种算法排序时间比较" class="headerlink" title="三种算法排序时间比较"></a>三种算法排序时间比较</h1><h2 id="比较程序说明与实现"><a href="#比较程序说明与实现" class="headerlink" title="比较程序说明与实现"></a>比较程序说明与实现</h2><h3 id="生成随机字符串数组并存储"><a href="#生成随机字符串数组并存储" class="headerlink" title="生成随机字符串数组并存储"></a>生成随机字符串数组并存储</h3><p>字符串排序需要给定数据，于是通过程序生成一个随机的存储字符串的数组，并且把它存储在txt文件中，以供后续实验能用同一个随机字符串数组，重现之前的实验结果。并且可以控制变量N与d来控制数组中字符串的个数以及每个字符串的长度。</p><p>生成随机字符串数组具体实现为下图：</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/02168787d572e215fb9a9538f1ee1bde.png"></p><p>生成有较长公共前缀的字符串数组：</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/3350a847f97a6faa88c4560d88efe737.png"></p><p>将生成的字符串数组存储在txt文件中实现：</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/c8f72bdc446f16c6d4a97754ac8e5c50.png"></p><h3 id="判断字符串数组是否排序"><a href="#判断字符串数组是否排序" class="headerlink" title="判断字符串数组是否排序"></a>判断字符串数组是否排序</h3><p>比较排序算法性能的前提是算法能正确将数组排序，但是当输入很大的时候，很难看出是否排序，于是通过程序判断，遍历排序之后的数组，如果后面的元素小于前面的元素，那么就没有排序，就给出提示并且返回。</p><h3 id="比较字符串数组排序时间函数实现"><a href="#比较字符串数组排序时间函数实现" class="headerlink" title="比较字符串数组排序时间函数实现"></a>比较字符串数组排序时间函数实现</h3><p>大致实现就是在排序之前计时，然后调用相关算法排序，之后再停止计时，这样就可以查看排序所用的时间了。</p><p>需要注意的是，比较不同算法的时候，传入的待排序字符串数组要相同，所以不能传引用，不然之后传入的就是已经排序的数组了，显然不对。</p><p>核心代码如下：</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/a9562d6f3e9d0dab931ab2d5729a7a9e.png"></p><p>switch中执行某个算法（以MSD为例）：</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/e16e32b8398f2d8efd045f0855678fc4.png"></p><h2 id="不同输入下三种算法运行时间比较"><a href="#不同输入下三种算法运行时间比较" class="headerlink" title="不同输入下三种算法运行时间比较"></a>不同输入下三种算法运行时间比较</h2><h3 id="随机字符串数组-N-150000-d-5"><a href="#随机字符串数组-N-150000-d-5" class="headerlink" title="随机字符串数组 N=150000 d=5"></a>随机字符串数组 N=150000 d=5</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/703fe925fa06c578ac36916242d5e587.png"></p><p>由此看出,当字符串宽带比较小的时候LSD算法所用时间显著比较短,而三向快排所用时间最长。</p><h3 id="随机字符串数组-N-150000-d-50"><a href="#随机字符串数组-N-150000-d-50" class="headerlink" title="随机字符串数组 N=150000 d=50"></a>随机字符串数组 N=150000 d=50</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/7622834a0ac220d2cd12a0ffe3a9e8ff.png"></p><p>可以看出，当字符串宽带比较长的时候，MSD算法优势比较大，所用时间最短，而三向快排还是比其他两个算法时间长很多。</p><h3 id="大量重复字符串数组-N-150000-d-50"><a href="#大量重复字符串数组-N-150000-d-50" class="headerlink" title="大量重复字符串数组 N=150000 d=50"></a>大量重复字符串数组 N=150000 d=50</h3><p>说明：这里给出的字符串不一定是定长的，而且有很长的公共前缀。所以不能用LSD算法进行排序，主要比较MSD算法和三向字符串快速排序算法的排序时间。</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/752cf4b3a8819dafc956a9af9941c479.jpg"></p><p>由此可以看出，对于有较长公共前缀的字符串组成的数组中，三向字符串快速排序算法的排序时间显著低于MSD算法。</p><h1 id="三种字符串排序算法的特性"><a href="#三种字符串排序算法的特性" class="headerlink" title="三种字符串排序算法的特性"></a>三种字符串排序算法的特性</h1><h2 id="排序性能理论分析"><a href="#排序性能理论分析" class="headerlink" title="排序性能理论分析"></a>排序性能理论分析</h2><h3 id="LSD字符串排序算法性能"><a href="#LSD字符串排序算法性能" class="headerlink" title="LSD字符串排序算法性能"></a>LSD字符串排序算法性能</h3><p>LSD算法是稳定排序算法，因为在将他们的最后i个字符作为键进行排序之后,在对i-1字符排序时,</p><p>要么因为它们的倒数第i个字符不同，所以排序算法已经将他们的顺序摆放正确,要么它们的倒数第i个字符相同，所以由于排序的稳定性它们仍然有序。排序的稳定性证明：在对最后i个字符作为键进行排序时,因为是不断遍历字符串数组放入,所以键相同的元素在排序之后会聚集在一起,但相对顺序没有变化，所以是稳定的。</p><p>访问数组次数：</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/560c7496c293622a796726df9fb59d96.jpg"></p><p>程序运行时间：NW（N为数组大小，W为字符串长度）</p><p>排序所需要的额外空间：N(N为数组大小)</p><h3 id="MSD字符串排序算法性能"><a href="#MSD字符串排序算法性能" class="headerlink" title="MSD字符串排序算法性能"></a>MSD字符串排序算法性能</h3><p>如果不将之随机化，那么MSD算法也是稳定的，原因于LSD算法一致。</p><p>比较次数：</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/3a7c10a617afc83431cf487c7aa2ba0d.jpg"></p><p>程序运行时间：N到Nw之间（N为数组大小，w为字符串平均长度）</p><p>排序所需要的额外空间：N+WR（N为数组大小，W为字符串最大长度,R为字母表大小，本文中是ascii码表码表的大小）</p><h3 id="三向字符串快速排序算法性能"><a href="#三向字符串快速排序算法性能" class="headerlink" title="三向字符串快速排序算法性能"></a>三向字符串快速排序算法性能</h3><p>三向字符串快速排序不是稳定排序算法。</p><p>比较次数：</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/1d0e87d8bfe21c3b14574a5d1b2df070.png"></p><p>程序运行时间：N到Nw之间（N为数组大小，w为字符串平均长度）</p><p>排序所需要的额外空间：W+log N（N为数组大小，W为字符串最大长度）</p><h2 id="三种算法简单归纳"><a href="#三种算法简单归纳" class="headerlink" title="三种算法简单归纳"></a>三种算法简单归纳</h2><p>LSD字符串算法与MSD字符串算法都是以键值索引法为基础，只不过LSD算法从右往左排序N次，而MSD算法从左往右排序。</p><p>LSD算法与MSD算法都是稳定排序算法，但不是原地排序算法。而三向字符串快速排序算法不是稳定排序算法，但是是原地排序的。</p><p>LSD算法只适用于定长字符串，而MSD算法于三向字符串快速排序算法对于任意长度的字符串组成的数组都适用。</p><p>LSD算法适用于较短的定长字符串，MSD算法适用于随机字符串，而三向字符串快速排序算法适用于含有较长公共前缀的字符串。</p><p>这三种字符串排序算法都各有优缺点，我们要根据实际情况选择适合的算法，而不是认定了只使用一种算法。</p><h1 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h1><p>[1] Robert Sedgewick,Kevin Wayne 著,谢路云 译.算法（第4版）[M].<br>北京:人民邮电出版社,2012年10月第一版</p>]]></content>
      
      
      <categories>
          
          <category> 项目文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构项目-------8种排序算法的比较案例</title>
      <link href="posts/8768c3df.html"/>
      <url>posts/8768c3df.html</url>
      
        <content type="html"><![CDATA[<h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a><a href="https://github.com/tongji4m3/DataStructureDesign" target="_blank" rel="noopener">源码地址</a></h1><blockquote><p>  8种排序算法的比较案例</p><p>  数据结构作业 C++语言实现</p><p>  直接从word文档转的,代码格式有些问题,建议在源码地址查看word版</p></blockquote><h1 id="1-分析"><a href="#1-分析" class="headerlink" title="1 分析"></a>1 分析</h1><h2 id="1-1-项目简介"><a href="#1-1-项目简介" class="headerlink" title="1.1 项目简介"></a>1.1 项目简介</h2><p>随机函数产生一百，一千，一万和十万个随机数，用快速排序，直接插入排序，冒泡排序，选择排序的排序方法排序，并统计每种排序所花费的排序时间和交换次数。其中，随机数的个数由用户定义，系统产生随机数。并且显示他们的比较次数。</p><p>请在文档中记录上述数据量下，各种排序的计算时间和存储开销，并且根据实验结果说明这些方法的优缺点。</p><h2 id="1-2-功能分析"><a href="#1-2-功能分析" class="headerlink" title="1.2 功能分析"></a>1.2 功能分析</h2><p>首先,得在程序中实现了<strong>八种排序算法</strong>,其次,要有两个辅助函数,分别计算排序前后所花费的<strong>时间</strong>与排序的<strong>比较次数</strong>.</p><p>最后,在主程序中,给用户提供界面,选择某种排序算法后,展示排序所需要的时间和比较次数.用户可以不断选择排序算法直到退出.用户也可以任意选择想排序的规模.</p><h1 id="2-设计"><a href="#2-设计" class="headerlink" title="2 设计"></a>2 设计</h1><h2 id="2-1-排序算法设计"><a href="#2-1-排序算法设计" class="headerlink" title="2.1 排序算法设计"></a>2.1 排序算法设计</h2><p>八种排序算法之中,都会传入一个引用参数<code>exchangeTime</code>代表交换次数,当交换时让exchangeTime值+1.每个排序算法都会将原来的随机数组复制一遍,以免把原有的随机数组更改了.</p><p>同时为了规范,数组在进行交换数据时,都会调用同一个辅助函数exch进行交换,控制了变量.为了确保已经排序,也会调用<code>isSorted</code>确保已经排序.</p><h2 id="2-2-辅助函数设计"><a href="#2-2-辅助函数设计" class="headerlink" title="2.2 辅助函数设计"></a>2.2 辅助函数设计</h2><p>首先,在<code>SortCompare</code>类中,构造函数将会为它的成员变量<code>vec</code>赋予N个随机数,然后在test类中,根据用户输入的参数,选择适当的算法进行排序.且在排序的前后计时,两者相减,得到了该排序算法的用时.</p><p>然后,<code>exch()</code>通过传入数组与要交换的两个位置把元素交换,<code>isSorted()</code>通过一次循环比较后方元素是否大于前方元素来确保排序,否则返回false.</p><h2 id="2-3-主程序设计"><a href="#2-3-主程序设计" class="headerlink" title="2.3 主程序设计"></a>2.3 主程序设计</h2><p>首先,用一个数组将数字与排序算法的名字关联起来,便于查看.输出窗口打印出表格以给用户进行提示,让用户输入排序的<code>规模N</code>.随后进入循环,直到用户按9退出程序.循环中,根据用户输入,调用相应的函数,执行相应的操作,<br>完成排序,并打印排序的时间与交换次数.将交换次数清零,进行下一次选择,直到用户退出.</p><h1 id="3-实现"><a href="#3-实现" class="headerlink" title="3 实现"></a>3 实现</h1><h2 id="3-1-八个排序方法的实现"><a href="#3-1-八个排序方法的实现" class="headerlink" title="3.1 八个排序方法的实现"></a>3.1 八个排序方法的实现</h2><h3 id="3-1-1-冒泡排序"><a href="#3-1-1-冒泡排序" class="headerlink" title="3.1.1 冒泡排序"></a>3.1.1 冒泡排序</h3><p>两遍循环,外层循环每次将最小的元素排定,直到整个数组有序。内层循环从数组最后一个元素分别与前一个元素对比，如果小于前一个元素，将两者交换，并且使交换次数+1，一直对比到排定的元素之前，因为排定的元素一定是小于后面的所有的元素的。</p><p>值得注意的是，每个排序都通过将原数组复制，并将复制后的数组temp进行排序来进行测试，并且每次排序完，都调用测试函数isSorted测试是否排序，所有排序都用了这个模式，所以之后不再赘述。</p><pre class=" language-c++"><code class="language-c++">oid bubbleSort(long long &exchangeTime)  {      vector<int> temp(vec);      //每次都把最小的排定      for (int i = 1; i < temp.size(); ++i)      {          for (int j = temp.size() - 1; j >= i; --j)          {              if (temp[j - 1] > temp[j])              {                  exch(temp, j, j - 1);                  ++exchangeTime;              }          }      }      if (!isSorted(temp))      {          cout << "没排序!" << endl;      }  }</code></pre><h3 id="3-1-2-选择排序"><a href="#3-1-2-选择排序" class="headerlink" title="3.1.2 选择排序"></a>3.1.2 选择排序</h3><p>同样是两层循环，外层循环先让i做为最小的元素，并且通过右层循环找出数组右边最小元素的索引，然后再交换i与内层循环找到的最小元素min，并且让交换次数+1。</p><pre class=" language-c++"><code class="language-c++">void chooseSort(long long &exchangeTime)  {      vector<int> temp(vec);      for (int i = 0; i < temp.size() - 1; ++i)      {          int min = i;          for (int j = i + 1; j < temp.size(); ++j)          {              if (temp[min] > temp[j])              {                  min = j;              }          }          exch(temp, min, i);          ++exchangeTime;      }      if (!isSorted(temp))      {          cout << "没排序!" << endl;      }  }</code></pre><h3 id="3-1-3-插入排序"><a href="#3-1-3-插入排序" class="headerlink" title="3.1.3 插入排序"></a>3.1.3 插入排序</h3><p>两层循环，外层循环从一开始到数组末尾。内层循环不断的将该元素j与它前面的一个元素j-1的值进行对比，如果小与索引j-1的值则交换，直到j-1&lt;0了或者它的值大于索引j-1的值。算法本质就是左边一开始是一个元素，然后不断的让数组后面的元素插入到合适的位置，直到所有元素都插入，而它们也就是一个有序的数组了。</p><p>void insertSort(long long &amp;exchangeTime)<br>{<br>vector&lt;int&gt; temp(vec);<br>for (int i = 1; i &lt; temp.size(); ++i)<br>{<br>for (int j = i; j - 1 &gt;= 0 &amp;&amp; temp[j] &lt; temp[j - 1]; –j)<br>{<br>exch(temp, j - 1, j);<br>++exchangeTime;<br>}<br>}<br>if (!isSorted(temp))<br>{<br>cout &lt;&lt; “没排序!” &lt;&lt; endl;<br>}<br>}</p><h3 id="3-1-4-希尔排序"><a href="#3-1-4-希尔排序" class="headerlink" title="3.1.4 希尔排序"></a>3.1.4 希尔排序</h3><p>本质上希尔排序就是插入排序的改进。先用h不断*3+1，直到到数组大小的三分之一，然后和插入排序的循环类似，只不过外层循环是从h开始，且内层循环每一次对比的都是j和j-h的元素，这样一次排序就形成了h有序数组，即每相隔h位置的元素形成了一个有序数组，然后最外面的循环负责不断的缩小h的值，使得形成的h越来越小，而当h=1时，即为插入排序，并且此次排序结束后循环终止。</p><p>之所以要这么麻烦，是为了刚刚开始时，h大概是数组的三分之一左右，然后每一次交换都能让相对很小的元素放在很前面，不必像是插入排序一样，如果碰到最小的元素，就要一个个的比较交换，直到它到最左边的位置。</p><p>void shellSort(long long &amp;exchangeTime)<br>{<br>vector&lt;int&gt; temp(vec);  </p><p>int h = 1;<br>while (h &lt; temp.size() / 3)<br>{<br>h = 3 * h + 1;<br>}  </p><p>while (h &gt;= 1)<br>{<br>for (int i = h; i &lt; temp.size(); ++i)<br>{<br>for (int j = i; j - h &gt;= 0 &amp;&amp; temp[j] &lt; temp[j - h]; j -= h)<br>{<br>exch(temp, j - h, j);<br>++exchangeTime;<br>}<br>}<br>h /= 3;<br>}</p><h3 id="3-1-5-快速排序"><a href="#3-1-5-快速排序" class="headerlink" title="3.1.5 快速排序"></a>3.1.5 快速排序</h3><p>用了额外的两个辅助函数，每次排序，先调用辅助函数partition，它将返回一个索引j，且保证了j的左边元素都小于它，而它的右边元素都大于或等于它。然后继续递归地将左边的数组排序，将右边的数组排序，直到只有一个元素时返回。因为每次调用，j的位置都是排定的，所以通过归纳法可知最后数组一定排序好了。</p><p>Partition函数具体实现则是：先将传入的第一个元素（传入的元素不一定就是数组的首元素，而是要排序的子数组的第一个元素，用lo标定）定为v，用i，j指向该要排序的数组，然后i不断的向右扫描，j不断的向左扫描，如果i找到了大于等于v的元素，j找到了小于等于它的元素，则将他们两个交换。重复扫描直到i&gt;=j或者i到了数组末尾，或者j到达数组开头。此时可知索引j的元素肯定是小于v的，而i一定是大于v的，此时只要交换索引j和首元素，再返回索引j，即实现了j左边都是小于它的而右边都是大于等于它的。</p><p>void quickSort(long long &amp;exchangeTime)<br>{<br>vector&lt;int&gt; temp(vec);  </p><p>//因为本来就是乱的,所以不用打乱了<br>quickSort(temp, 0, temp.size() - 1, exchangeTime);  </p><p>if (!isSorted(temp))<br>{<br>cout &lt;&lt; “没排序!” &lt;&lt; endl;<br>}<br>}</p><p>void quickSort(vector&lt;int&gt; &amp;temp, int lo, int hi, long long &amp;exchangeTime)<br>{<br>if (hi &lt;= lo)<br>{<br>return;<br>}<br>int j = partition(temp, lo, hi, exchangeTime);<br>quickSort(temp, lo, j - 1, exchangeTime);<br>quickSort(temp, j + 1, hi, exchangeTime);<br>}</p><p>int partition(vector&lt;int&gt; &amp;temp, int lo, int hi, long long &amp;exchangeTime)<br>{<br>int i = lo, j = hi + 1;<br>int v = temp[lo];<br>while (true)<br>{<br>while (temp[++i] &lt; v) if (i == hi) break;<br>while (v &lt; temp[–j]) if (j == lo) break;<br>if (i &gt;= j)<br>break;<br>exch(temp, i, j);<br>++exchangeTime;<br>}<br>exch(temp, lo, j);<br>++exchangeTime;<br>return j;<br>}</p><h3 id="3-1-6-堆排序"><a href="#3-1-6-堆排序" class="headerlink" title="3.1.6 堆排序"></a>3.1.6 堆排序</h3><p>首先构造一个堆，从数组长度/2的位置直到第一个元素进行构建，因为数组长度/2到数组末尾的可以直接作为堆底，不用构建了，所谓构建，就是对每一个索引i调用sink函数，直觉上来说就是把大的元素放上面，小的放下面。然后排序阶段，将数组最后一个元素与第一个交换，即将堆最大的元素放再数组末端，然后对数组首元素进行sink操作，来保证堆的有序性。N–，不断这样操作直到N==1，意味着数组已经排序。</p><p>Sink函数主要是将元素下沉，即通过对比该元素k与它的下一层2*k与2*k+1中较大的一个，如果k小于它的下一层，则交换，且让它等于2*k或者2*k+1，不断比较交换，直到到堆末尾或者它大于它下一层的较大的元素。</p><p>void heapSort(long long &amp;exchangeTime)<br>{<br>vector&lt;int&gt; temp(vec);<br>int N = temp.size();<br>temp.insert(temp.begin(), -1);//temp[0]不用<br>//构造堆<br>for (int k = N/2; k &gt;= 1 ; –k)<br>{<br>sink(temp, k, N,exchangeTime);<br>}<br>//排序<br>while(N&gt;1)<br>{<br>exch(temp, 1, N–);<br>++exchangeTime;<br>sink(temp, 1, N,exchangeTime);<br>}  </p><p>if (!isSorted(temp))<br>{<br>cout &lt;&lt; “没排序!” &lt;&lt; endl;<br>}<br>}</p><p>void sink(vector&lt;int&gt; &amp;temp, int k, int N, long long &amp;exchangeTime)<br>{<br>while(2*k&lt;=N)<br>{<br>int j = 2 * k;<br>if(j+1&lt;=N &amp;&amp; temp[j+1]&gt;temp[j])<br>{<br>++j;<br>}<br>if(temp[k]&gt;temp[j])<br>{<br>break;<br>}<br>exch(temp, k, j);<br>k = j;<br>++exchangeTime;<br>}<br>}</p><h3 id="3-1-7-归并排序"><a href="#3-1-7-归并排序" class="headerlink" title="3.1.7 归并排序"></a>3.1.7 归并排序</h3><p>总的来说，是用了分治法的思路，即，首先将左边一半数组排序，右一半数组排序。然后将两个排序的数组进行归并。而将左右两边数组排序是采用递归的思路，例如将左边的一半数组排序，则为将左边的数组的左一半数组排序，右一半数组排序，再将之合并。归并到最后的结果就是，如果有一个子数组只有一个或者没有元素就返回，这时算是已经排序了的。然后将之不断合并。一直到整个数组合并为一个有序数组。</p><p>合并两个有序算法调用了一个辅助函数merge，思路很简单，即为用两个索引分别指向他们两个数组的开头，然后比较这两个索引的元素，存储结果的数组存储较小的那个元素，然后对于的索引+1，一直对比到其中的一个索引指向了那个数组的尽头。此时，结果数组直接全部存储剩余那个数组的剩余元素即可。</p><p>void mergeSort(long long &amp;exchangeTime)<br>{<br>vector&lt;int&gt; temp(vec);  </p><p>vector&lt;int&gt; aux(vec.size());//辅助数组  </p><p>mergeSort(temp, aux, 0, temp.size() - 1, exchangeTime);  </p><p>if (!isSorted(temp))<br>{<br>cout &lt;&lt; “没排序!” &lt;&lt; endl;<br>}<br>}</p><p>void mergeSort(vector&lt;int&gt; &amp;temp, vector&lt;int&gt; &amp;aux, int lo, int hi, long<br>long &amp;exchangeTime)<br>{<br>if (hi &lt;= lo)<br>{<br>return;<br>}<br>int mid = lo + (hi - lo) / 2;<br>mergeSort(temp, aux, lo, mid, exchangeTime);<br>mergeSort(temp, aux, mid + 1, hi, exchangeTime);  </p><p>merge(temp, aux, lo, mid, hi, exchangeTime);<br>}</p><p>void merge(vector&lt;int&gt; &amp;temp, vector&lt;int&gt; &amp;aux, int lo, int mid, int hi,<br>long long &amp;exchangeTime)<br>{<br>//mid左右两边已经拍好了序<br>int i = lo, j = mid + 1;<br>for (int k = lo; k &lt;= hi; ++k)<br>{<br>aux[k] = temp[k];<br>}<br>for (int k = lo; k &lt;= hi; ++k)<br>{<br>//上面两个不进行比较<br>if (i &gt; mid) temp[k] = aux[j++];<br>else if (j &gt; hi) temp[k] = aux[i++];<br>else if (aux[j] &lt; aux[i])<br>{<br>temp[k] = aux[j++];<br>++exchangeTime;<br>}<br>else<br>{<br>temp[k] = aux[i++];<br>++exchangeTime;<br>}<br>}<br>}</p><h3 id="3-1-8-基数排序"><a href="#3-1-8-基数排序" class="headerlink" title="3.1.8 基数排序"></a>3.1.8 基数排序</h3><p>本质上是低位优先的字符串排序，所以首先得到数组的元素中最大元素的位数。然后对每一位进行一次排序，因为如果前一位的不同，则它们肯定能排序，而前一位的相同，它是稳定的放入，而后一位已经排序好了，所以可以直到从低位往高位不断排序直到最后一定能排序好。</p><p>外层循环对每一位进行排序，而排序具体实现是：首先统计每个元素在这一位中0-9出现的个数，然后通过刚刚统计的元素个数，计算得到每一个元素放入辅助数组的开始的索引，然后对于每一个元素放入辅助数组相应的位置，就是通过查看元素这一位的值，在辅助数组找到相应的索引位置放入，并让该索引位置+1。直到把所有元素放入，即为将这一位的所有元素进行排序了。</p><p>void radixSort(long long &amp;exchangeTime)<br>{<br>vector&lt;int&gt; temp(vec);<br>vector&lt;int&gt; aux(temp);  </p><p>int N = temp.size();<br>int R = 10;//一共只有0-9<br>int digit = getDigit(temp);<br>int base = 1;//目的是得到一个数的某一位的数,如得到123中的2<br>//0表示个位<br>for (int d = 0; d &lt; digit; ++d)<br>{<br>vector&lt;int&gt; count(R + 1);//计算出现的频率<br>for (int i = 0; i &lt; N; ++i)<br>{<br>//就算有一些的位数不够也没有关系,因为这样会是0,还是会排序<br>int index = temp[i] / base % 10;//第一次得到是个位,第二次是十位..<br>count[index + 1]++;<br>}<br>for (int r = 0; r &lt; R; ++r)//将频率转换为索引<br>{<br>count[r + 1] += count[r];<br>}<br>for (int i = 0; i &lt; N; ++i)//将元素分类<br>{<br>int index = temp[i] / base % 10;<br>aux[count[index]++] = temp[i];<br>}<br>for (int i = 0; i &lt; N; ++i)//回写<br>{<br>temp[i] = aux[i];<br>}<br>base *= 10;//不断处理高位<br>}<br>if (!isSorted(temp))<br>{<br>cout &lt;&lt; “没排序!” &lt;&lt; endl;<br>}<br>}</p><p>int getDigit(const vector&lt;int&gt; &amp; temp)<br>{<br>int digit = 1;<br>int base = 10;<br>for (int i = 0; i &lt; temp.size(); ++i)<br>{<br>while(base&lt;=temp[i])<br>{<br>base *= 10;<br>++digit;<br>}<br>}<br>return digit;<br>}</p><h2 id="3-2-辅助函数功能的实现"><a href="#3-2-辅助函数功能的实现" class="headerlink" title="3.2 辅助函数功能的实现"></a>3.2 辅助函数功能的实现</h2><h3 id="3-2-1-exch函数"><a href="#3-2-1-exch函数" class="headerlink" title="3.2.1 exch函数"></a>3.2.1 exch函数</h3><p>void exch(vector&lt;int&gt; &amp;cur, int i, int j)<br>{<br>int temp = cur[i];<br>cur[i] = cur[j];<br>cur[j] = temp;<br>}</p><h3 id="3-2-2-isSorted函数"><a href="#3-2-2-isSorted函数" class="headerlink" title="3.2.2 isSorted函数"></a>3.2.2 isSorted函数</h3><p>bool isSorted(vector&lt;int&gt; &amp;cur)<br>{<br>for (int i = 0; i &lt; cur.size() - 1; ++i)<br>if (cur[i + 1] &lt; cur[i])<br>return false;<br>return true;<br>}</p><h2 id="3-3-总体系统的实现"><a href="#3-3-总体系统的实现" class="headerlink" title="3.3 总体系统的实现"></a>3.3 总体系统的实现</h2><p>进入一个循环,根据用户输入,调用不同的排序算法进行排序测试,并且打印测试时间与比较次数,随后重置排序时间并且进行下一次比较。</p><p>核心代码：</p><p>while(true)<br>{<br>cout &lt;&lt; “请选择排序算法:”;<br>cin &gt;&gt; whichSort;<br>if(whichSort==9)<br>{<br>break;<br>}<br>sortCompare.test(whichSort, sortTime, exchangeTime);<br>cout&lt;&lt;changeIndex[whichSort]&lt;&lt;“所用时间:”&lt;&lt;sortTime&lt;&lt;“s”&lt;&lt;endl;<br>//归并排序不进行两两交换,所以看比较次数<br>if(whichSort==7)<br>cout&lt;&lt;changeIndex[whichSort]&lt;&lt;“比较次数：”&lt;&lt;exchangeTime&lt;&lt;endl;<br>else<br>cout&lt;&lt;changeIndex[whichSort]&lt;&lt;“交换次数：”&lt;&lt;exchangeTime&lt;&lt;endl;<br>//重置<br>sortTime = 0.0;<br>exchangeTime = 0;<br>}</p><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4 测试"></a>4 测试</h1><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/614ad45ef223ce1115095cf56364944c.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速排序 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构项目-------修理牧场</title>
      <link href="posts/e550d2e.html"/>
      <url>posts/e550d2e.html</url>
      
        <content type="html"><![CDATA[<h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a><a href="https://github.com/tongji4m3/DataStructureDesign" target="_blank" rel="noopener">源码地址</a></h1><blockquote><p>  修理牧场</p><p>  数据结构作业 C++语言实现</p><p>  直接从word文档转的,代码格式有些问题,建议在源码地址查看word版</p></blockquote><h1 id="1-分析"><a href="#1-分析" class="headerlink" title="1 分析"></a>1 分析</h1><h2 id="1-1-项目简介"><a href="#1-1-项目简介" class="headerlink" title="1.1 项目简介"></a>1.1 项目简介</h2><p>农夫要修理牧场的一段栅栏，他测量了栅栏，发现需要N块木头，每块木头长度为整数<em>Li</em>个长度单位，于是他购买了一个很长的，能锯成N块的木头，即该木头的长度是<em>Li</em>的总和。</p><p>但是农夫自己没有锯子，请人锯木的酬金跟这段木头的长度成正比。为简单起见，不妨就设酬金等于所锯木头的长度。例如，要将长度为20的木头锯成长度为8，7和5的三段，第一次锯木头将木头锯成12和8，花费20；第二次锯木头将长度为12的木头锯成7和5花费12，总花费32元。如果第一次将木头锯成15和5，则第二次将木头锯成7和8，那么总的花费是35（大于32）.</p><p>输入格式：输入第一行给出正整数N（N&lt;104），表示要将木头锯成N块。第二行给出N个正整数，表示每块木头的长度。</p><p>输出格式：输出一个整数，即将木头锯成N块的最小花费。</p><h2 id="1-2-解题分析"><a href="#1-2-解题分析" class="headerlink" title="1.2 解题分析"></a>1.2 解题分析</h2><p>给了要将木头锯成N块,与每块木头的长度。最后需要输出最小的花费。</p><p>刚开始时，我的思路是因为是从一块木头开始分割的，且每次都将木块分割为两块，无非是大小不同而已。所有这道题等价与用n个元素构建一个二叉树,n个元素在树的最底层，并且使得除了root外,其他节点相加最小。但是到这里就卡住了，就不懂怎么继续进行。于是上网查了文档，它提供了另外一种思路：通过反向思考,如果每次对半分的时候,最后结果最小，那么,在只有碎片的时候,每一次都拿出最小的两个进行拼凑，就是对半分的逆过程了，<br>所以只需要有一个每次都能取出最小元素的优先队列即可，所有就只要构建一个优先队列就能解决问题了。</p><h1 id="2-设计"><a href="#2-设计" class="headerlink" title="2 设计"></a>2 设计</h1><h2 id="2-1-优先队列设计"><a href="#2-1-优先队列设计" class="headerlink" title="2.1 优先队列设计"></a>2.1 优先队列设计</h2><p>设计一个每次都能取出最小元素的优先队列即可。总体思路是，每一次往优先队列加入元素时，把元素放在尾部，然后让这个元素“上浮”到合适的位置,构成一个堆,堆顶为最小元素。每次取出元素时，取出堆顶元素，然后让堆顶元素与最后一个元素交换，并且让堆的数量减一，堆顶元素“下沉”。这样，不管是取出元素还是加入元素，都构成了一个堆。</p><h2 id="2-2-主程序设计"><a href="#2-2-主程序设计" class="headerlink" title="2.2 主程序设计"></a>2.2 主程序设计</h2><p>首先利用输入的N个正整数逐个放入堆中，然后不断循环直到堆只剩下一个元素。在循环中，每次都从堆中取出最小的两个元素，让总的花费sum+=他们两个的值。并且把他们两个加起来的值继续放入堆中。</p><p>直观上来说，就是在一堆木块碎片中，每次都把最小的两块碎片拼成一块，不断的拼，直到最后就只剩下最初的完整的木块了。</p><h1 id="3-实现"><a href="#3-实现" class="headerlink" title="3 实现"></a>3 实现</h1><h2 id="3-1-优先队列的实现"><a href="#3-1-优先队列的实现" class="headerlink" title="3.1 优先队列的实现"></a>3.1 优先队列的实现</h2><h3 id="3-1-1-堆构造函数的实现"><a href="#3-1-1-堆构造函数的实现" class="headerlink" title="3.1.1 堆构造函数的实现"></a>3.1.1 堆构造函数的实现</h3><p>当构造一个堆时，需要输入一个堆中应该存的元素数量最大值len，令堆中的成员变量数组的长度为len+1，（因为不用数组的vec[0]），堆的这个类还有一个N记录当前堆的元素数量。</p><pre class=" language-c++"><code class="language-c++">MinPQ(int len):pq(len+1)  {  }private:      vector<int> pq;      int N;//元素个数,从1开始</code></pre><h3 id="3-1-2-添加元素入堆"><a href="#3-1-2-添加元素入堆" class="headerlink" title="3.1.2 添加元素入堆"></a>3.1.2 添加元素入堆</h3><p>令N+1,并且在N处添加元素，然后将这个元素swim，使得还是一个堆。</p><pre class=" language-c++"><code class="language-c++">void push(int i)  {      pq[++N] = i;      swim(N);  }</code></pre><h3 id="3-1-3-删除堆中最小元素"><a href="#3-1-3-删除堆中最小元素" class="headerlink" title="3.1.3 删除堆中最小元素"></a>3.1.3 删除堆中最小元素</h3><p>最小元素在堆顶，先用一个变量存储堆顶的值，将堆顶与堆中最后一个元素交换，令N-1，此时不是一个堆，需要将堆顶sink到合适的位置，最后返回之前存的堆顶元素的值。</p><pre class=" language-c++"><code class="language-c++">int delMin()  {      int max = pq[1];      exch(1, N--);      sink(1);      return max;  }</code></pre><h3 id="3-1-4-sink函数的实现"><a href="#3-1-4-sink函数的实现" class="headerlink" title="3.1.4 sink函数的实现"></a>3.1.4 sink函数的实现</h3><p>Sink的思路是将这个元素与他的子节点做对比，并且将较小的放上面，一直对比到这个元素小于他的两个子节点为止。</p><p>具体实现是，假如要下沉k，则先找它的子节点2*k与2*k+1中最小的一个（当然得判断是否存在），如果小于他的子节点的值，那么就交换他们的值，并且让k=2*k或2*k+1（＝最小的那个），这是为了继续追踪原本的k，继续和他此时的两个子节点做对比。不断的循环，直到他没有子节点或者他小于了子节点。</p><pre class=" language-c++"><code class="language-c++">void sink(int k)  {      while(2 * k <=N)      {          int j = 2 * k;          if(j+1<=N && pq[j]>pq[j+1])          {              ++j;          }          if(pq[k]<=pq[j])          {                  break;          }          exch(k, j);          k = j;      }  }</code></pre><h3 id="3-1-5-swim函数实现"><a href="#3-1-5-swim函数实现" class="headerlink" title="3.1.5 swim函数实现"></a>3.1.5 swim函数实现</h3><p>直观看就是一个元素比较轻，然后它要不断上浮，直到它重与他的父节点。而代码的实现就是，查看他的父节点k/2的值是否小于它，如果不小于它，则交换它和它父节点的值，并且让k=k/2，即继续追踪这个元素，让它继续与它当前的父节点做对比。直到它本身为数组的第一个元素或者它不小于它的父节点。</p><p>void swim(int k)<br>{<br>while(k&gt;1 &amp;&amp; pq[k] &lt; pq[k/2])<br>{<br>exch(k, k / 2);<br>k /= 2;<br>}<br>}</p><h2 id="3-2-主函数的实现"><a href="#3-2-主函数的实现" class="headerlink" title="3.2 主函数的实现"></a>3.2 主函数的实现</h2><p>基本和之前的设计描述差不多，就是构造堆，不断的删除两个最小元素，并且把他们的和继续加入堆中，不断循环，只剩下一个元素的时候终止。</p><blockquote><p>  int main()<br>  {<br>  cout &lt;&lt; “输入正整数N(分成N块,N&lt;1024),及N个正整数(每块长度):”;<br>  int N;<br>  cin &gt;&gt; N;<br>  int sum = 0;<br>  MinPQ minPQ(N);<br>  for (int i = 0; i &lt; N; ++i)<br>  {<br>  int len;<br>  cin &gt;&gt; len;<br>  minPQ.push(len);  </p><p>  }<br>  while(minPQ.size()&gt;=2)<br>  {<br>  int min1=minPQ.delMin();<br>  int min2=minPQ.delMin();<br>  sum += min1 + min2;<br>  minPQ.push(min1 + min2);<br>  }<br>  cout &lt;&lt; sum;<br>  return 0;<br>  }</p></blockquote><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4 测试"></a>4 测试</h1><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/9f2bcd918fc4218b47f01700bd307993.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/58da745d01a35ace45bcf8246685b78d.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构项目-------家谱管理系统</title>
      <link href="posts/629471e8.html"/>
      <url>posts/629471e8.html</url>
      
        <content type="html"><![CDATA[<h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a><a href="https://github.com/tongji4m3/DataStructureDesign" target="_blank" rel="noopener">源码地址</a></h1><blockquote><p>  家谱管理系统</p><p>  数据结构作业 C++语言实现</p><p>  直接从word文档转的,代码格式有些问题,建议在源码地址查看word版</p></blockquote><h1 id="1-分析"><a href="#1-分析" class="headerlink" title="1 分析"></a>1 分析</h1><h2 id="1-1-项目简介"><a href="#1-1-项目简介" class="headerlink" title="1.1 项目简介"></a>1.1 项目简介</h2><p>家谱是一种以表谱形式，记载一个以血缘关系为主体的家族世袭繁衍和重要任务事迹的特殊图书体裁。家谱是中国特有的文化遗产，是中华民族的三大文献（国史，地志，族谱）之一，属于珍贵的人文资料，对于历史学，民俗学，人口学，社会学和经济学的深入研究，均有其不可替代的独特功能。本项目兑对家谱管理进行简单的模拟，以实现查看祖先和子孙个人信息，插入家族成员，删除家族成员的功能。</p><h2 id="1-2-功能要求"><a href="#1-2-功能要求" class="headerlink" title="1.2 功能要求"></a>1.2 功能要求</h2><p>本项目的实质是完成兑家谱成员信息的建立，查找，插入，修改，删除等功能，可以首先定义家族成员数据结构，然后将每个功能作为一个成员函数来完成对数据的操作，最后完成主函数以验证各个函数功能并得到运行结果。</p><h1 id="2-设计"><a href="#2-设计" class="headerlink" title="2 设计"></a>2 设计</h1><h2 id="2-1-Node类设计"><a href="#2-1-Node类设计" class="headerlink" title="2.1 Node类设计"></a>2.1 Node类设计</h2><p>Node类是一个模板类,存储一个T类型的值和两个指针,分别是代表指向兄弟节点的next指针和指向自己子节点的link指针。</p><h2 id="2-2-LinkedList类设计"><a href="#2-2-LinkedList类设计" class="headerlink" title="2.2 LinkedList类设计"></a>2.2 LinkedList类设计</h2><p>首先，LinkedList依旧是模板类，它存储了两个成员变量，分别是代表家谱祖先的root节点，以及将来用于代表所操作的人物的curFind。主要有六个public函数，分别是：</p><p>add(T familyRoot) 传入的是祖先名字，创建家谱中第一个元素。</p><p>void add(T familyName,T childName) 给家谱中的某个人添加子女。</p><p>void deleteFromTree(T fatherName) 删除家谱中的某个人，连带子女一起从家谱中删除。</p><p>void update(T fatherName,T updateName)更改家谱中某个人的姓名</p><p>void show(T familyName)展示家谱中某个人的子女</p><p>bool findFromTree(T familyName)找出在家谱中这个人是否存在</p><p>还有一个private函数：</p><p>void findFromTree(Node&lt;T&gt; * x,T familyName)<br>从家谱中找到某个人，并将它存在curFind中，供其他函数使用</p><h2 id="2-3-主程序设计"><a href="#2-3-主程序设计" class="headerlink" title="2.3 主程序设计"></a>2.3 主程序设计</h2><p>首先需要打印出提示信息，让用户知道如何建立家谱树。接着，首先让用户输入家谱中祖先的姓名并展示。之后让用户通过指令自由选择对家谱的操作，完成增删改查等对家谱的基本操作，并且操作完能妥善退出。</p><h1 id="3-实现"><a href="#3-实现" class="headerlink" title="3 实现"></a>3 实现</h1><h2 id="3-1-Node类实现"><a href="#3-1-Node类实现" class="headerlink" title="3.1 Node类实现"></a>3.1 Node类实现</h2><p>其实就是在以前的Node类基础上添加了一个指向自己子类的指针link。</p><p>template &lt;class T&gt; class Node<br>{<br>public:<br>T value;<br>Node&lt;T&gt; *next;<br>Node&lt;T&gt; *link;  </p><p>Node(T value) : value(value), next(nullptr), link(nullptr) {}<br>};</p><h2 id="3-2-LinkedList类实现"><a href="#3-2-LinkedList类实现" class="headerlink" title="3.2 LinkedList类实现"></a>3.2 LinkedList类实现</h2><h3 id="3-2-1-findFromTree-Node-lt-T-gt-x-T-familyName"><a href="#3-2-1-findFromTree-Node-lt-T-gt-x-T-familyName" class="headerlink" title="3.2.1 findFromTree(Node&lt;T&gt; * x,T familyName)"></a>3.2.1 findFromTree(Node&lt;T&gt; * x,T familyName)</h3><p>因为该私有函数是其他函数的基础，所以先说它的实现。</p><p>这是一个递归类型的函数，首先，其他函数调用它的时候，基本都会传入家谱的根节点root和要查找人的姓名familyName。然后，该函数的终止条件有两个，一个是在家谱中找到了那个人，那么令curFind指向这个人，并且返回。另一个是整个家谱树中都找不到这个人，即直接返回。（因为每一次调用这个函数时curFind都重置为nullptr，所以这个函数之后，如果没有找到，相当于就是curFind为nullptr，所以之后有一些也可以用这个作为判断依据）。</p><p>而该函数的查找流程是，对于传入的x，先查询它本身是否为这个人，然后再它所有子节点中递归查找，最后再在他之后的兄弟节点中递归查找。</p><p>void findFromTree(Node&lt;T&gt; * x,T familyName)<br>{<br>if(x== nullptr)<br>{<br>return;<br>}<br>if(x-&gt;value==familyName)<br>{<br>curFind = x;<br>return;<br>}<br>findFromTree(x-&gt;link,familyName);<br>for (Node&lt;T&gt; * temp=x-&gt;next;temp!= nullptr;temp=temp-&gt;next)<br>{<br>findFromTree(temp,familyName);<br>}<br>}</p><h3 id="3-2-2-add-T-familyRoot"><a href="#3-2-2-add-T-familyRoot" class="headerlink" title="3.2.2 add(T familyRoot)"></a>3.2.2 add(T familyRoot)</h3><p>该函数往家谱中添加第一个节点，即祖先。</p><p>void add(T familyRoot)<br>{<br>root = new Node&lt;T&gt;(familyRoot);<br>}</p><h3 id="3-2-3-add-T-familyName-T-childName"><a href="#3-2-3-add-T-familyName-T-childName" class="headerlink" title="3.2.3 add(T familyName,T childName)"></a>3.2.3 add(T familyName,T childName)</h3><p>先把curFind置为nullptr，然后调用之前所说的findFromTree函数，把curFind节点指向familyName这个人。如果curFind为nullptr，或者值为-1,(删除函数中会说明)说明查无此人，提示并返回。否则，往这人的link节点（即代表他的子女）后面插入一个名为childName的节点，代表他的孩子。（这里要分一下，如果本来curFind没子节点，就直接增加一个。如果本来有，则要走到curFind子节点的末尾，再在末尾加入该子女childName）。</p><p>void add(T familyName,T childName)<br>{<br>curFind = nullptr;//每次都要重新开始<br>findFromTree(root,familyName);//找到了父节点<br>if(curFind== nullptr || curFind-&gt;value==”-1”)<br>{<br>return;<br>}<br>Node&lt;T&gt; *curChild = curFind-&gt;link;//父节点的子节点,不一定存在<br>if(curChild== nullptr)<br>{<br>curChild = new Node&lt;T&gt;(childName);<br>curFind-&gt;link = curChild;<br>}<br>else<br>{<br>//平行节点<br>Node&lt;T&gt; *x = curChild;<br>while(x-&gt;next!= nullptr)<br>{<br>x = x-&gt;next;<br>}<br>x-&gt;next = new Node&lt;T&gt;(childName);<br>}<br>}</p><h3 id="3-2-4-deleteFromTree-T-fatherName"><a href="#3-2-4-deleteFromTree-T-fatherName" class="headerlink" title="3.2.4 deleteFromTree(T fatherName)"></a>3.2.4 deleteFromTree(T fatherName)</h3><p>该函数作用是将给定人物和他子女都删除。</p><p>首先还是将curFind置为找到的那个人，如果没有找到就提示返回。然后将这个人的值置为“-1”（由于没有前驱指针，所以找不到该人的上一个兄弟，所以采用这种延时删除的操作，当查询或者是其他的，看到了“-1”，就代表了这个人不存在），代表该人已经被删除了。并且将指向他子女的节点置为nullptr，并且将他的子女一一删除。</p><p>void deleteFromTree(T fatherName)<br>{<br>curFind = nullptr;//每次都要重新开始<br>findFromTree(root,fatherName);<br>if(curFind== nullptr || curFind-&gt;value==”-1”)<br>{<br>return;<br>}<br>curFind-&gt;value = “-1”;//延时实现删除操作<br>Node&lt;T&gt; *x=curFind-&gt;link;<br>curFind-&gt;link = nullptr;//子代没了  </p><p>}</p><h3 id="3-2-5-update-T-fatherName-T-updateName"><a href="#3-2-5-update-T-fatherName-T-updateName" class="headerlink" title="3.2.5 update(T fatherName,T updateName)"></a>3.2.5 update(T fatherName,T updateName)</h3><p>该函数主要更新家谱中那个人的姓名。和前面的操作差不多，都是先查找到那个人，找不到就提示并且返回，找到就把找到那个人的名字改了。</p><p>void update(T fatherName,T updateName)<br>{<br>curFind = nullptr;//每次都要重新开始<br>findFromTree(root,fatherName);<br>if(curFind== nullptr || curFind-&gt;value==”-1”)<br>{<br>return;<br>}<br>Node&lt;T&gt; *cur = curFind;<br>cur-&gt;value = updateName;<br>}</p><h3 id="3-2-6-show-T-familyName"><a href="#3-2-6-show-T-familyName" class="headerlink" title="3.2.6 show(T familyName)"></a>3.2.6 show(T familyName)</h3><p>同样是先找到那个人，找不到就提示并且返回，然后对他的所有子女节点进行遍历，如果他的子女节点值不是-1的话，就打印他的值，这样之前所说的延时删除才有了意义。</p><p>同时，用一个变量N记录子女的个数，如果子女个数为0，就打印一条提示信息null，代表该节点没有子女，以免用户在操作时产生困惑。</p><blockquote><p>  void show(T familyName)<br>  {<br>  int N = 0;//子女个数,为了在为空的时候输出一条信息<br>  curFind = nullptr;//每次都要重新开始<br>  findFromTree(root, familyName);<br>  if(curFind== nullptr || curFind-&gt;value==”-1”)<br>  {<br>  return;<br>  }<br>  for (Node&lt;T&gt; * temp=curFind-&gt;link;temp!= nullptr;temp=temp-&gt;next)<br>  {<br>  if(temp-&gt;value!=”-1”)<br>  {<br>  ++N;<br>  cout &lt;&lt; temp-&gt;value &lt;&lt; “ “;<br>  }<br>  }<br>  if(N==0)<br>  {<br>  cout &lt;&lt; “null”&lt;&lt;endl;<br>  }<br>  }</p></blockquote><h3 id="3-2-7-findFromTree-T-familyName"><a href="#3-2-7-findFromTree-T-familyName" class="headerlink" title="3.2.7 findFromTree(T familyName)"></a>3.2.7 findFromTree(T familyName)</h3><p>该函数是为了查看要查找的人在家谱中是否存在，实现很简单，但也很有用。</p><p>通过调用findFromTree函数，如果找到了就返回true，否则返回false。</p><p>bool findFromTree(T familyName)<br>{<br>curFind = nullptr;<br>findFromTree(root, familyName);<br>if(curFind== nullptr || curFind-&gt;value==”-1”)<br>return false;<br>else<br>return true;<br>}</p><h2 id="3-3-主函数的实现"><a href="#3-3-主函数的实现" class="headerlink" title="3.3 主函数的实现"></a>3.3 主函数的实现</h2><h3 id="3-3-1-总体系统描述"><a href="#3-3-1-总体系统描述" class="headerlink" title="3.3.1 总体系统描述"></a>3.3.1 总体系统描述</h3><p>先输出一些用户提示信息。然后让用户输入家谱中的祖先的名字。随后进入一个直到用户主动退出才结束的while循环，让用户选择相应的操作。当用户选择相应的操作后，给出相应的提示，让用户进行相应的输入，程序调用LinkedList类的相应增删改查函数操作，并且把结果输出给用户。因为每个操作大体类似，所以用删除操作举例：</p><p>当用户选择C时，代表要解散家谱中的某个家庭，这时给出提示信息让用户输入要解散的人的名字，然后通过LinkedList类的findFromTree函数判断输入的名字是否存在在家谱中，不存在就打印提示信息并且进入下一个循环选择。如果存在首先通过show函数展示这个人的第一代子孙，并且用deleteFromTree函数输出该人和他的子女。</p><h3 id="3-3-2-总体系统核心代码"><a href="#3-3-2-总体系统核心代码" class="headerlink" title="3.3.2 总体系统核心代码"></a>3.3.2 总体系统核心代码</h3><p>cout&lt;&lt;“请选择要执行的操作:”&lt;&lt;endl;<br>string ops;<br>cin &gt;&gt; ops;<br>while(true)<br>{<br>if(ops==”A”)<br>{<br>string fatherName;<br>int childCount;<br>cout&lt;&lt;“请输入要建立家庭的人的姓名:”;<br>cin &gt;&gt; fatherName;<br>if (families.findFromTree(fatherName))//这个人存在了才继续给他加入子女<br>{<br>cout &lt;&lt; “请输入” &lt;&lt; fatherName &lt;&lt; “的儿女人数：”;<br>cin &gt;&gt; childCount;<br>cout &lt;&lt; “请依次输入” &lt;&lt; fatherName &lt;&lt; “的儿女的姓名”;<br>string childName;<br>for (int i = 0; i &lt; childCount; ++i)<br>{<br>cin &gt;&gt; childName;<br>families.add(fatherName, childName);<br>}<br>cout &lt;&lt; fatherName &lt;&lt; “的第一代子孙是：”;<br>families.show(fatherName);<br>}<br>else<br>{<br>cout &lt;&lt; “该人不存在!”;<br>}<br>}<br>else if(ops==”B”)<br>{<br>cout &lt;&lt; “请输入要添加儿子（或女儿）的人的姓名:”;<br>string fatherName;<br>cin &gt;&gt; fatherName;<br>if (families.findFromTree(fatherName))<br>{<br>cout &lt;&lt; “ 请输入” &lt;&lt; fatherName &lt;&lt; “新添加的儿子（或女儿）的姓名：”;<br>string childName;<br>cin &gt;&gt; childName;<br>families.add(fatherName, childName);<br>cout &lt;&lt; fatherName &lt;&lt; “的第一代子孙是：”;<br>families.show(fatherName);<br>}<br>else<br>{<br>cout &lt;&lt; “该人不存在!”;<br>}<br>}<br>else if(ops==”C”)<br>{<br>cout &lt;&lt; “请输入要解散家庭的人的姓名：”;<br>string fatherName;<br>cin &gt;&gt; fatherName;<br>//删除操作<br>cout &lt;&lt; “要解散家庭的人是”&lt;&lt; fatherName&lt;&lt;endl;<br>if (families.findFromTree(fatherName))<br>{<br>cout &lt;&lt; fatherName &lt;&lt; “的第一代子孙是:”;<br>families.show(fatherName);<br>families.deleteFromTree(fatherName);<br>}<br>else<br>{<br>cout &lt;&lt; “该人不存在!”;<br>}  </p><p>}<br>else if(ops==”D”)<br>{<br>cout &lt;&lt; “请输入更改姓名的人的目前姓名”;<br>string fatherName;<br>cin &gt;&gt; fatherName;<br>if (families.findFromTree(fatherName))<br>{<br>cout &lt;&lt; “请输入更改后的姓名”;<br>string updateName;<br>cin &gt;&gt; updateName;<br>cout &lt;&lt; fatherName &lt;&lt; “已更名为” &lt;&lt;<br>updateName;//不成功的更名也会有这个提示,但是不想弄了<br>families.update(fatherName, updateName);<br>}<br>else<br>{<br>cout &lt;&lt; “该人不存在!”;<br>}<br>}<br>else if(ops==”E”)<br>{<br>string fatherName;<br>cout &lt;&lt; “ 请输入要查询人的姓名：”;<br>cin &gt;&gt; fatherName;<br>if(families.findFromTree(fatherName))<br>{<br>cout &lt;&lt;fatherName&lt;&lt; “的第一代子孙是：”;<br>families.show(fatherName);<br>}<br>else<br>{<br>cout &lt;&lt; “该人不存在!”;<br>}<br>}<br>else if(ops==”F”)<br>{<br>break;<br>}<br>cout&lt;&lt;endl&lt;&lt;“请选择要执行的操作:”&lt;&lt;endl;<br>cin&gt;&gt;ops;<br>}</p><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4 测试"></a>4 测试</h1><h2 id="4-1-功能测试"><a href="#4-1-功能测试" class="headerlink" title="4.1 功能测试"></a>4.1 功能测试</h2><h3 id="4-1-1-建立功能测试"><a href="#4-1-1-建立功能测试" class="headerlink" title="4.1.1 建立功能测试"></a>4.1.1 建立功能测试</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/1ecf880c07339b6f915da76ab1096eac.png"></p><h3 id="4-1-2-插入功能测试"><a href="#4-1-2-插入功能测试" class="headerlink" title="4.1.2 插入功能测试"></a>4.1.2 插入功能测试</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/5843e748ccae8628603d30aed0a29bb7.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/9a42edb88cfcf6fef4846454ef1feb4f.png"></p><h3 id="4-1-3-删除功能测试"><a href="#4-1-3-删除功能测试" class="headerlink" title="4.1.3 删除功能测试"></a>4.1.3 删除功能测试</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/ef4fe21180570c065692cfcb54e3610e.png"></p><h3 id="4-1-4-查找功能测试"><a href="#4-1-4-查找功能测试" class="headerlink" title="4.1.4 查找功能测试"></a>4.1.4 查找功能测试</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/65d49c01ab9059b8d0b1a77471de17f1.png"></p><h3 id="4-1-5-修改功能测试"><a href="#4-1-5-修改功能测试" class="headerlink" title="4.1.5 修改功能测试"></a>4.1.5 修改功能测试</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/8abd6aef4a6ea692e70cb21f70c9241a.png"></p><h2 id="4-2-边界测试"><a href="#4-2-边界测试" class="headerlink" title="4.2 边界测试"></a>4.2 边界测试</h2><h3 id="4-2-1-要建立家庭的人不在家谱中"><a href="#4-2-1-要建立家庭的人不在家谱中" class="headerlink" title="4.2.1 要建立家庭的人不在家谱中"></a>4.2.1 要建立家庭的人不在家谱中</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/cedb11b06c24ec43315dc22aa30a50fa.png"></p><h3 id="4-2-2-要增加子女的人不在家谱中"><a href="#4-2-2-要增加子女的人不在家谱中" class="headerlink" title="4.2.2 要增加子女的人不在家谱中"></a>4.2.2 要增加子女的人不在家谱中</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/b2f3357e015f8a746a640464b9112c38.png"></p><h3 id="4-2-3-要解散家庭的人不在家谱中"><a href="#4-2-3-要解散家庭的人不在家谱中" class="headerlink" title="4.2.3 要解散家庭的人不在家谱中"></a>4.2.3 要解散家庭的人不在家谱中</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/0db4755d60b7c6330faff9474dec14fc.png"></p><h3 id="4-2-4-要更改姓名的人不在家谱中"><a href="#4-2-4-要更改姓名的人不在家谱中" class="headerlink" title="4.2.4 要更改姓名的人不在家谱中"></a>4.2.4 要更改姓名的人不在家谱中</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/cb9e7e7e02487293ff98f1fb483e8431.png"></p><h3 id="4-2-5-要查询的人不在家谱中"><a href="#4-2-5-要查询的人不在家谱中" class="headerlink" title="4.2.5 要查询的人不在家谱中"></a>4.2.5 要查询的人不在家谱中</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/8834a573f1c2c0dcc8a99e2ffd4b21cf.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构项目-------算数表达式求解</title>
      <link href="posts/38c2cf7b.html"/>
      <url>posts/38c2cf7b.html</url>
      
        <content type="html"><![CDATA[<h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a><a href="https://github.com/tongji4m3/DataStructureDesign" target="_blank" rel="noopener">源码地址</a></h1><blockquote><p>  算数表达式求解</p><p>  数据结构作业 C++语言实现</p><p>  直接从word文档转的,代码格式有些问题,建议在源码地址查看word版</p></blockquote><h1 id="1-分析"><a href="#1-分析" class="headerlink" title="1 分析"></a>1 分析</h1><h2 id="1-1-项目要求"><a href="#1-1-项目要求" class="headerlink" title="1.1 项目要求"></a>1.1 项目要求</h2><p>从键盘上输入中缀算数表达式，包括括号，计算出表达式的值。</p><p>程序对所有输入的表达式作简单的判断，如表达式有错，能给出适当的提示。</p><p>支持包括加减，乘除取余，乘方和括号等操作符，其中优先级是等于&lt;括号&lt;加减&lt;乘除取余&lt;乘方。</p><p>能处理单目运算符：+或-。</p><h2 id="1-2-功能分析"><a href="#1-2-功能分析" class="headerlink" title="1.2 功能分析"></a>1.2 功能分析</h2><p>首先,得对输入表达式进行判断,看它是否合理,如果不合理,要指出错误之处;如果是合理的,那么要计算这个表达式的结果并返回。</p><p>表达式是否错误根据下面几条进行判断：</p><blockquote><p>  1.出现了除了+-* % / ^ ()=,数字以外的其他字符</p></blockquote><blockquote><p>  2.()匹配不全 或者()里面为空</p></blockquote><blockquote><p>  3.表达式没有结束之前出现了=,或者表达式最后不是=</p></blockquote><blockquote><p>  4.+-不是开头,或者前方不是( 一目运算符</p></blockquote><blockquote><p>  5.运算符前方或者后方无数字或者(),左边为),右边为(,避免(+) 二目运算符</p></blockquote><h1 id="2-设计"><a href="#2-设计" class="headerlink" title="2 设计"></a>2 设计</h1><h2 id="2-1-主函数设计"><a href="#2-1-主函数设计" class="headerlink" title="2.1 主函数设计"></a>2.1 主函数设计</h2><p>先输入表达式，调用函数判断表达式是否合理，如果合理，首先将之转换为后续表达式，输出后续表达式的字符串，并且调用函数计算后续表达式，并且打印后续表达式的结果。</p><p>（因为之后需要用到栈，所以程序还出现了Stack.h，与Node.h，因为之前的题目也用过，所以这里直接复用之前已经实现的了，不在重新说明。）</p><h2 id="2-2-isValid-函数设计"><a href="#2-2-isValid-函数设计" class="headerlink" title="2.2 isValid()函数设计"></a>2.2 isValid()函数设计</h2><p>大致就是通过循环查看表达式每一个字符来判断表达式是否符合上面几条，如果不合法，就输出对应的提示信息，并且函数返回false，表示表达式有误，直到所有的条件都满足了，才返回true。</p><p>主要的难度就是对（）合理性的判断，于是通过许多条件限制来判断是否是合理的表达式，如：左括号右边都没出现右括号；检测到了右括号后，在该处左边的右括号数量大于左括号数量；以及左括号右括号之中没有东西等。</p><p>随后，当+-作为单目运算符，或者双目运算符的相关讨论也需要进行比较细致的分类讨论。再对其他运算符进行讨论是否合理。</p><h2 id="2-3-toPostOrder-函数设计"><a href="#2-3-toPostOrder-函数设计" class="headerlink" title="2.3 toPostOrder()函数设计"></a>2.3 toPostOrder()函数设计</h2><p>该函数目的是将之前的那个已经检验过合理性的表达式转为后续表达式，因为后序表达式能直接的计算。大致思路是：用栈存储运算符（char类型），然后遍历传入的字符串，分情况讨论，例如处理一目运算符+-（正负），处理数字，处理左右括号，处理其他运算符等。准备一个string存储后序表达式，如果是数字直接放入，如果是其他，则要小心的判断优先级，当遇到的优先级不断增大时，压入栈中，如果优先级相同,则将所有小于等于他优先级的运算符弹出,再在栈中加入这个运算符。这样就能保证后续表达式优先级正确了。在每个元素之间，还加入了一个空格（如12<br>5<br>+），这样可以避免出现将之读为125的bug。大致就是这样转换，但是还有许多细节来保证转换正确，这将在函数实现中进行细致讨论。</p><h2 id="2-4-caculatePostOrder-函数设计"><a href="#2-4-caculatePostOrder-函数设计" class="headerlink" title="2.4 caculatePostOrder ()函数设计"></a>2.4 caculatePostOrder ()函数设计</h2><p>该函数通过传入一个后续表达式,输出一个int值,代表表达式的结果。主要设计思路是用栈存储数值，遍历后续表达式，如果是数字就把整个数字压入栈中（如遇到19）会把19压入，而不是压入1和9。如果遍历到了操作符，那么就将栈顶两个元素取出并且计算，再压入栈中（因为这时是后续表达式，后续表达式已经把优先级等都考虑好了，所以只要根据符号采取特定的方法计算即可）。遍历完之后将栈顶元素返回，这个即为表达式的值。</p><h1 id="3-实现"><a href="#3-实现" class="headerlink" title="3 实现"></a>3 实现</h1><h2 id="3-1-主函数实现"><a href="#3-1-主函数实现" class="headerlink" title="3.1 主函数实现"></a>3.1 主函数实现</h2><p>先让用户输入表达式，然后判断合理性，合理的话再打印转换成为后续表达式的字符串，随后打印表达式的结果，最后让用户选择是否结束程序（不这样的话运行exe文件输入完之后就会退出，强制设定退出时间也不太好，所以让用户自己选择）。</p><p>int main()<br>{<br>while(true)<br>{<br>string expr,isContinue;<br>cout &lt;&lt; “输入表达式：” &lt;&lt; endl;<br>getline(cin,expr);<br>if(isValid(expr))<br>{<br>string postOrderedExpr=toPostOrder(expr);<br>cout &lt;&lt;“后序表达式为:”&lt;&lt; postOrderedExpr&lt;&lt;endl;<br>int result = caculatePostOrder(postOrderedExpr);<br>cout&lt;&lt;result&lt;&lt;endl;<br>}<br>cout&lt;&lt;“任意键继续,n退出？”;<br>getline(cin,isContinue);<br>if(isContinue==”n”)<br>{<br>break;<br>}<br>}<br>return 0;<br>}</p><h2 id="3-2-isValid-函数实现"><a href="#3-2-isValid-函数实现" class="headerlink" title="3.2 isValid()函数实现"></a>3.2 isValid()函数实现</h2><h3 id="3-2-1-简单的判断"><a href="#3-2-1-简单的判断" class="headerlink" title="3.2.1 简单的判断"></a>3.2.1 简单的判断</h3><p>对表达式进行遍历（对运算符和左右括号的判断也在遍历表达式的时候进行，只不过为了分节而在下面几节再叙述），如果出现了表达式意外的字符，即既不是数字又不是+-*/%^=(),则立即提示并且返回。如果表达式没有结束之前出现了=,或者表达式最后不是=，也提示并且返回。</p><p>if(expr[i]!=’+’&amp;&amp;expr[i]!=’-‘&amp;&amp;expr[i]!=’*‘&amp;&amp;expr[i]!=’/‘&amp;&amp;expr[i]!=’%’&amp;&amp;expr[i]!=’^‘&amp;&amp;<br>expr[i]!=’(‘&amp;&amp;expr[i]!=’)’&amp;&amp;expr[i]!=’=’&amp;&amp; !(expr[i]&lt;=’9’&amp;&amp;expr[i]&gt;=’0’))<br>{<br>cout&lt;&lt;“表达式含有非法字符”&lt;&lt;endl;<br>return false;<br>}</p><p>if(i==N-1 &amp;&amp; expr[i]!=’=’)<br>{<br>cout &lt;&lt; “不以=结尾”&lt;&lt;endl;<br>return false;<br>}<br>if(i!=N-1 &amp;&amp; expr[i]==’=’)<br>{<br>cout &lt;&lt; “表达式中出现了=”&lt;&lt;endl;<br>return false;<br>}</p><h3 id="3-2-2-对左右括号的判断"><a href="#3-2-2-对左右括号的判断" class="headerlink" title="3.2.2 对左右括号的判断"></a>3.2.2 对左右括号的判断</h3><p>对于每一个左括号，如果它右边位置都没出现右括号则提示并返回，这样能确保有足够的右括号，但是右括号可能多了，于是需要对右括号进行判断。</p><p>对于每一个右括号，从该位置计算，如果左边的左括号数量小于了右括号的数量（该右括号也算上），那么是不合理的，则提示并返回。这样对于每一个右括号，都保证它左边有充分的左括号（或许多了，但是经过上面的条件，则符合条件的左右括号应该正好完全匹配）。</p><p>还判断了空（）的情况，即左括号右括号之中没有东西，那么也视为不合理，则提示并返回。</p><p>if(expr[i]==’(‘)<br>{<br>if(expr.find(‘)’, i)==-1)<br>{<br>cout&lt;&lt;“没有足够的右括号匹配左括号”&lt;&lt;endl;<br>return false;<br>}<br>}<br>if(expr[i]==’)’)<br>{<br>int leftCount = 0, rightCount = 0;//()的个数<br>for (int j = 0; j &lt;= i; ++j)<br>{<br>if(expr[j]==’(‘)<br>{<br>++leftCount;<br>}<br>else if(expr[j]==’)’)<br>{<br>++rightCount;<br>}<br>}<br>if(leftCount&lt;rightCount)<br>{<br>cout&lt;&lt;“没有足够的左括号匹配右括号”&lt;&lt;endl;<br>return false;<br>}<br>}<br>if(expr[i]==’(‘ &amp;&amp;i+1&lt;N &amp;&amp; expr[i+1]==’)’)<br>{<br>cout&lt;&lt;“出现了空()”&lt;&lt;endl;<br>return false;<br>}</p><h3 id="3-2-3单目表达式的判断"><a href="#3-2-3单目表达式的判断" class="headerlink" title="3.2.3单目表达式的判断"></a>3.2.3单目表达式的判断</h3><p>之所以单独讨论，是因为要以单目运算符，双目运算符来分别讨论。</p><p>如果这两个符号是表达式的第一个元素，或者它左边是左括号（这里假定合理的表达式中单目表达式都用括号括起来，如（-1）），则是单目表达式，代表的是正负。而是单目运算符时，他右边可以是一个子表达式（判断条件是它右边第一个元素是左括号），或者是一个数（判断条件是右边第一个字符大于‘0’并且小于‘9’）。否则不合理，则提示并返回。</p><p>如果出现的=-不是单目运算符正负，那么再通过左右条件判断是否是合理的双目运算符，即为加减。而这样他们和其他运算符判断方式一样，在下一小节统一叙述。</p><p>if(expr[i]==’+’ || expr[i]==’-‘)<br>{<br>if(i==0 || expr[i-1]==’(‘)//满足第四点 单目运算符<br>{<br>if(i+1&lt;N &amp;&amp; ((expr[i+1]==’(‘)||(expr[i+1]&lt;=’9’&amp;&amp;expr[i+1]&gt;=’0’)))//合理了的<br>{<br>}<br>else<br>{<br>cout&lt;&lt;“+-后面没有数字或者(“&lt;&lt;endl;<br>return false;<br>}<br>}<br>//i+1存在,并且左边是)或者数字,并且右边是(或者数字<br>else if(i+1&lt;N &amp;&amp; (expr[i-1]==’)’ || (expr[i-1]&lt;=’9’&amp;&amp;expr[i-1]&gt;=’0’))&amp;&amp;<br>((expr[i+1]==’(‘)||(expr[i+1]&lt;=’9’&amp;&amp;expr[i+1]&gt;=’0’)))//i-1肯定&gt;=0,因为上面的条件<br>{  </p><p>}<br>else<br>{<br>cout&lt;&lt;“不合理的+-“&lt;&lt;endl;<br>return false;<br>}<br>}</p><h3 id="3-2-4-双目表达式的判断"><a href="#3-2-4-双目表达式的判断" class="headerlink" title="3.2.4 双目表达式的判断"></a>3.2.4 双目表达式的判断</h3><p>判断很简单，首先，要判断双目表达式的左右两边不是空的，因为双目表达式需要接受两个操作数。然后判断它左右两边是否是子表达式，或者是数字。如果不是这两者之一，就是不合理的双目表达式，则不合理，则提示并返回。</p><p>if(expr[i]==’^‘||expr[i]==’%’||expr[i]==’*‘||expr[i]==’/‘)<br>{<br>if(i-1&gt;=0 &amp;&amp; i+1&lt;N &amp;&amp; ((expr[i-1]==’)’ ||<br>(expr[i-1]&lt;=’9’&amp;&amp;expr[i-1]&gt;=’0’))&amp;&amp;<br>((expr[i+1]==’(‘)||(expr[i+1]&lt;=’9’&amp;&amp;expr[i+1]&gt;=’0’))))<br>{<br>//合格<br>}<br>else<br>{<br>cout&lt;&lt;“不合理的*/^%”&lt;&lt;endl;<br>return false;<br>}<br>}</p><h2 id="3-3-toPostOrder-函数实现"><a href="#3-3-toPostOrder-函数实现" class="headerlink" title="3.3 toPostOrder()函数实现"></a>3.3 toPostOrder()函数实现</h2><h3 id="3-3-1函数描述"><a href="#3-3-1函数描述" class="headerlink" title="3.3.1函数描述"></a>3.3.1函数描述</h3><p>用一个map将运算符和他对应的优先级绑定（用数字表示，数字越大优先级越高）。并且准备一个栈存储运算符字符，一个字符串存储整个后续表达式。</p><p>开始遍历整个原始的表达式字符串，根据字符的不同采取不同的操作：</p><blockquote><p>  1.如果是一目运算符=-(正负),(判断是他们的条件是他们是第一个字符或者前方是左括号),如果是+,不处理,如果是-,那么就相当于是0-目标数,例如-5,那么后续表达式就加入0<br>  5<br>  -,这里注意两点,一是,作为负号,优先级是最高的,所以不用考虑其他符号,直接加入即可。二是需要小心的加入空格，如这里必须要是0<br>  5 -，不能是05 -。</p></blockquote><blockquote><p>  2.如果是数字，那么用另外的指针记录该位置，该指针循环往后直到找到第一个非数字字符，把整个数字都截取出来加入到后序表达式中，再再后续表达式后面加上一个空格，避免出现原本代表两个数的后续表达式（10<br>  5 +）变成了错误的（105+）。</p></blockquote><blockquote><p>  3.处理左括号（，左括号就直接压入栈中，将来作为一个弹栈的标志。</p></blockquote><blockquote><p>  4.处理非）的其他字符，因为是按顺序处理下来的，代表前方已经处理了一目运算符，左括号，数字，所以这里的<br>  ！=‘）’<br>  代表了所有其他的双目运算符。首先，如果栈为空的话，直接将该运算符压入栈中，而如果栈不为空，则需要与栈顶元素对比，将所有大于等于该运算符优先级的栈元素依次取出栈，放入后续表达式中，这样就能保证优先级大的总是优先计算，而大于等于的都取出来是因为如果是等于的话，代表前后的优先级是相同的，但是为了从左往右计算，所以需要把左边那个优先级相等的运算符先取出来放入后续表达式中。当确保栈中没有大于等于该运算符的元素后，再将该运算符放入栈中。</p></blockquote><blockquote><p>  5.处理右括号）运算符，到这一步时，只需要不断弹栈，不断将栈中运算符加入后续表达式中直到遇到左括号（为止，因为在处理其他运算符时运算符已经按照相应的顺序在栈中或者在后续表达式中摆放好了，所以直接这样处理即可。</p></blockquote><blockquote><p>  循环结束后，已经将所有的数字和大部分运算符放入了后续表达式中，但是最后还会有少部分的运算符存在栈中（除非表达式最后一个字符是右括号）），所以此时要把栈中剩余所有元素放入后续表达式中。最后，将后续表达式返回即可。</p></blockquote><h3 id="3-3-2-函数代码"><a href="#3-3-2-函数代码" class="headerlink" title="3.3.2 函数代码"></a>3.3.2 函数代码</h3><pre><code>string toPostOrder(const string &amp; expr)  {  unordered_map\&lt;char,int\&gt; priority;//存储运算符的优先级  priority[&#39;=&#39;] = 1;  priority[&#39;(&#39;] = 2;  priority[&#39;)&#39;] = 2;  priority[&#39;+&#39;] = 3;  priority[&#39;-&#39;] = 3;  priority[&#39;\*&#39;] = 4;  priority[&#39;/&#39;] = 4;  priority[&#39;%&#39;] = 5;  priority[&#39;\^&#39;] = 6;  string postOrderedExpr;  Stack\&lt;char\&gt; ops;//存储运算符的  for (int i = 0; i \&lt; expr.length(); ++i)  {  //处理一目运算符  if((expr[i]==&#39;+&#39; \|\| expr[i]==&#39;-&#39;)&amp;&amp;(i == 0 \|\| expr[i - 1] ==&#39;(&#39;))//当作正负来使用时  {  if(expr[i]==&#39;+&#39;)  {  //忽略他  }  else  {  postOrderedExpr += &quot;0 &quot;;  ++i;//将-后面的读入  postOrderedExpr += expr[i];  postOrderedExpr += &quot; - &quot;;  }  }  elseif(expr[i]\&lt;=&#39;9&#39;&amp;&amp;expr[i]\&gt;=&#39;0&#39;)//这里需要处理下,就是如果输入大于0-9的数字也能正确处理  {  int hi = i+1;  while (true)  {  if (hi \&lt; expr.length() &amp;&amp; expr[hi] \&lt;= &#39;9&#39;&amp;&amp;expr[hi] \&gt;= &#39;0&#39;)  {  ++hi;  }  else  {  break;  }  }  //hi指向的是数字后面的第一个非数字字符  //expr.substr(i, hi - i); 得到了数字的字符串  postOrderedExpr += expr.substr(i, hi - i);  postOrderedExpr += &quot; &quot;;//避免出现10+5-\&gt;105+的问题  i = hi - 1;  }  else if(expr[i]==&#39;(&#39;)  {  ops.push(expr[i]);  }  else if(expr[i]!=&#39;)&#39;)//除)外的运算符都压入  {  if(ops.empty())//栈为空,简单压入即可  {  ops.push(expr[i]);  }  else  {  //需要与栈顶运算符比较优先级  int topStackPriority = priority[ops.top()];  if(priority[expr[i]]\&gt;topStackPriority)  {  ops.push(expr[i]);  }  else  {  //优先级相同,必将弹出之前所有小于等于他优先级的运算符,再加入这个运算符  while(!ops.empty() &amp;&amp; priority[expr[i]]\&lt;=topStackPriority)  {  postOrderedExpr += ops.top();  postOrderedExpr += &quot; &quot;;  ops.pop();  if(!ops.empty())  {  topStackPriority = priority[ops.top()];  }  }  ops.push(expr[i]);  }  }  }  else if(expr[i]==&#39;)&#39;)  {  //表达式检验过,一定正确,所以可以直接这样用  while(ops.top()!=&#39;(&#39;)  {  postOrderedExpr += ops.top();  postOrderedExpr += &quot; &quot;;//避免出现10+5-\&gt;105+的问题  ops.pop();  }  ops.pop();//把(弹出去  }  }  //剩下的运算符一起加上  while(!ops.empty())  {  if(ops.top()!=&#39;=&#39;)//不要=  {  postOrderedExpr += ops.top();  postOrderedExpr += &quot; &quot;;  }  ops.pop();  }  return postOrderedExpr;  }</code></pre><h2 id="3-4-caculatePostOrder（）的实现"><a href="#3-4-caculatePostOrder（）的实现" class="headerlink" title="3.4 caculatePostOrder（）的实现"></a>3.4 caculatePostOrder（）的实现</h2><h3 id="3-4-1函数描述"><a href="#3-4-1函数描述" class="headerlink" title="3.4.1函数描述"></a>3.4.1函数描述</h3><p>传入一个后续表达式，将计算的结果以int类型返回。</p><p>用栈存储int类型数字。对后续表达式进行遍历，如果是数字，同样，得按照和前面一样的方法，将整个数字取出来，如23等，将数字放入栈中。如果是运算符，根据运算符的不同，采取相应的操作，但其实操作是很类似的，都是从栈中取出两个数字，用前面的数采用相应的运算符和后面的数进行计算，并且将运算符重新加入栈中。</p><p>因为一目运算符正负=-已经转换为空或者双目运算符，左右括号也去掉，表达式也是合理的了，所以只要这样简单的运算到后续表达式结束即可得到结果，而结果就是栈顶元素。</p><h3 id="3-4-2-函数代码"><a href="#3-4-2-函数代码" class="headerlink" title="3.4.2 函数代码"></a>3.4.2 函数代码</h3><p>（一些重复部分没放上来）</p><p>int caculatePostOrder(const string &amp; postOrderedExpr)<br>{<br>Stack&lt;int&gt; nums;<br>for (int i = 0; i &lt; postOrderedExpr.length(); ++i)<br>{<br>if(postOrderedExpr[i]&lt;=’9’&amp;&amp;postOrderedExpr[i]&gt;=’0’)<br>{<br>//还要考虑处理大于10的数字  </p><p>int hi = i + 1;<br>while (true)<br>{<br>if (hi &lt; postOrderedExpr.length() &amp;&amp; postOrderedExpr[hi] &lt;=<br>‘9’&amp;&amp;postOrderedExpr[hi] &gt;= ‘0’)<br>{<br>++hi;<br>}<br>else<br>{<br>break;<br>}  </p><p>}<br>//hi指向的是数字后面的第一个非数字字符<br>//postOrderedExpr.substr(i, hi - i); 得到了数字的字符串  </p><p>nums.push(atoi(postOrderedExpr.substr(i, hi - i).c_str()));  </p><p>i = hi - 1;<br>}<br>else if(postOrderedExpr[i]==’^‘)<br>{<br>//num1为左,num2为右<br>int num2 = nums.top();<br>nums.pop();<br>int num1 = nums.top();<br>nums.pop();<br>nums.push(pow(num1, num2));<br>}<br>else if(postOrderedExpr[i]==’%’)<br>{<br>//num1为左,num2为右<br>int num2 = nums.top();<br>nums.pop();<br>int num1 = nums.top();<br>nums.pop();<br>nums.push(num1%num2);<br>}  </p><p>}<br>return nums.top();<br>}</p><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4 测试"></a>4 测试</h1><h2 id="4-1-功能测试"><a href="#4-1-功能测试" class="headerlink" title="4.1 功能测试"></a>4.1 功能测试</h2><h3 id="4-1-1-测试1"><a href="#4-1-1-测试1" class="headerlink" title="4.1.1 测试1"></a>4.1.1 测试1</h3><p><strong>测试用例</strong>：101+222=</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/3b0feb3db599b29bb40f8324b63a5999.png"></p><h3 id="4-1-2-测试2"><a href="#4-1-2-测试2" class="headerlink" title="4.1.2 测试2"></a>4.1.2 测试2</h3><p><strong>测试用例：</strong>-2*(3+5)+2^3/4=</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/87e4d36191d5d4540aef89f800956e6c.png"></p><h3 id="4-1-3-测试3"><a href="#4-1-3-测试3" class="headerlink" title="4.1.3 测试3"></a>4.1.3 测试3</h3><p><strong>测试用例：</strong>5+(-3*(-6))=</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/9e201b33a2306b0f53b4a333b27229b9.png"></p><h3 id="4-1-4-测试4"><a href="#4-1-4-测试4" class="headerlink" title="4.1.4 测试4"></a>4.1.4 测试4</h3><p><strong>测试用例：</strong> 2^4/8-(+2+8)%3=</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/fc08f317871e93a46b5286a9a2f94e89.png"></p><h3 id="4-1-4-测试5"><a href="#4-1-4-测试5" class="headerlink" title="4.1.4 测试5"></a>4.1.4 测试5</h3><p><strong>测试用例：</strong> 1+(-5*3)/(-2)-9/2=</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/4a5c05685b663cdadd33ad595a0ad38e.png"></p><h3 id="4-1-4-测试6"><a href="#4-1-4-测试6" class="headerlink" title="4.1.4 测试6"></a>4.1.4 测试6</h3><p><strong>测试用例：</strong> 2*101-31*24=</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/a0e6b9a48eac835cdef546116facb972.png"></p><h2 id="4-2-非法表达式测试"><a href="#4-2-非法表达式测试" class="headerlink" title="4.2 非法表达式测试"></a>4.2 非法表达式测试</h2><h3 id="4-2-1-含有非法字符"><a href="#4-2-1-含有非法字符" class="headerlink" title="4.2.1 含有非法字符"></a>4.2.1 含有非法字符</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/480a0d4c4fb144eef60f6cb52020c9d3.png"></p><h3 id="4-2-2-左右括号中内容为空"><a href="#4-2-2-左右括号中内容为空" class="headerlink" title="4.2.2 左右括号中内容为空"></a>4.2.2 左右括号中内容为空</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/2ee5ff4b96f3d904342cfb904b4afeaa.png"></p><h3 id="4-2-3-左右括号不匹配"><a href="#4-2-3-左右括号不匹配" class="headerlink" title="4.2.3 左右括号不匹配"></a>4.2.3 左右括号不匹配</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/6deba4f18cb7d5abc5a3a1e4f80152fc.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/fc3dc005e974be2057305ab3f7b57d0a.png"></p><h3 id="4-2-4-等号位置错误"><a href="#4-2-4-等号位置错误" class="headerlink" title="4.2.4 等号位置错误"></a>4.2.4 等号位置错误</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/f81ada7588a4bc5102ded4253d49193b.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/13e27456b27841991812efd63041ca47.png"></p><h3 id="4-2-5-正负号不合理"><a href="#4-2-5-正负号不合理" class="headerlink" title="4.2.5 正负号不合理"></a>4.2.5 正负号不合理</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/8beb181f79e57702123cb2496b44e568.png"></p><h3 id="4-2-6-双目运算符使用不合理"><a href="#4-2-6-双目运算符使用不合理" class="headerlink" title="4.2.6 双目运算符使用不合理"></a>4.2.6 双目运算符使用不合理</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/275c7a98a4363b5a43f707cb2d1cf470.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构项目-------电网建设造价模拟系统</title>
      <link href="posts/ada3a5c8.html"/>
      <url>posts/ada3a5c8.html</url>
      
        <content type="html"><![CDATA[<h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a><a href="https://github.com/tongji4m3/DataStructureDesign" target="_blank" rel="noopener">源码地址</a></h1><blockquote><p>  电网建设造价模拟系统</p><p>  数据结构作业 C++语言实现</p><p>  直接从word文档转的,代码格式有些问题,建议在源码地址查看word版</p></blockquote><h1 id="1-分析"><a href="#1-分析" class="headerlink" title="1 分析"></a>1 分析</h1><h2 id="1-1-项目简介"><a href="#1-1-项目简介" class="headerlink" title="1.1 项目简介"></a>1.1 项目简介</h2><p>假设一个城市有n个小区，要实现n个小区之间的电网都能够相互接通，构造这个城市n个小区之间的电网，使总工程造价最低。请设计一个能够满足要求的造价方案。</p><p>在每个小区之间都可以设置一条电网线路，都要付出相应的经济代价。n个小区之间最多可以有n（n-1）/2条线路，选择其中的n-1条使总的耗费最少。</p><h2 id="1-2-功能分析"><a href="#1-2-功能分析" class="headerlink" title="1.2 功能分析"></a>1.2 功能分析</h2><p>首先,每个小区当作一个顶点,那么就有n个顶点。两个小区之间设置一条电网线路相互联通且有相应的经济代价。所以可以抽取为一个加权无向图的模型。</p><p>所以问题就成了求一个加权无向图的最小生成树。所以首先需要用户输入小区即顶点数，并且给每个小区进行命名以方便查看。然后用户将添加若干个电网线路以及他们之间的花费。而程序就负责找出这个加权无向图的最小生成树，并且显示出来。</p><p>我用了Kruskal算法,所以需要许多类来辅助。大致架构是，MainTest类与用户交互，负责接受用户输入，并且用EdgeWeightedGraph类构造加权无向图，并且通过KruskalMST类得到一个存储边（Edge类）的队列（Queue类）（存储了最小生成树的边），然后再将这些边显示出来。而KruskalMST类还需要最小堆（MinPQ类）找最小的边与UF类辨认连通分量。所以总的来说有八个类以及一个input.txt存储一些测试数据。</p><h1 id="2-设计与实现"><a href="#2-设计与实现" class="headerlink" title="2 设计与实现"></a>2 设计与实现</h1><h2 id="2-1-Edge-h设计与实现"><a href="#2-1-Edge-h设计与实现" class="headerlink" title="2.1 Edge.h设计与实现"></a>2.1 Edge.h设计与实现</h2><p>Edge类代表了图中的边，它有三个成员变量：边的两个顶点v，w与double类型的权值weight。</p><p>构造函数就将这三个参数传入；还有三个函数分别得到v，w，weight的值，不过有些不同的是other函数是根据传入的边传出另外一条边，更加的灵活（如other（v）传回w）。最后重载了小于运算符&lt;,根据weight进行比较。</p><p>class Edge<br>{<br>public:<br>Edge(){}<br>Edge(int v, int w, double weight) : v(v), w(w), weight(weight) {}  </p><p>int either() const<br>{<br>return v;<br>}  </p><p>int other(int vertex) const<br>{<br>if(vertex==v)<br>return w;<br>else if(vertex==w)<br>return v;<br>}  </p><p>double getWeight() const<br>{<br>return weight;<br>}  </p><p>bool operator &lt; (const Edge &amp; that) const<br>{<br>if (weight &lt; that.weight)<br>return true;<br>else<br>return false;<br>}  </p><p>private:<br>int v;<br>int w;<br>double weight;<br>};</p><h2 id="2-2-EdgeWeightedGraph-h设计与实现"><a href="#2-2-EdgeWeightedGraph-h设计与实现" class="headerlink" title="2.2 EdgeWeightedGraph.h设计与实现"></a>2.2 EdgeWeightedGraph.h设计与实现</h2><p>代表了图。三个成员变量，分别是顶点的数量V，边的数量E以及邻接表adj。其中邻接表存储了每个顶点所含有的边（类型为vector&lt;vector&lt;Edge&gt;&gt;）。</p><p>构造函数将给定顶点数量N，并且让边为0，而且为邻接表adj开辟N个空间，使得每个顶点i都能使用adj[i]。</p><p>函数有返回V和E数量的函数，以及添加边的函数addEdge（）：传入一条边，并且让边的两个顶点的邻接表分别加入这条边，最后让边数量+1。还有一个返回所以边的函数edges（）：很简单，就是遍历邻接表，对于每个顶点的每条边，将边放入队列中，需要注意的是，因为是无向图，所以如果所有顶点的边都加入就重复了，所以只加入v&lt;w</p><p>的边，防止重复。</p><p>class EdgeWeightedGraph<br>{<br>public:<br>EdgeWeightedGraph(int v) : V(v),E(0)<br>{<br>vector&lt;vector&lt;Edge&gt;&gt; temp(V);<br>adj=temp;<br>}  </p><p>void addEdge(Edge e)<br>{<br>int v = e.either();<br>int w = e.other(v);<br>adj[v].push_back(e);//往邻接表中添加<br>adj[w].push_back(e);<br>++E;<br>}  </p><p>Queue&lt;Edge&gt; edges()//返回所有边<br>{<br>Queue&lt;Edge&gt; queue;<br>for (int v = 0; v &lt; V; ++v)<br>{<br>for(Edge e:adj[v])<br>{<br>if(e.other(v)&gt;v)<br>{<br>queue.enqueue(e);<br>}<br>}<br>}<br>return queue;<br>}  </p><p>int getV()<br>{<br>return V;<br>}  </p><p>int getE()<br>{<br>return E;<br>}  </p><p>private:<br>int V;<br>int E;<br>vector&lt;vector&lt;Edge&gt;&gt; adj;//邻接表  </p><p>};</p><h2 id="2-3-Queue-h与Node-h设计与实现"><a href="#2-3-Queue-h与Node-h设计与实现" class="headerlink" title="2.3 Queue.h与Node.h设计与实现"></a>2.3 Queue.h与Node.h设计与实现</h2><p>因为很多地方用到队列，所以又自己实现了一遍。队列需要用到Node.h之前说过很多此就不说了。</p><p>队列为模板类，存储T类型。成员变量是指向队首的first指针以及指向队尾的last指针，还有一个存储元素个数的N。</p><p>队列主要就是enqueue，dequeue以及empty和size四个函数。empty只要判断N==0即可，size也只要返回N即可。enqueue就是在队尾加入元素，具体操作为：如果队列为空，让头尾指针同时指向加入的元素，让计数N++。如果不为空，让当前的last-&gt;next指向新加入元素，再让last指向当前的最后元素，让计数N++。dequeue就将队首弹出，让first指向下一个元素，让计数N–，再稍微处理异常情况，比如弹出队首后让last也为空。</p><p>template &lt;class T&gt; class Node<br>{<br>public:  </p><p>Node(const T &amp; value, Node&lt;T&gt; *next= nullptr) : value(value), next(next) {}<br>Node(Node&lt;T&gt; *next= nullptr) : next(next) {}  </p><p>T value;<br>Node&lt;T&gt; *next;<br>};</p><p>template &lt;class T&gt; class Queue<br>{<br>public:<br>void enqueue(T t)<br>{<br>if(empty())//为空指向同一个<br>{<br>first=new Node&lt;T&gt;(t, nullptr);<br>last=first;<br>}<br>else<br>{<br>Node&lt;T&gt; * temp = new Node&lt;T&gt;(t, nullptr);<br>last-&gt;next=temp;<br>last=temp;<br>}<br>++N;<br>}<br>T dequeue()<br>{<br>if (empty())<br>throw “队列为空”;<br>T value=first-&gt;value;<br>first=first-&gt;next;<br>–N;<br>if(empty())<br>last= nullptr;<br>return value;<br>}  </p><p>bool empty()<br>{<br>return N==0;<br>}  </p><p>int size()<br>{<br>return N;<br>}  </p><p>private:<br>Node&lt;T&gt; * first;<br>Node&lt;T&gt; * last;<br>int N = 0;<br>};</p><h2 id="2-4-MinPQ-h设计与实现"><a href="#2-4-MinPQ-h设计与实现" class="headerlink" title="2.4 MinPQ.h设计与实现"></a>2.4 MinPQ.h设计与实现</h2><p>当构造一个堆时，需要输入一个堆中应该存的元素数量最大值len，令堆中的成员变量数组的长度为len+1，（因为不用数组的vec[0]），堆的这个类还有一个N记录当前堆的元素数量。</p><p>公有函数：</p><blockquote><p>  1.isEmpty函数及size函数：因为N记录当前堆的元素数量,所以isEmpty函数返回N==0，<br>  size函数返回N即可。</p></blockquote><blockquote><p>  2.push函数：令N+1,并且在N处添加元素，然后将这个元素swim，使得还是一个堆。</p></blockquote><blockquote><p>  3.delMin函数：最小元素在堆顶，先用一个变量存储堆顶的值，将堆顶与堆中最后一个元素交换，令N-1，此时不是一个堆，需要将堆顶sink到合适的位置，最后返回之前存的堆顶元素的值。</p></blockquote><p>私有函数：</p><blockquote><p>  1.sink函数：sink的思路是将这个元素与他的子节点做对比，并且将较小的放上面，一直对比到这个元素小于他的两个子节点为止。具体实现是，假如要下沉k，则先找它的子节点2*k与2*k+1中最小的一个（当然得判断是否存在），如果小于他的子节点的值，那么就交换他们的值，并且让k=2*k或2*k+1（＝最小的那个），这是为了继续追踪原本的k，继续和他此时的两个子节点做对比。不断的循环，直到他没有子节点或者他小于了子节点。</p></blockquote><p>2.swim函数：直观看就是一个元素比较轻，然后它要不断上浮，直到它重与他的父节点。而代码的实现就是，查看他的父节点k/2的值是否小于它，如果不小于它，则交换它和它父节点的值，并且让k=k/2，即继续追踪这个元素，让它继续与它当前的父节点做对比。直到它本身为数组的第一个元素或者它不小于它的父节点。</p><p>template &lt;class T&gt; class MinPQ<br>{<br>public:<br>MinPQ(int N):pq(N+1)<br>{  </p><p>}  </p><p>bool isEmpty()<br>{<br>return size()==0;<br>}  </p><p>int size()<br>{<br>return N;<br>}  </p><p>T delMin()<br>{<br>T min = pq[1];<br>exch(1, N–);<br>sink(1);<br>return min;<br>}  </p><p>void push(T t)<br>{<br>pq[++N] = t;<br>swim(N);<br>}  </p><p>private:<br>vector&lt;T&gt; pq;<br>int N=0;//元素个数,从1开始  </p><p>void swim(int k)<br>{<br>while(k&gt;1 &amp;&amp; pq[k] &lt; pq[k/2])<br>{<br>exch(k, k / 2);<br>k /= 2;<br>}<br>}  </p><p>void sink(int k)<br>{<br>while(2 * k &lt;=N)<br>{<br>int j = 2 * k;<br>if(j+1&lt;=N &amp;&amp; pq[j+1]&lt;pq[j])<br>{<br>++j;<br>}<br>if(pq[k]&lt;pq[j])<br>{<br>break;<br>}<br>exch(k, j);<br>k = j;<br>}<br>}  </p><p>void exch(int i,int j)<br>{<br>T temp = pq[i];<br>pq[i] = pq[j];<br>pq[j] = temp;<br>}<br>};</p><h2 id="2-5-UF-h设计与实现"><a href="#2-5-UF-h设计与实现" class="headerlink" title="2.5 UF.h设计与实现"></a>2.5 UF.h设计与实现</h2><p>该类负责构造连通分量。他有三个成员变量，id存储每个顶点的父节点，sz存储每个顶点所属于的那个连通分量的规模（想象如果将规模大的根节点链接到规模小的,那么就会使得节点平均访问到根节点的时间增加,所以需要将规模大的作为根节点），以及当前连通分量数量count。</p><p>构造函数将当前所以节点的父节点赋值为他们本身并且每个节点的size都是1，并且让当前连通分量数量count等于顶点总数N。这代表了当前有N个连通分量，每两个顶点之间都互不连通。</p><p>主要有这几个函数：getCount()返回当前连通分量数量count；connected(int p, int<br>q)检测两个顶点是否是连通的，这通过调用find(int<br>p)来判断，如果find（p）==find(q),他们就是同一个连通分量；find(int<br>p)则找到p的根节点，即顶点p所属于的连通分量。unionPQ(int p, int<br>q)则将两个不连通的节点连通。</p><p>详细说明find（int<br>p）：因为每次查找id[p],如果id[p]=p，代表p是p的根节点，代表这就是一个连通分量。而如果id[p]不等于p，则代表p是某个连通分量的子节点，而id[p]就是它的父节点，所以让p=<br>id[p]使得p到了他的父节点，继续查找，直到找到这个连通分量的根节点，对应的就是最终的p=<br>id[p]。</p><p>unionPQ(int p, int<br>q)：先找到传入的p，q的根节点i，j，如果根节点相同，那么他们是同一个连通分量直接返回。接着，判断这两个根节点的规模sz[i],sz[j]。然后将规模小的链接到规模大的上面(也就是以规模大的这个根节点作为这两棵树合起来的根节点)，这样找某个节点的根节点更快。然后将该根节点的规模再加上规模小的那个节点的规模,这样才使得规模有意义。</p><p>class UF<br>{<br>public:<br>UF(int N)<br>{<br>for (int i = 0; i &lt; N; ++i)<br>{<br>id.push_back(i);<br>sz.push_back(1);<br>}<br>count=N;<br>}  </p><p>int getCount()<br>{<br>return count;<br>}  </p><p>bool connected(int p,int q)<br>{<br>return find(p) == find(q);//检测是不是在同一颗树上<br>}  </p><p>int find(int p)<br>{<br>while(p!=id[p])<br>{<br>p = id[p];<br>}<br>return p;<br>}  </p><p>void unionPQ(int p,int q)<br>{<br>int i = find(p);<br>int j = find(q);<br>if(i==j)<br>{<br>return;<br>}<br>if(sz[i]&lt;sz[j])<br>{<br>id[i] = j;<br>sz[j] += sz[i];<br>}<br>else<br>{<br>id[j] = i;<br>sz[i] += sz[j];<br>}<br>count–;<br>}  </p><p>private:<br>vector&lt;int&gt; id;//父链接数组<br>vector&lt;int&gt; sz;//没颗树高度<br>int count;//连通分量数量<br>};</p><h2 id="2-6-KruskalMST-h设计与实现"><a href="#2-6-KruskalMST-h设计与实现" class="headerlink" title="2.6 KruskalMST.h设计与实现"></a>2.6 KruskalMST.h设计与实现</h2><p>该类就负责计算最小生成树。需要传入构造好的加权无向图，它有个成员变量mst将负责返回存有最小生成树的所有边的队列。</p><p>主要就两个函数，getMST返回mst，即返回存有最小生成树的所有边的队列；构造函数传入加权无向图，调用MinPQ类，并且把树中所有的边都放入最小堆中。还调用了UF类，传入了图中的顶点数，代表了初试有V个连通分量。紧接着，当最小生成树中边的数量小于V-1并且最小堆中还有边的时候，就一直循环。在循环之中，不断的弹出最小堆中最小的边，而如果这条边的两个顶点是两个不同的连通分量，说明这条边是最小生成树中的边，于是将之加入到存有最小生成树的所有边的队列mst中，并且将这两个顶点连接起来，成为同一个连通分量。而如果弹出最小堆中最小的边的两个顶点是同一个连通分量，则这条边不是最小生成树中的边，则忽略它，继续循环。</p><p>class KruskalMST<br>{<br>public:<br>KruskalMST(EdgeWeightedGraph G)<br>{<br>MinPQ&lt;Edge&gt; pq(G.getE());<br>Queue&lt;Edge&gt; edges = G.edges();<br>while(!edges.empty())<br>{<br>pq.push(edges.dequeue());<br>}<br>UF uf(G.getV());  </p><p>while(!pq.isEmpty() &amp;&amp; mst.size()&lt;G.getV()-1)<br>{<br>Edge e = pq.delMin();<br>int v = e.either();<br>int w = e.other(v);<br>if(uf.connected(v,w))<br>continue;<br>uf.unionPQ(v,w);<br>mst.enqueue(e);<br>}<br>}  </p><p>Queue&lt;Edge&gt; getMST()<br>{<br>return mst;<br>}  </p><p>private:<br>Queue&lt;Edge&gt; mst;<br>};</p><h2 id="2-7-MainTest-cpp设计与实现"><a href="#2-7-MainTest-cpp设计与实现" class="headerlink" title="2.7 MainTest.cpp设计与实现"></a>2.7 MainTest.cpp设计与实现</h2><p>先给出相应的提示，之后创建一个map以将之后用户输入的节点代号和节点数字相互对应。然后进入循环等待用户进行操作。</p><p>如果用户选择操作A，就让用户输入N个顶点和他们的代号，然后程序会生成一个含有N个顶点的不含有边的图（这里图中存的只是顶点数字，而顶点代号与顶点数字的对应关系存在map中）。</p><p>如果选择B操作，将不断循环，将用户输入的正确的两个顶点与边的权值加入到加权无向图中（当然首先得把用户输入的顶点代号通过map转换为对应的顶点数字）。当用户输入0<br>0 0时，退出当前输入边的循环。</p><p>如果选择C操作，则将加权无向图传入上述所实现的KruskalMST.h类的构造函数中，其实此时已经生成了最小生成树，就存在指向KruskalMST.h类的指针kruskal中。</p><p>如果选择D操作，将显示最小生成树，具体是，通过kruskal-&gt;getMST()得到存储有所有最小生成树边的队列。然后从队列中取出所有的边，并且将边的两个顶点数字通过map转换为顶点代号，并且打印出来。</p><p>int main()<br>{  </p><p>cout &lt;&lt; “** 电网建设造价模拟系统 **“ &lt;&lt; endl;<br>cout &lt;&lt; “================================================” &lt;&lt; endl;<br>cout &lt;&lt; “** A—创建电网顶点 **“ &lt;&lt; endl;<br>cout &lt;&lt; “** B—添加电网的边 **“ &lt;&lt; endl;<br>cout &lt;&lt; “** C—构造最小生成树 **“ &lt;&lt; endl;<br>cout &lt;&lt; “** D—显示最小生成树 **“ &lt;&lt; endl;<br>cout &lt;&lt; “** E—退出程序 **“ &lt;&lt; endl;<br>cout &lt;&lt; “================================================” &lt;&lt; endl;  </p><p>unordered_map&lt;string, int&gt; names;//节点名字与节点数字相互对应<br>EdgeWeightedGraph * G = nullptr;<br>KruskalMST * kruskal = nullptr;  </p><p>while (true)<br>{<br>cout &lt;&lt; “请选择操作:”;<br>char operation;<br>cin &gt;&gt; operation;<br>if (operation == ‘A’)<br>{<br>cout &lt;&lt; “请输入节点数量:”;<br>int N;//节点数量<br>cin &gt;&gt; N;<br>cout &lt;&lt; “请依次输入节点名称:”;<br>for (int i = 0; i &lt; N; ++i)<br>{<br>string node;<br>cin &gt;&gt; node;<br>names[node] = i;<br>}<br>G = new EdgeWeightedGraph(N);//生成一个没有边的图<br>}<br>else if (operation == ‘B’)<br>{<br>while (true)<br>{<br>cout &lt;&lt; “请输入两个顶点及边：(输入0 0 0 结束)”;<br>string node1, node2;<br>double nodeValue;<br>cin &gt;&gt; node1 &gt;&gt; node2 &gt;&gt; nodeValue;<br>if (node1 == “0” &amp;&amp; node2 == “0” &amp;&amp; nodeValue == 0)<br>{<br>break;<br>}<br>if (nodeValue &lt;= 0)<br>{<br>cout &lt;&lt; “输入错误,两个城市线路的花费不能小于等于0”;<br>}<br>int v = 0, w = 0;<br>auto iter = names.find(node1);<br>if (iter != names.end())<br>{<br>v = iter-&gt;second;<br>}<br>auto iter2 = names.find(node2);<br>if (iter2 != names.end())<br>{<br>w = iter2-&gt;second;<br>}<br>if (v == -1 || w == -1)<br>{<br>cout &lt;&lt; “输入错误,输入的顶点不在图中!”;<br>}<br>else<br>{<br>Edge edge(v, w, nodeValue);<br>G-&gt;addEdge(edge);<br>}<br>}<br>}<br>else if (operation == ‘C’)<br>{<br>cout &lt;&lt; “最小生成树构建成功!”;<br>kruskal = new KruskalMST(*G);<br>}<br>else if (operation == ‘D’)<br>{<br>cout &lt;&lt; “最小生成树的顶点和边为:” &lt;&lt; endl;<br>Queue&lt;Edge&gt; queue = kruskal-&gt;getMST();<br>while (!queue.empty())<br>{<br>Edge e = queue.dequeue();<br>int v = e.either();<br>int w = e.other(v);<br>string name1, name2;  </p><p>int count = 0;<br>for (auto iter = names.begin(); iter != names.end(); ++iter)<br>{<br>if (iter-&gt;second == v)<br>{<br>name1 = iter-&gt;first;<br>++count;<br>}<br>if (iter-&gt;second == w)<br>{<br>name2 = iter-&gt;first;<br>++count;<br>}<br>if (count == 2)<br>{<br>break;<br>}//找到这两就退出<br>}<br>cout &lt;&lt; “[“ &lt;&lt; name1 &lt;&lt; “—“ &lt;&lt; name2 &lt;&lt; “ cost: “ &lt;&lt; e.getWeight()<br>&lt;&lt; “]” &lt;&lt; endl;<br>}<br>// kruskal-&gt;printAll(); 需要字符显示<br>}<br>else if (operation == ‘E’)<br>{<br>cout &lt;&lt; “期待您的下次使用!”;<br>return 0;<br>}<br>}<br>}</p><h1 id="3-测试"><a href="#3-测试" class="headerlink" title="3 测试"></a>3 测试</h1><h2 id="3-1-功能测试"><a href="#3-1-功能测试" class="headerlink" title="3.1 功能测试"></a>3.1 功能测试</h2><h3 id="3-1-1-测试1"><a href="#3-1-1-测试1" class="headerlink" title="3.1.1 测试1"></a>3.1.1 测试1</h3><p>测试数据：</p><blockquote><p>  A</p></blockquote><blockquote><p>  4</p></blockquote><blockquote><p>  a b c d</p></blockquote><blockquote><p>  B</p></blockquote><blockquote><p>  a b 8</p></blockquote><blockquote><p>  b c 7</p></blockquote><blockquote><p>  c d 5</p></blockquote><blockquote><p>  d a 11</p></blockquote><blockquote><p>  a c 18</p></blockquote><blockquote><p>  b d 12</p></blockquote><blockquote><p>  0 0 0</p></blockquote><blockquote><p>  C</p></blockquote><blockquote><p>  D</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/95b5a5199946769ae1d9457ebb9843d4.jpg"></p><blockquote><p>  最小生成树如下图（打勾位置为最小生成树的边）：</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/164782c09a1b8b0035e283513e84c6a1.png"></p><h3 id="3-1-2-测试2"><a href="#3-1-2-测试2" class="headerlink" title="3.1.2 测试2"></a>3.1.2 测试2</h3><p>测试数据：</p><blockquote><p>  A</p></blockquote><blockquote><p>  8</p></blockquote><blockquote><p>  0 1 2 3 4 5 6 7</p></blockquote><blockquote><p>  B</p></blockquote><blockquote><p>  4 5 0.35</p></blockquote><blockquote><p>  4 7 0.37</p></blockquote><blockquote><p>  5 7 0.28</p></blockquote><blockquote><p>  0 7 0.16</p></blockquote><blockquote><p>  1 5 0.32</p></blockquote><blockquote><p>  0 4 0.38</p></blockquote><blockquote><p>  2 3 0.17</p></blockquote><blockquote><p>  1 7 0.19</p></blockquote><blockquote><p>  0 2 0.26</p></blockquote><blockquote><p>  1 2 0.36</p></blockquote><blockquote><p>  1 3 0.29</p></blockquote><blockquote><p>  2 7 0.34</p></blockquote><blockquote><p>  6 2 0.40</p></blockquote><blockquote><p>  3 6 0.52</p></blockquote><blockquote><p>  6 0 0.58</p></blockquote><blockquote><p>  6 4 0.93</p></blockquote><blockquote><p>  0 0 0</p></blockquote><blockquote><p>  C</p></blockquote><blockquote><p>  D</p></blockquote><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/e3674c9e620a0fc449001bca649d983a.png"></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/1402164181b81b090104671eb480894b.png"></p><p>相应的最小生成树如下图：</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/a2ba172c465dbdd9736e7d5c059b1f05.png" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 项目文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
            <tag> 最小生成树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构项目-------模拟银行业务</title>
      <link href="posts/649c347b.html"/>
      <url>posts/649c347b.html</url>
      
        <content type="html"><![CDATA[<h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a><a href="https://github.com/tongji4m3/DataStructureDesign" target="_blank" rel="noopener">源码地址</a></h1><blockquote><p>  银行业务</p><p>  数据结构作业 C++语言实现</p><p>  直接从word文档转的,代码格式有些问题,建议在源码地址查看word版</p></blockquote><h1 id="1-分析"><a href="#1-分析" class="headerlink" title="1 分析"></a>1 分析</h1><h2 id="1-1-项目内容"><a href="#1-1-项目内容" class="headerlink" title="1.1 项目内容"></a>1.1 项目内容</h2><p>设某银行有A，B两个业务窗口，且处理业务的速度不一样，其中A窗口处理速度是B窗口的2倍—-即当A窗口每处理完2个顾客是，B窗口处理完1个顾客。给定到达银行的顾客序列，请按照业务完成的顺序输出顾客序列。假定不考虑顾客信后到达的时间间隔，并且当不同窗口同时处理完2个顾客时，A窗口的顾客优先输出。</p><h2 id="1-2-功能要求"><a href="#1-2-功能要求" class="headerlink" title="1.2 功能要求"></a>1.2 功能要求</h2><ol><li><p>输入说明：输入为一行正整数，其中第一数字N（N&lt;=1000）为顾客总数，后面跟着N位顾客的编号。编号为奇数的顾客需要到A窗口办理业务，为偶数的顾客则去B窗口。数字间以空格分隔。</p></li><li><p>输出说明：按照业务处理完成的顺序输出顾客的编号。数字键以空格分隔，但是最后一个编号不能有多余的空格。</p></li><li><p>测试用例：</p></li></ol><table><thead><tr><th>序号</th><th>输入</th><th>输出</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>8 2 1 3 9 4 11 13 15</td><td>1 3 2 9 11 4 13 15</td><td>正常测试，A窗口人多</td></tr><tr><td>2</td><td>8 2 1 3 9 4 11 12 16</td><td>1 3 2 9 11 4 12 16</td><td>正常测试，B窗口人多</td></tr><tr><td>3</td><td>1 6</td><td>6</td><td>最小N</td></tr></tbody></table><h1 id="2-设计与实现"><a href="#2-设计与实现" class="headerlink" title="2 设计与实现"></a>2 设计与实现</h1><h2 id="2-1-Node类设计与实现"><a href="#2-1-Node类设计与实现" class="headerlink" title="2.1 Node类设计与实现"></a>2.1 Node类设计与实现</h2><p>Node类为LinkedList的基础节点，是一个模板类。它能够存储一个T类型的值以及一个指向下一Node节点的next成员变量。</p><p>template &lt;class T&gt; class Node<br>{<br>public:  </p><p>Node(const T &amp; value, Node&lt;T&gt; *next= nullptr) : value(value), next(next) {}<br>Node(Node&lt;T&gt; *next= nullptr) : next(next) {}  </p><p>T value;<br>Node&lt;T&gt; *next;<br>};</p><h2 id="2-2-LinkedList类设计与实现"><a href="#2-2-LinkedList类设计与实现" class="headerlink" title="2.2 LinkedList类设计与实现"></a>2.2 LinkedList类设计与实现</h2><p>模板类，有两个Node类型的成员变量first以及last，分别指向链表头和末尾。这个类当作一个队列,其中有enqueue(),dequeue(),empty()函数。</p><p>empty()：只要简单的判断first是否为空即可简单的判断队列是否为空。</p><p>enqueue()：因为是队列，所以这个函数负责将数据加入链表的末尾。添加的过程是：如果头尾指针都为空的话，就让头尾指针指向这个元素，否则就在尾指针之后添加这个元素，并且让尾指针指向它。（而且如果first-&gt;next为空，得让它指向last，不这样的话first只是一个单独的节点，和后续节点没有产生联系）。</p><p>dequeue()：如果队列为空，返回。否则返回队列头元素（first的元素），并且让first指向它的下一个元素，如果first为空则也让last为空。</p><p>template&lt;class T&gt;class LinkedList<br>{<br>public:<br>LinkedList():first(nullptr),last(nullptr)<br>{  </p><p>}<br>bool empty()<br>{<br>return first == nullptr;<br>}<br>void enqueue(T t)<br>{<br>if(first== nullptr &amp;&amp; last== nullptr)<br>{<br>first = new Node&lt;T&gt;(t, nullptr);<br>last = new Node&lt;T&gt;(t, nullptr);<br>}<br>else<br>{<br>Node&lt;T&gt; *temp = new Node&lt;T&gt;(t, nullptr);<br>last-&gt;next = temp;<br>last=last-&gt;next;<br>if(first-&gt;next== nullptr)<br>{<br>first-&gt;next = last;<br>}<br>}<br>}  </p><p>T dequeue()<br>{<br>if (first == nullptr)<br>{<br>return nullptr;<br>}<br>T t = first-&gt;value;<br>first = first-&gt;next;  </p><p>if(first== nullptr)<br>{<br>last = nullptr;<br>}<br>return t;<br>}  </p><p>Node&lt;T&gt; * first;<br>Node&lt;T&gt; * last;<br>};</p><h2 id="2-3-主函数设计与实现"><a href="#2-3-主函数设计与实现" class="headerlink" title="2.3 主函数设计与实现"></a>2.3 主函数设计与实现</h2><p>首先，先用一个数组存储用户输入的N个正整数，并且创建两个LinkedList链表队列，代表了A，B两个柜台。然后，根据编号为奇数还是偶数让他们分别进入两个队列（即代表了他们在A，B两个柜台上排队）。</p><p>然后进入循环，循环中，如果队列A不为空，则打印此队列的头节点，并且让头节点指向下一个节点，重复一次，判断A队列是否为空，不为空则打印当前的子节点。接着判断B队列是否为空，不为空打印它的头节点，并且让他指向他的下一个节点。（其实这就是在模拟题目中的情形：当A窗口每处理完2个顾客是，B窗口处理完1个顾客。并且当不同窗口同时处理完2个顾客时，A窗口的顾客优先输出。）然后继续进入循环判断条件，如果两个队列都为空则退出循环，否则继续循环。值得注意的是,如果其中一个队列为空的话,那么就会把另一个队列的所有元素都输出了。</p><p>int main()<br>{<br>cout &lt;&lt; “Please Enter the total number of customers N, and the number of N<br>customers:”;<br>int N;<br>cin &gt;&gt; N;<br>vector&lt;int&gt; customers;  </p><p>LinkedList&lt;int&gt; listA, listB;  </p><p>for (int i = 0; i &lt; N; ++i)<br>{<br>int customer;<br>cin &gt;&gt; customer;<br>customers.push_back(customer);<br>}<br>for (int i = 0; i &lt;N ; ++i)<br>{<br>if(customers[i]%2==1)//去1<br>{<br>listA.enqueue(customers[i]);<br>}<br>else<br>{<br>listB.enqueue(customers[i]);<br>}<br>}  </p><p>while(!listA.empty() || !listB.empty())<br>{<br>if(!listA.empty())<br>{<br>cout &lt;&lt; listA.first-&gt;value&lt;&lt;“ “;<br>listA.first = listA.first-&gt;next;<br>}<br>if(!listA.empty())<br>{<br>cout &lt;&lt; listA.first-&gt;value&lt;&lt;“ “;<br>listA.first = listA.first-&gt;next;<br>}<br>if(!listB.empty())<br>{<br>cout &lt;&lt; listB.first-&gt;value&lt;&lt;“ “;<br>listB.first = listB.first-&gt;next;<br>}<br>}<br>return 0;<br>}</p><h1 id="3-测试"><a href="#3-测试" class="headerlink" title="3 测试"></a>3 测试</h1><h2 id="3-1-功能测试"><a href="#3-1-功能测试" class="headerlink" title="3.1 功能测试"></a>3.1 功能测试</h2><h3 id="3-1-1-测试1"><a href="#3-1-1-测试1" class="headerlink" title="3.1.1 测试1"></a>3.1.1 测试1</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/f20d81a46ef0d048d25a26525b125288.png"></p><h3 id="3-1-2-测试2"><a href="#3-1-2-测试2" class="headerlink" title="3.1.2 测试2"></a>3.1.2 测试2</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/78264740c15987c4470b339dc7a1a479.png"></p><h3 id="3-1-3-测试3"><a href="#3-1-3-测试3" class="headerlink" title="3.1.3 测试3"></a>3.1.3 测试3</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/7d42d39b91663ddd95e4e139ee54371c.png"></p><h3 id="3-1-4-测试4"><a href="#3-1-4-测试4" class="headerlink" title="3.1.4 测试4"></a>3.1.4 测试4</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/ec975646393e3460582234b996105749.png"></p><h3 id="3-1-5-测试5"><a href="#3-1-5-测试5" class="headerlink" title="3.1.5 测试5"></a>3.1.5 测试5</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/1cf7a4eb9493bc429723d8689c38a485.png"></p><h3 id="3-1-6-测试6"><a href="#3-1-6-测试6" class="headerlink" title="3.1.6 测试6"></a>3.1.6 测试6</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/1af7481af6f7b5b8236c357602e5e2c2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 指针 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构项目-------勇闯迷宫游戏</title>
      <link href="posts/d9face0f.html"/>
      <url>posts/d9face0f.html</url>
      
        <content type="html"><![CDATA[<h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a><a href="https://github.com/tongji4m3/DataStructureDesign" target="_blank" rel="noopener">源码地址</a></h1><blockquote><p>  勇闯迷宫游戏</p><p>  数据结构作业 C++语言实现</p><p>  直接从word文档转的,代码格式有些问题,建议在源码地址查看word版</p></blockquote><h1 id="1-分析"><a href="#1-分析" class="headerlink" title="1 分析"></a>1 分析</h1><h2 id="1-1-项目简介"><a href="#1-1-项目简介" class="headerlink" title="1.1 项目简介"></a>1.1 项目简介</h2><p>迷宫只有两个门，一个门叫入口，另一个门叫出口。一个骑士骑马从入口进入迷宫，迷宫设置很多障碍，骑士需要在迷宫中寻找通路以到达出口。</p><h2 id="1-2-功能要求"><a href="#1-2-功能要求" class="headerlink" title="1.2 功能要求"></a>1.2 功能要求</h2><p>迷宫问题的求解过程可以采用回溯法即在一定的约束条件下试探地搜索前进，若前进中受阻，则及时回头纠正错误另择通路继续搜索的方法。从入口出发，按某一方向向前探索，若能走通，即某处可达，则到达新点，否则探索下一个方向；若所有的方向均没有通路，则沿原路返回前一点，换下一个方向再继续试探，直到所有可能的道路都探索到，或找到一条通路，或无路可走又返回入口点。在求解过程中，为了保证在达到某一个点后不能向前继续行走时，能正确返回前一个以便从下一个方向向前试探，则需要在试探过程中保存所能够达到的每个点的下标以及该点前进的方向，当找到出口时试探过程就结束了。</p><p>实际就是一个深度优先搜索,只不过不是在图中,而是在数组中,所有只要注意数组边界就好。同时，需要存储迷宫的路径，所以还需要一个栈。</p><h1 id="2-设计"><a href="#2-设计" class="headerlink" title="2 设计"></a>2 设计</h1><h2 id="2-1-Node设计"><a href="#2-1-Node设计" class="headerlink" title="2.1 Node设计"></a>2.1 Node设计</h2><p>Node节点和之前的类似,它保存一个模板类型的元素value,并且有一个指针next指向下一个元素,都是public的,以便于访问。</p><h2 id="2-2-Stack设计"><a href="#2-2-Stack设计" class="headerlink" title="2.2 Stack设计"></a>2.2 Stack设计</h2><p>底层存储Node类头节点以及栈的元素个数N。为外界提供公有函数push（），pop（），top（），empty（）。提供栈的基本功能。</p><h2 id="2-3-主程序设计"><a href="#2-3-主程序设计" class="headerlink" title="2.3 主程序设计"></a>2.3 主程序设计</h2><p>由用户输入迷宫的规模以及迷宫具体地形，再让用户输入起始位置及目标位置。并且程序判断位置是否合理。展示迷宫原来的样子，再通过dfs（）递归寻找出路，并且用一个栈存储路径，如果找到了从栈中取出路径（颠倒一次栈），如果没找到给出没有路径的提示。</p><h1 id="3-实现"><a href="#3-实现" class="headerlink" title="3 实现"></a>3 实现</h1><h2 id="3-1-Node类实现"><a href="#3-1-Node类实现" class="headerlink" title="3.1 Node类实现"></a>3.1 Node类实现</h2><p>template &lt;class T&gt; class Node<br>{<br>public:  </p><p>Node(const T &amp; value, Node&lt;T&gt; *next= nullptr) : value(value), next(next) {}<br>Node(Node&lt;T&gt; *next= nullptr) : next(next) {}  </p><p>T value;<br>Node&lt;T&gt; *next;<br>};</p><h2 id="3-2-Stack类实现"><a href="#3-2-Stack类实现" class="headerlink" title="3.2 Stack类实现"></a>3.2 Stack类实现</h2><h3 id="3-2-1-push功能实现"><a href="#3-2-1-push功能实现" class="headerlink" title="3.2.1 push功能实现"></a>3.2.1 push功能实现</h3><p>新加入一个Node元素，并且将之指向原来的头节点，原来的头节点指向现在的头节点，将存储的元素个数N+1。</p><p>void push(T t)<br>{<br>Node&lt;T&gt; *oldFirst = first;<br>first = new Node&lt;T&gt;(t, oldFirst);<br>++N;<br>}</p><h3 id="3-2-2-pop功能实现"><a href="#3-2-2-pop功能实现" class="headerlink" title="3.2.2 pop功能实现"></a>3.2.2 pop功能实现</h3><p>判断是否为空，不为空就让头节点指向下一个元素，然后delete之前的元素，释放内存，–N</p><p>void pop()<br>{<br>if(empty())<br>return;<br>Node&lt;T&gt; *temp = first;<br>first = first-&gt;next;<br>delete temp;<br>–N;<br>}</p><h3 id="3-2-3-empty，top功能实现"><a href="#3-2-3-empty，top功能实现" class="headerlink" title="3.2.3 empty，top功能实现"></a>3.2.3 empty，top功能实现</h3><p>bool empty()<br>{<br>return N==0;<br>}  </p><p>T top()<br>{<br>return first-&gt;value;<br>}</p><h2 id="3-3-主函数功能的实现"><a href="#3-3-主函数功能的实现" class="headerlink" title="3.3 主函数功能的实现"></a>3.3 主函数功能的实现</h2><h3 id="3-3-1-输入的处理"><a href="#3-3-1-输入的处理" class="headerlink" title="3.3.1 输入的处理"></a>3.3.1 输入的处理</h3><p>先根据输入,赋值给M,N,然后创建M*N大小的二维数组,再根据输入的内容创建迷宫地形。</p><p>int M,N;<br>cout &lt;&lt;<br>“先输入两个正整数,代表迷宫大小M*N;再输入M*N正整数(0,1代表迷宫的路和墙):”;<br>cin &gt;&gt; M &gt;&gt; N;<br>vector&lt;vector&lt;int&gt;&gt; map(M,<br>vector&lt;int&gt;(N,1));//默认设置全为墙,当然没什么用,因为是用户进行输入<br>vector&lt;vector&lt;bool&gt;&gt; marked(M, vector&lt;bool&gt;(N, false));//默认为没访问过的</p><p>/*<br>* 0 0 路<br>* 1 # 墙<br>* 2 x 走的路径<br>*/<br>for (int i = 0; i &lt; M; i++)<br>{<br>for (int j = 0; j &lt; N; j++)<br>{<br>int mapType;<br>cin &gt;&gt; mapType;<br>map[i][j] = mapType;<br>}<br>}</p><p>然后输入起始，终止位置</p><p>cout &lt;&lt; “输入起始坐标和结束坐标(xlo, ylo), (xhi, yhi):”;<br>int xlo, ylo, xhi, yhi;<br>cin &gt;&gt; xlo &gt;&gt; ylo &gt;&gt; xhi &gt;&gt; yhi;</p><h3 id="3-3-2-isValid（）函数"><a href="#3-3-2-isValid（）函数" class="headerlink" title="3.3.2 isValid（）函数"></a>3.3.2 isValid（）函数</h3><p>用于检查起始，终止位置合理性，是否越界，是否为墙，并且给相应的提示，如果不合法，就直接结束程序。</p><p>bool isValid(vector&lt;vector&lt;int&gt;&gt; &amp; map,int M,int N,int xlo,int ylo,int<br>xhi,int yhi)<br>{<br>if (xlo &lt; 0 || xlo &gt;= M || ylo &lt; 0 || ylo &gt;= N)<br>{<br>cout &lt;&lt; “起始路径就不在迷宫里面啊,大哥”;<br>}<br>else if (map[xlo][ylo] == 1)//输入为墙,搞什么<br>{<br>cout &lt;&lt; “起始路径为墙,你让他怎么走?”;<br>}<br>else if (xhi &lt; 0 || xhi &gt;= M || yhi &lt; 0 || yhi &gt;= N)<br>{<br>cout &lt;&lt; “终点就不在迷宫里面啊,大哥”;<br>}<br>else if (map[xhi][yhi] == 1)//终点为墙,搞什么<br>{<br>cout &lt;&lt; “终点为墙,你让他怎么到?”;<br>}<br>else<br>{<br>return true;<br>}<br>return false;<br>}</p><h3 id="3-3-3-dfs-函数初步实现"><a href="#3-3-3-dfs-函数初步实现" class="headerlink" title="3.3.3 dfs()函数初步实现"></a>3.3.3 dfs()函数初步实现</h3><p>从xlo,ylo开始，在没有找到xhi,yhi之前，不懂调用递归往四个方向的，没有标记为访问过的，没有越界的，是路径的位置走，而且是深度优先搜索，即如果进入了一个方向，则直到找完这个方向的所有路径后，才走另一个方向。</p><p>初步实现的关键地方的代码（因为是直接截取完整程序，所以参数会带上了之后所用到的栈）：</p><p>marked[i][j] = true;</p><p>if(i-1&gt;=0 &amp;&amp; map[i-1][j]==0 &amp;&amp; !marked[i-1][j])<br>{<br>dfs(map, marked,path, i - 1, j, xhi, yhi, hasPath);<br>}<br>if(i+1&lt;M &amp;&amp; map[i+1][j]==0 &amp;&amp; !marked[i+1][j])<br>{<br>dfs(map, marked,path, i+1, j, xhi, yhi, hasPath);<br>}<br>if(j+1&lt;N &amp;&amp; map[i][j+1]==0 &amp;&amp; !marked[i][j+1])<br>{<br>dfs(map, marked,path, i, j+1, xhi, yhi, hasPath);<br>}<br>if(j-1&gt;=0 &amp;&amp; map[i][j-1]==0 &amp;&amp; !marked[i][j-1])<br>{<br>dfs(map, marked,path, i, j-1, xhi, yhi, hasPath);<br>}</p><h3 id="3-3-4-dfs完整实现"><a href="#3-3-4-dfs完整实现" class="headerlink" title="3.3.4 dfs完整实现"></a>3.3.4 dfs完整实现</h3><p>初步实现后，为了增加显示迷宫路径功能以及没有路径时给出提示的功能，还用到了一个自己实现的栈，以及bool类型的hasPath,用于当没有路径时才输出没有路径的提示信息。</p><p>每递归调用一次，就将这个坐标加入栈中（用pair存储了坐标）。而当四个if都没进入时，即无路可走时，就弹出栈顶元素，这意味着，这个栈总是存储着当前能走的路径。</p><p>path.push(make_pair(i, j));</p><p>//四个if，不写出来了</p><p>//无路可走时,弹栈<br>path.pop();</p><p>然后，如果递归到了终点位置，即有路可走，就将hasPath设为true，并且用一个栈存储当前栈的反转（这样才是从入口到出口）。并且还将map在这个路径上的元素设置为2，即为路径。</p><p>最后，输出迷宫，迷宫上的路径用（X）表示，并且在下方通过遍历那个反转栈，输出路径坐标，从入口到出口。结束dfs（）函数。</p><p>void dfs(vector&lt;vector&lt;int&gt;&gt; &amp; map, vector&lt;vector&lt;bool&gt;&gt;&amp;<br>marked,Stack&lt;pair&lt;int,int&gt;&gt;&amp; path, int i, int j, int xhi,int yhi,bool &amp;<br>hasPath)<br>{<br>int M = map.size(), N = map[0].size();<br>path.push(make_pair(i, j));<br>marked[i][j] = true;<br>if(i==xhi &amp;&amp; j==yhi)<br>{<br>hasPath = true;<br>Stack&lt;pair&lt;int, int&gt;&gt; reverse;<br>while(!path.empty())<br>{<br>pair&lt;int, int&gt; p = path.top();<br>path.pop();<br>reverse.push(p);//反转的stack,用于输出路径<br>map[p.first][p.second] = 2;<br>}  </p><p>cout&lt;&lt;endl;<br>cout &lt;&lt; “ “;<br>for (int i = 0; i &lt; N; ++i)<br>{<br>cout &lt;&lt; i &lt;&lt; “列 “;<br>}<br>cout&lt;&lt;endl;<br>for (int i = 0; i &lt; M; ++i)<br>{<br>cout &lt;&lt; i &lt;&lt; “行 “;<br>for (int j = 0; j &lt; N; ++j)<br>{<br>if(map[i][j]==0)<br>{<br>cout &lt;&lt; “0”;<br>}<br>else if(map[i][j]==2)<br>{<br>cout &lt;&lt; “X”;<br>}<br>else<br>{<br>cout &lt;&lt; “#“;<br>}<br>cout &lt;&lt; “ “;<br>}<br>cout&lt;&lt;endl;<br>}  </p><p>cout&lt;&lt;endl&lt;&lt;“迷宫路径为:”&lt;&lt;endl;<br>while(!reverse.empty())<br>{<br>pair&lt;int, int&gt; p = reverse.top();<br>reverse.pop();<br>if(p.first==xhi &amp;&amp; p.second==yhi)<br>cout&lt;&lt;“(“ &lt;&lt; p.first &lt;&lt; “,” &lt;&lt; p.second&lt;&lt;“)”&lt;&lt;endl;<br>else<br>cout &lt;&lt; “(“ &lt;&lt; p.first &lt;&lt; “,” &lt;&lt; p.second &lt;&lt; “)-&gt;“;<br>}<br>}<br>if(i-1&gt;=0 &amp;&amp; map[i-1][j]==0 &amp;&amp; !marked[i-1][j])<br>{<br>dfs(map, marked,path, i - 1, j, xhi, yhi, hasPath);<br>}<br>if(i+1&lt;M &amp;&amp; map[i+1][j]==0 &amp;&amp; !marked[i+1][j])<br>{<br>dfs(map, marked,path, i+1, j, xhi, yhi, hasPath);<br>}<br>if(j+1&lt;N &amp;&amp; map[i][j+1]==0 &amp;&amp; !marked[i][j+1])<br>{<br>dfs(map, marked,path, i, j+1, xhi, yhi, hasPath);<br>}<br>if(j-1&gt;=0 &amp;&amp; map[i][j-1]==0 &amp;&amp; !marked[i][j-1])<br>{<br>dfs(map, marked,path, i, j-1, xhi, yhi, hasPath);<br>}<br>//无路可走时,弹栈<br>path.pop();<br>}</p><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4 测试"></a>4 测试</h1><h2 id="4-1-功能测试"><a href="#4-1-功能测试" class="headerlink" title="4.1 功能测试"></a>4.1 功能测试</h2><h3 id="4-1-1测试1"><a href="#4-1-1测试1" class="headerlink" title="4.1.1测试1"></a>4.1.1测试1</h3><p><strong>测试用例</strong>：</p><p>7 7</p><blockquote><p>  0 0 1 1 1 1 1</p></blockquote><blockquote><p>  1 0 0 0 1 0 1</p></blockquote><blockquote><p>  0 0 1 0 1 1 1</p></blockquote><blockquote><p>  1 0 0 1 1 1 1</p></blockquote><blockquote><p>  0 0 1 1 0 0 0</p></blockquote><blockquote><p>  1 0 0 0 0 1 0</p></blockquote><blockquote><p>  1 1 0 1 0 1 0</p></blockquote><blockquote><p>  0 0 6 6</p></blockquote><p><strong>实验结果</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/7348e9a6be66cbb7fbb596e3ad243881.png"></p><h3 id="4-1-2-测试2"><a href="#4-1-2-测试2" class="headerlink" title="4.1.2 测试2"></a>4.1.2 测试2</h3><p><strong>测试用例：</strong></p><p>7 7</p><blockquote><p>  0 0 1 1 1 1 1</p></blockquote><blockquote><p>  1 0 0 0 1 0 1</p></blockquote><blockquote><p>  0 0 1 0 1 1 1</p></blockquote><blockquote><p>  1 0 0 1 1 1 1</p></blockquote><blockquote><p>  0 0 1 1 0 0 0</p></blockquote><blockquote><p>  1 0 0 0 0 1 0</p></blockquote><blockquote><p>  1 1 0 1 0 1 0</p></blockquote><blockquote><p>  1 2 6 2</p></blockquote><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/808db98d12e8b446fd6b095419ba6765.png"></p><h3 id="4-1-3-测试3"><a href="#4-1-3-测试3" class="headerlink" title="4.1.3 测试3"></a>4.1.3 测试3</h3><p><strong>测试用例：</strong></p><p>8 9</p><p>0 0 1 1 1 1 1 0 1</p><p>0 0 0 0 0 0 1 0 1</p><p>0 0 1 0 1 0 0 0 0</p><p>1 0 0 1 1 1 1 1 0</p><p>0 0 1 1 0 0 0 1 0</p><p>1 0 0 0 0 1 0 1 1</p><p>1 1 0 1 0 1 0 1 1</p><p>1 0 1 1 0 1 0 1 1</p><p>0 0 3 8</p><p><strong>实验结果：</strong></p><p><strong>(从测试用例可以看出来,虽然找到了路径,但是不是最短路径)</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/8e9fa6a0af7301967df044342347f881.png"></p><h2 id="4-2-边界测试"><a href="#4-2-边界测试" class="headerlink" title="4.2 边界测试"></a>4.2 边界测试</h2><h3 id="4-2-1-没有从入口到出口的路径"><a href="#4-2-1-没有从入口到出口的路径" class="headerlink" title="4.2.1 没有从入口到出口的路径"></a>4.2.1 没有从入口到出口的路径</h3><p><strong>测试用例：</strong></p><p>8 9</p><p>0 0 1 1 1 1 1 0 1</p><p>0 0 0 0 0 0 1 0 1</p><p>0 0 1 0 1 0 0 0 0</p><p>1 0 0 1 1 1 1 1 0</p><p>0 0 1 1 0 0 0 1 0</p><p>1 0 0 0 0 1 0 1 1</p><p>0 1 0 1 0 1 0 1 1</p><p>1 0 1 1 0 1 0 1 1</p><p>0 0 6 0</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/1d3baf4ae3fc3dae87b3bca15183b5cf.png"></p><h3 id="4-2-2-入口不在数组中或者为墙"><a href="#4-2-2-入口不在数组中或者为墙" class="headerlink" title="4.2.2 入口不在数组中或者为墙"></a>4.2.2 入口不在数组中或者为墙</h3><p><strong>测试用例：</strong></p><p>8 9</p><p>0 0 1 1 1 1 1 0 1</p><p>0 0 0 0 0 0 1 0 1</p><p>0 0 1 0 1 0 0 0 0</p><p>1 0 0 1 1 1 1 1 0</p><p>0 0 1 1 0 0 0 1 0</p><p>1 0 0 0 0 1 0 1 1</p><p>0 1 0 1 0 1 0 1 1</p><p>1 0 1 1 0 1 0 1 1</p><p>0 2 1 3</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/b217508045085f7f3ecf5d4c50c16dc7.png"></p><p><strong>测试用例：</strong></p><p>8 9</p><p>0 0 1 1 1 1 1 0 1</p><p>0 0 0 0 0 0 1 0 1</p><p>0 0 1 0 1 0 0 0 0</p><p>1 0 0 1 1 1 1 1 0</p><p>0 0 1 1 0 0 0 1 0</p><p>1 0 0 0 0 1 0 1 1</p><p>0 1 0 1 0 1 0 1 1</p><p>1 0 1 1 0 1 0 1 1</p><p>-1 -1 1 3</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/60fe345e77364143f9f493368d15f0b1.png"></p><h3 id="4-2-3-出口不在迷宫中或者出口为墙"><a href="#4-2-3-出口不在迷宫中或者出口为墙" class="headerlink" title="4.2.3 出口不在迷宫中或者出口为墙"></a>4.2.3 出口不在迷宫中或者出口为墙</h3><p><strong>测试用例：</strong></p><p>8 9</p><p>0 0 1 1 1 1 1 0 1</p><p>0 0 0 0 0 0 1 0 1</p><p>0 0 1 0 1 0 0 0 0</p><p>1 0 0 1 1 1 1 1 0</p><p>0 0 1 1 0 0 0 1 0</p><p>1 0 0 0 0 1 0 1 1</p><p>0 1 0 1 0 1 0 1 1</p><p>1 0 1 1 0 1 0 1 1</p><p>0 0 -1 -1</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/d10c0f20bb9d26b7761e786e3effd05f.png"></p><p><strong>测试用例：</strong></p><p>8 9</p><p>0 0 1 1 1 1 1 0 1</p><p>0 0 0 0 0 0 1 0 1</p><p>0 0 1 0 1 0 0 0 0</p><p>1 0 0 1 1 1 1 1 0</p><p>0 0 1 1 0 0 0 1 0</p><p>1 0 0 0 0 1 0 1 1</p><p>0 1 0 1 0 1 0 1 1</p><p>1 0 1 1 0 1 0 1 1</p><p>0 0 7 8</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/53b62b30d753de7a459fb3a75797283c.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二维数组 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构项目-------两个有序链表序列的交集</title>
      <link href="posts/26a57fef.html"/>
      <url>posts/26a57fef.html</url>
      
        <content type="html"><![CDATA[<h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a><a href="https://github.com/tongji4m3/DataStructureDesign" target="_blank" rel="noopener">源码地址</a></h1><blockquote><p>  两个有序链表序列的交集</p><p>  数据结构作业 C++语言实现</p><p>  直接从word文档转的,代码格式有些问题,建议在源码地址查看word版</p></blockquote><h1 id="1-分析"><a href="#1-分析" class="headerlink" title="1 分析"></a>1 分析</h1><h2 id="1-1功能要求"><a href="#1-1功能要求" class="headerlink" title="1.1功能要求"></a>1.1功能要求</h2><blockquote><p>  已知两个非降序链表序列S1和S2，设计函数构造出S1和S2的交集新链表S3。</p></blockquote><ol><li><p>输入说明：输入分2行，分别在每行给出由若干个正整数构成的非降序序列，用-1表示序列的结尾（-1不属于这个序列）。数字用空格间隔。</p></li><li><p>输出说明：在一行中输出两个输入序列的交集序列，数字间用空格分开，结尾不能有多余空格；若新链表为空，输出NULL。</p></li><li><p>测试用例：</p></li></ol><table><thead><tr><th>序号</th><th>输入</th><th>输出</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>1 2 5 -1 2 4 5 8 10 -1</td><td>2 5</td><td>一般情况</td></tr><tr><td>2</td><td>1 3 5 -1 2 4 6 8 10 -1</td><td>NULL</td><td>交集为空的情况</td></tr><tr><td>3</td><td>1 2 3 4 5 -1 1 2 3 4 5 -1</td><td>1 2 3 4 5</td><td>完全相交的情况</td></tr><tr><td>4</td><td>3 5 7 -1 2 3 4 5 6 7 8 -1</td><td>3 5 7</td><td>其中一个序列完全属于交集的情况</td></tr><tr><td>5</td><td>-1 10 100 1000 -1</td><td>NULL</td><td>其中一个序列为空的情况</td></tr></tbody></table><h2 id="1-2-功能分析"><a href="#1-2-功能分析" class="headerlink" title="1.2 功能分析"></a>1.2 功能分析</h2><p>首先需要构造两条链表分别存储所给的两列信息，然后从链表头开始逐渐对比，并且把相同的元素打印显示，直到走到其中一个链表的尽头。</p><h1 id="2-设计与实现"><a href="#2-设计与实现" class="headerlink" title="2 设计与实现"></a>2 设计与实现</h1><h2 id="2-1-Node类设计与实现"><a href="#2-1-Node类设计与实现" class="headerlink" title="2.1 Node类设计与实现"></a>2.1 Node类设计与实现</h2><p>Node类为LinkedList的基础节点，是一个模板类。它能够存储一个T类型的值以及一个指向下一Node节点的next成员变量。</p><p>template &lt;class T&gt; class Node<br>{<br>public:  </p><p>Node(const T &amp; value, Node&lt;T&gt; *next= nullptr) : value(value), next(next) {}<br>Node(Node&lt;T&gt; *next= nullptr) : next(next) {}  </p><p>T value;<br>Node&lt;T&gt; *next;<br>};</p><h2 id="2-2-LinkedList类设计与实现"><a href="#2-2-LinkedList类设计与实现" class="headerlink" title="2.2 LinkedList类设计与实现"></a>2.2 LinkedList类设计与实现</h2><p>模板类，有两个Node类型的成员变量first以及last，分别指向链表头和末尾。</p><p>只有一个add（）函数，负责将数据加入链表中。添加的过程是：如果头尾指针都为空的话，就让头尾指针指向这个元素，否则就在尾指针之后添加这个元素，并且让尾指针指向它。（而且如果first-&gt;next为空，得让它指向last，不这样的话first只是一个单独的节点，和后续节点没有产生联系）。</p><p>template&lt;class T&gt;class LinkedList<br>{<br>public:<br>LinkedList():first(nullptr),last(nullptr)<br>{  </p><p>}<br>void add(T t)<br>{<br>if(first== nullptr &amp;&amp; last== nullptr)<br>{<br>first = new Node&lt;T&gt;(t, nullptr);<br>last = new Node&lt;T&gt;(t, nullptr);<br>}<br>else<br>{<br>Node&lt;T&gt; *temp = new Node&lt;T&gt;(t, nullptr);<br>last-&gt;next = temp;<br>last=last-&gt;next;<br>if(first-&gt;next== nullptr)<br>{<br>first-&gt;next = last;<br>}<br>}<br>}  </p><p>Node&lt;T&gt; * first;<br>Node&lt;T&gt; * last;<br>};</p><h2 id="2-3-主函数设计与实现"><a href="#2-3-主函数设计与实现" class="headerlink" title="2.3 主函数设计与实现"></a>2.3 主函数设计与实现</h2><p>首先使用LinkedList类创建两个链表，然后让用户输入两行数字。一开始让用户输入的数字通过LinkedList的add函数加入到第一个链表里面，如果输入的数字中遇到了-1，那么通过一个bool类型的变量控制使得之后输入的数字放入第二个链表中，直到输入结束。（-1不管是哪个链表都不存）</p><p>之后用cur1，cur2分别指向两个链表的开头，并且通过一个bool类型的hasPrint控制如果他们没有相同的元素（即没有进入打印的那个if语句）就打印一个NULL。因为是两个非降序的链表，所以我们只需要不断的比较两个链表的头节点（这里即是cur1，cur2），如果他们值相等，就打印出来，并且让任意一个链表头节点指向他的下一个节点即可（这里是cur1）。如果他们不等，那么就让较小的那个节点指向他的下一个节点，然后通过循环判断他们两个是否为空，并且开始下一轮的比较。因为每一次比较之前都会判断他们是否为空，且每一次比较不管是相等还是不等，都会有且仅有一个链表的指针向下移动一位，且之后又会判断他们两个链表是否为空，所以这样比较是安全的且时间复杂度最低的。直到其中一条链表为空后，退出循环，并且由用户决定是否退出。</p><p>int main()<br>{<br>LinkedList&lt;int&gt; list1, list2;<br>cout&lt;&lt;“输入两行数字:”;<br>int index;<br>bool goFirst = true;<br>while(cin&gt;&gt;index)<br>{<br>if(index==-1)<br>{<br>goFirst=false;<br>}<br>else if(goFirst)//-1都不需要<br>{<br>list1.add(index);<br>}<br>else if(!goFirst)<br>{<br>list2.add(index);<br>}<br>}<br>Node&lt;int&gt; * cur1 = list1.first;<br>Node&lt;int&gt; * cur2 = list2.first;<br>bool hasPrint = false;<br>while(cur1 &amp;&amp; cur2)<br>{<br>if(cur1-&gt;value&lt;cur2-&gt;value)<br>{<br>cur1 = cur1-&gt;next;<br>}<br>else if(cur1-&gt;value&gt;cur2-&gt;value)<br>{<br>cur2 = cur2-&gt;next;<br>}<br>else<br>{<br>hasPrint=true;<br>cout &lt;&lt; cur1-&gt;value &lt;&lt; “ “;<br>cur1 = cur1-&gt;next;<br>}<br>}<br>if(!hasPrint)<br>{<br>cout &lt;&lt; “NULL”;<br>}<br>cout &lt;&lt;endl&lt;&lt; “退出请右上角关闭”;<br>while (true)<br>{<br>}<br>return 0;<br>}</p><h1 id="3-测试"><a href="#3-测试" class="headerlink" title="3 测试"></a>3 测试</h1><h2 id="3-1-功能测试"><a href="#3-1-功能测试" class="headerlink" title="3.1 功能测试"></a>3.1 功能测试</h2><h3 id="3-1-1-测试1"><a href="#3-1-1-测试1" class="headerlink" title="3.1.1 测试1"></a>3.1.1 测试1</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/df3992008c5716e731013e43a769fb81.png"></p><h3 id="3-1-2-测试2"><a href="#3-1-2-测试2" class="headerlink" title="3.1.2 测试2"></a>3.1.2 测试2</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/317c26eae9e859ef02ee442ccf8b2a71.png"></p><h3 id="3-1-3-测试3"><a href="#3-1-3-测试3" class="headerlink" title="3.1.3 测试3"></a>3.1.3 测试3</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/2c8202f66b12a866a87f652e3c7a4b4e.png"></p><h3 id="3-1-4-测试4"><a href="#3-1-4-测试4" class="headerlink" title="3.1.4 测试4"></a>3.1.4 测试4</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/ff9b9e261ef518b1227f0402db4f382f.png"></p><h2 id="3-2-边界测试"><a href="#3-2-边界测试" class="headerlink" title="3.2 边界测试"></a>3.2 边界测试</h2><h3 id="3-2-1-其中一个链表为空"><a href="#3-2-1-其中一个链表为空" class="headerlink" title="3.2.1 其中一个链表为空"></a>3.2.1 其中一个链表为空</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/c37fe287c385b262cf8f3a28cfcb2c5e.png"></p><h3 id="3-2-2-两个链表为空"><a href="#3-2-2-两个链表为空" class="headerlink" title="3.2.2 两个链表为空"></a>3.2.2 两个链表为空</h3><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/317c079ca88e74d0d4b5d8bace94889b.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构项目-------考试报名系统</title>
      <link href="posts/bee2295f.html"/>
      <url>posts/bee2295f.html</url>
      
        <content type="html"><![CDATA[<h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a><a href="https://github.com/tongji4m3/DataStructureDesign" target="_blank" rel="noopener">源码地址</a></h1><blockquote><p>  考试报名系统</p><p>  数据结构作业 C++语言实现</p><p>  直接从word文档转的,代码格式有些问题,建议在源码地址查看word版</p></blockquote><h1 id="1-分析"><a href="#1-分析" class="headerlink" title="1 分析"></a>1 分析</h1><h2 id="1-1-背景分析"><a href="#1-1-背景分析" class="headerlink" title="1.1 背景分析"></a>1.1 背景分析</h2><p>考试报名工作给各高校报名工作带来了新的挑战，给教务管理部门增加了很大的工作量。本项目是对考试报名管理的简单模拟，用控制台选项的选择方式完成下列功能：输入考生信息；输出考生信息；查询考生信息；添加考生信息；修改考生信息；删除考生信息。</p><h2 id="1-2-功能分析"><a href="#1-2-功能分析" class="headerlink" title="1.2 功能分析"></a>1.2 功能分析</h2><p>本项目的实质是完成对考生信息的建立，查找，插入，修改，删除等功能。其中考生信息包括准考证号，姓名，性别，年龄和报考类别等信息。项目在设计时应首先确定系统的数据结构，定义类的成员变量和成员函数；然后实现各成员函数以完成对数据操作的相应功能；最后完成主函数以验证各个成员函数的功能并得到运行结果。采用链表实现。</p><p>综上,至少有建立，查找，插入，修改，删除,退出功能。</p><h1 id="2-设计"><a href="#2-设计" class="headerlink" title="2 设计"></a>2 设计</h1><h2 id="2-1-存储结构设计"><a href="#2-1-存储结构设计" class="headerlink" title="2.1 存储结构设计"></a>2.1 存储结构设计</h2><p>因为在建立学生信息表之后还需要进行大量添加,删除操作,所以采用链表存储.用模板类Node存储学生信息,模板类LinkedList存储一条由Node构成的链表,即存储了所有学生信息,并且能进行相应的操作.因为无其他要求,所以采用单向链表,且有一个头指针first.</p><p>LinkedList中,通过add(),pop(),change(),show()等方法,来对链表进行对应的操作,即实现了对学生信息表的增删改查功能.</p><h2 id="2-2-Student类结构设计"><a href="#2-2-Student类结构设计" class="headerlink" title="2.2 Student类结构设计"></a>2.2 Student类结构设计</h2><p>Student类代表了一个学生的实体,含有该学生所需要的成员变量:准考证号，姓名，性别，年龄和报考类别.这些成员变量设为private以达到封装的效果,所以也提供了相应的get(),set()方法来对这些属性进行修改.并且有一个展示该学生信息的show()方法.</p><h2 id="2-3-主程序设计"><a href="#2-3-主程序设计" class="headerlink" title="2.3 主程序设计"></a>2.3 主程序设计</h2><p>开始时建立LinkedList的对象students,输出窗口将提示引导用户逐步建立学生信息表,然后展示所建立表.随后进入循环,直到用户按0退出程序.循环中,根据用户输入,调用students对象相应的函数,执行相应的操作,<br>完成插入删除，查找，修改，统计功能.</p><h1 id="3-实现"><a href="#3-实现" class="headerlink" title="3 实现"></a>3 实现</h1><h2 id="3-1-插入功能的实现"><a href="#3-1-插入功能的实现" class="headerlink" title="3.1 插入功能的实现"></a>3.1 插入功能的实现</h2><h3 id="3-1-1-表头插入"><a href="#3-1-1-表头插入" class="headerlink" title="3.1.1 表头插入"></a>3.1.1 表头插入</h3><p>在建立表时,就采用了简单的在表头插入,即每一个学生在插入时都处于first的位置,调用了Node的构造方法,所以很简洁</p><blockquote><p>  void add(T t)<br>  {<br>  Node&lt;T&gt; *oldFirst = first;<br>  first = new Node&lt;T&gt;(t,oldFirst);<br>  }</p></blockquote><h3 id="3-1-2-任意位置插入"><a href="#3-1-2-任意位置插入" class="headerlink" title="3.1.2 任意位置插入"></a>3.1.2 任意位置插入</h3><p>提供了在任意位置插入的功能,首先判断传入位置是否合理,然后移到要插入的位置的前面一个,进行插入,并且展示插入后的学生表.</p><blockquote><p>  void insert(int pos, T t)<br>  {<br>  if(pos&lt;=0) return;<br>  //相当于add<br>  if(pos==1)<br>  {<br>  add(t);<br>  }<br>  else<br>  {<br>  Node&lt;T&gt; *cur = first;<br>  for (int i = 0; i &lt; pos - 2; ++i)<br>  {<br>  if(cur== nullptr)<br>  return;<br>  cur = cur-&gt;next;<br>  }<br>  Node&lt;T&gt; *newNode = new Node&lt;T&gt;(t,cur-&gt;next);<br>  cur-&gt;next = newNode;<br>  }<br>  show();<br>  }</p></blockquote><h2 id="3-2-删除功能的实现"><a href="#3-2-删除功能的实现" class="headerlink" title="3.2 删除功能的实现"></a>3.2 删除功能的实现</h2><h3 id="3-2-1-删除功能描述"><a href="#3-2-1-删除功能描述" class="headerlink" title="3.2.1 删除功能描述"></a>3.2.1 删除功能描述</h3><p>首先先判断first不为nullptr,否则继续程序可能会报错,然后根据传入的id进行判断,如果是首元素,直接让first指向它的下一个元素,即使只有一个元素的情况下也是正确的.</p><p>如果不是首元素,同理,通过检测下一个元素是否为空小心的向后移动,找到下一个元素id为传入id的元素,删除之,展示删除之后的学生表.</p><h3 id="3-2-2-删除功能代码"><a href="#3-2-2-删除功能代码" class="headerlink" title="3.2.2 删除功能代码"></a>3.2.2 删除功能代码</h3><blockquote><p>  void pop(const string &amp; id)<br>  {<br>  if(first== nullptr)<br>  return;<br>  if(id==first-&gt;value.getId())//相当于add<br>  {<br>  first = first-&gt;next;<br>  }<br>  else<br>  {<br>  for (Node&lt;T&gt; * x=first; x!= nullptr ; x=x-&gt;next)<br>  {<br>  if(x-&gt;next &amp;&amp; x-&gt;next-&gt;value.getId()==id)<br>  {<br>  Node&lt;T&gt; * temp = x-&gt;next;<br>  x-&gt;next = x-&gt;next-&gt;next;<br>  delete temp;<br>  }<br>  }<br>  }<br>  show();<br>  }</p></blockquote><h2 id="3-3-查找功能的实现"><a href="#3-3-查找功能的实现" class="headerlink" title="3.3 查找功能的实现"></a>3.3 查找功能的实现</h2><h3 id="3-3-1-查找功能描述"><a href="#3-3-1-查找功能描述" class="headerlink" title="3.3.1 查找功能描述"></a>3.3.1 查找功能描述</h3><p>遍历链表,找到学生表中符合传入id的元素,通过重载了的&lt;&lt;把该学生信息打印出来.</p><h3 id="3-3-2-查找功能代码"><a href="#3-3-2-查找功能代码" class="headerlink" title="3.3.2 查找功能代码"></a>3.3.2 查找功能代码</h3><blockquote><p>  void show(const string &amp; id)<br>  {<br>  cout&lt;&lt;endl&lt;&lt;“学号 姓名 性别 年龄 报考类别”&lt;&lt;endl;//空四格<br>  for (Node&lt;T&gt; * x=first; x!= nullptr ; x=x-&gt;next)<br>  {<br>  if(id==x-&gt;value.getId())<br>  {<br>  cout&lt;&lt;x-&gt;value&lt;&lt;endl;<br>  return;<br>  }<br>  }<br>  cout &lt;&lt; “No such student”;<br>  }</p></blockquote><h2 id="3-4-修改功能的实现"><a href="#3-4-修改功能的实现" class="headerlink" title="3.4 修改功能的实现"></a>3.4 修改功能的实现</h2><h3 id="3-4-1-修改功能描述"><a href="#3-4-1-修改功能描述" class="headerlink" title="3.4.1 修改功能描述"></a>3.4.1 修改功能描述</h3><p>修改功能首先根据传入的id找到对应的学生,然后根据传入的pos,找到想要修改的属性,并且把该属性设置为传入的value值,需要注意的是,如果传入的是age的string,需要转换为int.重新展示学生信息表.</p><h3 id="3-4-2-修改功能代码"><a href="#3-4-2-修改功能代码" class="headerlink" title="3.4.2 修改功能代码"></a>3.4.2 修改功能代码</h3><blockquote><p>  void change(const string &amp; id,int pos,string value)<br>  {<br>  //pos 0,1,2,3,4 id,name,gender,age,examCategory<br>  for (Node&lt;T&gt; * x=first; x!= nullptr ; x=x-&gt;next)<br>  {<br>  if(id==x-&gt;value.getId())<br>  {<br>  switch (pos)<br>  {<br>  case 0:<br>  x-&gt;value.setId(value);<br>  break;<br>  case 1:<br>  x-&gt;value.setName(value);<br>  break;<br>  case 2:<br>  x-&gt;value.setGender(value);<br>  break;<br>  case 3:<br>  x-&gt;value.setAge(atoi(value.c_str()));<br>  break;<br>  case 4:<br>  x-&gt;value.setExamCategory(value);<br>  break;<br>  default:<br>  break;<br>  }<br>  }<br>  }<br>  show();<br>  }</p></blockquote><h2 id="3-5-统计功能的实现"><a href="#3-5-统计功能的实现" class="headerlink" title="3.5 统计功能的实现"></a>3.5 统计功能的实现</h2><blockquote><p>  void show()<br>  {<br>  cout&lt;&lt;endl&lt;&lt;“学号 姓名 性别 年龄 报考类别”&lt;&lt;endl;//空四格<br>  for (Node&lt;T&gt; * x=first; x!= nullptr ; x=x-&gt;next)<br>  {<br>  cout&lt;&lt;x-&gt;value&lt;&lt;endl;<br>  }<br>  }</p></blockquote><h2 id="3-6-总体系统的实现"><a href="#3-6-总体系统的实现" class="headerlink" title="3.6 总体系统的实现"></a>3.6 总体系统的实现</h2><h3 id="3-6-1-总体系统描述"><a href="#3-6-1-总体系统描述" class="headerlink" title="3.6.1 总体系统描述"></a>3.6.1 总体系统描述</h3><p>引导用户输入建立表的总人数N,创建表studentList,并引导用户逐个输入每个学生的每个属性.展示学生表.进入循环,根据用户输入的operate,switch之,并且根据不同的operate调用studentList里相应的函数.</p><h3 id="3-6-2-总体系统核心代码"><a href="#3-6-2-总体系统核心代码" class="headerlink" title="3.6.2 总体系统核心代码"></a>3.6.2 总体系统核心代码</h3><p>bool is_continue=true;<br>while(is_continue)<br>{<br>cout&lt;&lt;“请选择你要进行的操作：”;<br>int operate;//操作<br>int pos;//位置<br>string id,name,gender,exam_category;<br>int age;<br>string value;//修改时指定的属性<br>Student student;<br>cin&gt;&gt;operate;<br>//1为插入，2为删除，3为查找，4为修改，5为统计，0为取消操作<br>switch(operate)<br>{<br>case 1:<br>cout&lt;&lt;“请输入你要插入的考生的位置：”;<br>cin&gt;&gt;pos;<br>//插入一个考生信息<br>cout &lt;&lt; “请依次输入该考生的信息: “;<br>cin&gt;&gt;id&gt;&gt;name&gt;&gt;gender&gt;&gt;age&gt;&gt;exam_category;<br>student.setId(id);<br>student.setName(name);<br>student.setGender(gender);<br>student.setAge(age);<br>student.setExamCategory(exam_category);<br>studentList.insert(pos,student);<br>break;<br>case 2:<br>cout&lt;&lt;“请输入要删除的考生的考号：”;<br>//注意是操作考号，所有得是string<br>cin&gt;&gt;id;<br>studentList.pop(id);<br>break;<br>case 3:<br>cout &lt;&lt; “请输入要查找的考生的考号：”;<br>cin &gt;&gt; id;<br>studentList.show(id);<br>break;<br>case 4:<br>cout &lt;&lt; “请输入要修改的考生的考号：”;<br>cin &gt;&gt; id;<br>cout &lt;&lt; “请输入要修改的位置：”;<br>cin &gt;&gt; pos;<br>cout &lt;&lt; “请输入要修改的值：”;<br>cin &gt;&gt; value;<br>studentList.change(id,pos,value);<br>break;<br>case 5:<br>studentList.show();<br>break;<br>case 0:<br>is_continue=false;<br>break;<br>default:<br>break;<br>}<br>}</p><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4 测试"></a>4 测试</h1><h2 id="4-1-功能测试"><a href="#4-1-功能测试" class="headerlink" title="4.1 功能测试"></a>4.1 功能测试</h2><h3 id="4-1-1-建立功能测试"><a href="#4-1-1-建立功能测试" class="headerlink" title="4.1.1 建立功能测试"></a>4.1.1 建立功能测试</h3><p><strong>测试用例</strong>：</p><p>5<br>1 stu1 女 18 软件工程师<br>2 stu2 男 19 计算机科学<br>3 stu3 男 20 大数据分析<br>4 stu4 男 21 机器学习<br>5 stu5 女 22 数据挖掘</p><p><strong>实验结果</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/6e28543e0dcaa302d2bc3f16ab6f0df0.png"></p><h3 id="4-1-2-插入功能测试"><a href="#4-1-2-插入功能测试" class="headerlink" title="4.1.2 插入功能测试"></a>4.1.2 插入功能测试</h3><p><strong>测试用例：</strong></p><p>1<br>5<br>7 stu7 女 27 游戏开发</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/58a01c08b8cfeb5c32862265996c6065.png"></p><h3 id="4-1-3-删除功能测试"><a href="#4-1-3-删除功能测试" class="headerlink" title="4.1.3 删除功能测试"></a>4.1.3 删除功能测试</h3><p><strong>测试用例：</strong>删除考号为7的考生</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/4c9a14aee03df511773dba811ea94f16.png"></p><h3 id="4-1-4-查找功能测试"><a href="#4-1-4-查找功能测试" class="headerlink" title="4.1.4 查找功能测试"></a>4.1.4 查找功能测试</h3><p><strong>测试用例：</strong>查找考号为4的考生</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/454ee04d2df779557d016e4e945d8f6a.png"></p><h3 id="4-1-5-修改功能测试"><a href="#4-1-5-修改功能测试" class="headerlink" title="4.1.5 修改功能测试"></a>4.1.5 修改功能测试</h3><p><strong>测试用例：</strong>修改考号为1的学生的姓名为stu100</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/abc09b37d16301104d6e660fbde5dc38.png"></p><h3 id="4-1-6-统计功能测试"><a href="#4-1-6-统计功能测试" class="headerlink" title="4.1.6 统计功能测试"></a>4.1.6 统计功能测试</h3><p><strong>测试用例：</strong>统计所有学生信息</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/d4cb88b7f6e75deb38584098e6612d73.png"></p><h2 id="4-2-边界测试"><a href="#4-2-边界测试" class="headerlink" title="4.2 边界测试"></a>4.2 边界测试</h2><h3 id="4-2-1-初始化无输入数据"><a href="#4-2-1-初始化无输入数据" class="headerlink" title="4.2.1 初始化无输入数据"></a>4.2.1 初始化无输入数据</h3><p><strong>测试用例：</strong>初始无输入数据</p><p>预期结果:程序不报错,且进入循环中</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/a14ee996512875dbae403ae914f66822.png"></p><h3 id="4-2-2-删除头结点"><a href="#4-2-2-删除头结点" class="headerlink" title="4.2.2 删除头结点"></a>4.2.2 删除头结点</h3><p><strong>测试用例：</strong>删除头结点</p><p><strong>预期结果：</strong>程序正常运行，不崩溃。</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/00fba70a23a5ad7de4d31d6b6d3e27ef.png"></p><h3 id="4-2-3-删除后链表为空"><a href="#4-2-3-删除后链表为空" class="headerlink" title="4.2.3 删除后链表为空"></a>4.2.3 删除后链表为空</h3><p><strong>测试用例：</strong>删除前链表只有一个结点，删除后链表为空</p><p><strong>预期结果：</strong>程序正常运行，不崩溃。</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/5e11136a7a56560eb2f52355c8e33775.png"></p><h3 id="4-2-4-考生人数错误"><a href="#4-2-4-考生人数错误" class="headerlink" title="4.2.4 考生人数错误"></a>4.2.4 考生人数错误</h3><p><strong>测试用例：</strong>输入考生人数为负数</p><p><strong>预期结果：</strong>程序正常运行不崩溃。</p><p><strong>实验结果：</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/bd257e9238fcab35de511d506f2222d7.png"></p><h3 id="4-2-5-位置不正确"><a href="#4-2-5-位置不正确" class="headerlink" title="4.2.5 位置不正确"></a>4.2.5 位置不正确</h3><p><strong>测试用例：</strong>在不正确的位置进行插入</p><p><strong>预期结果：</strong>程序正常运行不崩溃。</p><p><strong>实验结果</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/59ed2b4346c5a1c09d535798a3450fa7.png"></p><h3 id="4-2-6-id不存在"><a href="#4-2-6-id不存在" class="headerlink" title="4.2.6 id不存在"></a>4.2.6 id不存在</h3><p><strong>测试用例：</strong>删除不存在的id</p><p><strong>预期结果：</strong>程序正常运行不崩溃。</p><p><strong>实验结果</strong></p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/f5309c8358bd23683dd30b76491bc03c.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows常用命令与使用</title>
      <link href="posts/cdafbbdb.html"/>
      <url>posts/cdafbbdb.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><p>1.window+空格，切换输入法<br>2.Win + R 打开运行对话框,cmd命令<br>3.Win + Q 快速打开搜索<br>4.Alt+F4 快速关闭当前页面的快捷键<br>5.window+E我的电脑<br>6.快速切换窗口alt+tab<br>7.Win+D：显示桌面，第二次键击恢复桌面<br>8.Win +上下左右箭头 控制窗口大小<br>9.Delete(或 Ctrl+D) 删除所选项目并将其移动到“回收站”<br>10.Shift+Del 不先将所选项目移动到“回收站”而直接将其删除(不是backspace)<br>11.F2 重命名选定项目<br>12.Ctrl+Shift 加某个箭头键 选择一块文本<br>13.F5(或 Ctrl+R) 刷新活动窗口<br>14.Alt+向上键 在 Win资源管理器中查看上一级文件夹<br>15.Ctrl+Shift+N 新建文件夹<br>16.Ctrl+N 打开当前的一个新窗口<br>17.Shift + F10 鼠标右键菜单<br>18.Ctrl+T 打开新标签页<br>19.Ctrl+Tab 或 Ctrl+数字 切换标签页<br>20.Ctrl+W关闭当前标签页<br>21.win+v，多条复制<br>22.ctrl+.切换输入法为一直输入英文标点符号(不是数字键盘的那个.)<br>23.按住“Shift”，右击。会比直接右击出的快捷菜单里多出个“复制为路径”(A)</p><p>24.win+shift+s快速截屏</p><p>25.ctrl+home,ctrl+end 到文章开头结尾</p><hr><h1 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h1><p>1.Win + I 快速打开Win10设置栏<br>2.Win + Tab(松开键盘界面不会消失)<br>3.Win+G游戏录制声音之类<br>4.Win+L：锁住电脑或切换用户<br>5.Ctrl+向右键 将光标移动到下一个字词的起始处<br>Ctrl+向左键 将光标移动到上一个字词的起始处<br>Ctrl+向下键 将光标移动到下一个段落的起始处<br>Ctrl+向上键 将光标移动到上一个段落的起始处<br>6.Ctrl+鼠标滚轮 更改桌面上的图标大小<br>7.Alt+加下划线的字母 显示相应的菜单<br>8.Alt+向左键 在 Win资源管理器中返回上次操作的文件夹<br>Ctrl+W 关闭当前窗口<br>9.End 显示活动窗口的底端，Home 显示活动窗口的顶端<br>10.F11 最大化或最小化活动窗口</p>]]></content>
      
      
      <categories>
          
          <category> 常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown的一些操作与图床</title>
      <link href="posts/96c9e0d0.html"/>
      <url>posts/96c9e0d0.html</url>
      
        <content type="html"><![CDATA[<h1 id="word文件快速转md文件并且上传至CSDN"><a href="#word文件快速转md文件并且上传至CSDN" class="headerlink" title="word文件快速转md文件并且上传至CSDN"></a>word文件快速转md文件并且上传至CSDN</h1><blockquote><p>学校的项目基本都要写项目说明文档,并且要求提交word版本的</p><p>写好后我想上传到CSDN上,但是又不想手动改为md文件</p></blockquote><blockquote><p>而且之前的图片内嵌在word里面,直接上传CSDN会有个防盗链,手动太麻烦</p><p>折腾了一上午,终于搜索到了解决办法,记录下来,之后不用再重新找资料</p><p>主要解决两个问题,一个是转为md文件,一个是图床相关问题</p></blockquote><h2 id="1-图床解决方案"><a href="#1-图床解决方案" class="headerlink" title="1.图床解决方案"></a>1.图床解决方案</h2><blockquote><p>阿里云+typora+picGo图床配置</p><p><a href="https://blog.csdn.net/qq_39132095/article/details/106317768" target="_blank" rel="noopener">参考博客</a></p><p>坑:</p><p>PicGo选择<code>仅为我安装</code>，否则在Typora<code>验证图片上传选项</code>时会出现错误</p><p>如果Typora<code>验证图片上传选项</code>出现Failed to fetch错误,则在<code>PicGo设置-&gt;设置Server</code>中端口改为36677并重新关开</p></blockquote><h2 id="2-word转md上传到CSDN-并且保存图片"><a href="#2-word转md上传到CSDN-并且保存图片" class="headerlink" title="2.word转md上传到CSDN,并且保存图片"></a>2.word转md上传到CSDN,并且保存图片</h2><blockquote><p>下载并安装<code>Writage</code>插件</p><p>另存为时保存为md文件</p><p>在<code>文件-偏好设置-图像</code>中,设置为这样:</p><p><img src="https://tongji4m3.oss-cn-beijing.aliyuncs.com/LE45L1$ZJ$EINKQAZK%7D58QN.png" alt="LE45L1$ZJ$EINKQAZK}58QN"></p><p>然后选择<code>格式-图像-上传所有本地图片</code></p><p>最后,在CSDN写博客页面中,导入该md文件即可!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> markdown </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重装系统与windows常用配置</title>
      <link href="posts/12863071.html"/>
      <url>posts/12863071.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>隔几个月就重装系统,记录下来之后好安装 </p></blockquote><ol><li>下载地址<a href="https://www.microsoft.com/zh-cn/software-download/windows10" target="_blank" rel="noopener">win10</a></li><li>运行下载的软件,下载进U盘.(会初始化U盘,并且挺久的)</li><li>进入BIOS,以U盘启动(神州是F2进入BIOS,选boot manager 直接点击U盘)</li><li>自定义安装，不要选升级</li><li>将固态硬盘所有分区删除，剩下一块未分配空间。选新建，应用。选主分区，下一步</li></ol><h3 id="一些设置"><a href="#一些设置" class="headerlink" title="一些设置"></a>一些设置</h3><ol><li>关闭触摸板:在设置里面关闭触摸板</li><li>设置IE下载路径，方便统一管理</li><li>下载软件注意自定义安装设置</li><li>删除桌面图标:右键单击桌面，“个性化”“主题”“桌面图标设置”</li><li>win+e显示C盘D盘等:window+e “查看”，点击右边“选项”，设置为此电脑</li><li>关闭windows安全中心,下载弹窗提醒的时候,选择关闭</li><li>驱动安装（安装04_NVIDIA下的） <a href="http://www.hasee.com/Chinese/download/computer.aspx?cid=105001003001001" target="_blank" rel="noopener">神州驱动官网下载</a></li><li>驱动设置(神州).（先在桌面空白处，点击鼠标右键——选择“NVIDIA”控制面板进入——选择“管理3D设置”——将显卡设置为全局“高性能NVIDIA显卡“运行，——点击应用）设置physx配置-勾选独显-点击应用             </li></ol><h3 id="安装完成了，进行软件安装"><a href="#安装完成了，进行软件安装" class="headerlink" title="安装完成了，进行软件安装"></a>安装完成了，进行软件安装</h3><ol start="6"><li>popPlayer,固定到开始屏幕</li><li><blockquote><p>Everything</p><p>工具,选项,自启动,快捷键,ctrl+q </p><p>设置排除扫描某些文件夹:</p><p>工具,选项,排除列表</p></blockquote></li><li>核心软件里面,安装Ghelper2.2.1.all,Chrome,添加扩展程序，然后登陆， <a href="https://blog.csdn.net/wancongconga/article/details/106665648" target="_blank" rel="noopener">无法添加扩展程序解决办法</a></li><li>Chrome设置默认下载位置，设置为默认浏览器</li><li>下火绒，启动项管理，弹窗拦截</li><li>安装欧陆词典 开机自启 快捷键 ctrl+L</li></ol>]]></content>
      
      
      <categories>
          
          <category> 常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
